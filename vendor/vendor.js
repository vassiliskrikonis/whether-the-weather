!function(e,t){"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){var n=[],r=e.document,i=n.slice,o=n.concat,s=n.push,a=n.indexOf,c={},l=c.toString,u=c.hasOwnProperty,h={},p=function(e,t){return new p.fn.init(e,t)},d=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,f=/^-ms-/,g=/-([\da-z])/gi,y=function(e,t){return t.toUpperCase()};function m(e){var t=!!e&&"length"in e&&e.length,n=p.type(e);return"function"!==n&&!p.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}p.fn=p.prototype={jquery:"1.12.4",constructor:p,selector:"",length:0,toArray:function(){return i.call(this)},get:function(e){return null!=e?e<0?this[e+this.length]:this[e]:i.call(this)},pushStack:function(e){var t=p.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e){return p.each(this,e)},map:function(e){return this.pushStack(p.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(i.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:s,sort:n.sort,splice:n.splice},p.extend=p.fn.extend=function(){var e,t,n,r,i,o,s=arguments[0]||{},a=1,c=arguments.length,l=!1;for("boolean"==typeof s&&(l=s,s=arguments[a]||{},a++),"object"==typeof s||p.isFunction(s)||(s={}),a===c&&(s=this,a--);a<c;a++)if(null!=(i=arguments[a]))for(r in i)e=s[r],s!==(n=i[r])&&(l&&n&&(p.isPlainObject(n)||(t=p.isArray(n)))?(t?(t=!1,o=e&&p.isArray(e)?e:[]):o=e&&p.isPlainObject(e)?e:{},s[r]=p.extend(l,o,n)):void 0!==n&&(s[r]=n));return s},p.extend({expando:"jQuery"+("1.12.4"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===p.type(e)},isArray:Array.isArray||function(e){return"array"===p.type(e)},isWindow:function(e){return null!=e&&e==e.window},isNumeric:function(e){var t=e&&e.toString();return!p.isArray(e)&&t-parseFloat(t)+1>=0},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},isPlainObject:function(e){var t;if(!e||"object"!==p.type(e)||e.nodeType||p.isWindow(e))return!1;try{if(e.constructor&&!u.call(e,"constructor")&&!u.call(e.constructor.prototype,"isPrototypeOf"))return!1}catch(e){return!1}if(!h.ownFirst)for(t in e)return u.call(e,t);for(t in e);return void 0===t||u.call(e,t)},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?c[l.call(e)]||"object":typeof e},globalEval:function(t){t&&p.trim(t)&&(e.execScript||function(t){e.eval.call(e,t)})(t)},camelCase:function(e){return e.replace(f,"ms-").replace(g,y)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t){var n,r=0;if(m(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(d,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(m(Object(e))?p.merge(n,"string"==typeof e?[e]:e):s.call(n,e)),n},inArray:function(e,t,n){var r;if(t){if(a)return a.call(t,e,n);for(r=t.length,n=n?n<0?Math.max(0,r+n):n:0;n<r;n++)if(n in t&&t[n]===e)return n}return-1},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;)e[i++]=t[r++];if(n!=n)for(;void 0!==t[r];)e[i++]=t[r++];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,s=!n;i<o;i++)!t(e[i],i)!==s&&r.push(e[i]);return r},map:function(e,t,n){var r,i,s=0,a=[];if(m(e))for(r=e.length;s<r;s++)null!=(i=t(e[s],s,n))&&a.push(i);else for(s in e)null!=(i=t(e[s],s,n))&&a.push(i);return o.apply([],a)},guid:1,proxy:function(e,t){var n,r,o;if("string"==typeof t&&(o=e[t],t=e,e=o),p.isFunction(e))return n=i.call(arguments,2),(r=function(){return e.apply(t||this,n.concat(i.call(arguments)))}).guid=e.guid=e.guid||p.guid++,r},now:function(){return+new Date},support:h}),"function"==typeof Symbol&&(p.fn[Symbol.iterator]=n[Symbol.iterator]),p.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){c["[object "+t+"]"]=t.toLowerCase()});var v=function(e){var t,n,r,i,o,s,a,c,l,u,h,p,d,f,g,y,m,v,S,x="sizzle"+1*new Date,b=e.document,_=0,P=0,C=oe(),w=oe(),A=oe(),T=function(e,t){return e===t&&(h=!0),0},V=1<<31,E={}.hasOwnProperty,G=[],L=G.pop,O=G.push,k=G.push,I=G.slice,R=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},N="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",B="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",H="\\["+M+"*("+B+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+B+"))|)"+M+"*\\]",j=":("+B+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+H+")*)|.*)\\)|)",D=new RegExp(M+"+","g"),F=new RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),q=new RegExp("^"+M+"*,"+M+"*"),W=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),U=new RegExp("="+M+"*([^\\]'\"]*?)"+M+"*\\]","g"),z=new RegExp(j),Q=new RegExp("^"+B+"$"),$={ID:new RegExp("^#("+B+")"),CLASS:new RegExp("^\\.("+B+")"),TAG:new RegExp("^("+B+"|[*])"),ATTR:new RegExp("^"+H),PSEUDO:new RegExp("^"+j),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:new RegExp("^(?:"+N+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},X=/^(?:input|select|textarea|button)$/i,Y=/^h\d$/i,Z=/^[^{]+\{\s*\[native \w/,K=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,J=/[+~]/,ee=/'|\\/g,te=new RegExp("\\\\([\\da-f]{1,6}"+M+"?|("+M+")|.)","ig"),ne=function(e,t,n){var r="0x"+t-65536;return r!=r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},re=function(){p()};try{k.apply(G=I.call(b.childNodes),b.childNodes),G[b.childNodes.length].nodeType}catch(e){k={apply:G.length?function(e,t){O.apply(e,I.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function ie(e,t,r,i){var o,a,l,u,h,f,m,v,_=t&&t.ownerDocument,P=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==P&&9!==P&&11!==P)return r;if(!i&&((t?t.ownerDocument||t:b)!==d&&p(t),t=t||d,g)){if(11!==P&&(f=K.exec(e)))if(o=f[1]){if(9===P){if(!(l=t.getElementById(o)))return r;if(l.id===o)return r.push(l),r}else if(_&&(l=_.getElementById(o))&&S(t,l)&&l.id===o)return r.push(l),r}else{if(f[2])return k.apply(r,t.getElementsByTagName(e)),r;if((o=f[3])&&n.getElementsByClassName&&t.getElementsByClassName)return k.apply(r,t.getElementsByClassName(o)),r}if(n.qsa&&!A[e+" "]&&(!y||!y.test(e))){if(1!==P)_=t,v=e;else if("object"!==t.nodeName.toLowerCase()){for((u=t.getAttribute("id"))?u=u.replace(ee,"\\$&"):t.setAttribute("id",u=x),a=(m=s(e)).length,h=Q.test(u)?"#"+u:"[id='"+u+"']";a--;)m[a]=h+" "+ge(m[a]);v=m.join(","),_=J.test(e)&&de(t.parentNode)||t}if(v)try{return k.apply(r,_.querySelectorAll(v)),r}catch(e){}finally{u===x&&t.removeAttribute("id")}}}return c(e.replace(F,"$1"),t,r,i)}function oe(){var e=[];return function t(n,i){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=i}}function se(e){return e[x]=!0,e}function ae(e){var t=d.createElement("div");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ce(e,t){for(var n=e.split("|"),i=n.length;i--;)r.attrHandle[n[i]]=t}function le(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||V)-(~e.sourceIndex||V);if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function ue(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function he(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function pe(e){return se(function(t){return t=+t,se(function(n,r){for(var i,o=e([],n.length,t),s=o.length;s--;)n[i=o[s]]&&(n[i]=!(r[i]=n[i]))})})}function de(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=ie.support={},o=ie.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},p=ie.setDocument=function(e){var t,i,s=e?e.ownerDocument||e:b;return s!==d&&9===s.nodeType&&s.documentElement?(f=(d=s).documentElement,g=!o(d),(i=d.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",re,!1):i.attachEvent&&i.attachEvent("onunload",re)),n.attributes=ae(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=ae(function(e){return e.appendChild(d.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=Z.test(d.getElementsByClassName),n.getById=ae(function(e){return f.appendChild(e).id=x,!d.getElementsByName||!d.getElementsByName(x).length}),n.getById?(r.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n=t.getElementById(e);return n?[n]:[]}},r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}}):(delete r.find.ID,r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&g)return t.getElementsByClassName(e)},m=[],y=[],(n.qsa=Z.test(d.querySelectorAll))&&(ae(function(e){f.appendChild(e).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&y.push("[*^$]="+M+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||y.push("\\["+M+"*(?:value|"+N+")"),e.querySelectorAll("[id~="+x+"-]").length||y.push("~="),e.querySelectorAll(":checked").length||y.push(":checked"),e.querySelectorAll("a#"+x+"+*").length||y.push(".#.+[+~]")}),ae(function(e){var t=d.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&y.push("name"+M+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||y.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),y.push(",.*:")})),(n.matchesSelector=Z.test(v=f.matches||f.webkitMatchesSelector||f.mozMatchesSelector||f.oMatchesSelector||f.msMatchesSelector))&&ae(function(e){n.disconnectedMatch=v.call(e,"div"),v.call(e,"[s!='']:x"),m.push("!=",j)}),y=y.length&&new RegExp(y.join("|")),m=m.length&&new RegExp(m.join("|")),t=Z.test(f.compareDocumentPosition),S=t||Z.test(f.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},T=t?function(e,t){if(e===t)return h=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e===d||e.ownerDocument===b&&S(b,e)?-1:t===d||t.ownerDocument===b&&S(b,t)?1:u?R(u,e)-R(u,t):0:4&r?-1:1)}:function(e,t){if(e===t)return h=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,s=[e],a=[t];if(!i||!o)return e===d?-1:t===d?1:i?-1:o?1:u?R(u,e)-R(u,t):0;if(i===o)return le(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;s[r]===a[r];)r++;return r?le(s[r],a[r]):s[r]===b?-1:a[r]===b?1:0},d):d},ie.matches=function(e,t){return ie(e,null,null,t)},ie.matchesSelector=function(e,t){if((e.ownerDocument||e)!==d&&p(e),t=t.replace(U,"='$1']"),n.matchesSelector&&g&&!A[t+" "]&&(!m||!m.test(t))&&(!y||!y.test(t)))try{var r=v.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){}return ie(t,d,null,[e]).length>0},ie.contains=function(e,t){return(e.ownerDocument||e)!==d&&p(e),S(e,t)},ie.attr=function(e,t){(e.ownerDocument||e)!==d&&p(e);var i=r.attrHandle[t.toLowerCase()],o=i&&E.call(r.attrHandle,t.toLowerCase())?i(e,t,!g):void 0;return void 0!==o?o:n.attributes||!g?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},ie.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ie.uniqueSort=function(e){var t,r=[],i=0,o=0;if(h=!n.detectDuplicates,u=!n.sortStable&&e.slice(0),e.sort(T),h){for(;t=e[o++];)t===e[o]&&(i=r.push(o));for(;i--;)e.splice(r[i],1)}return u=null,e},i=ie.getText=function(e){var t,n="",r=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=i(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[r++];)n+=i(t);return n},(r=ie.selectors={cacheLength:50,createPseudo:se,match:$,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ie.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ie.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return $.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&z.test(n)&&(t=s(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=C[e+" "];return t||(t=new RegExp("(^|"+M+")"+e+"("+M+"|$)"))&&C(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var i=ie.attr(r,e);return null==i?"!="===t:!t||(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i.replace(D," ")+" ").indexOf(n)>-1:"|="===t&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,c){var l,u,h,p,d,f,g=o!==s?"nextSibling":"previousSibling",y=t.parentNode,m=a&&t.nodeName.toLowerCase(),v=!c&&!a,S=!1;if(y){if(o){for(;g;){for(p=t;p=p[g];)if(a?p.nodeName.toLowerCase()===m:1===p.nodeType)return!1;f=g="only"===e&&!f&&"nextSibling"}return!0}if(f=[s?y.firstChild:y.lastChild],s&&v){for(S=(d=(l=(u=(h=(p=y)[x]||(p[x]={}))[p.uniqueID]||(h[p.uniqueID]={}))[e]||[])[0]===_&&l[1])&&l[2],p=d&&y.childNodes[d];p=++d&&p&&p[g]||(S=d=0)||f.pop();)if(1===p.nodeType&&++S&&p===t){u[e]=[_,d,S];break}}else if(v&&(S=d=(l=(u=(h=(p=t)[x]||(p[x]={}))[p.uniqueID]||(h[p.uniqueID]={}))[e]||[])[0]===_&&l[1]),!1===S)for(;(p=++d&&p&&p[g]||(S=d=0)||f.pop())&&((a?p.nodeName.toLowerCase()!==m:1!==p.nodeType)||!++S||(v&&((u=(h=p[x]||(p[x]={}))[p.uniqueID]||(h[p.uniqueID]={}))[e]=[_,S]),p!==t)););return(S-=i)===r||S%r==0&&S/r>=0}}},PSEUDO:function(e,t){var n,i=r.pseudos[e]||r.setFilters[e.toLowerCase()]||ie.error("unsupported pseudo: "+e);return i[x]?i(t):i.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?se(function(e,n){for(var r,o=i(e,t),s=o.length;s--;)e[r=R(e,o[s])]=!(n[r]=o[s])}):function(e){return i(e,0,n)}):i}},pseudos:{not:se(function(e){var t=[],n=[],r=a(e.replace(F,"$1"));return r[x]?se(function(e,t,n,i){for(var o,s=r(e,null,i,[]),a=e.length;a--;)(o=s[a])&&(e[a]=!(t[a]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}}),has:se(function(e){return function(t){return ie(e,t).length>0}}),contains:se(function(e){return e=e.replace(te,ne),function(t){return(t.textContent||t.innerText||i(t)).indexOf(e)>-1}}),lang:se(function(e){return Q.test(e||"")||ie.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=g?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===f},focus:function(e){return e===d.activeElement&&(!d.hasFocus||d.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return!1===e.disabled},disabled:function(e){return!0===e.disabled},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return Y.test(e.nodeName)},input:function(e){return X.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:pe(function(){return[0]}),last:pe(function(e,t){return[t-1]}),eq:pe(function(e,t,n){return[n<0?n+t:n]}),even:pe(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:pe(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:pe(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:pe(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=ue(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=he(t);function fe(){}function ge(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function ye(e,t,n){var r=t.dir,i=n&&"parentNode"===r,o=P++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||i)return e(t,n,o)}:function(t,n,s){var a,c,l,u=[_,o];if(s){for(;t=t[r];)if((1===t.nodeType||i)&&e(t,n,s))return!0}else for(;t=t[r];)if(1===t.nodeType||i){if((a=(c=(l=t[x]||(t[x]={}))[t.uniqueID]||(l[t.uniqueID]={}))[r])&&a[0]===_&&a[1]===o)return u[2]=a[2];if(c[r]=u,u[2]=e(t,n,s))return!0}}}function me(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function ve(e,t,n,r,i){for(var o,s=[],a=0,c=e.length,l=null!=t;a<c;a++)(o=e[a])&&(n&&!n(o,r,i)||(s.push(o),l&&t.push(a)));return s}function Se(e,t,n,r,i,o){return r&&!r[x]&&(r=Se(r)),i&&!i[x]&&(i=Se(i,o)),se(function(o,s,a,c){var l,u,h,p=[],d=[],f=s.length,g=o||function(e,t,n){for(var r=0,i=t.length;r<i;r++)ie(e,t[r],n);return n}(t||"*",a.nodeType?[a]:a,[]),y=!e||!o&&t?g:ve(g,p,e,a,c),m=n?i||(o?e:f||r)?[]:s:y;if(n&&n(y,m,a,c),r)for(l=ve(m,d),r(l,[],a,c),u=l.length;u--;)(h=l[u])&&(m[d[u]]=!(y[d[u]]=h));if(o){if(i||e){if(i){for(l=[],u=m.length;u--;)(h=m[u])&&l.push(y[u]=h);i(null,m=[],l,c)}for(u=m.length;u--;)(h=m[u])&&(l=i?R(o,h):p[u])>-1&&(o[l]=!(s[l]=h))}}else m=ve(m===s?m.splice(f,m.length):m),i?i(null,s,m,c):k.apply(s,m)})}function xe(e){for(var t,n,i,o=e.length,s=r.relative[e[0].type],a=s||r.relative[" "],c=s?1:0,u=ye(function(e){return e===t},a,!0),h=ye(function(e){return R(t,e)>-1},a,!0),p=[function(e,n,r){var i=!s&&(r||n!==l)||((t=n).nodeType?u(e,n,r):h(e,n,r));return t=null,i}];c<o;c++)if(n=r.relative[e[c].type])p=[ye(me(p),n)];else{if((n=r.filter[e[c].type].apply(null,e[c].matches))[x]){for(i=++c;i<o&&!r.relative[e[i].type];i++);return Se(c>1&&me(p),c>1&&ge(e.slice(0,c-1).concat({value:" "===e[c-2].type?"*":""})).replace(F,"$1"),n,c<i&&xe(e.slice(c,i)),i<o&&xe(e=e.slice(i)),i<o&&ge(e))}p.push(n)}return me(p)}return fe.prototype=r.filters=r.pseudos,r.setFilters=new fe,s=ie.tokenize=function(e,t){var n,i,o,s,a,c,l,u=w[e+" "];if(u)return t?0:u.slice(0);for(a=e,c=[],l=r.preFilter;a;){for(s in n&&!(i=q.exec(a))||(i&&(a=a.slice(i[0].length)||a),c.push(o=[])),n=!1,(i=W.exec(a))&&(n=i.shift(),o.push({value:n,type:i[0].replace(F," ")}),a=a.slice(n.length)),r.filter)!(i=$[s].exec(a))||l[s]&&!(i=l[s](i))||(n=i.shift(),o.push({value:n,type:s,matches:i}),a=a.slice(n.length));if(!n)break}return t?a.length:a?ie.error(e):w(e,c).slice(0)},a=ie.compile=function(e,t){var n,i=[],o=[],a=A[e+" "];if(!a){for(t||(t=s(e)),n=t.length;n--;)(a=xe(t[n]))[x]?i.push(a):o.push(a);(a=A(e,function(e,t){var n=t.length>0,i=e.length>0,o=function(o,s,a,c,u){var h,f,y,m=0,v="0",S=o&&[],x=[],b=l,P=o||i&&r.find.TAG("*",u),C=_+=null==b?1:Math.random()||.1,w=P.length;for(u&&(l=s===d||s||u);v!==w&&null!=(h=P[v]);v++){if(i&&h){for(f=0,s||h.ownerDocument===d||(p(h),a=!g);y=e[f++];)if(y(h,s||d,a)){c.push(h);break}u&&(_=C)}n&&((h=!y&&h)&&m--,o&&S.push(h))}if(m+=v,n&&v!==m){for(f=0;y=t[f++];)y(S,x,s,a);if(o){if(m>0)for(;v--;)S[v]||x[v]||(x[v]=L.call(c));x=ve(x)}k.apply(c,x),u&&!o&&x.length>0&&m+t.length>1&&ie.uniqueSort(c)}return u&&(_=C,l=b),S};return n?se(o):o}(o,i))).selector=e}return a},c=ie.select=function(e,t,i,o){var c,l,u,h,p,d="function"==typeof e&&e,f=!o&&s(e=d.selector||e);if(i=i||[],1===f.length){if((l=f[0]=f[0].slice(0)).length>2&&"ID"===(u=l[0]).type&&n.getById&&9===t.nodeType&&g&&r.relative[l[1].type]){if(!(t=(r.find.ID(u.matches[0].replace(te,ne),t)||[])[0]))return i;d&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(c=$.needsContext.test(e)?0:l.length;c--&&(u=l[c],!r.relative[h=u.type]);)if((p=r.find[h])&&(o=p(u.matches[0].replace(te,ne),J.test(l[0].type)&&de(t.parentNode)||t))){if(l.splice(c,1),!(e=o.length&&ge(l)))return k.apply(i,o),i;break}}return(d||a(e,f))(o,t,!g,i,!t||J.test(e)&&de(t.parentNode)||t),i},n.sortStable=x.split("").sort(T).join("")===x,n.detectDuplicates=!!h,p(),n.sortDetached=ae(function(e){return 1&e.compareDocumentPosition(d.createElement("div"))}),ae(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||ce("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&ae(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||ce("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ae(function(e){return null==e.getAttribute("disabled")})||ce(N,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),ie}(e);p.find=v,p.expr=v.selectors,p.expr[":"]=p.expr.pseudos,p.uniqueSort=p.unique=v.uniqueSort,p.text=v.getText,p.isXMLDoc=v.isXML,p.contains=v.contains;var S=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&p(e).is(n))break;r.push(e)}return r},x=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},b=p.expr.match.needsContext,_=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,P=/^.[^:#\[\.,]*$/;function C(e,t,n){if(p.isFunction(t))return p.grep(e,function(e,r){return!!t.call(e,r,e)!==n});if(t.nodeType)return p.grep(e,function(e){return e===t!==n});if("string"==typeof t){if(P.test(t))return p.filter(t,e,n);t=p.filter(t,e)}return p.grep(e,function(e){return p.inArray(e,t)>-1!==n})}p.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?p.find.matchesSelector(r,e)?[r]:[]:p.find.matches(e,p.grep(t,function(e){return 1===e.nodeType}))},p.fn.extend({find:function(e){var t,n=[],r=this,i=r.length;if("string"!=typeof e)return this.pushStack(p(e).filter(function(){for(t=0;t<i;t++)if(p.contains(r[t],this))return!0}));for(t=0;t<i;t++)p.find(e,r[t],n);return(n=this.pushStack(i>1?p.unique(n):n)).selector=this.selector?this.selector+" "+e:e,n},filter:function(e){return this.pushStack(C(this,e||[],!1))},not:function(e){return this.pushStack(C(this,e||[],!0))},is:function(e){return!!C(this,"string"==typeof e&&b.test(e)?p(e):e||[],!1).length}});var w,A=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/;(p.fn.init=function(e,t,n){var i,o;if(!e)return this;if(n=n||w,"string"==typeof e){if(!(i="<"===e.charAt(0)&&">"===e.charAt(e.length-1)&&e.length>=3?[null,e,null]:A.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof p?t[0]:t,p.merge(this,p.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:r,!0)),_.test(i[1])&&p.isPlainObject(t))for(i in t)p.isFunction(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}if((o=r.getElementById(i[2]))&&o.parentNode){if(o.id!==i[2])return w.find(e);this.length=1,this[0]=o}return this.context=r,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):p.isFunction(e)?void 0!==n.ready?n.ready(e):e(p):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),p.makeArray(e,this))}).prototype=p.fn,w=p(r);var T=/^(?:parents|prev(?:Until|All))/,V={children:!0,contents:!0,next:!0,prev:!0};function E(e,t){do{e=e[t]}while(e&&1!==e.nodeType);return e}p.fn.extend({has:function(e){var t,n=p(e,this),r=n.length;return this.filter(function(){for(t=0;t<r;t++)if(p.contains(this,n[t]))return!0})},closest:function(e,t){for(var n,r=0,i=this.length,o=[],s=b.test(e)||"string"!=typeof e?p(e,t||this.context):0;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&p.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?p.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?p.inArray(this[0],p(e)):p.inArray(e.jquery?e[0]:e,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(p.uniqueSort(p.merge(this.get(),p(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),p.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return S(e,"parentNode")},parentsUntil:function(e,t,n){return S(e,"parentNode",n)},next:function(e){return E(e,"nextSibling")},prev:function(e){return E(e,"previousSibling")},nextAll:function(e){return S(e,"nextSibling")},prevAll:function(e){return S(e,"previousSibling")},nextUntil:function(e,t,n){return S(e,"nextSibling",n)},prevUntil:function(e,t,n){return S(e,"previousSibling",n)},siblings:function(e){return x((e.parentNode||{}).firstChild,e)},children:function(e){return x(e.firstChild)},contents:function(e){return p.nodeName(e,"iframe")?e.contentDocument||e.contentWindow.document:p.merge([],e.childNodes)}},function(e,t){p.fn[e]=function(n,r){var i=p.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=p.filter(r,i)),this.length>1&&(V[e]||(i=p.uniqueSort(i)),T.test(e)&&(i=i.reverse())),this.pushStack(i)}});var G,L,O=/\S+/g;function k(){r.addEventListener?(r.removeEventListener("DOMContentLoaded",I),e.removeEventListener("load",I)):(r.detachEvent("onreadystatechange",I),e.detachEvent("onload",I))}function I(){(r.addEventListener||"load"===e.event.type||"complete"===r.readyState)&&(k(),p.ready())}for(L in p.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return p.each(e.match(O)||[],function(e,n){t[n]=!0}),t}(e):p.extend({},e);var t,n,r,i,o=[],s=[],a=-1,c=function(){for(i=e.once,r=t=!0;s.length;a=-1)for(n=s.shift();++a<o.length;)!1===o[a].apply(n[0],n[1])&&e.stopOnFalse&&(a=o.length,n=!1);e.memory||(n=!1),t=!1,i&&(o=n?[]:"")},l={add:function(){return o&&(n&&!t&&(a=o.length-1,s.push(n)),function t(n){p.each(n,function(n,r){p.isFunction(r)?e.unique&&l.has(r)||o.push(r):r&&r.length&&"string"!==p.type(r)&&t(r)})}(arguments),n&&!t&&c()),this},remove:function(){return p.each(arguments,function(e,t){for(var n;(n=p.inArray(t,o,n))>-1;)o.splice(n,1),n<=a&&a--}),this},has:function(e){return e?p.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=s=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=!0,n||l.disable(),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=[e,(n=n||[]).slice?n.slice():n],s.push(n),t||c()),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!r}};return l},p.extend({Deferred:function(e){var t=[["resolve","done",p.Callbacks("once memory"),"resolved"],["reject","fail",p.Callbacks("once memory"),"rejected"],["notify","progress",p.Callbacks("memory")]],n="pending",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return p.Deferred(function(n){p.each(t,function(t,o){var s=p.isFunction(e[t])&&e[t];i[o[1]](function(){var e=s&&s.apply(this,arguments);e&&p.isFunction(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[o[0]+"With"](this===r?n.promise():this,s?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?p.extend(e,r):r}},i={};return r.pipe=r.then,p.each(t,function(e,o){var s=o[2],a=o[3];r[o[1]]=s.add,a&&s.add(function(){n=a},t[1^e][2].disable,t[2][2].lock),i[o[0]]=function(){return i[o[0]+"With"](this===i?r:this,arguments),this},i[o[0]+"With"]=s.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t,n,r,o=0,s=i.call(arguments),a=s.length,c=1!==a||e&&p.isFunction(e.promise)?a:0,l=1===c?e:p.Deferred(),u=function(e,n,r){return function(o){n[e]=this,r[e]=arguments.length>1?i.call(arguments):o,r===t?l.notifyWith(n,r):--c||l.resolveWith(n,r)}};if(a>1)for(t=new Array(a),n=new Array(a),r=new Array(a);o<a;o++)s[o]&&p.isFunction(s[o].promise)?s[o].promise().progress(u(o,n,t)).done(u(o,r,s)).fail(l.reject):--c;return c||l.resolveWith(r,s),l.promise()}}),p.fn.ready=function(e){return p.ready.promise().done(e),this},p.extend({isReady:!1,readyWait:1,holdReady:function(e){e?p.readyWait++:p.ready(!0)},ready:function(e){(!0===e?--p.readyWait:p.isReady)||(p.isReady=!0,!0!==e&&--p.readyWait>0||(G.resolveWith(r,[p]),p.fn.triggerHandler&&(p(r).triggerHandler("ready"),p(r).off("ready"))))}}),p.ready.promise=function(t){if(!G)if(G=p.Deferred(),"complete"===r.readyState||"loading"!==r.readyState&&!r.documentElement.doScroll)e.setTimeout(p.ready);else if(r.addEventListener)r.addEventListener("DOMContentLoaded",I),e.addEventListener("load",I);else{r.attachEvent("onreadystatechange",I),e.attachEvent("onload",I);var n=!1;try{n=null==e.frameElement&&r.documentElement}catch(e){}n&&n.doScroll&&function t(){if(!p.isReady){try{n.doScroll("left")}catch(n){return e.setTimeout(t,50)}k(),p.ready()}}()}return G.promise(t)},p.ready.promise(),p(h))break;h.ownFirst="0"===L,h.inlineBlockNeedsLayout=!1,p(function(){var e,t,n,i;(n=r.getElementsByTagName("body")[0])&&n.style&&(t=r.createElement("div"),(i=r.createElement("div")).style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(i).appendChild(t),void 0!==t.style.zoom&&(t.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1",h.inlineBlockNeedsLayout=e=3===t.offsetWidth,e&&(n.style.zoom=1)),n.removeChild(i))}),function(){var e=r.createElement("div");h.deleteExpando=!0;try{delete e.test}catch(e){h.deleteExpando=!1}e=null}();var R,N=function(e){var t=p.noData[(e.nodeName+" ").toLowerCase()],n=+e.nodeType||1;return(1===n||9===n)&&(!t||!0!==t&&e.getAttribute("classid")===t)},M=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,B=/([A-Z])/g;function H(e,t,n){if(void 0===n&&1===e.nodeType){var r="data-"+t.replace(B,"-$1").toLowerCase();if("string"==typeof(n=e.getAttribute(r))){try{n="true"===n||"false"!==n&&("null"===n?null:+n+""===n?+n:M.test(n)?p.parseJSON(n):n)}catch(e){}p.data(e,t,n)}else n=void 0}return n}function j(e){var t;for(t in e)if(("data"!==t||!p.isEmptyObject(e[t]))&&"toJSON"!==t)return!1;return!0}function D(e,t,r,i){if(N(e)){var o,s,a=p.expando,c=e.nodeType,l=c?p.cache:e,u=c?e[a]:e[a]&&a;if(u&&l[u]&&(i||l[u].data)||void 0!==r||"string"!=typeof t)return u||(u=c?e[a]=n.pop()||p.guid++:a),l[u]||(l[u]=c?{}:{toJSON:p.noop}),"object"!=typeof t&&"function"!=typeof t||(i?l[u]=p.extend(l[u],t):l[u].data=p.extend(l[u].data,t)),s=l[u],i||(s.data||(s.data={}),s=s.data),void 0!==r&&(s[p.camelCase(t)]=r),"string"==typeof t?null==(o=s[t])&&(o=s[p.camelCase(t)]):o=s,o}}function F(e,t,n){if(N(e)){var r,i,o=e.nodeType,s=o?p.cache:e,a=o?e[p.expando]:p.expando;if(s[a]){if(t&&(r=n?s[a]:s[a].data)){i=(t=p.isArray(t)?t.concat(p.map(t,p.camelCase)):t in r?[t]:(t=p.camelCase(t))in r?[t]:t.split(" ")).length;for(;i--;)delete r[t[i]];if(n?!j(r):!p.isEmptyObject(r))return}(n||(delete s[a].data,j(s[a])))&&(o?p.cleanData([e],!0):h.deleteExpando||s!=s.window?delete s[a]:s[a]=void 0)}}}p.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(e){return!!(e=e.nodeType?p.cache[e[p.expando]]:e[p.expando])&&!j(e)},data:function(e,t,n){return D(e,t,n)},removeData:function(e,t){return F(e,t)},_data:function(e,t,n){return D(e,t,n,!0)},_removeData:function(e,t){return F(e,t,!0)}}),p.fn.extend({data:function(e,t){var n,r,i,o=this[0],s=o&&o.attributes;if(void 0===e){if(this.length&&(i=p.data(o),1===o.nodeType&&!p._data(o,"parsedAttrs"))){for(n=s.length;n--;)s[n]&&0===(r=s[n].name).indexOf("data-")&&H(o,r=p.camelCase(r.slice(5)),i[r]);p._data(o,"parsedAttrs",!0)}return i}return"object"==typeof e?this.each(function(){p.data(this,e)}):arguments.length>1?this.each(function(){p.data(this,e,t)}):o?H(o,e,p.data(o,e)):void 0},removeData:function(e){return this.each(function(){p.removeData(this,e)})}}),p.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=p._data(e,t),n&&(!r||p.isArray(n)?r=p._data(e,t,p.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=p.queue(e,t),r=n.length,i=n.shift(),o=p._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,function(){p.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return p._data(e,n)||p._data(e,n,{empty:p.Callbacks("once memory").add(function(){p._removeData(e,t+"queue"),p._removeData(e,n)})})}}),p.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?p.queue(this[0],e):void 0===t?this:this.each(function(){var n=p.queue(this,e,t);p._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&p.dequeue(this,e)})},dequeue:function(e){return this.each(function(){p.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=p.Deferred(),o=this,s=this.length,a=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=p._data(o[s],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(a));return a(),i.promise(t)}}),h.shrinkWrapBlocks=function(){return null!=R?R:(R=!1,(t=r.getElementsByTagName("body")[0])&&t.style?(e=r.createElement("div"),(n=r.createElement("div")).style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",t.appendChild(n).appendChild(e),void 0!==e.style.zoom&&(e.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1",e.appendChild(r.createElement("div")).style.width="5px",R=3!==e.offsetWidth),t.removeChild(n),R):void 0);var e,t,n};var q=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,W=new RegExp("^(?:([+-])=|)("+q+")([a-z%]*)$","i"),U=["Top","Right","Bottom","Left"],z=function(e,t){return e=t||e,"none"===p.css(e,"display")||!p.contains(e.ownerDocument,e)};function Q(e,t,n,r){var i,o=1,s=20,a=r?function(){return r.cur()}:function(){return p.css(e,t,"")},c=a(),l=n&&n[3]||(p.cssNumber[t]?"":"px"),u=(p.cssNumber[t]||"px"!==l&&+c)&&W.exec(p.css(e,t));if(u&&u[3]!==l){l=l||u[3],n=n||[],u=+c||1;do{u/=o=o||".5",p.style(e,t,u+l)}while(o!==(o=a()/c)&&1!==o&&--s)}return n&&(u=+u||+c||0,i=n[1]?u+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=u,r.end=i)),i}var $,X,Y,Z=function(e,t,n,r,i,o,s){var a=0,c=e.length,l=null==n;if("object"===p.type(n))for(a in i=!0,n)Z(e,t,a,n[a],!0,o,s);else if(void 0!==r&&(i=!0,p.isFunction(r)||(s=!0),l&&(s?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(p(e),n)})),t))for(;a<c;a++)t(e[a],n,s?r:r.call(e[a],a,t(e[a],n)));return i?e:l?t.call(e):c?t(e[0],n):o},K=/^(?:checkbox|radio)$/i,J=/<([\w:-]+)/,ee=/^$|\/(?:java|ecma)script/i,te=/^\s+/,ne="abbr|article|aside|audio|bdi|canvas|data|datalist|details|dialog|figcaption|figure|footer|header|hgroup|main|mark|meter|nav|output|picture|progress|section|summary|template|time|video";function re(e){var t=ne.split("|"),n=e.createDocumentFragment();if(n.createElement)for(;t.length;)n.createElement(t.pop());return n}$=r.createElement("div"),X=r.createDocumentFragment(),Y=r.createElement("input"),$.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",h.leadingWhitespace=3===$.firstChild.nodeType,h.tbody=!$.getElementsByTagName("tbody").length,h.htmlSerialize=!!$.getElementsByTagName("link").length,h.html5Clone="<:nav></:nav>"!==r.createElement("nav").cloneNode(!0).outerHTML,Y.type="checkbox",Y.checked=!0,X.appendChild(Y),h.appendChecked=Y.checked,$.innerHTML="<textarea>x</textarea>",h.noCloneChecked=!!$.cloneNode(!0).lastChild.defaultValue,X.appendChild($),(Y=r.createElement("input")).setAttribute("type","radio"),Y.setAttribute("checked","checked"),Y.setAttribute("name","t"),$.appendChild(Y),h.checkClone=$.cloneNode(!0).cloneNode(!0).lastChild.checked,h.noCloneEvent=!!$.addEventListener,$[p.expando]=1,h.attributes=!$.getAttribute(p.expando);var ie={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:h.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]};function oe(e,t){var n,r,i=0,o=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):void 0;if(!o)for(o=[],n=e.childNodes||e;null!=(r=n[i]);i++)!t||p.nodeName(r,t)?o.push(r):p.merge(o,oe(r,t));return void 0===t||t&&p.nodeName(e,t)?p.merge([e],o):o}function se(e,t){for(var n,r=0;null!=(n=e[r]);r++)p._data(n,"globalEval",!t||p._data(t[r],"globalEval"))}ie.optgroup=ie.option,ie.tbody=ie.tfoot=ie.colgroup=ie.caption=ie.thead,ie.th=ie.td;var ae=/<|&#?\w+;/,ce=/<tbody/i;function le(e){K.test(e.type)&&(e.defaultChecked=e.checked)}function ue(e,t,n,r,i){for(var o,s,a,c,l,u,d,f=e.length,g=re(t),y=[],m=0;m<f;m++)if((s=e[m])||0===s)if("object"===p.type(s))p.merge(y,s.nodeType?[s]:s);else if(ae.test(s)){for(c=c||g.appendChild(t.createElement("div")),l=(J.exec(s)||["",""])[1].toLowerCase(),d=ie[l]||ie._default,c.innerHTML=d[1]+p.htmlPrefilter(s)+d[2],o=d[0];o--;)c=c.lastChild;if(!h.leadingWhitespace&&te.test(s)&&y.push(t.createTextNode(te.exec(s)[0])),!h.tbody)for(o=(s="table"!==l||ce.test(s)?"<table>"!==d[1]||ce.test(s)?0:c:c.firstChild)&&s.childNodes.length;o--;)p.nodeName(u=s.childNodes[o],"tbody")&&!u.childNodes.length&&s.removeChild(u);for(p.merge(y,c.childNodes),c.textContent="";c.firstChild;)c.removeChild(c.firstChild);c=g.lastChild}else y.push(t.createTextNode(s));for(c&&g.removeChild(c),h.appendChecked||p.grep(oe(y,"input"),le),m=0;s=y[m++];)if(r&&p.inArray(s,r)>-1)i&&i.push(s);else if(a=p.contains(s.ownerDocument,s),c=oe(g.appendChild(s),"script"),a&&se(c),n)for(o=0;s=c[o++];)ee.test(s.type||"")&&n.push(s);return c=null,g}!function(){var t,n,i=r.createElement("div");for(t in{submit:!0,change:!0,focusin:!0})n="on"+t,(h[t]=n in e)||(i.setAttribute(n,"t"),h[t]=!1===i.attributes[n].expando);i=null}();var he=/^(?:input|select|textarea)$/i,pe=/^key/,de=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,fe=/^(?:focusinfocus|focusoutblur)$/,ge=/^([^.]*)(?:\.(.+)|)/;function ye(){return!0}function me(){return!1}function ve(){try{return r.activeElement}catch(e){}}function Se(e,t,n,r,i,o){var s,a;if("object"==typeof t){for(a in"string"!=typeof n&&(r=r||n,n=void 0),t)Se(e,a,n,r,t[a],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=me;else if(!i)return e;return 1===o&&(s=i,(i=function(e){return p().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=p.guid++)),e.each(function(){p.event.add(this,t,i,r,n)})}p.event={global:{},add:function(e,t,n,r,i){var o,s,a,c,l,u,h,d,f,g,y,m=p._data(e);if(m){for(n.handler&&(n=(c=n).handler,i=c.selector),n.guid||(n.guid=p.guid++),(s=m.events)||(s=m.events={}),(u=m.handle)||((u=m.handle=function(e){return void 0===p||e&&p.event.triggered===e.type?void 0:p.event.dispatch.apply(u.elem,arguments)}).elem=e),a=(t=(t||"").match(O)||[""]).length;a--;)f=y=(o=ge.exec(t[a])||[])[1],g=(o[2]||"").split(".").sort(),f&&(l=p.event.special[f]||{},f=(i?l.delegateType:l.bindType)||f,l=p.event.special[f]||{},h=p.extend({type:f,origType:y,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&p.expr.match.needsContext.test(i),namespace:g.join(".")},c),(d=s[f])||((d=s[f]=[]).delegateCount=0,l.setup&&!1!==l.setup.call(e,r,g,u)||(e.addEventListener?e.addEventListener(f,u,!1):e.attachEvent&&e.attachEvent("on"+f,u))),l.add&&(l.add.call(e,h),h.handler.guid||(h.handler.guid=n.guid)),i?d.splice(d.delegateCount++,0,h):d.push(h),p.event.global[f]=!0);e=null}},remove:function(e,t,n,r,i){var o,s,a,c,l,u,h,d,f,g,y,m=p.hasData(e)&&p._data(e);if(m&&(u=m.events)){for(l=(t=(t||"").match(O)||[""]).length;l--;)if(f=y=(a=ge.exec(t[l])||[])[1],g=(a[2]||"").split(".").sort(),f){for(h=p.event.special[f]||{},d=u[f=(r?h.delegateType:h.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"),c=o=d.length;o--;)s=d[o],!i&&y!==s.origType||n&&n.guid!==s.guid||a&&!a.test(s.namespace)||r&&r!==s.selector&&("**"!==r||!s.selector)||(d.splice(o,1),s.selector&&d.delegateCount--,h.remove&&h.remove.call(e,s));c&&!d.length&&(h.teardown&&!1!==h.teardown.call(e,g,m.handle)||p.removeEvent(e,f,m.handle),delete u[f])}else for(f in u)p.event.remove(e,f+t[l],n,r,!0);p.isEmptyObject(u)&&(delete m.handle,p._removeData(e,"events"))}},trigger:function(t,n,i,o){var s,a,c,l,h,d,f,g=[i||r],y=u.call(t,"type")?t.type:t,m=u.call(t,"namespace")?t.namespace.split("."):[];if(c=d=i=i||r,3!==i.nodeType&&8!==i.nodeType&&!fe.test(y+p.event.triggered)&&(y.indexOf(".")>-1&&(y=(m=y.split(".")).shift(),m.sort()),a=y.indexOf(":")<0&&"on"+y,(t=t[p.expando]?t:new p.Event(y,"object"==typeof t&&t)).isTrigger=o?2:3,t.namespace=m.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),n=null==n?[t]:p.makeArray(n,[t]),h=p.event.special[y]||{},o||!h.trigger||!1!==h.trigger.apply(i,n))){if(!o&&!h.noBubble&&!p.isWindow(i)){for(l=h.delegateType||y,fe.test(l+y)||(c=c.parentNode);c;c=c.parentNode)g.push(c),d=c;d===(i.ownerDocument||r)&&g.push(d.defaultView||d.parentWindow||e)}for(f=0;(c=g[f++])&&!t.isPropagationStopped();)t.type=f>1?l:h.bindType||y,(s=(p._data(c,"events")||{})[t.type]&&p._data(c,"handle"))&&s.apply(c,n),(s=a&&c[a])&&s.apply&&N(c)&&(t.result=s.apply(c,n),!1===t.result&&t.preventDefault());if(t.type=y,!o&&!t.isDefaultPrevented()&&(!h._default||!1===h._default.apply(g.pop(),n))&&N(i)&&a&&i[y]&&!p.isWindow(i)){(d=i[a])&&(i[a]=null),p.event.triggered=y;try{i[y]()}catch(e){}p.event.triggered=void 0,d&&(i[a]=d)}return t.result}},dispatch:function(e){e=p.event.fix(e);var t,n,r,o,s,a,c=i.call(arguments),l=(p._data(this,"events")||{})[e.type]||[],u=p.event.special[e.type]||{};if(c[0]=e,e.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,e)){for(a=p.event.handlers.call(this,e,l),t=0;(o=a[t++])&&!e.isPropagationStopped();)for(e.currentTarget=o.elem,n=0;(s=o.handlers[n++])&&!e.isImmediatePropagationStopped();)e.rnamespace&&!e.rnamespace.test(s.namespace)||(e.handleObj=s,e.data=s.data,void 0!==(r=((p.event.special[s.origType]||{}).handle||s.handler).apply(o.elem,c))&&!1===(e.result=r)&&(e.preventDefault(),e.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,r,i,o,s=[],a=t.delegateCount,c=e.target;if(a&&c.nodeType&&("click"!==e.type||isNaN(e.button)||e.button<1))for(;c!=this;c=c.parentNode||this)if(1===c.nodeType&&(!0!==c.disabled||"click"!==e.type)){for(r=[],n=0;n<a;n++)void 0===r[i=(o=t[n]).selector+" "]&&(r[i]=o.needsContext?p(i,this).index(c)>-1:p.find(i,this,null,[c]).length),r[i]&&r.push(o);r.length&&s.push({elem:c,handlers:r})}return a<t.length&&s.push({elem:this,handlers:t.slice(a)}),s},fix:function(e){if(e[p.expando])return e;var t,n,i,o=e.type,s=e,a=this.fixHooks[o];for(a||(this.fixHooks[o]=a=de.test(o)?this.mouseHooks:pe.test(o)?this.keyHooks:{}),i=a.props?this.props.concat(a.props):this.props,e=new p.Event(s),t=i.length;t--;)e[n=i[t]]=s[n];return e.target||(e.target=s.srcElement||r),3===e.target.nodeType&&(e.target=e.target.parentNode),e.metaKey=!!e.metaKey,a.filter?a.filter(e,s):e},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,i,o,s=t.button,a=t.fromElement;return null==e.pageX&&null!=t.clientX&&(o=(i=e.target.ownerDocument||r).documentElement,n=i.body,e.pageX=t.clientX+(o&&o.scrollLeft||n&&n.scrollLeft||0)-(o&&o.clientLeft||n&&n.clientLeft||0),e.pageY=t.clientY+(o&&o.scrollTop||n&&n.scrollTop||0)-(o&&o.clientTop||n&&n.clientTop||0)),!e.relatedTarget&&a&&(e.relatedTarget=a===e.target?t.toElement:a),e.which||void 0===s||(e.which=1&s?1:2&s?3:4&s?2:0),e}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==ve()&&this.focus)try{return this.focus(),!1}catch(e){}},delegateType:"focusin"},blur:{trigger:function(){if(this===ve()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if(p.nodeName(this,"input")&&"checkbox"===this.type&&this.click)return this.click(),!1},_default:function(e){return p.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n){var r=p.extend(new p.Event,n,{type:e,isSimulated:!0});p.event.trigger(r,null,t),r.isDefaultPrevented()&&n.preventDefault()}},p.removeEvent=r.removeEventListener?function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)}:function(e,t,n){var r="on"+t;e.detachEvent&&(void 0===e[r]&&(e[r]=null),e.detachEvent(r,n))},p.Event=function(e,t){if(!(this instanceof p.Event))return new p.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?ye:me):this.type=e,t&&p.extend(this,t),this.timeStamp=e&&e.timeStamp||p.now(),this[p.expando]=!0},p.Event.prototype={constructor:p.Event,isDefaultPrevented:me,isPropagationStopped:me,isImmediatePropagationStopped:me,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=ye,e&&(e.preventDefault?e.preventDefault():e.returnValue=!1)},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=ye,e&&!this.isSimulated&&(e.stopPropagation&&e.stopPropagation(),e.cancelBubble=!0)},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=ye,e&&e.stopImmediatePropagation&&e.stopImmediatePropagation(),this.stopPropagation()}},p.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){p.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=e.relatedTarget,i=e.handleObj;return r&&(r===this||p.contains(this,r))||(e.type=i.origType,n=i.handler.apply(this,arguments),e.type=t),n}}}),h.submit||(p.event.special.submit={setup:function(){if(p.nodeName(this,"form"))return!1;p.event.add(this,"click._submit keypress._submit",function(e){var t=e.target,n=p.nodeName(t,"input")||p.nodeName(t,"button")?p.prop(t,"form"):void 0;n&&!p._data(n,"submit")&&(p.event.add(n,"submit._submit",function(e){e._submitBubble=!0}),p._data(n,"submit",!0))})},postDispatch:function(e){e._submitBubble&&(delete e._submitBubble,this.parentNode&&!e.isTrigger&&p.event.simulate("submit",this.parentNode,e))},teardown:function(){if(p.nodeName(this,"form"))return!1;p.event.remove(this,"._submit")}}),h.change||(p.event.special.change={setup:function(){if(he.test(this.nodeName))return"checkbox"!==this.type&&"radio"!==this.type||(p.event.add(this,"propertychange._change",function(e){"checked"===e.originalEvent.propertyName&&(this._justChanged=!0)}),p.event.add(this,"click._change",function(e){this._justChanged&&!e.isTrigger&&(this._justChanged=!1),p.event.simulate("change",this,e)})),!1;p.event.add(this,"beforeactivate._change",function(e){var t=e.target;he.test(t.nodeName)&&!p._data(t,"change")&&(p.event.add(t,"change._change",function(e){!this.parentNode||e.isSimulated||e.isTrigger||p.event.simulate("change",this.parentNode,e)}),p._data(t,"change",!0))})},handle:function(e){var t=e.target;if(this!==t||e.isSimulated||e.isTrigger||"radio"!==t.type&&"checkbox"!==t.type)return e.handleObj.handler.apply(this,arguments)},teardown:function(){return p.event.remove(this,"._change"),!he.test(this.nodeName)}}),h.focusin||p.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){p.event.simulate(t,e.target,p.event.fix(e))};p.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=p._data(r,t);i||r.addEventListener(e,n,!0),p._data(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=p._data(r,t)-1;i?p._data(r,t,i):(r.removeEventListener(e,n,!0),p._removeData(r,t))}}}),p.fn.extend({on:function(e,t,n,r){return Se(this,e,t,n,r)},one:function(e,t,n,r){return Se(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,p(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=me),this.each(function(){p.event.remove(this,e,n,t)})},trigger:function(e,t){return this.each(function(){p.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return p.event.trigger(e,t,n,!0)}});var xe=/ jQuery\d+="(?:null|\d+)"/g,be=new RegExp("<(?:"+ne+")[\\s/>]","i"),_e=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,Pe=/<script|<style|<link/i,Ce=/checked\s*(?:[^=]|=\s*.checked.)/i,we=/^true\/(.*)/,Ae=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,Te=re(r).appendChild(r.createElement("div"));function Ve(e,t){return p.nodeName(e,"table")&&p.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function Ee(e){return e.type=(null!==p.find.attr(e,"type"))+"/"+e.type,e}function Ge(e){var t=we.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function Le(e,t){if(1===t.nodeType&&p.hasData(e)){var n,r,i,o=p._data(e),s=p._data(t,o),a=o.events;if(a)for(n in delete s.handle,s.events={},a)for(r=0,i=a[n].length;r<i;r++)p.event.add(t,n,a[n][r]);s.data&&(s.data=p.extend({},s.data))}}function Oe(e,t){var n,r,i;if(1===t.nodeType){if(n=t.nodeName.toLowerCase(),!h.noCloneEvent&&t[p.expando]){for(r in(i=p._data(t)).events)p.removeEvent(t,r,i.handle);t.removeAttribute(p.expando)}"script"===n&&t.text!==e.text?(Ee(t).text=e.text,Ge(t)):"object"===n?(t.parentNode&&(t.outerHTML=e.outerHTML),h.html5Clone&&e.innerHTML&&!p.trim(t.innerHTML)&&(t.innerHTML=e.innerHTML)):"input"===n&&K.test(e.type)?(t.defaultChecked=t.checked=e.checked,t.value!==e.value&&(t.value=e.value)):"option"===n?t.defaultSelected=t.selected=e.defaultSelected:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}}function ke(e,t,n,r){t=o.apply([],t);var i,s,a,c,l,u,d=0,f=e.length,g=f-1,y=t[0],m=p.isFunction(y);if(m||f>1&&"string"==typeof y&&!h.checkClone&&Ce.test(y))return e.each(function(i){var o=e.eq(i);m&&(t[0]=y.call(this,i,o.html())),ke(o,t,n,r)});if(f&&(i=(u=ue(t,e[0].ownerDocument,!1,e,r)).firstChild,1===u.childNodes.length&&(u=i),i||r)){for(a=(c=p.map(oe(u,"script"),Ee)).length;d<f;d++)s=u,d!==g&&(s=p.clone(s,!0,!0),a&&p.merge(c,oe(s,"script"))),n.call(e[d],s,d);if(a)for(l=c[c.length-1].ownerDocument,p.map(c,Ge),d=0;d<a;d++)s=c[d],ee.test(s.type||"")&&!p._data(s,"globalEval")&&p.contains(l,s)&&(s.src?p._evalUrl&&p._evalUrl(s.src):p.globalEval((s.text||s.textContent||s.innerHTML||"").replace(Ae,"")));u=i=null}return e}function Ie(e,t,n){for(var r,i=t?p.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||p.cleanData(oe(r)),r.parentNode&&(n&&p.contains(r.ownerDocument,r)&&se(oe(r,"script")),r.parentNode.removeChild(r));return e}p.extend({htmlPrefilter:function(e){return e.replace(_e,"<$1></$2>")},clone:function(e,t,n){var r,i,o,s,a,c=p.contains(e.ownerDocument,e);if(h.html5Clone||p.isXMLDoc(e)||!be.test("<"+e.nodeName+">")?o=e.cloneNode(!0):(Te.innerHTML=e.outerHTML,Te.removeChild(o=Te.firstChild)),!(h.noCloneEvent&&h.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||p.isXMLDoc(e)))for(r=oe(o),a=oe(e),s=0;null!=(i=a[s]);++s)r[s]&&Oe(i,r[s]);if(t)if(n)for(a=a||oe(e),r=r||oe(o),s=0;null!=(i=a[s]);s++)Le(i,r[s]);else Le(e,o);return(r=oe(o,"script")).length>0&&se(r,!c&&oe(e,"script")),r=a=i=null,o},cleanData:function(e,t){for(var r,i,o,s,a=0,c=p.expando,l=p.cache,u=h.attributes,d=p.event.special;null!=(r=e[a]);a++)if((t||N(r))&&(s=(o=r[c])&&l[o])){if(s.events)for(i in s.events)d[i]?p.event.remove(r,i):p.removeEvent(r,i,s.handle);l[o]&&(delete l[o],u||void 0===r.removeAttribute?r[c]=void 0:r.removeAttribute(c),n.push(o))}}}),p.fn.extend({domManip:ke,detach:function(e){return Ie(this,e,!0)},remove:function(e){return Ie(this,e)},text:function(e){return Z(this,function(e){return void 0===e?p.text(this):this.empty().append((this[0]&&this[0].ownerDocument||r).createTextNode(e))},null,e,arguments.length)},append:function(){return ke(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ve(this,e).appendChild(e)})},prepend:function(){return ke(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Ve(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return ke(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return ke(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++){for(1===e.nodeType&&p.cleanData(oe(e,!1));e.firstChild;)e.removeChild(e.firstChild);e.options&&p.nodeName(e,"select")&&(e.options.length=0)}return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return p.clone(this,e,t)})},html:function(e){return Z(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e)return 1===t.nodeType?t.innerHTML.replace(xe,""):void 0;if("string"==typeof e&&!Pe.test(e)&&(h.htmlSerialize||!be.test(e))&&(h.leadingWhitespace||!te.test(e))&&!ie[(J.exec(e)||["",""])[1].toLowerCase()]){e=p.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(p.cleanData(oe(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return ke(this,arguments,function(t){var n=this.parentNode;p.inArray(this,e)<0&&(p.cleanData(oe(this)),n&&n.replaceChild(t,this))},e)}}),p.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){p.fn[e]=function(e){for(var n,r=0,i=[],o=p(e),a=o.length-1;r<=a;r++)n=r===a?this:this.clone(!0),p(o[r])[t](n),s.apply(i,n.get());return this.pushStack(i)}});var Re,Ne={HTML:"block",BODY:"block"};function Me(e,t){var n=p(t.createElement(e)).appendTo(t.body),r=p.css(n[0],"display");return n.detach(),r}function Be(e){var t=r,n=Ne[e];return n||("none"!==(n=Me(e,t))&&n||((t=((Re=(Re||p("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement))[0].contentWindow||Re[0].contentDocument).document).write(),t.close(),n=Me(e,t),Re.detach()),Ne[e]=n),n}var He=/^margin/,je=new RegExp("^("+q+")(?!px)[a-z%]+$","i"),De=function(e,t,n,r){var i,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];for(o in i=n.apply(e,r||[]),t)e.style[o]=s[o];return i},Fe=r.documentElement;!function(){var t,n,i,o,s,a,c=r.createElement("div"),l=r.createElement("div");function u(){var u,h,p=r.documentElement;p.appendChild(c),l.style.cssText="-webkit-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",t=i=a=!1,n=s=!0,e.getComputedStyle&&(h=e.getComputedStyle(l),t="1%"!==(h||{}).top,a="2px"===(h||{}).marginLeft,i="4px"===(h||{width:"4px"}).width,l.style.marginRight="50%",n="4px"===(h||{marginRight:"4px"}).marginRight,(u=l.appendChild(r.createElement("div"))).style.cssText=l.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",u.style.marginRight=u.style.width="0",l.style.width="1px",s=!parseFloat((e.getComputedStyle(u)||{}).marginRight),l.removeChild(u)),l.style.display="none",(o=0===l.getClientRects().length)&&(l.style.display="",l.innerHTML="<table><tr><td></td><td>t</td></tr></table>",l.childNodes[0].style.borderCollapse="separate",(u=l.getElementsByTagName("td"))[0].style.cssText="margin:0;border:0;padding:0;display:none",(o=0===u[0].offsetHeight)&&(u[0].style.display="",u[1].style.display="none",o=0===u[0].offsetHeight)),p.removeChild(c)}l.style&&(l.style.cssText="float:left;opacity:.5",h.opacity="0.5"===l.style.opacity,h.cssFloat=!!l.style.cssFloat,l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",h.clearCloneStyle="content-box"===l.style.backgroundClip,(c=r.createElement("div")).style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",l.innerHTML="",c.appendChild(l),h.boxSizing=""===l.style.boxSizing||""===l.style.MozBoxSizing||""===l.style.WebkitBoxSizing,p.extend(h,{reliableHiddenOffsets:function(){return null==t&&u(),o},boxSizingReliable:function(){return null==t&&u(),i},pixelMarginRight:function(){return null==t&&u(),n},pixelPosition:function(){return null==t&&u(),t},reliableMarginRight:function(){return null==t&&u(),s},reliableMarginLeft:function(){return null==t&&u(),a}}))}();var qe,We,Ue=/^(top|right|bottom|left)$/;function ze(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}e.getComputedStyle?(qe=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)},We=function(e,t,n){var r,i,o,s,a=e.style;return""!==(s=(n=n||qe(e))?n.getPropertyValue(t)||n[t]:void 0)&&void 0!==s||p.contains(e.ownerDocument,e)||(s=p.style(e,t)),n&&!h.pixelMarginRight()&&je.test(s)&&He.test(t)&&(r=a.width,i=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=r,a.minWidth=i,a.maxWidth=o),void 0===s?s:s+""}):Fe.currentStyle&&(qe=function(e){return e.currentStyle},We=function(e,t,n){var r,i,o,s,a=e.style;return null==(s=(n=n||qe(e))?n[t]:void 0)&&a&&a[t]&&(s=a[t]),je.test(s)&&!Ue.test(t)&&(r=a.left,(o=(i=e.runtimeStyle)&&i.left)&&(i.left=e.currentStyle.left),a.left="fontSize"===t?"1em":s,s=a.pixelLeft+"px",a.left=r,o&&(i.left=o)),void 0===s?s:s+""||"auto"});var Qe=/alpha\([^)]*\)/i,$e=/opacity\s*=\s*([^)]*)/i,Xe=/^(none|table(?!-c[ea]).+)/,Ye=new RegExp("^("+q+")(.*)$","i"),Ze={position:"absolute",visibility:"hidden",display:"block"},Ke={letterSpacing:"0",fontWeight:"400"},Je=["Webkit","O","Moz","ms"],et=r.createElement("div").style;function tt(e){if(e in et)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=Je.length;n--;)if((e=Je[n]+t)in et)return e}function nt(e,t){for(var n,r,i,o=[],s=0,a=e.length;s<a;s++)(r=e[s]).style&&(o[s]=p._data(r,"olddisplay"),n=r.style.display,t?(o[s]||"none"!==n||(r.style.display=""),""===r.style.display&&z(r)&&(o[s]=p._data(r,"olddisplay",Be(r.nodeName)))):(i=z(r),(n&&"none"!==n||!i)&&p._data(r,"olddisplay",i?n:p.css(r,"display"))));for(s=0;s<a;s++)(r=e[s]).style&&(t&&"none"!==r.style.display&&""!==r.style.display||(r.style.display=t?o[s]||"":"none"));return e}function rt(e,t,n){var r=Ye.exec(t);return r?Math.max(0,r[1]-(n||0))+(r[2]||"px"):t}function it(e,t,n,r,i){for(var o=n===(r?"border":"content")?4:"width"===t?1:0,s=0;o<4;o+=2)"margin"===n&&(s+=p.css(e,n+U[o],!0,i)),r?("content"===n&&(s-=p.css(e,"padding"+U[o],!0,i)),"margin"!==n&&(s-=p.css(e,"border"+U[o]+"Width",!0,i))):(s+=p.css(e,"padding"+U[o],!0,i),"padding"!==n&&(s+=p.css(e,"border"+U[o]+"Width",!0,i)));return s}function ot(e,t,n){var r=!0,i="width"===t?e.offsetWidth:e.offsetHeight,o=qe(e),s=h.boxSizing&&"border-box"===p.css(e,"boxSizing",!1,o);if(i<=0||null==i){if(((i=We(e,t,o))<0||null==i)&&(i=e.style[t]),je.test(i))return i;r=s&&(h.boxSizingReliable()||i===e.style[t]),i=parseFloat(i)||0}return i+it(e,t,n||(s?"border":"content"),r,o)+"px"}function st(e,t,n,r,i){return new st.prototype.init(e,t,n,r,i)}p.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=We(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:h.cssFloat?"cssFloat":"styleFloat"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,s,a=p.camelCase(t),c=e.style;if(t=p.cssProps[a]||(p.cssProps[a]=tt(a)||a),s=p.cssHooks[t]||p.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(i=s.get(e,!1,r))?i:c[t];if("string"===(o=typeof n)&&(i=W.exec(n))&&i[1]&&(n=Q(e,t,i),o="number"),null!=n&&n==n&&("number"===o&&(n+=i&&i[3]||(p.cssNumber[a]?"":"px")),h.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),!(s&&"set"in s&&void 0===(n=s.set(e,n,r)))))try{c[t]=n}catch(e){}}},css:function(e,t,n,r){var i,o,s,a=p.camelCase(t);return t=p.cssProps[a]||(p.cssProps[a]=tt(a)||a),(s=p.cssHooks[t]||p.cssHooks[a])&&"get"in s&&(o=s.get(e,!0,n)),void 0===o&&(o=We(e,t,r)),"normal"===o&&t in Ke&&(o=Ke[t]),""===n||n?(i=parseFloat(o),!0===n||isFinite(i)?i||0:o):o}}),p.each(["height","width"],function(e,t){p.cssHooks[t]={get:function(e,n,r){if(n)return Xe.test(p.css(e,"display"))&&0===e.offsetWidth?De(e,Ze,function(){return ot(e,t,r)}):ot(e,t,r)},set:function(e,n,r){var i=r&&qe(e);return rt(0,n,r?it(e,t,r,h.boxSizing&&"border-box"===p.css(e,"boxSizing",!1,i),i):0)}}}),h.opacity||(p.cssHooks.opacity={get:function(e,t){return $e.test((t&&e.currentStyle?e.currentStyle.filter:e.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":t?"1":""},set:function(e,t){var n=e.style,r=e.currentStyle,i=p.isNumeric(t)?"alpha(opacity="+100*t+")":"",o=r&&r.filter||n.filter||"";n.zoom=1,(t>=1||""===t)&&""===p.trim(o.replace(Qe,""))&&n.removeAttribute&&(n.removeAttribute("filter"),""===t||r&&!r.filter)||(n.filter=Qe.test(o)?o.replace(Qe,i):o+" "+i)}}),p.cssHooks.marginRight=ze(h.reliableMarginRight,function(e,t){if(t)return De(e,{display:"inline-block"},We,[e,"marginRight"])}),p.cssHooks.marginLeft=ze(h.reliableMarginLeft,function(e,t){if(t)return(parseFloat(We(e,"marginLeft"))||(p.contains(e.ownerDocument,e)?e.getBoundingClientRect().left-De(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}):0))+"px"}),p.each({margin:"",padding:"",border:"Width"},function(e,t){p.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+U[r]+t]=o[r]||o[r-2]||o[0];return i}},He.test(e)||(p.cssHooks[e+t].set=rt)}),p.fn.extend({css:function(e,t){return Z(this,function(e,t,n){var r,i,o={},s=0;if(p.isArray(t)){for(r=qe(e),i=t.length;s<i;s++)o[t[s]]=p.css(e,t[s],!1,r);return o}return void 0!==n?p.style(e,t,n):p.css(e,t)},e,t,arguments.length>1)},show:function(){return nt(this,!0)},hide:function(){return nt(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){z(this)?p(this).show():p(this).hide()})}}),p.Tween=st,st.prototype={constructor:st,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||p.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(p.cssNumber[n]?"":"px")},cur:function(){var e=st.propHooks[this.prop];return e&&e.get?e.get(this):st.propHooks._default.get(this)},run:function(e){var t,n=st.propHooks[this.prop];return this.options.duration?this.pos=t=p.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):st.propHooks._default.set(this),this}},st.prototype.init.prototype=st.prototype,st.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=p.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){p.fx.step[e.prop]?p.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[p.cssProps[e.prop]]&&!p.cssHooks[e.prop]?e.elem[e.prop]=e.now:p.style(e.elem,e.prop,e.now+e.unit)}}},st.propHooks.scrollTop=st.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},p.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},p.fx=st.prototype.init,p.fx.step={};var at,ct,lt=/^(?:toggle|show|hide)$/,ut=/queueHooks$/;function ht(){return e.setTimeout(function(){at=void 0}),at=p.now()}function pt(e,t){var n,r={height:e},i=0;for(t=t?1:0;i<4;i+=2-t)r["margin"+(n=U[i])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function dt(e,t,n){for(var r,i=(ft.tweeners[t]||[]).concat(ft.tweeners["*"]),o=0,s=i.length;o<s;o++)if(r=i[o].call(n,t,e))return r}function ft(e,t,n){var r,i,o=0,s=ft.prefilters.length,a=p.Deferred().always(function(){delete c.elem}),c=function(){if(i)return!1;for(var t=at||ht(),n=Math.max(0,l.startTime+l.duration-t),r=1-(n/l.duration||0),o=0,s=l.tweens.length;o<s;o++)l.tweens[o].run(r);return a.notifyWith(e,[l,r,n]),r<1&&s?n:(a.resolveWith(e,[l]),!1)},l=a.promise({elem:e,props:p.extend({},t),opts:p.extend(!0,{specialEasing:{},easing:p.easing._default},n),originalProperties:t,originalOptions:n,startTime:at||ht(),duration:n.duration,tweens:[],createTween:function(t,n){var r=p.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(r),r},stop:function(t){var n=0,r=t?l.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)l.tweens[n].run(1);return t?(a.notifyWith(e,[l,1,0]),a.resolveWith(e,[l,t])):a.rejectWith(e,[l,t]),this}}),u=l.props;for(!function(e,t){var n,r,i,o,s;for(n in e)if(i=t[r=p.camelCase(n)],o=e[n],p.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(s=p.cssHooks[r])&&"expand"in s)for(n in o=s.expand(o),delete e[r],o)n in e||(e[n]=o[n],t[n]=i);else t[r]=i}(u,l.opts.specialEasing);o<s;o++)if(r=ft.prefilters[o].call(l,e,u,l.opts))return p.isFunction(r.stop)&&(p._queueHooks(l.elem,l.opts.queue).stop=p.proxy(r.stop,r)),r;return p.map(u,dt,l),p.isFunction(l.opts.start)&&l.opts.start.call(e,l),p.fx.timer(p.extend(c,{elem:e,anim:l,queue:l.opts.queue})),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always)}p.Animation=p.extend(ft,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return Q(n.elem,e,W.exec(t),n),n}]},tweener:function(e,t){p.isFunction(e)?(t=e,e=["*"]):e=e.match(O);for(var n,r=0,i=e.length;r<i;r++)n=e[r],ft.tweeners[n]=ft.tweeners[n]||[],ft.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,o,s,a,c,l,u=this,d={},f=e.style,g=e.nodeType&&z(e),y=p._data(e,"fxshow");for(r in n.queue||(null==(a=p._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,c=a.empty.fire,a.empty.fire=function(){a.unqueued||c()}),a.unqueued++,u.always(function(){u.always(function(){a.unqueued--,p.queue(e,"fx").length||a.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[f.overflow,f.overflowX,f.overflowY],"inline"===("none"===(l=p.css(e,"display"))?p._data(e,"olddisplay")||Be(e.nodeName):l)&&"none"===p.css(e,"float")&&(h.inlineBlockNeedsLayout&&"inline"!==Be(e.nodeName)?f.zoom=1:f.display="inline-block")),n.overflow&&(f.overflow="hidden",h.shrinkWrapBlocks()||u.always(function(){f.overflow=n.overflow[0],f.overflowX=n.overflow[1],f.overflowY=n.overflow[2]})),t)if(i=t[r],lt.exec(i)){if(delete t[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!y||void 0===y[r])continue;g=!0}d[r]=y&&y[r]||p.style(e,r)}else l=void 0;if(p.isEmptyObject(d))"inline"===("none"===l?Be(e.nodeName):l)&&(f.display=l);else for(r in y?"hidden"in y&&(g=y.hidden):y=p._data(e,"fxshow",{}),o&&(y.hidden=!g),g?p(e).show():u.done(function(){p(e).hide()}),u.done(function(){var t;for(t in p._removeData(e,"fxshow"),d)p.style(e,t,d[t])}),d)s=dt(g?y[r]:0,r,u),r in y||(y[r]=s.start,g&&(s.end=s.start,s.start="width"===r||"height"===r?1:0))}],prefilter:function(e,t){t?ft.prefilters.unshift(e):ft.prefilters.push(e)}}),p.speed=function(e,t,n){var r=e&&"object"==typeof e?p.extend({},e):{complete:n||!n&&t||p.isFunction(e)&&e,duration:e,easing:n&&t||t&&!p.isFunction(t)&&t};return r.duration=p.fx.off?0:"number"==typeof r.duration?r.duration:r.duration in p.fx.speeds?p.fx.speeds[r.duration]:p.fx.speeds._default,null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){p.isFunction(r.old)&&r.old.call(this),r.queue&&p.dequeue(this,r.queue)},r},p.fn.extend({fadeTo:function(e,t,n,r){return this.filter(z).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=p.isEmptyObject(e),o=p.speed(t,n,r),s=function(){var t=ft(this,p.extend({},e),o);(i||p._data(this,"finish"))&&t.stop(!0)};return s.finish=s,i||!1===o.queue?this.each(s):this.queue(o.queue,s)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=p.timers,s=p._data(this);if(i)s[i]&&s[i].stop&&r(s[i]);else for(i in s)s[i]&&s[i].stop&&ut.test(i)&&r(s[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||p.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=p._data(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=p.timers,s=r?r.length:0;for(n.finish=!0,p.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<s;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),p.each(["toggle","show","hide"],function(e,t){var n=p.fn[t];p.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(pt(t,!0),e,r,i)}}),p.each({slideDown:pt("show"),slideUp:pt("hide"),slideToggle:pt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){p.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),p.timers=[],p.fx.tick=function(){var e,t=p.timers,n=0;for(at=p.now();n<t.length;n++)(e=t[n])()||t[n]!==e||t.splice(n--,1);t.length||p.fx.stop(),at=void 0},p.fx.timer=function(e){p.timers.push(e),e()?p.fx.start():p.timers.pop()},p.fx.interval=13,p.fx.start=function(){ct||(ct=e.setInterval(p.fx.tick,p.fx.interval))},p.fx.stop=function(){e.clearInterval(ct),ct=null},p.fx.speeds={slow:600,fast:200,_default:400},p.fn.delay=function(t,n){return t=p.fx&&p.fx.speeds[t]||t,n=n||"fx",this.queue(n,function(n,r){var i=e.setTimeout(n,t);r.stop=function(){e.clearTimeout(i)}})},function(){var e,t=r.createElement("input"),n=r.createElement("div"),i=r.createElement("select"),o=i.appendChild(r.createElement("option"));(n=r.createElement("div")).setAttribute("className","t"),n.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",e=n.getElementsByTagName("a")[0],t.setAttribute("type","checkbox"),n.appendChild(t),(e=n.getElementsByTagName("a")[0]).style.cssText="top:1px",h.getSetAttribute="t"!==n.className,h.style=/top/.test(e.getAttribute("style")),h.hrefNormalized="/a"===e.getAttribute("href"),h.checkOn=!!t.value,h.optSelected=o.selected,h.enctype=!!r.createElement("form").enctype,i.disabled=!0,h.optDisabled=!o.disabled,(t=r.createElement("input")).setAttribute("value",""),h.input=""===t.getAttribute("value"),t.value="t",t.setAttribute("type","radio"),h.radioValue="t"===t.value}();var gt=/\r/g,yt=/[\x20\t\r\n\f]+/g;p.fn.extend({val:function(e){var t,n,r,i=this[0];return arguments.length?(r=p.isFunction(e),this.each(function(n){var i;1===this.nodeType&&(null==(i=r?e.call(this,n,p(this).val()):e)?i="":"number"==typeof i?i+="":p.isArray(i)&&(i=p.map(i,function(e){return null==e?"":e+""})),(t=p.valHooks[this.type]||p.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))})):i?(t=p.valHooks[i.type]||p.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(gt,""):null==n?"":n:void 0}}),p.extend({valHooks:{option:{get:function(e){var t=p.find.attr(e,"value");return null!=t?t:p.trim(p.text(e)).replace(yt," ")}},select:{get:function(e){for(var t,n,r=e.options,i=e.selectedIndex,o="select-one"===e.type||i<0,s=o?null:[],a=o?i+1:r.length,c=i<0?a:o?i:0;c<a;c++)if(((n=r[c]).selected||c===i)&&(h.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!p.nodeName(n.parentNode,"optgroup"))){if(t=p(n).val(),o)return t;s.push(t)}return s},set:function(e,t){for(var n,r,i=e.options,o=p.makeArray(t),s=i.length;s--;)if(r=i[s],p.inArray(p.valHooks.option.get(r),o)>-1)try{r.selected=n=!0}catch(e){r.scrollHeight}else r.selected=!1;return n||(e.selectedIndex=-1),i}}}}),p.each(["radio","checkbox"],function(){p.valHooks[this]={set:function(e,t){if(p.isArray(t))return e.checked=p.inArray(p(e).val(),t)>-1}},h.checkOn||(p.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var mt,vt,St=p.expr.attrHandle,xt=/^(?:checked|selected)$/i,bt=h.getSetAttribute,_t=h.input;p.fn.extend({attr:function(e,t){return Z(this,p.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){p.removeAttr(this,e)})}}),p.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?p.prop(e,t,n):(1===o&&p.isXMLDoc(e)||(t=t.toLowerCase(),i=p.attrHooks[t]||(p.expr.match.bool.test(t)?vt:mt)),void 0!==n?null===n?void p.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=p.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!h.radioValue&&"radio"===t&&p.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r,i=0,o=t&&t.match(O);if(o&&1===e.nodeType)for(;n=o[i++];)r=p.propFix[n]||n,p.expr.match.bool.test(n)?_t&&bt||!xt.test(n)?e[r]=!1:e[p.camelCase("default-"+n)]=e[r]=!1:p.attr(e,n,""),e.removeAttribute(bt?n:r)}}),vt={set:function(e,t,n){return!1===t?p.removeAttr(e,n):_t&&bt||!xt.test(n)?e.setAttribute(!bt&&p.propFix[n]||n,n):e[p.camelCase("default-"+n)]=e[n]=!0,n}},p.each(p.expr.match.bool.source.match(/\w+/g),function(e,t){var n=St[t]||p.find.attr;_t&&bt||!xt.test(t)?St[t]=function(e,t,r){var i,o;return r||(o=St[t],St[t]=i,i=null!=n(e,t,r)?t.toLowerCase():null,St[t]=o),i}:St[t]=function(e,t,n){if(!n)return e[p.camelCase("default-"+t)]?t.toLowerCase():null}}),_t&&bt||(p.attrHooks.value={set:function(e,t,n){if(!p.nodeName(e,"input"))return mt&&mt.set(e,t,n);e.defaultValue=t}}),bt||(mt={set:function(e,t,n){var r=e.getAttributeNode(n);if(r||e.setAttributeNode(r=e.ownerDocument.createAttribute(n)),r.value=t+="","value"===n||t===e.getAttribute(n))return t}},St.id=St.name=St.coords=function(e,t,n){var r;if(!n)return(r=e.getAttributeNode(t))&&""!==r.value?r.value:null},p.valHooks.button={get:function(e,t){var n=e.getAttributeNode(t);if(n&&n.specified)return n.value},set:mt.set},p.attrHooks.contenteditable={set:function(e,t,n){mt.set(e,""!==t&&t,n)}},p.each(["width","height"],function(e,t){p.attrHooks[t]={set:function(e,n){if(""===n)return e.setAttribute(t,"auto"),n}}})),h.style||(p.attrHooks.style={get:function(e){return e.style.cssText||void 0},set:function(e,t){return e.style.cssText=t+""}});var Pt=/^(?:input|select|textarea|button|object)$/i,Ct=/^(?:a|area)$/i;p.fn.extend({prop:function(e,t){return Z(this,p.prop,e,t,arguments.length>1)},removeProp:function(e){return e=p.propFix[e]||e,this.each(function(){try{this[e]=void 0,delete this[e]}catch(e){}})}}),p.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&p.isXMLDoc(e)||(t=p.propFix[t]||t,i=p.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=p.find.attr(e,"tabindex");return t?parseInt(t,10):Pt.test(e.nodeName)||Ct.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),h.hrefNormalized||p.each(["href","src"],function(e,t){p.propHooks[t]={get:function(e){return e.getAttribute(t,4)}}}),h.optSelected||(p.propHooks.selected={get:function(e){var t=e.parentNode;return t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex),null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),p.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){p.propFix[this.toLowerCase()]=this}),h.enctype||(p.propFix.enctype="encoding");var wt=/[\t\r\n\f]/g;function At(e){return p.attr(e,"class")||""}p.fn.extend({addClass:function(e){var t,n,r,i,o,s,a,c=0;if(p.isFunction(e))return this.each(function(t){p(this).addClass(e.call(this,t,At(this)))});if("string"==typeof e&&e)for(t=e.match(O)||[];n=this[c++];)if(i=At(n),r=1===n.nodeType&&(" "+i+" ").replace(wt," ")){for(s=0;o=t[s++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(a=p.trim(r))&&p.attr(n,"class",a)}return this},removeClass:function(e){var t,n,r,i,o,s,a,c=0;if(p.isFunction(e))return this.each(function(t){p(this).removeClass(e.call(this,t,At(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(O)||[];n=this[c++];)if(i=At(n),r=1===n.nodeType&&(" "+i+" ").replace(wt," ")){for(s=0;o=t[s++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");i!==(a=p.trim(r))&&p.attr(n,"class",a)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):p.isFunction(e)?this.each(function(n){p(this).toggleClass(e.call(this,n,At(this),t),t)}):this.each(function(){var t,r,i,o;if("string"===n)for(r=0,i=p(this),o=e.match(O)||[];t=o[r++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||((t=At(this))&&p._data(this,"__className__",t),p.attr(this,"class",t||!1===e?"":p._data(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+At(n)+" ").replace(wt," ").indexOf(t)>-1)return!0;return!1}}),p.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){p.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),p.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}});var Tt=e.location,Vt=p.now(),Et=/\?/,Gt=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;p.parseJSON=function(t){if(e.JSON&&e.JSON.parse)return e.JSON.parse(t+"");var n,r=null,i=p.trim(t+"");return i&&!p.trim(i.replace(Gt,function(e,t,i,o){return n&&t&&(r=0),0===r?e:(n=i||t,r+=!o-!i,"")}))?Function("return "+i)():p.error("Invalid JSON: "+t)},p.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{e.DOMParser?n=(new e.DOMParser).parseFromString(t,"text/xml"):((n=new e.ActiveXObject("Microsoft.XMLDOM")).async="false",n.loadXML(t))}catch(e){n=void 0}return n&&n.documentElement&&!n.getElementsByTagName("parsererror").length||p.error("Invalid XML: "+t),n};var Lt=/#.*$/,Ot=/([?&])_=[^&]*/,kt=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,It=/^(?:GET|HEAD)$/,Rt=/^\/\//,Nt=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,Mt={},Bt={},Ht="*/".concat("*"),jt=Tt.href,Dt=Nt.exec(jt.toLowerCase())||[];function Ft(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(O)||[];if(p.isFunction(n))for(;r=o[i++];)"+"===r.charAt(0)?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function qt(e,t,n,r){var i={},o=e===Bt;function s(a){var c;return i[a]=!0,p.each(e[a]||[],function(e,a){var l=a(t,n,r);return"string"!=typeof l||o||i[l]?o?!(c=l):void 0:(t.dataTypes.unshift(l),s(l),!1)}),c}return s(t.dataTypes[0])||!i["*"]&&s("*")}function Wt(e,t){var n,r,i=p.ajaxSettings.flatOptions||{};for(r in t)void 0!==t[r]&&((i[r]?e:n||(n={}))[r]=t[r]);return n&&p.extend(!0,e,n),e}function Ut(e){return e.style&&e.style.display||p.css(e,"display")}p.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:jt,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Dt[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ht,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":p.parseJSON,"text xml":p.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Wt(Wt(e,p.ajaxSettings),t):Wt(p.ajaxSettings,e)},ajaxPrefilter:Ft(Mt),ajaxTransport:Ft(Bt),ajax:function(t,n){"object"==typeof t&&(n=t,t=void 0),n=n||{};var r,i,o,s,a,c,l,u,h=p.ajaxSetup({},n),d=h.context||h,f=h.context&&(d.nodeType||d.jquery)?p(d):p.event,g=p.Deferred(),y=p.Callbacks("once memory"),m=h.statusCode||{},v={},S={},x=0,b="canceled",_={readyState:0,getResponseHeader:function(e){var t;if(2===x){if(!u)for(u={};t=kt.exec(s);)u[t[1].toLowerCase()]=t[2];t=u[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===x?s:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return x||(e=S[n]=S[n]||e,v[e]=t),this},overrideMimeType:function(e){return x||(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(x<2)for(t in e)m[t]=[m[t],e[t]];else _.always(e[_.status]);return this},abort:function(e){var t=e||b;return l&&l.abort(t),P(0,t),this}};if(g.promise(_).complete=y.add,_.success=_.done,_.error=_.fail,h.url=((t||h.url||jt)+"").replace(Lt,"").replace(Rt,Dt[1]+"//"),h.type=n.method||n.type||h.method||h.type,h.dataTypes=p.trim(h.dataType||"*").toLowerCase().match(O)||[""],null==h.crossDomain&&(r=Nt.exec(h.url.toLowerCase()),h.crossDomain=!(!r||r[1]===Dt[1]&&r[2]===Dt[2]&&(r[3]||("http:"===r[1]?"80":"443"))===(Dt[3]||("http:"===Dt[1]?"80":"443")))),h.data&&h.processData&&"string"!=typeof h.data&&(h.data=p.param(h.data,h.traditional)),qt(Mt,h,n,_),2===x)return _;for(i in(c=p.event&&h.global)&&0==p.active++&&p.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!It.test(h.type),o=h.url,h.hasContent||(h.data&&(o=h.url+=(Et.test(o)?"&":"?")+h.data,delete h.data),!1===h.cache&&(h.url=Ot.test(o)?o.replace(Ot,"$1_="+Vt++):o+(Et.test(o)?"&":"?")+"_="+Vt++)),h.ifModified&&(p.lastModified[o]&&_.setRequestHeader("If-Modified-Since",p.lastModified[o]),p.etag[o]&&_.setRequestHeader("If-None-Match",p.etag[o])),(h.data&&h.hasContent&&!1!==h.contentType||n.contentType)&&_.setRequestHeader("Content-Type",h.contentType),_.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Ht+"; q=0.01":""):h.accepts["*"]),h.headers)_.setRequestHeader(i,h.headers[i]);if(h.beforeSend&&(!1===h.beforeSend.call(d,_,h)||2===x))return _.abort();for(i in b="abort",{success:1,error:1,complete:1})_[i](h[i]);if(l=qt(Bt,h,n,_)){if(_.readyState=1,c&&f.trigger("ajaxSend",[_,h]),2===x)return _;h.async&&h.timeout>0&&(a=e.setTimeout(function(){_.abort("timeout")},h.timeout));try{x=1,l.send(v,P)}catch(e){if(!(x<2))throw e;P(-1,e)}}else P(-1,"No Transport");function P(t,n,r,i){var u,v,S,b,P,C=n;2!==x&&(x=2,a&&e.clearTimeout(a),l=void 0,s=i||"",_.readyState=t>0?4:0,u=t>=200&&t<300||304===t,r&&(b=function(e,t,n){for(var r,i,o,s,a=e.contents,c=e.dataTypes;"*"===c[0];)c.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(s in a)if(a[s]&&a[s].test(i)){c.unshift(s);break}if(c[0]in n)o=c[0];else{for(s in n){if(!c[0]||e.converters[s+" "+c[0]]){o=s;break}r||(r=s)}o=o||r}if(o)return o!==c[0]&&c.unshift(o),n[o]}(h,_,r)),b=function(e,t,n,r){var i,o,s,a,c,l={},u=e.dataTypes.slice();if(u[1])for(s in e.converters)l[s.toLowerCase()]=e.converters[s];for(o=u.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!c&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),c=o,o=u.shift())if("*"===o)o=c;else if("*"!==c&&c!==o){if(!(s=l[c+" "+o]||l["* "+o]))for(i in l)if((a=i.split(" "))[1]===o&&(s=l[c+" "+a[0]]||l["* "+a[0]])){!0===s?s=l[i]:!0!==l[i]&&(o=a[0],u.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+c+" to "+o}}}return{state:"success",data:t}}(h,b,_,u),u?(h.ifModified&&((P=_.getResponseHeader("Last-Modified"))&&(p.lastModified[o]=P),(P=_.getResponseHeader("etag"))&&(p.etag[o]=P)),204===t||"HEAD"===h.type?C="nocontent":304===t?C="notmodified":(C=b.state,v=b.data,u=!(S=b.error))):(S=C,!t&&C||(C="error",t<0&&(t=0))),_.status=t,_.statusText=(n||C)+"",u?g.resolveWith(d,[v,C,_]):g.rejectWith(d,[_,C,S]),_.statusCode(m),m=void 0,c&&f.trigger(u?"ajaxSuccess":"ajaxError",[_,h,u?v:S]),y.fireWith(d,[_,C]),c&&(f.trigger("ajaxComplete",[_,h]),--p.active||p.event.trigger("ajaxStop")))}return _},getJSON:function(e,t,n){return p.get(e,t,n,"json")},getScript:function(e,t){return p.get(e,void 0,t,"script")}}),p.each(["get","post"],function(e,t){p[t]=function(e,n,r,i){return p.isFunction(n)&&(i=i||r,r=n,n=void 0),p.ajax(p.extend({url:e,type:t,dataType:i,data:n,success:r},p.isPlainObject(e)&&e))}}),p._evalUrl=function(e){return p.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},p.fn.extend({wrapAll:function(e){if(p.isFunction(e))return this.each(function(t){p(this).wrapAll(e.call(this,t))});if(this[0]){var t=p(e,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstChild&&1===e.firstChild.nodeType;)e=e.firstChild;return e}).append(this)}return this},wrapInner:function(e){return p.isFunction(e)?this.each(function(t){p(this).wrapInner(e.call(this,t))}):this.each(function(){var t=p(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=p.isFunction(e);return this.each(function(n){p(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){p.nodeName(this,"body")||p(this).replaceWith(this.childNodes)}).end()}}),p.expr.filters.hidden=function(e){return h.reliableHiddenOffsets()?e.offsetWidth<=0&&e.offsetHeight<=0&&!e.getClientRects().length:function(e){if(!p.contains(e.ownerDocument||r,e))return!0;for(;e&&1===e.nodeType;){if("none"===Ut(e)||"hidden"===e.type)return!0;e=e.parentNode}return!1}(e)},p.expr.filters.visible=function(e){return!p.expr.filters.hidden(e)};var zt=/%20/g,Qt=/\[\]$/,$t=/\r?\n/g,Xt=/^(?:submit|button|image|reset|file)$/i,Yt=/^(?:input|select|textarea|keygen)/i;function Zt(e,t,n,r){var i;if(p.isArray(t))p.each(t,function(t,i){n||Qt.test(e)?r(e,i):Zt(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)});else if(n||"object"!==p.type(t))r(e,t);else for(i in t)Zt(e+"["+i+"]",t[i],n,r)}p.param=function(e,t){var n,r=[],i=function(e,t){t=p.isFunction(t)?t():null==t?"":t,r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(void 0===t&&(t=p.ajaxSettings&&p.ajaxSettings.traditional),p.isArray(e)||e.jquery&&!p.isPlainObject(e))p.each(e,function(){i(this.name,this.value)});else for(n in e)Zt(n,e[n],t,i);return r.join("&").replace(zt,"+")},p.fn.extend({serialize:function(){return p.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=p.prop(this,"elements");return e?p.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!p(this).is(":disabled")&&Yt.test(this.nodeName)&&!Xt.test(e)&&(this.checked||!K.test(e))}).map(function(e,t){var n=p(this).val();return null==n?null:p.isArray(n)?p.map(n,function(e){return{name:t.name,value:e.replace($t,"\r\n")}}):{name:t.name,value:n.replace($t,"\r\n")}}).get()}}),p.ajaxSettings.xhr=void 0!==e.ActiveXObject?function(){return this.isLocal?nn():r.documentMode>8?tn():/^(get|post|head|put|delete|options)$/i.test(this.type)&&tn()||nn()}:tn;var Kt=0,Jt={},en=p.ajaxSettings.xhr();function tn(){try{return new e.XMLHttpRequest}catch(e){}}function nn(){try{return new e.ActiveXObject("Microsoft.XMLHTTP")}catch(e){}}e.attachEvent&&e.attachEvent("onunload",function(){for(var e in Jt)Jt[e](void 0,!0)}),h.cors=!!en&&"withCredentials"in en,(en=h.ajax=!!en)&&p.ajaxTransport(function(t){var n;if(!t.crossDomain||h.cors)return{send:function(r,i){var o,s=t.xhr(),a=++Kt;if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(o in t.xhrFields)s[o]=t.xhrFields[o];for(o in t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)void 0!==r[o]&&s.setRequestHeader(o,r[o]+"");s.send(t.hasContent&&t.data||null),n=function(e,r){var o,c,l;if(n&&(r||4===s.readyState))if(delete Jt[a],n=void 0,s.onreadystatechange=p.noop,r)4!==s.readyState&&s.abort();else{l={},o=s.status,"string"==typeof s.responseText&&(l.text=s.responseText);try{c=s.statusText}catch(e){c=""}o||!t.isLocal||t.crossDomain?1223===o&&(o=204):o=l.text?200:404}l&&i(o,c,l,s.getAllResponseHeaders())},t.async?4===s.readyState?e.setTimeout(n):s.onreadystatechange=Jt[a]=n:n()},abort:function(){n&&n(void 0,!0)}}}),p.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return p.globalEval(e),e}}}),p.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET",e.global=!1)}),p.ajaxTransport("script",function(e){if(e.crossDomain){var t,n=r.head||p("head")[0]||r.documentElement;return{send:function(i,o){(t=r.createElement("script")).async=!0,e.scriptCharset&&(t.charset=e.scriptCharset),t.src=e.url,t.onload=t.onreadystatechange=function(e,n){(n||!t.readyState||/loaded|complete/.test(t.readyState))&&(t.onload=t.onreadystatechange=null,t.parentNode&&t.parentNode.removeChild(t),t=null,n||o(200,"success"))},n.insertBefore(t,n.firstChild)},abort:function(){t&&t.onload(void 0,!0)}}}});var rn=[],on=/(=)\?(?=&|$)|\?\?/;p.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=rn.pop()||p.expando+"_"+Vt++;return this[e]=!0,e}}),p.ajaxPrefilter("json jsonp",function(t,n,r){var i,o,s,a=!1!==t.jsonp&&(on.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&on.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=p.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(on,"$1"+i):!1!==t.jsonp&&(t.url+=(Et.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return s||p.error(i+" was not called"),s[0]},t.dataTypes[0]="json",o=e[i],e[i]=function(){s=arguments},r.always(function(){void 0===o?p(e).removeProp(i):e[i]=o,t[i]&&(t.jsonpCallback=n.jsonpCallback,rn.push(i)),s&&p.isFunction(o)&&o(s[0]),s=o=void 0}),"script"}),p.parseHTML=function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||r;var i=_.exec(e),o=!n&&[];return i?[t.createElement(i[1])]:(i=ue([e],t,o),o&&o.length&&p(o).remove(),p.merge([],i.childNodes))};var sn=p.fn.load;function an(e){return p.isWindow(e)?e:9===e.nodeType&&(e.defaultView||e.parentWindow)}p.fn.load=function(e,t,n){if("string"!=typeof e&&sn)return sn.apply(this,arguments);var r,i,o,s=this,a=e.indexOf(" ");return a>-1&&(r=p.trim(e.slice(a,e.length)),e=e.slice(0,a)),p.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),s.length>0&&p.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,s.html(r?p("<div>").append(p.parseHTML(e)).find(r):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},p.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){p.fn[t]=function(e){return this.on(t,e)}}),p.expr.filters.animated=function(e){return p.grep(p.timers,function(t){return e===t.elem}).length},p.offset={setOffset:function(e,t,n){var r,i,o,s,a,c,l=p.css(e,"position"),u=p(e),h={};"static"===l&&(e.style.position="relative"),a=u.offset(),o=p.css(e,"top"),c=p.css(e,"left"),("absolute"===l||"fixed"===l)&&p.inArray("auto",[o,c])>-1?(s=(r=u.position()).top,i=r.left):(s=parseFloat(o)||0,i=parseFloat(c)||0),p.isFunction(t)&&(t=t.call(e,n,p.extend({},a))),null!=t.top&&(h.top=t.top-a.top+s),null!=t.left&&(h.left=t.left-a.left+i),"using"in t?t.using.call(e,h):u.css(h)}},p.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){p.offset.setOffset(this,e,t)});var t,n,r={top:0,left:0},i=this[0],o=i&&i.ownerDocument;return o?(t=o.documentElement,p.contains(t,i)?(void 0!==i.getBoundingClientRect&&(r=i.getBoundingClientRect()),n=an(o),{top:r.top+(n.pageYOffset||t.scrollTop)-(t.clientTop||0),left:r.left+(n.pageXOffset||t.scrollLeft)-(t.clientLeft||0)}):r):void 0},position:function(){if(this[0]){var e,t,n={top:0,left:0},r=this[0];return"fixed"===p.css(r,"position")?t=r.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),p.nodeName(e[0],"html")||(n=e.offset()),n.top+=p.css(e[0],"borderTopWidth",!0),n.left+=p.css(e[0],"borderLeftWidth",!0)),{top:t.top-n.top-p.css(r,"marginTop",!0),left:t.left-n.left-p.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&!p.nodeName(e,"html")&&"static"===p.css(e,"position");)e=e.offsetParent;return e||Fe})}}),p.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n=/Y/.test(t);p.fn[e]=function(r){return Z(this,function(e,r,i){var o=an(e);if(void 0===i)return o?t in o?o[t]:o.document.documentElement[r]:e[r];o?o.scrollTo(n?p(o).scrollLeft():i,n?i:p(o).scrollTop()):e[r]=i},e,r,arguments.length,null)}}),p.each(["top","left"],function(e,t){p.cssHooks[t]=ze(h.pixelPosition,function(e,n){if(n)return n=We(e,t),je.test(n)?p(e).position()[t]+"px":n})}),p.each({Height:"height",Width:"width"},function(e,t){p.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){p.fn[r]=function(r,i){var o=arguments.length&&(n||"boolean"!=typeof r),s=n||(!0===r||!0===i?"margin":"border");return Z(this,function(t,n,r){var i;return p.isWindow(t)?t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===r?p.css(t,n,s):p.style(t,n,r,s)},t,o?r:void 0,o,null)}})}),p.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),p.fn.size=function(){return this.length},p.fn.andSelf=p.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return p});var cn=e.jQuery,ln=e.$;return p.noConflict=function(t){return e.$===p&&(e.$=ln),t&&e.jQuery===p&&(e.jQuery=cn),p},t||(e.jQuery=e.$=p),p}),function(){"use strict";"SVGPathSeg"in window||(window.SVGPathSeg=function(e,t,n){this.pathSegType=e,this.pathSegTypeAsLetter=t,this._owningPathSegList=n},SVGPathSeg.prototype.classname="SVGPathSeg",SVGPathSeg.PATHSEG_UNKNOWN=0,SVGPathSeg.PATHSEG_CLOSEPATH=1,SVGPathSeg.PATHSEG_MOVETO_ABS=2,SVGPathSeg.PATHSEG_MOVETO_REL=3,SVGPathSeg.PATHSEG_LINETO_ABS=4,SVGPathSeg.PATHSEG_LINETO_REL=5,SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS=6,SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL=7,SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS=8,SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL=9,SVGPathSeg.PATHSEG_ARC_ABS=10,SVGPathSeg.PATHSEG_ARC_REL=11,SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS=12,SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL=13,SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS=14,SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL=15,SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS=16,SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL=17,SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS=18,SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL=19,SVGPathSeg.prototype._segmentChanged=function(){this._owningPathSegList&&this._owningPathSegList.segmentChanged(this)},window.SVGPathSegClosePath=function(e){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_CLOSEPATH,"z",e)},SVGPathSegClosePath.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegClosePath.prototype.toString=function(){return"[object SVGPathSegClosePath]"},SVGPathSegClosePath.prototype._asPathString=function(){return this.pathSegTypeAsLetter},SVGPathSegClosePath.prototype.clone=function(){return new SVGPathSegClosePath(void 0)},window.SVGPathSegMovetoAbs=function(e,t,n){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_MOVETO_ABS,"M",e),this._x=t,this._y=n},SVGPathSegMovetoAbs.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegMovetoAbs.prototype.toString=function(){return"[object SVGPathSegMovetoAbs]"},SVGPathSegMovetoAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},SVGPathSegMovetoAbs.prototype.clone=function(){return new SVGPathSegMovetoAbs(void 0,this._x,this._y)},Object.defineProperty(SVGPathSegMovetoAbs.prototype,"x",{get:function(){return this._x},set:function(e){this._x=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegMovetoAbs.prototype,"y",{get:function(){return this._y},set:function(e){this._y=e,this._segmentChanged()},enumerable:!0}),window.SVGPathSegMovetoRel=function(e,t,n){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_MOVETO_REL,"m",e),this._x=t,this._y=n},SVGPathSegMovetoRel.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegMovetoRel.prototype.toString=function(){return"[object SVGPathSegMovetoRel]"},SVGPathSegMovetoRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},SVGPathSegMovetoRel.prototype.clone=function(){return new SVGPathSegMovetoRel(void 0,this._x,this._y)},Object.defineProperty(SVGPathSegMovetoRel.prototype,"x",{get:function(){return this._x},set:function(e){this._x=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegMovetoRel.prototype,"y",{get:function(){return this._y},set:function(e){this._y=e,this._segmentChanged()},enumerable:!0}),window.SVGPathSegLinetoAbs=function(e,t,n){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_LINETO_ABS,"L",e),this._x=t,this._y=n},SVGPathSegLinetoAbs.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegLinetoAbs.prototype.toString=function(){return"[object SVGPathSegLinetoAbs]"},SVGPathSegLinetoAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},SVGPathSegLinetoAbs.prototype.clone=function(){return new SVGPathSegLinetoAbs(void 0,this._x,this._y)},Object.defineProperty(SVGPathSegLinetoAbs.prototype,"x",{get:function(){return this._x},set:function(e){this._x=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegLinetoAbs.prototype,"y",{get:function(){return this._y},set:function(e){this._y=e,this._segmentChanged()},enumerable:!0}),window.SVGPathSegLinetoRel=function(e,t,n){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_LINETO_REL,"l",e),this._x=t,this._y=n},SVGPathSegLinetoRel.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegLinetoRel.prototype.toString=function(){return"[object SVGPathSegLinetoRel]"},SVGPathSegLinetoRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},SVGPathSegLinetoRel.prototype.clone=function(){return new SVGPathSegLinetoRel(void 0,this._x,this._y)},Object.defineProperty(SVGPathSegLinetoRel.prototype,"x",{get:function(){return this._x},set:function(e){this._x=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegLinetoRel.prototype,"y",{get:function(){return this._y},set:function(e){this._y=e,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoCubicAbs=function(e,t,n,r,i,o,s){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS,"C",e),this._x=t,this._y=n,this._x1=r,this._y1=i,this._x2=o,this._y2=s},SVGPathSegCurvetoCubicAbs.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegCurvetoCubicAbs.prototype.toString=function(){return"[object SVGPathSegCurvetoCubicAbs]"},SVGPathSegCurvetoCubicAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x1+" "+this._y1+" "+this._x2+" "+this._y2+" "+this._x+" "+this._y},SVGPathSegCurvetoCubicAbs.prototype.clone=function(){return new SVGPathSegCurvetoCubicAbs(void 0,this._x,this._y,this._x1,this._y1,this._x2,this._y2)},Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype,"x",{get:function(){return this._x},set:function(e){this._x=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype,"y",{get:function(){return this._y},set:function(e){this._y=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype,"x1",{get:function(){return this._x1},set:function(e){this._x1=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype,"y1",{get:function(){return this._y1},set:function(e){this._y1=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype,"x2",{get:function(){return this._x2},set:function(e){this._x2=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype,"y2",{get:function(){return this._y2},set:function(e){this._y2=e,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoCubicRel=function(e,t,n,r,i,o,s){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL,"c",e),this._x=t,this._y=n,this._x1=r,this._y1=i,this._x2=o,this._y2=s},SVGPathSegCurvetoCubicRel.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegCurvetoCubicRel.prototype.toString=function(){return"[object SVGPathSegCurvetoCubicRel]"},SVGPathSegCurvetoCubicRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x1+" "+this._y1+" "+this._x2+" "+this._y2+" "+this._x+" "+this._y},SVGPathSegCurvetoCubicRel.prototype.clone=function(){return new SVGPathSegCurvetoCubicRel(void 0,this._x,this._y,this._x1,this._y1,this._x2,this._y2)},Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype,"x",{get:function(){return this._x},set:function(e){this._x=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype,"y",{get:function(){return this._y},set:function(e){this._y=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype,"x1",{get:function(){return this._x1},set:function(e){this._x1=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype,"y1",{get:function(){return this._y1},set:function(e){this._y1=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype,"x2",{get:function(){return this._x2},set:function(e){this._x2=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype,"y2",{get:function(){return this._y2},set:function(e){this._y2=e,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoQuadraticAbs=function(e,t,n,r,i){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS,"Q",e),this._x=t,this._y=n,this._x1=r,this._y1=i},SVGPathSegCurvetoQuadraticAbs.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegCurvetoQuadraticAbs.prototype.toString=function(){return"[object SVGPathSegCurvetoQuadraticAbs]"},SVGPathSegCurvetoQuadraticAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x1+" "+this._y1+" "+this._x+" "+this._y},SVGPathSegCurvetoQuadraticAbs.prototype.clone=function(){return new SVGPathSegCurvetoQuadraticAbs(void 0,this._x,this._y,this._x1,this._y1)},Object.defineProperty(SVGPathSegCurvetoQuadraticAbs.prototype,"x",{get:function(){return this._x},set:function(e){this._x=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoQuadraticAbs.prototype,"y",{get:function(){return this._y},set:function(e){this._y=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoQuadraticAbs.prototype,"x1",{get:function(){return this._x1},set:function(e){this._x1=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoQuadraticAbs.prototype,"y1",{get:function(){return this._y1},set:function(e){this._y1=e,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoQuadraticRel=function(e,t,n,r,i){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL,"q",e),this._x=t,this._y=n,this._x1=r,this._y1=i},SVGPathSegCurvetoQuadraticRel.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegCurvetoQuadraticRel.prototype.toString=function(){return"[object SVGPathSegCurvetoQuadraticRel]"},SVGPathSegCurvetoQuadraticRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x1+" "+this._y1+" "+this._x+" "+this._y},SVGPathSegCurvetoQuadraticRel.prototype.clone=function(){return new SVGPathSegCurvetoQuadraticRel(void 0,this._x,this._y,this._x1,this._y1)},Object.defineProperty(SVGPathSegCurvetoQuadraticRel.prototype,"x",{get:function(){return this._x},set:function(e){this._x=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoQuadraticRel.prototype,"y",{get:function(){return this._y},set:function(e){this._y=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoQuadraticRel.prototype,"x1",{get:function(){return this._x1},set:function(e){this._x1=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoQuadraticRel.prototype,"y1",{get:function(){return this._y1},set:function(e){this._y1=e,this._segmentChanged()},enumerable:!0}),window.SVGPathSegArcAbs=function(e,t,n,r,i,o,s,a){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_ARC_ABS,"A",e),this._x=t,this._y=n,this._r1=r,this._r2=i,this._angle=o,this._largeArcFlag=s,this._sweepFlag=a},SVGPathSegArcAbs.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegArcAbs.prototype.toString=function(){return"[object SVGPathSegArcAbs]"},SVGPathSegArcAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._r1+" "+this._r2+" "+this._angle+" "+(this._largeArcFlag?"1":"0")+" "+(this._sweepFlag?"1":"0")+" "+this._x+" "+this._y},SVGPathSegArcAbs.prototype.clone=function(){return new SVGPathSegArcAbs(void 0,this._x,this._y,this._r1,this._r2,this._angle,this._largeArcFlag,this._sweepFlag)},Object.defineProperty(SVGPathSegArcAbs.prototype,"x",{get:function(){return this._x},set:function(e){this._x=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegArcAbs.prototype,"y",{get:function(){return this._y},set:function(e){this._y=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegArcAbs.prototype,"r1",{get:function(){return this._r1},set:function(e){this._r1=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegArcAbs.prototype,"r2",{get:function(){return this._r2},set:function(e){this._r2=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegArcAbs.prototype,"angle",{get:function(){return this._angle},set:function(e){this._angle=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegArcAbs.prototype,"largeArcFlag",{get:function(){return this._largeArcFlag},set:function(e){this._largeArcFlag=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegArcAbs.prototype,"sweepFlag",{get:function(){return this._sweepFlag},set:function(e){this._sweepFlag=e,this._segmentChanged()},enumerable:!0}),window.SVGPathSegArcRel=function(e,t,n,r,i,o,s,a){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_ARC_REL,"a",e),this._x=t,this._y=n,this._r1=r,this._r2=i,this._angle=o,this._largeArcFlag=s,this._sweepFlag=a},SVGPathSegArcRel.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegArcRel.prototype.toString=function(){return"[object SVGPathSegArcRel]"},SVGPathSegArcRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._r1+" "+this._r2+" "+this._angle+" "+(this._largeArcFlag?"1":"0")+" "+(this._sweepFlag?"1":"0")+" "+this._x+" "+this._y},SVGPathSegArcRel.prototype.clone=function(){return new SVGPathSegArcRel(void 0,this._x,this._y,this._r1,this._r2,this._angle,this._largeArcFlag,this._sweepFlag)},Object.defineProperty(SVGPathSegArcRel.prototype,"x",{get:function(){return this._x},set:function(e){this._x=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegArcRel.prototype,"y",{get:function(){return this._y},set:function(e){this._y=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegArcRel.prototype,"r1",{get:function(){return this._r1},set:function(e){this._r1=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegArcRel.prototype,"r2",{get:function(){return this._r2},set:function(e){this._r2=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegArcRel.prototype,"angle",{get:function(){return this._angle},set:function(e){this._angle=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegArcRel.prototype,"largeArcFlag",{get:function(){return this._largeArcFlag},set:function(e){this._largeArcFlag=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegArcRel.prototype,"sweepFlag",{get:function(){return this._sweepFlag},set:function(e){this._sweepFlag=e,this._segmentChanged()},enumerable:!0}),window.SVGPathSegLinetoHorizontalAbs=function(e,t){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS,"H",e),this._x=t},SVGPathSegLinetoHorizontalAbs.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegLinetoHorizontalAbs.prototype.toString=function(){return"[object SVGPathSegLinetoHorizontalAbs]"},SVGPathSegLinetoHorizontalAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x},SVGPathSegLinetoHorizontalAbs.prototype.clone=function(){return new SVGPathSegLinetoHorizontalAbs(void 0,this._x)},Object.defineProperty(SVGPathSegLinetoHorizontalAbs.prototype,"x",{get:function(){return this._x},set:function(e){this._x=e,this._segmentChanged()},enumerable:!0}),window.SVGPathSegLinetoHorizontalRel=function(e,t){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL,"h",e),this._x=t},SVGPathSegLinetoHorizontalRel.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegLinetoHorizontalRel.prototype.toString=function(){return"[object SVGPathSegLinetoHorizontalRel]"},SVGPathSegLinetoHorizontalRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x},SVGPathSegLinetoHorizontalRel.prototype.clone=function(){return new SVGPathSegLinetoHorizontalRel(void 0,this._x)},Object.defineProperty(SVGPathSegLinetoHorizontalRel.prototype,"x",{get:function(){return this._x},set:function(e){this._x=e,this._segmentChanged()},enumerable:!0}),window.SVGPathSegLinetoVerticalAbs=function(e,t){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS,"V",e),this._y=t},SVGPathSegLinetoVerticalAbs.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegLinetoVerticalAbs.prototype.toString=function(){return"[object SVGPathSegLinetoVerticalAbs]"},SVGPathSegLinetoVerticalAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._y},SVGPathSegLinetoVerticalAbs.prototype.clone=function(){return new SVGPathSegLinetoVerticalAbs(void 0,this._y)},Object.defineProperty(SVGPathSegLinetoVerticalAbs.prototype,"y",{get:function(){return this._y},set:function(e){this._y=e,this._segmentChanged()},enumerable:!0}),window.SVGPathSegLinetoVerticalRel=function(e,t){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL,"v",e),this._y=t},SVGPathSegLinetoVerticalRel.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegLinetoVerticalRel.prototype.toString=function(){return"[object SVGPathSegLinetoVerticalRel]"},SVGPathSegLinetoVerticalRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._y},SVGPathSegLinetoVerticalRel.prototype.clone=function(){return new SVGPathSegLinetoVerticalRel(void 0,this._y)},Object.defineProperty(SVGPathSegLinetoVerticalRel.prototype,"y",{get:function(){return this._y},set:function(e){this._y=e,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoCubicSmoothAbs=function(e,t,n,r,i){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS,"S",e),this._x=t,this._y=n,this._x2=r,this._y2=i},SVGPathSegCurvetoCubicSmoothAbs.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegCurvetoCubicSmoothAbs.prototype.toString=function(){return"[object SVGPathSegCurvetoCubicSmoothAbs]"},SVGPathSegCurvetoCubicSmoothAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x2+" "+this._y2+" "+this._x+" "+this._y},SVGPathSegCurvetoCubicSmoothAbs.prototype.clone=function(){return new SVGPathSegCurvetoCubicSmoothAbs(void 0,this._x,this._y,this._x2,this._y2)},Object.defineProperty(SVGPathSegCurvetoCubicSmoothAbs.prototype,"x",{get:function(){return this._x},set:function(e){this._x=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicSmoothAbs.prototype,"y",{get:function(){return this._y},set:function(e){this._y=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicSmoothAbs.prototype,"x2",{get:function(){return this._x2},set:function(e){this._x2=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicSmoothAbs.prototype,"y2",{get:function(){return this._y2},set:function(e){this._y2=e,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoCubicSmoothRel=function(e,t,n,r,i){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL,"s",e),this._x=t,this._y=n,this._x2=r,this._y2=i},SVGPathSegCurvetoCubicSmoothRel.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegCurvetoCubicSmoothRel.prototype.toString=function(){return"[object SVGPathSegCurvetoCubicSmoothRel]"},SVGPathSegCurvetoCubicSmoothRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x2+" "+this._y2+" "+this._x+" "+this._y},SVGPathSegCurvetoCubicSmoothRel.prototype.clone=function(){return new SVGPathSegCurvetoCubicSmoothRel(void 0,this._x,this._y,this._x2,this._y2)},Object.defineProperty(SVGPathSegCurvetoCubicSmoothRel.prototype,"x",{get:function(){return this._x},set:function(e){this._x=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicSmoothRel.prototype,"y",{get:function(){return this._y},set:function(e){this._y=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicSmoothRel.prototype,"x2",{get:function(){return this._x2},set:function(e){this._x2=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicSmoothRel.prototype,"y2",{get:function(){return this._y2},set:function(e){this._y2=e,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoQuadraticSmoothAbs=function(e,t,n){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS,"T",e),this._x=t,this._y=n},SVGPathSegCurvetoQuadraticSmoothAbs.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegCurvetoQuadraticSmoothAbs.prototype.toString=function(){return"[object SVGPathSegCurvetoQuadraticSmoothAbs]"},SVGPathSegCurvetoQuadraticSmoothAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},SVGPathSegCurvetoQuadraticSmoothAbs.prototype.clone=function(){return new SVGPathSegCurvetoQuadraticSmoothAbs(void 0,this._x,this._y)},Object.defineProperty(SVGPathSegCurvetoQuadraticSmoothAbs.prototype,"x",{get:function(){return this._x},set:function(e){this._x=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoQuadraticSmoothAbs.prototype,"y",{get:function(){return this._y},set:function(e){this._y=e,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoQuadraticSmoothRel=function(e,t,n){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL,"t",e),this._x=t,this._y=n},SVGPathSegCurvetoQuadraticSmoothRel.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegCurvetoQuadraticSmoothRel.prototype.toString=function(){return"[object SVGPathSegCurvetoQuadraticSmoothRel]"},SVGPathSegCurvetoQuadraticSmoothRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},SVGPathSegCurvetoQuadraticSmoothRel.prototype.clone=function(){return new SVGPathSegCurvetoQuadraticSmoothRel(void 0,this._x,this._y)},Object.defineProperty(SVGPathSegCurvetoQuadraticSmoothRel.prototype,"x",{get:function(){return this._x},set:function(e){this._x=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoQuadraticSmoothRel.prototype,"y",{get:function(){return this._y},set:function(e){this._y=e,this._segmentChanged()},enumerable:!0}),SVGPathElement.prototype.createSVGPathSegClosePath=function(){return new SVGPathSegClosePath(void 0)},SVGPathElement.prototype.createSVGPathSegMovetoAbs=function(e,t){return new SVGPathSegMovetoAbs(void 0,e,t)},SVGPathElement.prototype.createSVGPathSegMovetoRel=function(e,t){return new SVGPathSegMovetoRel(void 0,e,t)},SVGPathElement.prototype.createSVGPathSegLinetoAbs=function(e,t){return new SVGPathSegLinetoAbs(void 0,e,t)},SVGPathElement.prototype.createSVGPathSegLinetoRel=function(e,t){return new SVGPathSegLinetoRel(void 0,e,t)},SVGPathElement.prototype.createSVGPathSegCurvetoCubicAbs=function(e,t,n,r,i,o){return new SVGPathSegCurvetoCubicAbs(void 0,e,t,n,r,i,o)},SVGPathElement.prototype.createSVGPathSegCurvetoCubicRel=function(e,t,n,r,i,o){return new SVGPathSegCurvetoCubicRel(void 0,e,t,n,r,i,o)},SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticAbs=function(e,t,n,r){return new SVGPathSegCurvetoQuadraticAbs(void 0,e,t,n,r)},SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticRel=function(e,t,n,r){return new SVGPathSegCurvetoQuadraticRel(void 0,e,t,n,r)},SVGPathElement.prototype.createSVGPathSegArcAbs=function(e,t,n,r,i,o,s){return new SVGPathSegArcAbs(void 0,e,t,n,r,i,o,s)},SVGPathElement.prototype.createSVGPathSegArcRel=function(e,t,n,r,i,o,s){return new SVGPathSegArcRel(void 0,e,t,n,r,i,o,s)},SVGPathElement.prototype.createSVGPathSegLinetoHorizontalAbs=function(e){return new SVGPathSegLinetoHorizontalAbs(void 0,e)},SVGPathElement.prototype.createSVGPathSegLinetoHorizontalRel=function(e){return new SVGPathSegLinetoHorizontalRel(void 0,e)},SVGPathElement.prototype.createSVGPathSegLinetoVerticalAbs=function(e){return new SVGPathSegLinetoVerticalAbs(void 0,e)},SVGPathElement.prototype.createSVGPathSegLinetoVerticalRel=function(e){return new SVGPathSegLinetoVerticalRel(void 0,e)},SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothAbs=function(e,t,n,r){return new SVGPathSegCurvetoCubicSmoothAbs(void 0,e,t,n,r)},SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothRel=function(e,t,n,r){return new SVGPathSegCurvetoCubicSmoothRel(void 0,e,t,n,r)},SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothAbs=function(e,t){return new SVGPathSegCurvetoQuadraticSmoothAbs(void 0,e,t)},SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothRel=function(e,t){return new SVGPathSegCurvetoQuadraticSmoothRel(void 0,e,t)}),"SVGPathSegList"in window||(window.SVGPathSegList=function(e){this._pathElement=e,this._list=this._parsePath(this._pathElement.getAttribute("d")),this._mutationObserverConfig={attributes:!0,attributeFilter:["d"]},this._pathElementMutationObserver=new MutationObserver(this._updateListFromPathMutations.bind(this)),this._pathElementMutationObserver.observe(this._pathElement,this._mutationObserverConfig)},SVGPathSegList.prototype.classname="SVGPathSegList",Object.defineProperty(SVGPathSegList.prototype,"numberOfItems",{get:function(){return this._checkPathSynchronizedToList(),this._list.length},enumerable:!0}),Object.defineProperty(SVGPathElement.prototype,"pathSegList",{get:function(){return this._pathSegList||(this._pathSegList=new SVGPathSegList(this)),this._pathSegList},enumerable:!0}),Object.defineProperty(SVGPathElement.prototype,"normalizedPathSegList",{get:function(){return this.pathSegList},enumerable:!0}),Object.defineProperty(SVGPathElement.prototype,"animatedPathSegList",{get:function(){return this.pathSegList},enumerable:!0}),Object.defineProperty(SVGPathElement.prototype,"animatedNormalizedPathSegList",{get:function(){return this.pathSegList},enumerable:!0}),SVGPathSegList.prototype._checkPathSynchronizedToList=function(){this._updateListFromPathMutations(this._pathElementMutationObserver.takeRecords())},SVGPathSegList.prototype._updateListFromPathMutations=function(e){if(this._pathElement){var t=!1;e.forEach(function(e){"d"==e.attributeName&&(t=!0)}),t&&(this._list=this._parsePath(this._pathElement.getAttribute("d")))}},SVGPathSegList.prototype._writeListToPath=function(){this._pathElementMutationObserver.disconnect(),this._pathElement.setAttribute("d",SVGPathSegList._pathSegArrayAsString(this._list)),this._pathElementMutationObserver.observe(this._pathElement,this._mutationObserverConfig)},SVGPathSegList.prototype.segmentChanged=function(e){this._writeListToPath()},SVGPathSegList.prototype.clear=function(){this._checkPathSynchronizedToList(),this._list.forEach(function(e){e._owningPathSegList=null}),this._list=[],this._writeListToPath()},SVGPathSegList.prototype.initialize=function(e){return this._checkPathSynchronizedToList(),this._list=[e],e._owningPathSegList=this,this._writeListToPath(),e},SVGPathSegList.prototype._checkValidIndex=function(e){if(isNaN(e)||e<0||e>=this.numberOfItems)throw"INDEX_SIZE_ERR"},SVGPathSegList.prototype.getItem=function(e){return this._checkPathSynchronizedToList(),this._checkValidIndex(e),this._list[e]},SVGPathSegList.prototype.insertItemBefore=function(e,t){return this._checkPathSynchronizedToList(),t>this.numberOfItems&&(t=this.numberOfItems),e._owningPathSegList&&(e=e.clone()),this._list.splice(t,0,e),e._owningPathSegList=this,this._writeListToPath(),e},SVGPathSegList.prototype.replaceItem=function(e,t){return this._checkPathSynchronizedToList(),e._owningPathSegList&&(e=e.clone()),this._checkValidIndex(t),this._list[t]=e,e._owningPathSegList=this,this._writeListToPath(),e},SVGPathSegList.prototype.removeItem=function(e){this._checkPathSynchronizedToList(),this._checkValidIndex(e);var t=this._list[e];return this._list.splice(e,1),this._writeListToPath(),t},SVGPathSegList.prototype.appendItem=function(e){return this._checkPathSynchronizedToList(),e._owningPathSegList&&(e=e.clone()),this._list.push(e),e._owningPathSegList=this,this._writeListToPath(),e},SVGPathSegList._pathSegArrayAsString=function(e){var t="",n=!0;return e.forEach(function(e){n?(n=!1,t+=e._asPathString()):t+=" "+e._asPathString()}),t},SVGPathSegList.prototype._parsePath=function(e){if(!e||0==e.length)return[];var t=this,n=function(){this.pathSegList=[]};n.prototype.appendSegment=function(e){this.pathSegList.push(e)};var r=function(e){this._string=e,this._currentIndex=0,this._endIndex=this._string.length,this._previousCommand=SVGPathSeg.PATHSEG_UNKNOWN,this._skipOptionalSpaces()};r.prototype._isCurrentSpace=function(){var e=this._string[this._currentIndex];return e<=" "&&(" "==e||"\n"==e||"\t"==e||"\r"==e||"\f"==e)},r.prototype._skipOptionalSpaces=function(){for(;this._currentIndex<this._endIndex&&this._isCurrentSpace();)this._currentIndex++;return this._currentIndex<this._endIndex},r.prototype._skipOptionalSpacesOrDelimiter=function(){return!(this._currentIndex<this._endIndex&&!this._isCurrentSpace()&&","!=this._string.charAt(this._currentIndex))&&(this._skipOptionalSpaces()&&this._currentIndex<this._endIndex&&","==this._string.charAt(this._currentIndex)&&(this._currentIndex++,this._skipOptionalSpaces()),this._currentIndex<this._endIndex)},r.prototype.hasMoreData=function(){return this._currentIndex<this._endIndex},r.prototype.peekSegmentType=function(){var e=this._string[this._currentIndex];return this._pathSegTypeFromChar(e)},r.prototype._pathSegTypeFromChar=function(e){switch(e){case"Z":case"z":return SVGPathSeg.PATHSEG_CLOSEPATH;case"M":return SVGPathSeg.PATHSEG_MOVETO_ABS;case"m":return SVGPathSeg.PATHSEG_MOVETO_REL;case"L":return SVGPathSeg.PATHSEG_LINETO_ABS;case"l":return SVGPathSeg.PATHSEG_LINETO_REL;case"C":return SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS;case"c":return SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL;case"Q":return SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS;case"q":return SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL;case"A":return SVGPathSeg.PATHSEG_ARC_ABS;case"a":return SVGPathSeg.PATHSEG_ARC_REL;case"H":return SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS;case"h":return SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL;case"V":return SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS;case"v":return SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL;case"S":return SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS;case"s":return SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL;case"T":return SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS;case"t":return SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL;default:return SVGPathSeg.PATHSEG_UNKNOWN}},r.prototype._nextCommandHelper=function(e,t){return("+"==e||"-"==e||"."==e||e>="0"&&e<="9")&&t!=SVGPathSeg.PATHSEG_CLOSEPATH?t==SVGPathSeg.PATHSEG_MOVETO_ABS?SVGPathSeg.PATHSEG_LINETO_ABS:t==SVGPathSeg.PATHSEG_MOVETO_REL?SVGPathSeg.PATHSEG_LINETO_REL:t:SVGPathSeg.PATHSEG_UNKNOWN},r.prototype.initialCommandIsMoveTo=function(){if(!this.hasMoreData())return!0;var e=this.peekSegmentType();return e==SVGPathSeg.PATHSEG_MOVETO_ABS||e==SVGPathSeg.PATHSEG_MOVETO_REL},r.prototype._parseNumber=function(){var e=0,t=0,n=1,r=0,i=1,o=1,s=this._currentIndex;if(this._skipOptionalSpaces(),this._currentIndex<this._endIndex&&"+"==this._string.charAt(this._currentIndex)?this._currentIndex++:this._currentIndex<this._endIndex&&"-"==this._string.charAt(this._currentIndex)&&(this._currentIndex++,i=-1),!(this._currentIndex==this._endIndex||(this._string.charAt(this._currentIndex)<"0"||this._string.charAt(this._currentIndex)>"9")&&"."!=this._string.charAt(this._currentIndex))){for(var a=this._currentIndex;this._currentIndex<this._endIndex&&this._string.charAt(this._currentIndex)>="0"&&this._string.charAt(this._currentIndex)<="9";)this._currentIndex++;if(this._currentIndex!=a)for(var c=this._currentIndex-1,l=1;c>=a;)t+=l*(this._string.charAt(c--)-"0"),l*=10;if(this._currentIndex<this._endIndex&&"."==this._string.charAt(this._currentIndex)){if(this._currentIndex++,this._currentIndex>=this._endIndex||this._string.charAt(this._currentIndex)<"0"||this._string.charAt(this._currentIndex)>"9")return;for(;this._currentIndex<this._endIndex&&this._string.charAt(this._currentIndex)>="0"&&this._string.charAt(this._currentIndex)<="9";)r+=(this._string.charAt(this._currentIndex++)-"0")*(n*=.1)}if(this._currentIndex!=s&&this._currentIndex+1<this._endIndex&&("e"==this._string.charAt(this._currentIndex)||"E"==this._string.charAt(this._currentIndex))&&"x"!=this._string.charAt(this._currentIndex+1)&&"m"!=this._string.charAt(this._currentIndex+1)){if(this._currentIndex++,"+"==this._string.charAt(this._currentIndex)?this._currentIndex++:"-"==this._string.charAt(this._currentIndex)&&(this._currentIndex++,o=-1),this._currentIndex>=this._endIndex||this._string.charAt(this._currentIndex)<"0"||this._string.charAt(this._currentIndex)>"9")return;for(;this._currentIndex<this._endIndex&&this._string.charAt(this._currentIndex)>="0"&&this._string.charAt(this._currentIndex)<="9";)e*=10,e+=this._string.charAt(this._currentIndex)-"0",this._currentIndex++}var u=t+r;if(u*=i,e&&(u*=Math.pow(10,o*e)),s!=this._currentIndex)return this._skipOptionalSpacesOrDelimiter(),u}},r.prototype._parseArcFlag=function(){if(!(this._currentIndex>=this._endIndex)){var e=!1,t=this._string.charAt(this._currentIndex++);if("0"==t)e=!1;else{if("1"!=t)return;e=!0}return this._skipOptionalSpacesOrDelimiter(),e}},r.prototype.parseSegment=function(){var e=this._string[this._currentIndex],n=this._pathSegTypeFromChar(e);if(n==SVGPathSeg.PATHSEG_UNKNOWN){if(this._previousCommand==SVGPathSeg.PATHSEG_UNKNOWN)return null;if((n=this._nextCommandHelper(e,this._previousCommand))==SVGPathSeg.PATHSEG_UNKNOWN)return null}else this._currentIndex++;switch(this._previousCommand=n,n){case SVGPathSeg.PATHSEG_MOVETO_REL:return new SVGPathSegMovetoRel(t,this._parseNumber(),this._parseNumber());case SVGPathSeg.PATHSEG_MOVETO_ABS:return new SVGPathSegMovetoAbs(t,this._parseNumber(),this._parseNumber());case SVGPathSeg.PATHSEG_LINETO_REL:return new SVGPathSegLinetoRel(t,this._parseNumber(),this._parseNumber());case SVGPathSeg.PATHSEG_LINETO_ABS:return new SVGPathSegLinetoAbs(t,this._parseNumber(),this._parseNumber());case SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:return new SVGPathSegLinetoHorizontalRel(t,this._parseNumber());case SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:return new SVGPathSegLinetoHorizontalAbs(t,this._parseNumber());case SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL:return new SVGPathSegLinetoVerticalRel(t,this._parseNumber());case SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS:return new SVGPathSegLinetoVerticalAbs(t,this._parseNumber());case SVGPathSeg.PATHSEG_CLOSEPATH:return this._skipOptionalSpaces(),new SVGPathSegClosePath(t);case SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL:var r={x1:this._parseNumber(),y1:this._parseNumber(),x2:this._parseNumber(),y2:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()};return new SVGPathSegCurvetoCubicRel(t,r.x,r.y,r.x1,r.y1,r.x2,r.y2);case SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS:r={x1:this._parseNumber(),y1:this._parseNumber(),x2:this._parseNumber(),y2:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()};return new SVGPathSegCurvetoCubicAbs(t,r.x,r.y,r.x1,r.y1,r.x2,r.y2);case SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:r={x2:this._parseNumber(),y2:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()};return new SVGPathSegCurvetoCubicSmoothRel(t,r.x,r.y,r.x2,r.y2);case SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:r={x2:this._parseNumber(),y2:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()};return new SVGPathSegCurvetoCubicSmoothAbs(t,r.x,r.y,r.x2,r.y2);case SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:r={x1:this._parseNumber(),y1:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()};return new SVGPathSegCurvetoQuadraticRel(t,r.x,r.y,r.x1,r.y1);case SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:r={x1:this._parseNumber(),y1:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()};return new SVGPathSegCurvetoQuadraticAbs(t,r.x,r.y,r.x1,r.y1);case SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:return new SVGPathSegCurvetoQuadraticSmoothRel(t,this._parseNumber(),this._parseNumber());case SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:return new SVGPathSegCurvetoQuadraticSmoothAbs(t,this._parseNumber(),this._parseNumber());case SVGPathSeg.PATHSEG_ARC_REL:r={x1:this._parseNumber(),y1:this._parseNumber(),arcAngle:this._parseNumber(),arcLarge:this._parseArcFlag(),arcSweep:this._parseArcFlag(),x:this._parseNumber(),y:this._parseNumber()};return new SVGPathSegArcRel(t,r.x,r.y,r.x1,r.y1,r.arcAngle,r.arcLarge,r.arcSweep);case SVGPathSeg.PATHSEG_ARC_ABS:r={x1:this._parseNumber(),y1:this._parseNumber(),arcAngle:this._parseNumber(),arcLarge:this._parseArcFlag(),arcSweep:this._parseArcFlag(),x:this._parseNumber(),y:this._parseNumber()};return new SVGPathSegArcAbs(t,r.x,r.y,r.x1,r.y1,r.arcAngle,r.arcLarge,r.arcSweep);default:throw"Unknown path seg type."}};var i=new n,o=new r(e);if(!o.initialCommandIsMoveTo())return[];for(;o.hasMoreData();){var s=o.parseSegment();if(!s)return[];i.appendSegment(s)}return i.pathSegList})}(),function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).Matter=e()}}(function(){return function e(t,n,r){function i(s,a){if(!n[s]){if(!t[s]){var c="function"==typeof require&&require;if(!a&&c)return c(s,!0);if(o)return o(s,!0);var l=new Error("Cannot find module '"+s+"'");throw l.code="MODULE_NOT_FOUND",l}var u=n[s]={exports:{}};t[s][0].call(u.exports,function(e){var n=t[s][1][e];return i(n||e)},u,u.exports,e,t,n,r)}return n[s].exports}for(var o="function"==typeof require&&require,s=0;s<r.length;s++)i(r[s]);return i}({1:[function(e,t,n){var r={};t.exports=r;var i=e("../geometry/Vertices"),o=e("../geometry/Vector"),s=e("../core/Sleeping"),a=(e("../render/Render"),e("../core/Common")),c=e("../geometry/Bounds"),l=e("../geometry/Axes");!function(){r._inertiaScale=4,r._nextCollidingGroupId=1,r._nextNonCollidingGroupId=-1,r._nextCategory=1,r.create=function(t){var n={id:a.nextId(),type:"body",label:"Body",parts:[],angle:0,vertices:i.fromPath("L 0 0 L 40 0 L 40 40 L 0 40"),position:{x:0,y:0},force:{x:0,y:0},torque:0,positionImpulse:{x:0,y:0},constraintImpulse:{x:0,y:0,angle:0},totalContacts:0,speed:0,angularSpeed:0,velocity:{x:0,y:0},angularVelocity:0,isSensor:!1,isStatic:!1,isSleeping:!1,motion:0,sleepThreshold:60,density:.001,restitution:0,friction:.1,frictionStatic:.5,frictionAir:.01,collisionFilter:{category:1,mask:4294967295,group:0},slop:.05,timeScale:1,render:{visible:!0,opacity:1,sprite:{xScale:1,yScale:1,xOffset:0,yOffset:0},lineWidth:1.5}},r=a.extend(n,t);return e(r,t),r},r.nextGroup=function(e){return e?r._nextNonCollidingGroupId--:r._nextCollidingGroupId++},r.nextCategory=function(){return r._nextCategory=r._nextCategory<<1,r._nextCategory};var e=function(e,t){r.set(e,{bounds:e.bounds||c.create(e.vertices),positionPrev:e.positionPrev||o.clone(e.position),anglePrev:e.anglePrev||e.angle,vertices:e.vertices,parts:e.parts||[e],isStatic:e.isStatic,isSleeping:e.isSleeping,parent:e.parent||e}),i.rotate(e.vertices,e.angle,e.position),l.rotate(e.axes,e.angle),c.update(e.bounds,e.vertices,e.velocity),r.set(e,{axes:t.axes||e.axes,area:t.area||e.area,mass:t.mass||e.mass,inertia:t.inertia||e.inertia});var n=e.isStatic?"#eeeeee":a.choose(["#556270","#4ECDC4","#C7F464","#FF6B6B","#C44D58"]),s=a.shadeColor(n,-20);e.render.fillStyle=e.render.fillStyle||n,e.render.strokeStyle=e.render.strokeStyle||s,e.render.sprite.xOffset+=-(e.bounds.min.x-e.position.x)/(e.bounds.max.x-e.bounds.min.x),e.render.sprite.yOffset+=-(e.bounds.min.y-e.position.y)/(e.bounds.max.y-e.bounds.min.y)};r.set=function(e,t,n){var i;for(i in"string"==typeof t&&(i=t,(t={})[i]=n),t)if(n=t[i],t.hasOwnProperty(i))switch(i){case"isStatic":r.setStatic(e,n);break;case"isSleeping":s.set(e,n);break;case"mass":r.setMass(e,n);break;case"density":r.setDensity(e,n);break;case"inertia":r.setInertia(e,n);break;case"vertices":r.setVertices(e,n);break;case"position":r.setPosition(e,n);break;case"angle":r.setAngle(e,n);break;case"velocity":r.setVelocity(e,n);break;case"angularVelocity":r.setAngularVelocity(e,n);break;case"parts":r.setParts(e,n);break;default:e[i]=n}},r.setStatic=function(e,t){for(var n=0;n<e.parts.length;n++){var r=e.parts[n];r.isStatic=t,t&&(r.restitution=0,r.friction=1,r.mass=r.inertia=r.density=1/0,r.inverseMass=r.inverseInertia=0,r.positionPrev.x=r.position.x,r.positionPrev.y=r.position.y,r.anglePrev=r.angle,r.angularVelocity=0,r.speed=0,r.angularSpeed=0,r.motion=0)}},r.setMass=function(e,t){e.mass=t,e.inverseMass=1/e.mass,e.density=e.mass/e.area},r.setDensity=function(e,t){r.setMass(e,t*e.area),e.density=t},r.setInertia=function(e,t){e.inertia=t,e.inverseInertia=1/e.inertia},r.setVertices=function(e,t){t[0].body===e?e.vertices=t:e.vertices=i.create(t,e),e.axes=l.fromVertices(e.vertices),e.area=i.area(e.vertices),r.setMass(e,e.density*e.area);var n=i.centre(e.vertices);i.translate(e.vertices,n,-1),r.setInertia(e,r._inertiaScale*i.inertia(e.vertices,e.mass)),i.translate(e.vertices,e.position),c.update(e.bounds,e.vertices,e.velocity)},r.setParts=function(e,n,o){var s;for(n=n.slice(0),e.parts.length=0,e.parts.push(e),e.parent=e,s=0;s<n.length;s++){var a=n[s];a!==e&&(a.parent=e,e.parts.push(a))}if(1!==e.parts.length){if(o=void 0===o||o){var c=[];for(s=0;s<n.length;s++)c=c.concat(n[s].vertices);i.clockwiseSort(c);var l=i.hull(c),u=i.centre(l);r.setVertices(e,l),i.translate(e.vertices,u)}var h=t(e);e.area=h.area,e.parent=e,e.position.x=h.centre.x,e.position.y=h.centre.y,e.positionPrev.x=h.centre.x,e.positionPrev.y=h.centre.y,r.setMass(e,h.mass),r.setInertia(e,h.inertia),r.setPosition(e,h.centre)}},r.setPosition=function(e,t){var n=o.sub(t,e.position);e.positionPrev.x+=n.x,e.positionPrev.y+=n.y;for(var r=0;r<e.parts.length;r++){var s=e.parts[r];s.position.x+=n.x,s.position.y+=n.y,i.translate(s.vertices,n),c.update(s.bounds,s.vertices,e.velocity)}},r.setAngle=function(e,t){var n=t-e.angle;e.anglePrev+=n;for(var r=0;r<e.parts.length;r++){var s=e.parts[r];s.angle+=n,i.rotate(s.vertices,n,e.position),l.rotate(s.axes,n),c.update(s.bounds,s.vertices,e.velocity),r>0&&o.rotateAbout(s.position,n,e.position,s.position)}},r.setVelocity=function(e,t){e.positionPrev.x=e.position.x-t.x,e.positionPrev.y=e.position.y-t.y,e.velocity.x=t.x,e.velocity.y=t.y,e.speed=o.magnitude(e.velocity)},r.setAngularVelocity=function(e,t){e.anglePrev=e.angle-t,e.angularVelocity=t,e.angularSpeed=Math.abs(e.angularVelocity)},r.translate=function(e,t){r.setPosition(e,o.add(e.position,t))},r.rotate=function(e,t){r.setAngle(e,e.angle+t)},r.scale=function(e,n,o,s){for(var a=0;a<e.parts.length;a++){var u=e.parts[a];i.scale(u.vertices,n,o,e.position),u.axes=l.fromVertices(u.vertices),e.isStatic||(u.area=i.area(u.vertices),r.setMass(u,e.density*u.area),i.translate(u.vertices,{x:-u.position.x,y:-u.position.y}),r.setInertia(u,i.inertia(u.vertices,u.mass)),i.translate(u.vertices,{x:u.position.x,y:u.position.y})),c.update(u.bounds,u.vertices,e.velocity)}if(e.circleRadius&&(n===o?e.circleRadius*=n:e.circleRadius=null),!e.isStatic){var h=t(e);e.area=h.area,r.setMass(e,h.mass),r.setInertia(e,h.inertia)}},r.update=function(e,t,n,r){var s=Math.pow(t*n*e.timeScale,2),a=1-e.frictionAir*n*e.timeScale,u=e.position.x-e.positionPrev.x,h=e.position.y-e.positionPrev.y;e.velocity.x=u*a*r+e.force.x/e.mass*s,e.velocity.y=h*a*r+e.force.y/e.mass*s,e.positionPrev.x=e.position.x,e.positionPrev.y=e.position.y,e.position.x+=e.velocity.x,e.position.y+=e.velocity.y,e.angularVelocity=(e.angle-e.anglePrev)*a*r+e.torque/e.inertia*s,e.anglePrev=e.angle,e.angle+=e.angularVelocity,e.speed=o.magnitude(e.velocity),e.angularSpeed=Math.abs(e.angularVelocity);for(var p=0;p<e.parts.length;p++){var d=e.parts[p];i.translate(d.vertices,e.velocity),p>0&&(d.position.x+=e.velocity.x,d.position.y+=e.velocity.y),0!==e.angularVelocity&&(i.rotate(d.vertices,e.angularVelocity,e.position),l.rotate(d.axes,e.angularVelocity),p>0&&o.rotateAbout(d.position,e.angularVelocity,e.position,d.position)),c.update(d.bounds,d.vertices,e.velocity)}},r.applyForce=function(e,t,n){e.force.x+=n.x,e.force.y+=n.y;var r=t.x-e.position.x,i=t.y-e.position.y;e.torque+=r*n.y-i*n.x};var t=function(e){for(var t={mass:0,area:0,inertia:0,centre:{x:0,y:0}},n=1===e.parts.length?0:1;n<e.parts.length;n++){var r=e.parts[n];t.mass+=r.mass,t.area+=r.area,t.inertia+=r.inertia,t.centre=o.add(t.centre,o.mult(r.position,r.mass!==1/0?r.mass:1))}return t.centre=o.div(t.centre,t.mass!==1/0?t.mass:e.parts.length),t}}()},{"../core/Common":14,"../core/Sleeping":20,"../geometry/Axes":23,"../geometry/Bounds":24,"../geometry/Vector":26,"../geometry/Vertices":27,"../render/Render":29}],2:[function(e,t,n){var r={};t.exports=r;var i=e("../core/Events"),o=e("../core/Common"),s=e("./Body");r.create=function(e){return o.extend({id:o.nextId(),type:"composite",parent:null,isModified:!1,bodies:[],constraints:[],composites:[],label:"Composite"},e)},r.setModified=function(e,t,n,i){if(e.isModified=t,n&&e.parent&&r.setModified(e.parent,t,n,i),i)for(var o=0;o<e.composites.length;o++){var s=e.composites[o];r.setModified(s,t,n,i)}},r.add=function(e,t){var n=[].concat(t);i.trigger(e,"beforeAdd",{object:t});for(var s=0;s<n.length;s++){var a=n[s];switch(a.type){case"body":if(a.parent!==a){o.log("Composite.add: skipped adding a compound body part (you must add its parent instead)","warn");break}r.addBody(e,a);break;case"constraint":r.addConstraint(e,a);break;case"composite":r.addComposite(e,a);break;case"mouseConstraint":r.addConstraint(e,a.constraint)}}return i.trigger(e,"afterAdd",{object:t}),e},r.remove=function(e,t,n){var o=[].concat(t);i.trigger(e,"beforeRemove",{object:t});for(var s=0;s<o.length;s++){var a=o[s];switch(a.type){case"body":r.removeBody(e,a,n);break;case"constraint":r.removeConstraint(e,a,n);break;case"composite":r.removeComposite(e,a,n);break;case"mouseConstraint":r.removeConstraint(e,a.constraint)}}return i.trigger(e,"afterRemove",{object:t}),e},r.addComposite=function(e,t){return e.composites.push(t),t.parent=e,r.setModified(e,!0,!0,!1),e},r.removeComposite=function(e,t,n){var i=o.indexOf(e.composites,t);if(-1!==i&&(r.removeCompositeAt(e,i),r.setModified(e,!0,!0,!1)),n)for(var s=0;s<e.composites.length;s++)r.removeComposite(e.composites[s],t,!0);return e},r.removeCompositeAt=function(e,t){return e.composites.splice(t,1),r.setModified(e,!0,!0,!1),e},r.addBody=function(e,t){return e.bodies.push(t),r.setModified(e,!0,!0,!1),e},r.removeBody=function(e,t,n){var i=o.indexOf(e.bodies,t);if(-1!==i&&(r.removeBodyAt(e,i),r.setModified(e,!0,!0,!1)),n)for(var s=0;s<e.composites.length;s++)r.removeBody(e.composites[s],t,!0);return e},r.removeBodyAt=function(e,t){return e.bodies.splice(t,1),r.setModified(e,!0,!0,!1),e},r.addConstraint=function(e,t){return e.constraints.push(t),r.setModified(e,!0,!0,!1),e},r.removeConstraint=function(e,t,n){var i=o.indexOf(e.constraints,t);if(-1!==i&&r.removeConstraintAt(e,i),n)for(var s=0;s<e.composites.length;s++)r.removeConstraint(e.composites[s],t,!0);return e},r.removeConstraintAt=function(e,t){return e.constraints.splice(t,1),r.setModified(e,!0,!0,!1),e},r.clear=function(e,t,n){if(n)for(var i=0;i<e.composites.length;i++)r.clear(e.composites[i],t,!0);return t?e.bodies=e.bodies.filter(function(e){return e.isStatic}):e.bodies.length=0,e.constraints.length=0,e.composites.length=0,r.setModified(e,!0,!0,!1),e},r.allBodies=function(e){for(var t=[].concat(e.bodies),n=0;n<e.composites.length;n++)t=t.concat(r.allBodies(e.composites[n]));return t},r.allConstraints=function(e){for(var t=[].concat(e.constraints),n=0;n<e.composites.length;n++)t=t.concat(r.allConstraints(e.composites[n]));return t},r.allComposites=function(e){for(var t=[].concat(e.composites),n=0;n<e.composites.length;n++)t=t.concat(r.allComposites(e.composites[n]));return t},r.get=function(e,t,n){var i,o;switch(n){case"body":i=r.allBodies(e);break;case"constraint":i=r.allConstraints(e);break;case"composite":i=r.allComposites(e).concat(e)}return i?0===(o=i.filter(function(e){return e.id.toString()===t.toString()})).length?null:o[0]:null},r.move=function(e,t,n){return r.remove(e,t),r.add(n,t),e},r.rebase=function(e){for(var t=r.allBodies(e).concat(r.allConstraints(e)).concat(r.allComposites(e)),n=0;n<t.length;n++)t[n].id=o.nextId();return r.setModified(e,!0,!0,!1),e},r.translate=function(e,t,n){for(var i=n?r.allBodies(e):e.bodies,o=0;o<i.length;o++)s.translate(i[o],t);return r.setModified(e,!0,!0,!1),e},r.rotate=function(e,t,n,i){for(var o=Math.cos(t),a=Math.sin(t),c=i?r.allBodies(e):e.bodies,l=0;l<c.length;l++){var u=c[l],h=u.position.x-n.x,p=u.position.y-n.y;s.setPosition(u,{x:n.x+(h*o-p*a),y:n.y+(h*a+p*o)}),s.rotate(u,t)}return r.setModified(e,!0,!0,!1),e},r.scale=function(e,t,n,i,o){for(var a=o?r.allBodies(e):e.bodies,c=0;c<a.length;c++){var l=a[c],u=l.position.x-i.x,h=l.position.y-i.y;s.setPosition(l,{x:i.x+u*t,y:i.y+h*n}),s.scale(l,t,n)}return r.setModified(e,!0,!0,!1),e}},{"../core/Common":14,"../core/Events":16,"./Body":1}],3:[function(e,t,n){var r={};t.exports=r;var i=e("./Composite"),o=(e("../constraint/Constraint"),e("../core/Common"));r.create=function(e){var t=i.create(),n={label:"World",gravity:{x:0,y:1,scale:.001},bounds:{min:{x:-1/0,y:-1/0},max:{x:1/0,y:1/0}}};return o.extend(t,n,e)}},{"../constraint/Constraint":12,"../core/Common":14,"./Composite":2}],4:[function(e,t,n){var r={};t.exports=r,r.create=function(e){return{id:r.id(e),vertex:e,normalImpulse:0,tangentImpulse:0}},r.id=function(e){return e.body.id+"_"+e.index}},{}],5:[function(e,t,n){var r={};t.exports=r;var i=e("./SAT"),o=e("./Pair"),s=e("../geometry/Bounds");r.collisions=function(e,t){for(var n=[],a=t.pairs.table,c=0;c<e.length;c++){var l=e[c][0],u=e[c][1];if((!l.isStatic&&!l.isSleeping||!u.isStatic&&!u.isSleeping)&&r.canCollide(l.collisionFilter,u.collisionFilter)&&s.overlaps(l.bounds,u.bounds))for(var h=l.parts.length>1?1:0;h<l.parts.length;h++)for(var p=l.parts[h],d=u.parts.length>1?1:0;d<u.parts.length;d++){var f=u.parts[d];if(p===l&&f===u||s.overlaps(p.bounds,f.bounds)){var g,y=a[o.id(p,f)];g=y&&y.isActive?y.collision:null;var m=i.collides(p,f,g);m.collided&&n.push(m)}}}return n},r.canCollide=function(e,t){return e.group===t.group&&0!==e.group?e.group>0:0!=(e.mask&t.category)&&0!=(t.mask&e.category)}},{"../geometry/Bounds":24,"./Pair":7,"./SAT":11}],6:[function(e,t,n){var r={};t.exports=r;var i=e("./Pair"),o=e("./Detector"),s=e("../core/Common");!function(){r.create=function(e){var t={controller:r,detector:o.collisions,buckets:{},pairs:{},pairsList:[],bucketWidth:48,bucketHeight:48};return s.extend(t,e)},r.update=function(n,r,i,o){var s,p,d,f,g,y=i.world,m=n.buckets,v=!1;for(s=0;s<r.length;s++){var S=r[s];if((!S.isSleeping||o)&&!(S.bounds.max.x<y.bounds.min.x||S.bounds.min.x>y.bounds.max.x||S.bounds.max.y<y.bounds.min.y||S.bounds.min.y>y.bounds.max.y)){var x=t(n,S);if(!S.region||x.id!==S.region.id||o){S.region&&!o||(S.region=x);var b=e(x,S.region);for(p=b.startCol;p<=b.endCol;p++)for(d=b.startRow;d<=b.endRow;d++){f=m[g=a(p,d)];var _=p>=x.startCol&&p<=x.endCol&&d>=x.startRow&&d<=x.endRow,P=p>=S.region.startCol&&p<=S.region.endCol&&d>=S.region.startRow&&d<=S.region.endRow;!_&&P&&P&&f&&u(n,f,S),(S.region===x||_&&!P||o)&&(f||(f=c(m,g)),l(n,f,S))}S.region=x,v=!0}}}v&&(n.pairsList=h(n))},r.clear=function(e){e.buckets={},e.pairs={},e.pairsList=[]};var e=function(e,t){var r=Math.min(e.startCol,t.startCol),i=Math.max(e.endCol,t.endCol),o=Math.min(e.startRow,t.startRow),s=Math.max(e.endRow,t.endRow);return n(r,i,o,s)},t=function(e,t){var r=t.bounds,i=Math.floor(r.min.x/e.bucketWidth),o=Math.floor(r.max.x/e.bucketWidth),s=Math.floor(r.min.y/e.bucketHeight),a=Math.floor(r.max.y/e.bucketHeight);return n(i,o,s,a)},n=function(e,t,n,r){return{id:e+","+t+","+n+","+r,startCol:e,endCol:t,startRow:n,endRow:r}},a=function(e,t){return e+","+t},c=function(e,t){return e[t]=[]},l=function(e,t,n){for(var r=0;r<t.length;r++){var o=t[r];if(!(n.id===o.id||n.isStatic&&o.isStatic)){var s=i.id(n,o),a=e.pairs[s];a?a[2]+=1:e.pairs[s]=[n,o,1]}}t.push(n)},u=function(e,t,n){t.splice(s.indexOf(t,n),1);for(var r=0;r<t.length;r++){var o=t[r],a=i.id(n,o),c=e.pairs[a];c&&(c[2]-=1)}},h=function(e){var t,n,r=[];t=s.keys(e.pairs);for(var i=0;i<t.length;i++)(n=e.pairs[t[i]])[2]>0?r.push(n):delete e.pairs[t[i]];return r}}()},{"../core/Common":14,"./Detector":5,"./Pair":7}],7:[function(e,t,n){var r={};t.exports=r;var i=e("./Contact");r.create=function(e,t){var n=e.bodyA,i=e.bodyB,o=e.parentA,s=e.parentB,a={id:r.id(n,i),bodyA:n,bodyB:i,contacts:{},activeContacts:[],separation:0,isActive:!0,isSensor:n.isSensor||i.isSensor,timeCreated:t,timeUpdated:t,inverseMass:o.inverseMass+s.inverseMass,friction:Math.min(o.friction,s.friction),frictionStatic:Math.max(o.frictionStatic,s.frictionStatic),restitution:Math.max(o.restitution,s.restitution),slop:Math.max(o.slop,s.slop)};return r.update(a,e,t),a},r.update=function(e,t,n){var o=e.contacts,s=t.supports,a=e.activeContacts,c=t.parentA,l=t.parentB;if(e.collision=t,e.inverseMass=c.inverseMass+l.inverseMass,e.friction=Math.min(c.friction,l.friction),e.frictionStatic=Math.max(c.frictionStatic,l.frictionStatic),e.restitution=Math.max(c.restitution,l.restitution),e.slop=Math.max(c.slop,l.slop),a.length=0,t.collided){for(var u=0;u<s.length;u++){var h=s[u],p=i.id(h),d=o[p];d?a.push(d):a.push(o[p]=i.create(h))}e.separation=t.depth,r.setActive(e,!0,n)}else!0===e.isActive&&r.setActive(e,!1,n)},r.setActive=function(e,t,n){t?(e.isActive=!0,e.timeUpdated=n):(e.isActive=!1,e.activeContacts.length=0)},r.id=function(e,t){return e.id<t.id?e.id+"_"+t.id:t.id+"_"+e.id}},{"./Contact":4}],8:[function(e,t,n){var r={};t.exports=r;var i=e("./Pair"),o=e("../core/Common");r.create=function(e){return o.extend({table:{},list:[],collisionStart:[],collisionActive:[],collisionEnd:[]},e)},r.update=function(e,t,n){var r,s,a,c,l=e.list,u=e.table,h=e.collisionStart,p=e.collisionEnd,d=e.collisionActive,f=[];for(h.length=0,p.length=0,d.length=0,c=0;c<t.length;c++)(r=t[c]).collided&&(s=i.id(r.bodyA,r.bodyB),f.push(s),(a=u[s])?(a.isActive?d.push(a):h.push(a),i.update(a,r,n)):(a=i.create(r,n),u[s]=a,h.push(a),l.push(a)));for(c=0;c<l.length;c++)(a=l[c]).isActive&&-1===o.indexOf(f,a.id)&&(i.setActive(a,!1,n),p.push(a))},r.removeOld=function(e,t){var n,r,i,o,s=e.list,a=e.table,c=[];for(o=0;o<s.length;o++)(r=(n=s[o]).collision).bodyA.isSleeping||r.bodyB.isSleeping?n.timeUpdated=t:t-n.timeUpdated>1e3&&c.push(o);for(o=0;o<c.length;o++)delete a[(n=s[i=c[o]-o]).id],s.splice(i,1)},r.clear=function(e){return e.table={},e.list.length=0,e.collisionStart.length=0,e.collisionActive.length=0,e.collisionEnd.length=0,e}},{"../core/Common":14,"./Pair":7}],9:[function(e,t,n){var r={};t.exports=r;var i=e("../geometry/Vector"),o=e("./SAT"),s=e("../geometry/Bounds"),a=e("../factory/Bodies"),c=e("../geometry/Vertices");r.ray=function(e,t,n,r){r=r||1e-100;for(var c=i.angle(t,n),l=i.magnitude(i.sub(t,n)),u=.5*(n.x+t.x),h=.5*(n.y+t.y),p=a.rectangle(u,h,l,r,{angle:c}),d=[],f=0;f<e.length;f++){var g=e[f];if(s.overlaps(g.bounds,p.bounds))for(var y=1===g.parts.length?0:1;y<g.parts.length;y++){var m=g.parts[y];if(s.overlaps(m.bounds,p.bounds)){var v=o.collides(m,p);if(v.collided){v.body=v.bodyA=v.bodyB=g,d.push(v);break}}}}return d},r.region=function(e,t,n){for(var r=[],i=0;i<e.length;i++){var o=e[i],a=s.overlaps(o.bounds,t);(a&&!n||!a&&n)&&r.push(o)}return r},r.point=function(e,t){for(var n=[],r=0;r<e.length;r++){var i=e[r];if(s.contains(i.bounds,t))for(var o=1===i.parts.length?0:1;o<i.parts.length;o++){var a=i.parts[o];if(s.contains(a.bounds,t)&&c.contains(a.vertices,t)){n.push(i);break}}}return n}},{"../factory/Bodies":21,"../geometry/Bounds":24,"../geometry/Vector":26,"../geometry/Vertices":27,"./SAT":11}],10:[function(e,t,n){var r={};t.exports=r;var i=e("../geometry/Vertices"),o=e("../geometry/Vector"),s=e("../core/Common"),a=e("../geometry/Bounds");r._restingThresh=4,r._restingThreshTangent=6,r._positionDampen=.9,r._positionWarming=.8,r._frictionNormalMultiplier=5,r.preSolvePosition=function(e){var t,n,r;for(t=0;t<e.length;t++)(n=e[t]).isActive&&(r=n.activeContacts.length,n.collision.parentA.totalContacts+=r,n.collision.parentB.totalContacts+=r)},r.solvePosition=function(e,t){var n,i,s,a,c,l,u,h,p,d=o._temp[0],f=o._temp[1],g=o._temp[2],y=o._temp[3];for(n=0;n<e.length;n++)(i=e[n]).isActive&&!i.isSensor&&(a=(s=i.collision).parentA,c=s.parentB,l=s.normal,u=o.sub(o.add(c.positionImpulse,c.position,d),o.add(a.positionImpulse,o.sub(c.position,s.penetration,f),g),y),i.separation=o.dot(l,u));for(n=0;n<e.length;n++)!(i=e[n]).isActive||i.isSensor||i.separation<0||(a=(s=i.collision).parentA,c=s.parentB,l=s.normal,p=(i.separation-i.slop)*t,(a.isStatic||c.isStatic)&&(p*=2),a.isStatic||a.isSleeping||(h=r._positionDampen/a.totalContacts,a.positionImpulse.x+=l.x*p*h,a.positionImpulse.y+=l.y*p*h),c.isStatic||c.isSleeping||(h=r._positionDampen/c.totalContacts,c.positionImpulse.x-=l.x*p*h,c.positionImpulse.y-=l.y*p*h))},r.postSolvePosition=function(e){for(var t=0;t<e.length;t++){var n=e[t];if(n.totalContacts=0,0!==n.positionImpulse.x||0!==n.positionImpulse.y){for(var s=0;s<n.parts.length;s++){var c=n.parts[s];i.translate(c.vertices,n.positionImpulse),a.update(c.bounds,c.vertices,n.velocity),c.position.x+=n.positionImpulse.x,c.position.y+=n.positionImpulse.y}n.positionPrev.x+=n.positionImpulse.x,n.positionPrev.y+=n.positionImpulse.y,o.dot(n.positionImpulse,n.velocity)<0?(n.positionImpulse.x=0,n.positionImpulse.y=0):(n.positionImpulse.x*=r._positionWarming,n.positionImpulse.y*=r._positionWarming)}}},r.preSolveVelocity=function(e){var t,n,r,i,s,a,c,l,u,h,p,d,f,g,y=o._temp[0],m=o._temp[1];for(t=0;t<e.length;t++)if((r=e[t]).isActive&&!r.isSensor)for(i=r.activeContacts,a=(s=r.collision).parentA,c=s.parentB,l=s.normal,u=s.tangent,n=0;n<i.length;n++)p=(h=i[n]).vertex,d=h.normalImpulse,f=h.tangentImpulse,0===d&&0===f||(y.x=l.x*d+u.x*f,y.y=l.y*d+u.y*f,a.isStatic||a.isSleeping||(g=o.sub(p,a.position,m),a.positionPrev.x+=y.x*a.inverseMass,a.positionPrev.y+=y.y*a.inverseMass,a.anglePrev+=o.cross(g,y)*a.inverseInertia),c.isStatic||c.isSleeping||(g=o.sub(p,c.position,m),c.positionPrev.x-=y.x*c.inverseMass,c.positionPrev.y-=y.y*c.inverseMass,c.anglePrev-=o.cross(g,y)*c.inverseInertia))},r.solveVelocity=function(e,t){for(var n=t*t,i=o._temp[0],a=o._temp[1],c=o._temp[2],l=o._temp[3],u=o._temp[4],h=o._temp[5],p=0;p<e.length;p++){var d=e[p];if(d.isActive&&!d.isSensor){var f=d.collision,g=f.parentA,y=f.parentB,m=f.normal,v=f.tangent,S=d.activeContacts,x=1/S.length;g.velocity.x=g.position.x-g.positionPrev.x,g.velocity.y=g.position.y-g.positionPrev.y,y.velocity.x=y.position.x-y.positionPrev.x,y.velocity.y=y.position.y-y.positionPrev.y,g.angularVelocity=g.angle-g.anglePrev,y.angularVelocity=y.angle-y.anglePrev;for(var b=0;b<S.length;b++){var _=S[b],P=_.vertex,C=o.sub(P,g.position,a),w=o.sub(P,y.position,c),A=o.add(g.velocity,o.mult(o.perp(C),g.angularVelocity),l),T=o.add(y.velocity,o.mult(o.perp(w),y.angularVelocity),u),V=o.sub(A,T,h),E=o.dot(m,V),G=o.dot(v,V),L=Math.abs(G),O=s.sign(G),k=(1+d.restitution)*E,I=s.clamp(d.separation+E,0,1)*r._frictionNormalMultiplier,R=G,N=1/0;L>d.friction*d.frictionStatic*I*n&&(N=L,R=s.clamp(d.friction*O*n,-N,N));var M=o.cross(C,m),B=o.cross(w,m),H=x/(g.inverseMass+y.inverseMass+g.inverseInertia*M*M+y.inverseInertia*B*B);if(k*=H,R*=H,E<0&&E*E>r._restingThresh*n)_.normalImpulse=0;else{var j=_.normalImpulse;_.normalImpulse=Math.min(_.normalImpulse+k,0),k=_.normalImpulse-j}if(G*G>r._restingThreshTangent*n)_.tangentImpulse=0;else{var D=_.tangentImpulse;_.tangentImpulse=s.clamp(_.tangentImpulse+R,-N,N),R=_.tangentImpulse-D}i.x=m.x*k+v.x*R,i.y=m.y*k+v.y*R,g.isStatic||g.isSleeping||(g.positionPrev.x+=i.x*g.inverseMass,g.positionPrev.y+=i.y*g.inverseMass,g.anglePrev+=o.cross(C,i)*g.inverseInertia),y.isStatic||y.isSleeping||(y.positionPrev.x-=i.x*y.inverseMass,y.positionPrev.y-=i.y*y.inverseMass,y.anglePrev-=o.cross(w,i)*y.inverseInertia)}}}}},{"../core/Common":14,"../geometry/Bounds":24,"../geometry/Vector":26,"../geometry/Vertices":27}],11:[function(e,t,n){var r={};t.exports=r;var i=e("../geometry/Vertices"),o=e("../geometry/Vector");!function(){r.collides=function(t,r,s){var a,c,l,u,h=s,p=!1;if(h){var d=t.parent,f=r.parent,g=d.speed*d.speed+d.angularSpeed*d.angularSpeed+f.speed*f.speed+f.angularSpeed*f.angularSpeed;p=h&&h.collided&&g<.2,u=h}else u={collided:!1,bodyA:t,bodyB:r};if(h&&p){var y=u.axisBody,m=y===t?r:t,v=[y.axes[h.axisNumber]];if(l=e(y.vertices,m.vertices,v),u.reused=!0,l.overlap<=0)return u.collided=!1,u}else{if((a=e(t.vertices,r.vertices,t.axes)).overlap<=0)return u.collided=!1,u;if((c=e(r.vertices,t.vertices,r.axes)).overlap<=0)return u.collided=!1,u;a.overlap<c.overlap?(l=a,u.axisBody=t):(l=c,u.axisBody=r),u.axisNumber=l.axisNumber}u.bodyA=t.id<r.id?t:r,u.bodyB=t.id<r.id?r:t,u.collided=!0,u.normal=l.axis,u.depth=l.overlap,u.parentA=u.bodyA.parent,u.parentB=u.bodyB.parent,t=u.bodyA,r=u.bodyB,o.dot(u.normal,o.sub(r.position,t.position))>0&&(u.normal=o.neg(u.normal)),u.tangent=o.perp(u.normal),u.penetration={x:u.normal.x*u.depth,y:u.normal.y*u.depth};var S=n(t,r,u.normal),x=u.supports||[];if(x.length=0,i.contains(t.vertices,S[0])&&x.push(S[0]),i.contains(t.vertices,S[1])&&x.push(S[1]),x.length<2){var b=n(r,t,o.neg(u.normal));i.contains(r.vertices,b[0])&&x.push(b[0]),x.length<2&&i.contains(r.vertices,b[1])&&x.push(b[1])}return x.length<1&&(x=[S[0]]),u.supports=x,u};var e=function(e,n,r){for(var i,s,a=o._temp[0],c=o._temp[1],l={overlap:Number.MAX_VALUE},u=0;u<r.length;u++){if(s=r[u],t(a,e,s),t(c,n,s),(i=Math.min(a.max-c.min,c.max-a.min))<=0)return l.overlap=i,l;i<l.overlap&&(l.overlap=i,l.axis=s,l.axisNumber=u)}return l},t=function(e,t,n){for(var r=o.dot(t[0],n),i=r,s=1;s<t.length;s+=1){var a=o.dot(t[s],n);a>i?i=a:a<r&&(r=a)}e.min=r,e.max=i},n=function(e,t,n){for(var r,i,s,a,c=Number.MAX_VALUE,l=o._temp[0],u=t.vertices,h=e.position,p=0;p<u.length;p++)i=u[p],l.x=i.x-h.x,l.y=i.y-h.y,(r=-o.dot(n,l))<c&&(c=r,s=i);return i=u[s.index-1>=0?s.index-1:u.length-1],l.x=i.x-h.x,l.y=i.y-h.y,c=-o.dot(n,l),a=i,i=u[(s.index+1)%u.length],l.x=i.x-h.x,l.y=i.y-h.y,(r=-o.dot(n,l))<c&&(a=i),[s,a]}}()},{"../geometry/Vector":26,"../geometry/Vertices":27}],12:[function(e,t,n){var r={};t.exports=r;var i=e("../geometry/Vertices"),o=e("../geometry/Vector"),s=e("../core/Sleeping"),a=e("../geometry/Bounds"),c=e("../geometry/Axes"),l=e("../core/Common");r.create=function(e){var t=e;t.bodyA&&!t.pointA&&(t.pointA={x:0,y:0}),t.bodyB&&!t.pointB&&(t.pointB={x:0,y:0});var n=t.bodyA?o.add(t.bodyA.position,t.pointA):t.pointA,r=t.bodyB?o.add(t.bodyB.position,t.pointB):t.pointB,i=o.magnitude(o.sub(n,r));return t.length=t.length||i||1e-6,t.render=l.extend({visible:!0,lineWidth:2,strokeStyle:"#666"},t.render),t.id=t.id||l.nextId(),t.label=t.label||"Constraint",t.type="constraint",t.stiffness=t.stiffness||1,t.angularStiffness=t.angularStiffness||0,t.angleA=t.bodyA?t.bodyA.angle:t.angleA,t.angleB=t.bodyB?t.bodyB.angle:t.angleB,t},r.solveAll=function(e,t){for(var n=0;n<e.length;n++)r.solve(e[n],t)},r.solve=function(e,t){var n=e.bodyA,r=e.bodyB,i=e.pointA,s=e.pointB;n&&!n.isStatic&&(e.pointA=o.rotate(i,n.angle-e.angleA),e.angleA=n.angle),r&&!r.isStatic&&(e.pointB=o.rotate(s,r.angle-e.angleB),e.angleB=r.angle);var a=i,c=s;if(n&&(a=o.add(n.position,i)),r&&(c=o.add(r.position,s)),a&&c){var l=o.sub(a,c),u=o.magnitude(l);0===u&&(u=1e-6);var h=(u-e.length)/u,p=o.div(l,u),d=o.mult(l,.5*h*e.stiffness*t*t);if(!(Math.abs(1-u/e.length)<.001*t)){var f,g,y,m,v,S,x,b;n&&!n.isStatic?(y={x:a.x-n.position.x+d.x,y:a.y-n.position.y+d.y},n.velocity.x=n.position.x-n.positionPrev.x,n.velocity.y=n.position.y-n.positionPrev.y,n.angularVelocity=n.angle-n.anglePrev,f=o.add(n.velocity,o.mult(o.perp(y),n.angularVelocity)),v=o.dot(y,p),x=n.inverseMass+n.inverseInertia*v*v):(f={x:0,y:0},x=n?n.inverseMass:0),r&&!r.isStatic?(m={x:c.x-r.position.x-d.x,y:c.y-r.position.y-d.y},r.velocity.x=r.position.x-r.positionPrev.x,r.velocity.y=r.position.y-r.positionPrev.y,r.angularVelocity=r.angle-r.anglePrev,g=o.add(r.velocity,o.mult(o.perp(m),r.angularVelocity)),S=o.dot(m,p),b=r.inverseMass+r.inverseInertia*S*S):(g={x:0,y:0},b=r?r.inverseMass:0);var _=o.sub(g,f),P=o.dot(p,_)/(x+b);P>0&&(P=0);var C,w={x:p.x*P,y:p.y*P};n&&!n.isStatic&&(C=o.cross(y,w)*n.inverseInertia*(1-e.angularStiffness),n.constraintImpulse.x-=d.x,n.constraintImpulse.y-=d.y,n.constraintImpulse.angle+=C,n.position.x-=d.x,n.position.y-=d.y,n.angle+=C),r&&!r.isStatic&&(C=o.cross(m,w)*r.inverseInertia*(1-e.angularStiffness),r.constraintImpulse.x+=d.x,r.constraintImpulse.y+=d.y,r.constraintImpulse.angle-=C,r.position.x+=d.x,r.position.y+=d.y,r.angle-=C)}}},r.postSolveAll=function(e){for(var t=0;t<e.length;t++){var n=e[t],r=n.constraintImpulse;if(0!==r.x||0!==r.y||0!==r.angle){s.set(n,!1);for(var l=0;l<n.parts.length;l++){var u=n.parts[l];i.translate(u.vertices,r),l>0&&(u.position.x+=r.x,u.position.y+=r.y),0!==r.angle&&(i.rotate(u.vertices,r.angle,n.position),c.rotate(u.axes,r.angle),l>0&&o.rotateAbout(u.position,r.angle,n.position,u.position)),a.update(u.bounds,u.vertices,n.velocity)}r.angle=0,r.x=0,r.y=0}}}},{"../core/Common":14,"../core/Sleeping":20,"../geometry/Axes":23,"../geometry/Bounds":24,"../geometry/Vector":26,"../geometry/Vertices":27}],13:[function(e,t,n){var r={};t.exports=r;var i=e("../geometry/Vertices"),o=e("../core/Sleeping"),s=e("../core/Mouse"),a=e("../core/Events"),c=e("../collision/Detector"),l=e("./Constraint"),u=e("../body/Composite"),h=e("../core/Common"),p=e("../geometry/Bounds");!function(){r.create=function(t,n){var i=(t?t.mouse:null)||(n?n.mouse:null);i||(t&&t.render&&t.render.canvas?i=s.create(t.render.canvas):n&&n.element?i=s.create(n.element):(i=s.create(),h.log("MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected","warn")));var o={type:"mouseConstraint",mouse:i,element:null,body:null,constraint:l.create({label:"Mouse Constraint",pointA:i.position,pointB:{x:0,y:0},length:.01,stiffness:.1,angularStiffness:1,render:{strokeStyle:"#90EE90",lineWidth:3}}),collisionFilter:{category:1,mask:4294967295,group:0}},c=h.extend(o,n);return a.on(t,"tick",function(){var n=u.allBodies(t.world);r.update(c,n),e(c)}),c},r.update=function(e,t){var n=e.mouse,r=e.constraint,s=e.body;if(0===n.button){if(r.bodyB)o.set(r.bodyB,!1),r.pointA=n.position;else for(var l=0;l<t.length;l++)if(s=t[l],p.contains(s.bounds,n.position)&&c.canCollide(s.collisionFilter,e.collisionFilter))for(var u=s.parts.length>1?1:0;u<s.parts.length;u++){var h=s.parts[u];if(i.contains(h.vertices,n.position)){r.pointA=n.position,r.bodyB=e.body=s,r.pointB={x:n.position.x-s.position.x,y:n.position.y-s.position.y},r.angleB=s.angle,o.set(s,!1),a.trigger(e,"startdrag",{mouse:n,body:s});break}}}else r.bodyB=e.body=null,r.pointB=null,s&&a.trigger(e,"enddrag",{mouse:n,body:s})};var e=function(e){var t=e.mouse,n=t.sourceEvents;n.mousemove&&a.trigger(e,"mousemove",{mouse:t}),n.mousedown&&a.trigger(e,"mousedown",{mouse:t}),n.mouseup&&a.trigger(e,"mouseup",{mouse:t}),s.clearSourceEvents(t)}}()},{"../body/Composite":2,"../collision/Detector":5,"../core/Common":14,"../core/Events":16,"../core/Mouse":18,"../core/Sleeping":20,"../geometry/Bounds":24,"../geometry/Vertices":27,"./Constraint":12}],14:[function(e,t,n){var r={};t.exports=r,function(){r._nextId=0,r._seed=0,r.extend=function(e,t){var n,i,o;"boolean"==typeof t?(n=2,o=t):(n=1,o=!0),i=Array.prototype.slice.call(arguments,n);for(var s=0;s<i.length;s++){var a=i[s];if(a)for(var c in a)o&&a[c]&&a[c].constructor===Object?e[c]&&e[c].constructor!==Object?e[c]=a[c]:(e[c]=e[c]||{},r.extend(e[c],o,a[c])):e[c]=a[c]}return e},r.clone=function(e,t){return r.extend({},t,e)},r.keys=function(e){if(Object.keys)return Object.keys(e);var t=[];for(var n in e)t.push(n);return t},r.values=function(e){var t=[];if(Object.keys){for(var n=Object.keys(e),r=0;r<n.length;r++)t.push(e[n[r]]);return t}for(var i in e)t.push(e[i]);return t},r.shadeColor=function(e,t){var n=parseInt(e.slice(1),16),r=Math.round(2.55*t),i=(n>>16)+r,o=(n>>8&255)+r,s=(255&n)+r;return"#"+(16777216+65536*(i<255?i<1?0:i:255)+256*(o<255?o<1?0:o:255)+(s<255?s<1?0:s:255)).toString(16).slice(1)},r.shuffle=function(e){for(var t=e.length-1;t>0;t--){var n=Math.floor(r.random()*(t+1)),i=e[t];e[t]=e[n],e[n]=i}return e},r.choose=function(e){return e[Math.floor(r.random()*e.length)]},r.isElement=function(e){try{return e instanceof HTMLElement}catch(t){return"object"==typeof e&&1===e.nodeType&&"object"==typeof e.style&&"object"==typeof e.ownerDocument}},r.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)},r.clamp=function(e,t,n){return e<t?t:e>n?n:e},r.sign=function(e){return e<0?-1:1},r.now=function(){var e=window.performance||{};return e.now=e.now||e.webkitNow||e.msNow||e.oNow||e.mozNow||function(){return+new Date},e.now()},r.random=function(t,n){return n=void 0!==n?n:1,(t=void 0!==t?t:0)+e()*(n-t)},r.colorToNumber=function(e){return 3==(e=e.replace("#","")).length&&(e=e.charAt(0)+e.charAt(0)+e.charAt(1)+e.charAt(1)+e.charAt(2)+e.charAt(2)),parseInt(e,16)},r.log=function(e,t){if(console&&console.log&&console.warn)switch(t){case"warn":console.warn("Matter.js:",e);break;case"error":console.log("Matter.js:",e)}},r.nextId=function(){return r._nextId++},r.indexOf=function(e,t){if(e.indexOf)return e.indexOf(t);for(var n=0;n<e.length;n++)if(e[n]===t)return n;return-1};var e=function(){return r._seed=(9301*r._seed+49297)%233280,r._seed/233280}}()},{}],15:[function(e,t,n){var r={};t.exports=r;var i=e("../body/World"),o=e("./Sleeping"),s=e("../collision/Resolver"),a=e("../render/Render"),c=e("../collision/Pairs"),l=(e("./Metrics"),e("../collision/Grid")),u=e("./Events"),h=e("../body/Composite"),p=e("../constraint/Constraint"),d=e("./Common"),f=e("../body/Body");!function(){r.create=function(e,t){t=(t=d.isElement(e)?t:e)||{},((e=d.isElement(e)?e:null)||t.render)&&d.log("Engine.create: engine.render is deprecated (see docs)","warn");var n={positionIterations:6,velocityIterations:4,constraintIterations:2,enableSleeping:!1,events:[],timing:{timestamp:0,timeScale:1},broadphase:{controller:l}},r=d.extend(n,t);if(e||r.render){var o={element:e,controller:a};r.render=d.extend(o,r.render)}return r.render&&r.render.controller&&(r.render=r.render.controller.create(r.render)),r.render&&(r.render.engine=r),r.world=t.world||i.create(r.world),r.pairs=c.create(),r.broadphase=r.broadphase.controller.create(r.broadphase),r.metrics=r.metrics||{extended:!1},r},r.update=function(r,i,a){i=i||1e3/60,a=a||1;var l,d=r.world,f=r.timing,g=r.broadphase,y=[];f.timestamp+=i*f.timeScale;var m={timestamp:f.timestamp};u.trigger(r,"beforeUpdate",m);var v=h.allBodies(d),S=h.allConstraints(d);for(r.enableSleeping&&o.update(v,f.timeScale),t(v,d.gravity),n(v,i,f.timeScale,a,d.bounds),l=0;l<r.constraintIterations;l++)p.solveAll(S,f.timeScale);p.postSolveAll(v),g.controller?(d.isModified&&g.controller.clear(g),g.controller.update(g,v,r,d.isModified),y=g.pairsList):y=v,d.isModified&&h.setModified(d,!1,!1,!0);var x=g.detector(y,r),b=r.pairs,_=f.timestamp;for(c.update(b,x,_),c.removeOld(b,_),r.enableSleeping&&o.afterCollisions(b.list,f.timeScale),b.collisionStart.length>0&&u.trigger(r,"collisionStart",{pairs:b.collisionStart}),s.preSolvePosition(b.list),l=0;l<r.positionIterations;l++)s.solvePosition(b.list,f.timeScale);for(s.postSolvePosition(v),s.preSolveVelocity(b.list),l=0;l<r.velocityIterations;l++)s.solveVelocity(b.list,f.timeScale);return b.collisionActive.length>0&&u.trigger(r,"collisionActive",{pairs:b.collisionActive}),b.collisionEnd.length>0&&u.trigger(r,"collisionEnd",{pairs:b.collisionEnd}),e(v),u.trigger(r,"afterUpdate",m),r},r.merge=function(e,t){if(d.extend(e,t),t.world){e.world=t.world,r.clear(e);for(var n=h.allBodies(e.world),i=0;i<n.length;i++){var s=n[i];o.set(s,!1),s.id=d.nextId()}}},r.clear=function(e){var t=e.world;c.clear(e.pairs);var n=e.broadphase;if(n.controller){var r=h.allBodies(t);n.controller.clear(n),n.controller.update(n,r,e,!0)}};var e=function(e){for(var t=0;t<e.length;t++){var n=e[t];n.force.x=0,n.force.y=0,n.torque=0}},t=function(e,t){var n=void 0!==t.scale?t.scale:.001;if((0!==t.x||0!==t.y)&&0!==n)for(var r=0;r<e.length;r++){var i=e[r];i.isStatic||i.isSleeping||(i.force.y+=i.mass*t.y*n,i.force.x+=i.mass*t.x*n)}},n=function(e,t,n,r,i){for(var o=0;o<e.length;o++){var s=e[o];s.isStatic||s.isSleeping||f.update(s,t,n,r)}}}()},{"../body/Body":1,"../body/Composite":2,"../body/World":3,"../collision/Grid":6,"../collision/Pairs":8,"../collision/Resolver":10,"../constraint/Constraint":12,"../render/Render":29,"./Common":14,"./Events":16,"./Metrics":17,"./Sleeping":20}],16:[function(e,t,n){var r={};t.exports=r;var i=e("./Common");r.on=function(e,t,n){for(var r,i=t.split(" "),o=0;o<i.length;o++)r=i[o],e.events=e.events||{},e.events[r]=e.events[r]||[],e.events[r].push(n);return n},r.off=function(e,t,n){if(t){"function"==typeof t&&(n=t,t=i.keys(e.events).join(" "));for(var r=t.split(" "),o=0;o<r.length;o++){var s=e.events[r[o]],a=[];if(n&&s)for(var c=0;c<s.length;c++)s[c]!==n&&a.push(s[c]);e.events[r[o]]=a}}else e.events={}},r.trigger=function(e,t,n){var r,o,s,a;if(e.events){n||(n={}),r=t.split(" ");for(var c=0;c<r.length;c++)if(o=r[c],s=e.events[o]){(a=i.clone(n,!1)).name=o,a.source=e;for(var l=0;l<s.length;l++)s[l].apply(e,[a])}}}},{"./Common":14}],17:[function(e,t,n){},{"../body/Composite":2,"./Common":14}],18:[function(e,t,n){var r={};t.exports=r;var i=e("../core/Common");!function(){r.create=function(t){var n={};return t||i.log("Mouse.create: element was undefined, defaulting to document.body","warn"),n.element=t||document.body,n.absolute={x:0,y:0},n.position={x:0,y:0},n.mousedownPosition={x:0,y:0},n.mouseupPosition={x:0,y:0},n.offset={x:0,y:0},n.scale={x:1,y:1},n.wheelDelta=0,n.button=-1,n.pixelRatio=n.element.getAttribute("data-pixel-ratio")||1,n.sourceEvents={mousemove:null,mousedown:null,mouseup:null,mousewheel:null},n.mousemove=function(t){var r=e(t,n.element,n.pixelRatio);t.changedTouches&&(n.button=0,t.preventDefault()),n.absolute.x=r.x,n.absolute.y=r.y,n.position.x=n.absolute.x*n.scale.x+n.offset.x,n.position.y=n.absolute.y*n.scale.y+n.offset.y,n.sourceEvents.mousemove=t},n.mousedown=function(t){var r=e(t,n.element,n.pixelRatio);t.changedTouches?(n.button=0,t.preventDefault()):n.button=t.button,n.absolute.x=r.x,n.absolute.y=r.y,n.position.x=n.absolute.x*n.scale.x+n.offset.x,n.position.y=n.absolute.y*n.scale.y+n.offset.y,n.mousedownPosition.x=n.position.x,n.mousedownPosition.y=n.position.y,n.sourceEvents.mousedown=t},n.mouseup=function(t){var r=e(t,n.element,n.pixelRatio);t.changedTouches&&t.preventDefault(),n.button=-1,n.absolute.x=r.x,n.absolute.y=r.y,n.position.x=n.absolute.x*n.scale.x+n.offset.x,n.position.y=n.absolute.y*n.scale.y+n.offset.y,n.mouseupPosition.x=n.position.x,n.mouseupPosition.y=n.position.y,n.sourceEvents.mouseup=t},n.mousewheel=function(e){n.wheelDelta=Math.max(-1,Math.min(1,e.wheelDelta||-e.detail)),e.preventDefault()},r.setElement(n,n.element),n},r.setElement=function(e,t){e.element=t,t.addEventListener("mousemove",e.mousemove),t.addEventListener("mousedown",e.mousedown),t.addEventListener("mouseup",e.mouseup),t.addEventListener("mousewheel",e.mousewheel),t.addEventListener("DOMMouseScroll",e.mousewheel),t.addEventListener("touchmove",e.mousemove),t.addEventListener("touchstart",e.mousedown),t.addEventListener("touchend",e.mouseup)},r.clearSourceEvents=function(e){e.sourceEvents.mousemove=null,e.sourceEvents.mousedown=null,e.sourceEvents.mouseup=null,e.sourceEvents.mousewheel=null,e.wheelDelta=0},r.setOffset=function(e,t){e.offset.x=t.x,e.offset.y=t.y,e.position.x=e.absolute.x*e.scale.x+e.offset.x,e.position.y=e.absolute.y*e.scale.y+e.offset.y},r.setScale=function(e,t){e.scale.x=t.x,e.scale.y=t.y,e.position.x=e.absolute.x*e.scale.x+e.offset.x,e.position.y=e.absolute.y*e.scale.y+e.offset.y};var e=function(e,t,n){var r,i,o=t.getBoundingClientRect(),s=document.documentElement||document.body.parentNode||document.body,a=void 0!==window.pageXOffset?window.pageXOffset:s.scrollLeft,c=void 0!==window.pageYOffset?window.pageYOffset:s.scrollTop,l=e.changedTouches;return l?(r=l[0].pageX-o.left-a,i=l[0].pageY-o.top-c):(r=e.pageX-o.left-a,i=e.pageY-o.top-c),{x:r/(t.clientWidth/t.width*n),y:i/(t.clientHeight/t.height*n)}}}()},{"../core/Common":14}],19:[function(e,t,n){var r={};t.exports=r;var i,o,s=e("./Events"),a=e("./Engine"),c=e("./Common");"undefined"!=typeof window&&(i=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||function(e){window.setTimeout(function(){e(c.now())},1e3/60)},o=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),r.create=function(e){var t=c.extend({fps:60,correction:1,deltaSampleSize:60,counterTimestamp:0,frameCounter:0,deltaHistory:[],timePrev:null,timeScalePrev:1,frameRequestId:null,isFixed:!1,enabled:!0},e);return t.delta=t.delta||1e3/t.fps,t.deltaMin=t.deltaMin||1e3/t.fps,t.deltaMax=t.deltaMax||1e3/(.5*t.fps),t.fps=1e3/t.delta,t},r.run=function(e,t){return void 0!==e.positionIterations&&(t=e,e=r.create()),function n(o){e.frameRequestId=i(n),o&&e.enabled&&r.tick(e,t,o)}(),e},r.tick=function(e,t,n){var r,i=t.timing,o=1,c={timestamp:i.timestamp};s.trigger(e,"beforeTick",c),s.trigger(t,"beforeTick",c),e.isFixed?r=e.delta:(r=n-e.timePrev||e.delta,e.timePrev=n,e.deltaHistory.push(r),e.deltaHistory=e.deltaHistory.slice(-e.deltaSampleSize),o=(r=(r=(r=Math.min.apply(null,e.deltaHistory))<e.deltaMin?e.deltaMin:r)>e.deltaMax?e.deltaMax:r)/e.delta,e.delta=r),0!==e.timeScalePrev&&(o*=i.timeScale/e.timeScalePrev),0===i.timeScale&&(o=0),e.timeScalePrev=i.timeScale,e.correction=o,e.frameCounter+=1,n-e.counterTimestamp>=1e3&&(e.fps=e.frameCounter*((n-e.counterTimestamp)/1e3),e.counterTimestamp=n,e.frameCounter=0),s.trigger(e,"tick",c),s.trigger(t,"tick",c),t.world.isModified&&t.render&&t.render.controller&&t.render.controller.clear&&t.render.controller.clear(t.render),s.trigger(e,"beforeUpdate",c),a.update(t,r,o),s.trigger(e,"afterUpdate",c),t.render&&t.render.controller&&(s.trigger(e,"beforeRender",c),s.trigger(t,"beforeRender",c),t.render.controller.world(t.render),s.trigger(e,"afterRender",c),s.trigger(t,"afterRender",c)),s.trigger(e,"afterTick",c),s.trigger(t,"afterTick",c)},r.stop=function(e){o(e.frameRequestId)},r.start=function(e,t){r.run(e,t)}},{"./Common":14,"./Engine":15,"./Events":16}],20:[function(e,t,n){var r={};t.exports=r;var i=e("./Events");r._motionWakeThreshold=.18,r._motionSleepThreshold=.08,r._minBias=.9,r.update=function(e,t){for(var n=t*t*t,i=0;i<e.length;i++){var o=e[i],s=o.speed*o.speed+o.angularSpeed*o.angularSpeed;if(0===o.force.x&&0===o.force.y){var a=Math.min(o.motion,s),c=Math.max(o.motion,s);o.motion=r._minBias*a+(1-r._minBias)*c,o.sleepThreshold>0&&o.motion<r._motionSleepThreshold*n?(o.sleepCounter+=1,o.sleepCounter>=o.sleepThreshold&&r.set(o,!0)):o.sleepCounter>0&&(o.sleepCounter-=1)}else r.set(o,!1)}},r.afterCollisions=function(e,t){for(var n=t*t*t,i=0;i<e.length;i++){var o=e[i];if(o.isActive){var s=o.collision,a=s.bodyA.parent,c=s.bodyB.parent;if(!(a.isSleeping&&c.isSleeping||a.isStatic||c.isStatic)&&(a.isSleeping||c.isSleeping)){var l=a.isSleeping&&!a.isStatic?a:c,u=l===a?c:a;!l.isStatic&&u.motion>r._motionWakeThreshold*n&&r.set(l,!1)}}}},r.set=function(e,t){var n=e.isSleeping;t?(e.isSleeping=!0,e.sleepCounter=e.sleepThreshold,e.positionImpulse.x=0,e.positionImpulse.y=0,e.positionPrev.x=e.position.x,e.positionPrev.y=e.position.y,e.anglePrev=e.angle,e.speed=0,e.angularSpeed=0,e.motion=0,n||i.trigger(e,"sleepStart")):(e.isSleeping=!1,e.sleepCounter=0,n&&i.trigger(e,"sleepEnd"))}},{"./Events":16}],21:[function(e,t,n){var r={};t.exports=r;var i=e("../geometry/Vertices"),o=e("../core/Common"),s=e("../body/Body"),a=e("../geometry/Bounds"),c=e("../geometry/Vector");r.rectangle=function(e,t,n,r,a){a=a||{};var c={label:"Rectangle Body",position:{x:e,y:t},vertices:i.fromPath("L 0 0 L "+n+" 0 L "+n+" "+r+" L 0 "+r)};if(a.chamfer){var l=a.chamfer;c.vertices=i.chamfer(c.vertices,l.radius,l.quality,l.qualityMin,l.qualityMax),delete a.chamfer}return s.create(o.extend({},c,a))},r.trapezoid=function(e,t,n,r,a,c){c=c||{};var l,u=n*(a*=.5),h=u+(1-2*a)*n,p=h+u;l=a<.5?"L 0 0 L "+u+" "+-r+" L "+h+" "+-r+" L "+p+" 0":"L 0 0 L "+h+" "+-r+" L "+p+" 0";var d={label:"Trapezoid Body",position:{x:e,y:t},vertices:i.fromPath(l)};if(c.chamfer){var f=c.chamfer;d.vertices=i.chamfer(d.vertices,f.radius,f.quality,f.qualityMin,f.qualityMax),delete c.chamfer}return s.create(o.extend({},d,c))},r.circle=function(e,t,n,i,s){i=i||{};var a={label:"Circle Body",circleRadius:n};s=s||25;var c=Math.ceil(Math.max(10,Math.min(s,n)));return c%2==1&&(c+=1),r.polygon(e,t,c,n,o.extend({},a,i))},r.polygon=function(e,t,n,a,c){if(c=c||{},n<3)return r.circle(e,t,a,c);for(var l=2*Math.PI/n,u="",h=.5*l,p=0;p<n;p+=1){var d=h+p*l,f=Math.cos(d)*a,g=Math.sin(d)*a;u+="L "+f.toFixed(3)+" "+g.toFixed(3)+" "}var y={label:"Polygon Body",position:{x:e,y:t},vertices:i.fromPath(u)};if(c.chamfer){var m=c.chamfer;y.vertices=i.chamfer(y.vertices,m.radius,m.quality,m.qualityMin,m.qualityMax),delete c.chamfer}return s.create(o.extend({},y,c))},r.fromVertices=function(e,t,n,r,l,u,h){var p,d,f,g,y,m,v,S,x;for(r=r||{},d=[],l=void 0!==l&&l,u=void 0!==u?u:.01,h=void 0!==h?h:10,window.decomp||o.log("Bodies.fromVertices: poly-decomp.js required. Could not decompose vertices. Fallback to convex hull.","warn"),o.isArray(n[0])||(n=[n]),S=0;S<n.length;S+=1)if(g=n[S],(f=i.isConvex(g))||!window.decomp)g=f?i.clockwiseSort(g):i.hull(g),d.push({position:{x:e,y:t},vertices:g});else{var b=new decomp.Polygon;for(y=0;y<g.length;y++)b.vertices.push([g[y].x,g[y].y]);b.makeCCW(),!1!==u&&b.removeCollinearPoints(u);var _=b.quickDecomp();for(y=0;y<_.length;y++){var P=_[y],C=[];for(m=0;m<P.vertices.length;m++)C.push({x:P.vertices[m][0],y:P.vertices[m][1]});h>0&&i.area(C)<h||d.push({position:i.centre(C),vertices:C})}}for(y=0;y<d.length;y++)d[y]=s.create(o.extend(d[y],r));if(l)for(y=0;y<d.length;y++){var w=d[y];for(m=y+1;m<d.length;m++){var A=d[m];if(a.overlaps(w.bounds,A.bounds)){var T=w.vertices,V=A.vertices;for(v=0;v<w.vertices.length;v++)for(x=0;x<A.vertices.length;x++){var E=c.magnitudeSquared(c.sub(T[(v+1)%T.length],V[x])),G=c.magnitudeSquared(c.sub(T[v],V[(x+1)%V.length]));E<5&&G<5&&(T[v].isInternal=!0,V[x].isInternal=!0)}}}}return d.length>1?(p=s.create(o.extend({parts:d.slice(0)},r)),s.setPosition(p,{x:e,y:t}),p):d[0]}},{"../body/Body":1,"../core/Common":14,"../geometry/Bounds":24,"../geometry/Vector":26,"../geometry/Vertices":27}],22:[function(e,t,n){var r={};t.exports=r;var i=e("../body/Composite"),o=e("../constraint/Constraint"),s=e("../core/Common"),a=e("../body/Body"),c=e("./Bodies");r.stack=function(e,t,n,r,o,s,c){for(var l,u=i.create({label:"Stack"}),h=e,p=t,d=0,f=0;f<r;f++){for(var g=0,y=0;y<n;y++){var m=c(h,p,y,f,l,d);if(m){var v=m.bounds.max.y-m.bounds.min.y,S=m.bounds.max.x-m.bounds.min.x;v>g&&(g=v),a.translate(m,{x:.5*S,y:.5*v}),h=m.bounds.max.x+o,i.addBody(u,m),l=m,d+=1}else h+=o}p+=g+s,h=e}return u},r.chain=function(e,t,n,r,a,c){for(var l=e.bodies,u=1;u<l.length;u++){var h=l[u-1],p=l[u],d=h.bounds.max.y-h.bounds.min.y,f=h.bounds.max.x-h.bounds.min.x,g=p.bounds.max.y-p.bounds.min.y,y={bodyA:h,pointA:{x:f*t,y:d*n},bodyB:p,pointB:{x:(p.bounds.max.x-p.bounds.min.x)*r,y:g*a}},m=s.extend(y,c);i.addConstraint(e,o.create(m))}return e.label+=" Chain",e},r.mesh=function(e,t,n,r,a){var c,l,u,h,p,d=e.bodies;for(c=0;c<n;c++){for(l=1;l<t;l++)u=d[l-1+c*t],h=d[l+c*t],i.addConstraint(e,o.create(s.extend({bodyA:u,bodyB:h},a)));if(c>0)for(l=0;l<t;l++)u=d[l+(c-1)*t],h=d[l+c*t],i.addConstraint(e,o.create(s.extend({bodyA:u,bodyB:h},a))),r&&l>0&&(p=d[l-1+(c-1)*t],i.addConstraint(e,o.create(s.extend({bodyA:p,bodyB:h},a)))),r&&l<t-1&&(p=d[l+1+(c-1)*t],i.addConstraint(e,o.create(s.extend({bodyA:p,bodyB:h},a))))}return e.label+=" Mesh",e},r.pyramid=function(e,t,n,i,o,s,c){return r.stack(e,t,n,i,o,s,function(t,r,s,l,u,h){var p=Math.min(i,Math.ceil(n/2)),d=u?u.bounds.max.x-u.bounds.min.x:0;if(!(l>p||s<(l=p-l)||s>n-1-l))return 1===h&&a.translate(u,{x:(s+(n%2==1?1:-1))*d,y:0}),c(e+(u?s*d:0)+s*o,r,s,l,u,h)})},r.newtonsCradle=function(e,t,n,r,s){for(var a=i.create({label:"Newtons Cradle"}),l=0;l<n;l++){var u=c.circle(e+l*(1.9*r),t+s,r,{inertia:1/0,restitution:1,friction:0,frictionAir:1e-4,slop:1}),h=o.create({pointA:{x:e+l*(1.9*r),y:t},bodyB:u});i.addBody(a,u),i.addConstraint(a,h)}return a},r.car=function(e,t,n,r,s){var l=a.nextGroup(!0),u=.5*-n-20,h=.5*n- -20,p=i.create({label:"Car"}),d=c.trapezoid(e,t,n,r,.3,{collisionFilter:{group:l},friction:.01,chamfer:{radius:10}}),f=c.circle(e+u,t+0,s,{collisionFilter:{group:l},friction:.8,density:.01}),g=c.circle(e+h,t+0,s,{collisionFilter:{group:l},friction:.8,density:.01}),y=o.create({bodyA:d,pointA:{x:u,y:0},bodyB:f,stiffness:.2}),m=o.create({bodyA:d,pointA:{x:h,y:0},bodyB:g,stiffness:.2});return i.addBody(p,d),i.addBody(p,f),i.addBody(p,g),i.addConstraint(p,y),i.addConstraint(p,m),p},r.softBody=function(e,t,n,i,o,a,l,u,h,p){h=s.extend({inertia:1/0},h),p=s.extend({stiffness:.4},p);var d=r.stack(e,t,n,i,o,a,function(e,t){return c.circle(e,t,u,h)});return r.mesh(d,n,i,l,p),d.label="Soft Body",d}},{"../body/Body":1,"../body/Composite":2,"../constraint/Constraint":12,"../core/Common":14,"./Bodies":21}],23:[function(e,t,n){var r={};t.exports=r;var i=e("../geometry/Vector"),o=e("../core/Common");r.fromVertices=function(e){for(var t={},n=0;n<e.length;n++){var r=(n+1)%e.length,s=i.normalise({x:e[r].y-e[n].y,y:e[n].x-e[r].x}),a=0===s.y?1/0:s.x/s.y;t[a=a.toFixed(3).toString()]=s}return o.values(t)},r.rotate=function(e,t){if(0!==t)for(var n=Math.cos(t),r=Math.sin(t),i=0;i<e.length;i++){var o,s=e[i];o=s.x*n-s.y*r,s.y=s.x*r+s.y*n,s.x=o}}},{"../core/Common":14,"../geometry/Vector":26}],24:[function(e,t,n){var r={};t.exports=r,r.create=function(e){var t={min:{x:0,y:0},max:{x:0,y:0}};return e&&r.update(t,e),t},r.update=function(e,t,n){e.min.x=1/0,e.max.x=-1/0,e.min.y=1/0,e.max.y=-1/0;for(var r=0;r<t.length;r++){var i=t[r];i.x>e.max.x&&(e.max.x=i.x),i.x<e.min.x&&(e.min.x=i.x),i.y>e.max.y&&(e.max.y=i.y),i.y<e.min.y&&(e.min.y=i.y)}n&&(n.x>0?e.max.x+=n.x:e.min.x+=n.x,n.y>0?e.max.y+=n.y:e.min.y+=n.y)},r.contains=function(e,t){return t.x>=e.min.x&&t.x<=e.max.x&&t.y>=e.min.y&&t.y<=e.max.y},r.overlaps=function(e,t){return e.min.x<=t.max.x&&e.max.x>=t.min.x&&e.max.y>=t.min.y&&e.min.y<=t.max.y},r.translate=function(e,t){e.min.x+=t.x,e.max.x+=t.x,e.min.y+=t.y,e.max.y+=t.y},r.shift=function(e,t){var n=e.max.x-e.min.x,r=e.max.y-e.min.y;e.min.x=t.x,e.max.x=t.x+n,e.min.y=t.y,e.max.y=t.y+r}},{}],25:[function(e,t,n){var r={};t.exports=r;e("../geometry/Bounds");!function(){r.pathToVertices=function(t,n){var r,i,o,s,a,c,l,u,h,p,d,f=[],g=0,y=0,m=0;n=n||15;var v=function(e,t,n){var r=n%2==1&&n>1;if(!h||e!=h.x||t!=h.y){h&&r?(p=h.x,d=h.y):(p=0,d=0);var i={x:p+e,y:d+t};!r&&h||(h=i),f.push(i),y=p+e,m=d+t}},S=function(e){var t=e.pathSegTypeAsLetter.toUpperCase();if("Z"!==t){switch(t){case"M":case"L":case"T":case"C":case"S":case"Q":y=e.x,m=e.y;break;case"H":y=e.x;break;case"V":m=e.y}v(y,m,e.pathSegType)}};for(e(t),o=t.getTotalLength(),c=[],r=0;r<t.pathSegList.numberOfItems;r+=1)c.push(t.pathSegList.getItem(r));for(l=c.concat();g<o;){if((a=c[t.getPathSegAtLength(g)])!=u){for(;l.length&&l[0]!=a;)S(l.shift());u=a}switch(a.pathSegTypeAsLetter.toUpperCase()){case"C":case"T":case"S":case"Q":case"A":s=t.getPointAtLength(g),v(s.x,s.y,0)}g+=n}for(r=0,i=l.length;r<i;++r)S(l[r]);return f};var e=function(e){for(var t,n,r,i,o,s,a=e.pathSegList,c=0,l=0,u=a.numberOfItems,h=0;h<u;++h){var p=a.getItem(h),d=p.pathSegTypeAsLetter;if(/[MLHVCSQTA]/.test(d))"x"in p&&(c=p.x),"y"in p&&(l=p.y);else switch("x1"in p&&(r=c+p.x1),"x2"in p&&(o=c+p.x2),"y1"in p&&(i=l+p.y1),"y2"in p&&(s=l+p.y2),"x"in p&&(c+=p.x),"y"in p&&(l+=p.y),d){case"m":a.replaceItem(e.createSVGPathSegMovetoAbs(c,l),h);break;case"l":a.replaceItem(e.createSVGPathSegLinetoAbs(c,l),h);break;case"h":a.replaceItem(e.createSVGPathSegLinetoHorizontalAbs(c),h);break;case"v":a.replaceItem(e.createSVGPathSegLinetoVerticalAbs(l),h);break;case"c":a.replaceItem(e.createSVGPathSegCurvetoCubicAbs(c,l,r,i,o,s),h);break;case"s":a.replaceItem(e.createSVGPathSegCurvetoCubicSmoothAbs(c,l,o,s),h);break;case"q":a.replaceItem(e.createSVGPathSegCurvetoQuadraticAbs(c,l,r,i),h);break;case"t":a.replaceItem(e.createSVGPathSegCurvetoQuadraticSmoothAbs(c,l),h);break;case"a":a.replaceItem(e.createSVGPathSegArcAbs(c,l,p.r1,p.r2,p.angle,p.largeArcFlag,p.sweepFlag),h);break;case"z":case"Z":c=t,l=n}"M"!=d&&"m"!=d||(t=c,n=l)}}}()},{"../geometry/Bounds":24}],26:[function(e,t,n){var r={};t.exports=r,r.create=function(e,t){return{x:e||0,y:t||0}},r.clone=function(e){return{x:e.x,y:e.y}},r.magnitude=function(e){return Math.sqrt(e.x*e.x+e.y*e.y)},r.magnitudeSquared=function(e){return e.x*e.x+e.y*e.y},r.rotate=function(e,t){var n=Math.cos(t),r=Math.sin(t);return{x:e.x*n-e.y*r,y:e.x*r+e.y*n}},r.rotateAbout=function(e,t,n,r){var i=Math.cos(t),o=Math.sin(t);r||(r={});var s=n.x+((e.x-n.x)*i-(e.y-n.y)*o);return r.y=n.y+((e.x-n.x)*o+(e.y-n.y)*i),r.x=s,r},r.normalise=function(e){var t=r.magnitude(e);return 0===t?{x:0,y:0}:{x:e.x/t,y:e.y/t}},r.dot=function(e,t){return e.x*t.x+e.y*t.y},r.cross=function(e,t){return e.x*t.y-e.y*t.x},r.cross3=function(e,t,n){return(t.x-e.x)*(n.y-e.y)-(t.y-e.y)*(n.x-e.x)},r.add=function(e,t,n){return n||(n={}),n.x=e.x+t.x,n.y=e.y+t.y,n},r.sub=function(e,t,n){return n||(n={}),n.x=e.x-t.x,n.y=e.y-t.y,n},r.mult=function(e,t){return{x:e.x*t,y:e.y*t}},r.div=function(e,t){return{x:e.x/t,y:e.y/t}},r.perp=function(e,t){return{x:(t=!0===t?-1:1)*-e.y,y:t*e.x}},r.neg=function(e){return{x:-e.x,y:-e.y}},r.angle=function(e,t){return Math.atan2(t.y-e.y,t.x-e.x)},r._temp=[r.create(),r.create(),r.create(),r.create(),r.create(),r.create()]},{}],27:[function(e,t,n){var r={};t.exports=r;var i=e("../geometry/Vector"),o=e("../core/Common");r.create=function(e,t){for(var n=[],r=0;r<e.length;r++){var i=e[r],o={x:i.x,y:i.y,index:r,body:t,isInternal:!1};n.push(o)}return n},r.fromPath=function(e,t){var n=[];return e.replace(/L?\s*([\-\d\.e]+)[\s,]*([\-\d\.e]+)*/gi,function(e,t,r){n.push({x:parseFloat(t),y:parseFloat(r)})}),r.create(n,t)},r.centre=function(e){for(var t,n,o,s=r.area(e,!0),a={x:0,y:0},c=0;c<e.length;c++)o=(c+1)%e.length,t=i.cross(e[c],e[o]),n=i.mult(i.add(e[c],e[o]),t),a=i.add(a,n);return i.div(a,6*s)},r.mean=function(e){for(var t={x:0,y:0},n=0;n<e.length;n++)t.x+=e[n].x,t.y+=e[n].y;return i.div(t,e.length)},r.area=function(e,t){for(var n=0,r=e.length-1,i=0;i<e.length;i++)n+=(e[r].x-e[i].x)*(e[r].y+e[i].y),r=i;return t?n/2:Math.abs(n)/2},r.inertia=function(e,t){for(var n,r,o=0,s=0,a=e,c=0;c<a.length;c++)r=(c+1)%a.length,o+=(n=Math.abs(i.cross(a[r],a[c])))*(i.dot(a[r],a[r])+i.dot(a[r],a[c])+i.dot(a[c],a[c])),s+=n;return t/6*(o/s)},r.translate=function(e,t,n){var r;if(n)for(r=0;r<e.length;r++)e[r].x+=t.x*n,e[r].y+=t.y*n;else for(r=0;r<e.length;r++)e[r].x+=t.x,e[r].y+=t.y;return e},r.rotate=function(e,t,n){if(0!==t){for(var r=Math.cos(t),i=Math.sin(t),o=0;o<e.length;o++){var s=e[o],a=s.x-n.x,c=s.y-n.y;s.x=n.x+(a*r-c*i),s.y=n.y+(a*i+c*r)}return e}},r.contains=function(e,t){for(var n=0;n<e.length;n++){var r=e[n],i=e[(n+1)%e.length];if((t.x-r.x)*(i.y-r.y)+(t.y-r.y)*(r.x-i.x)>0)return!1}return!0},r.scale=function(e,t,n,o){if(1===t&&1===n)return e;var s,a;o=o||r.centre(e);for(var c=0;c<e.length;c++)s=e[c],a=i.sub(s,o),e[c].x=o.x+a.x*t,e[c].y=o.y+a.y*n;return e},r.chamfer=function(e,t,n,r,s){(t=t||[8]).length||(t=[t]),n=void 0!==n?n:-1,r=r||2,s=s||14;for(var a=[],c=0;c<e.length;c++){var l=e[c-1>=0?c-1:e.length-1],u=e[c],h=e[(c+1)%e.length],p=t[c<t.length?c:t.length-1];if(0!==p){var d=i.normalise({x:u.y-l.y,y:l.x-u.x}),f=i.normalise({x:h.y-u.y,y:u.x-h.x}),g=Math.sqrt(2*Math.pow(p,2)),y=i.mult(o.clone(d),p),m=i.normalise(i.mult(i.add(d,f),.5)),v=i.sub(u,i.mult(m,g)),S=n;-1===n&&(S=1.75*Math.pow(p,.32)),(S=o.clamp(S,r,s))%2==1&&(S+=1);for(var x=Math.acos(i.dot(d,f))/S,b=0;b<S;b++)a.push(i.add(i.rotate(y,x*b),v))}else a.push(u)}return a},r.clockwiseSort=function(e){var t=r.mean(e);return e.sort(function(e,n){return i.angle(t,e)-i.angle(t,n)}),e},r.isConvex=function(e){var t,n,r,i,o=0,s=e.length;if(s<3)return null;for(t=0;t<s;t++)if(r=(t+2)%s,i=(e[n=(t+1)%s].x-e[t].x)*(e[r].y-e[n].y),(i-=(e[n].y-e[t].y)*(e[r].x-e[n].x))<0?o|=1:i>0&&(o|=2),3===o)return!1;return 0!==o||null},r.hull=function(e){var t,n,r=[],o=[];for((e=e.slice(0)).sort(function(e,t){var n=e.x-t.x;return 0!==n?n:e.y-t.y}),n=0;n<e.length;n++){for(t=e[n];o.length>=2&&i.cross3(o[o.length-2],o[o.length-1],t)<=0;)o.pop();o.push(t)}for(n=e.length-1;n>=0;n--){for(t=e[n];r.length>=2&&i.cross3(r[r.length-2],r[r.length-1],t)<=0;)r.pop();r.push(t)}return r.pop(),o.pop(),r.concat(o)}},{"../core/Common":14,"../geometry/Vector":26}],28:[function(e,t,n){var r=t.exports={};r.version="master",r.Body=e("../body/Body"),r.Composite=e("../body/Composite"),r.World=e("../body/World"),r.Contact=e("../collision/Contact"),r.Detector=e("../collision/Detector"),r.Grid=e("../collision/Grid"),r.Pairs=e("../collision/Pairs"),r.Pair=e("../collision/Pair"),r.Query=e("../collision/Query"),r.Resolver=e("../collision/Resolver"),r.SAT=e("../collision/SAT"),r.Constraint=e("../constraint/Constraint"),r.MouseConstraint=e("../constraint/MouseConstraint"),r.Common=e("../core/Common"),r.Engine=e("../core/Engine"),r.Events=e("../core/Events"),r.Mouse=e("../core/Mouse"),r.Runner=e("../core/Runner"),r.Sleeping=e("../core/Sleeping"),r.Bodies=e("../factory/Bodies"),r.Composites=e("../factory/Composites"),r.Axes=e("../geometry/Axes"),r.Bounds=e("../geometry/Bounds"),r.Svg=e("../geometry/Svg"),r.Vector=e("../geometry/Vector"),r.Vertices=e("../geometry/Vertices"),r.Render=e("../render/Render"),r.RenderPixi=e("../render/RenderPixi"),r.World.add=r.Composite.add,r.World.remove=r.Composite.remove,r.World.addComposite=r.Composite.addComposite,r.World.addBody=r.Composite.addBody,r.World.addConstraint=r.Composite.addConstraint,r.World.clear=r.Composite.clear,r.Engine.run=r.Runner.run},{"../body/Body":1,"../body/Composite":2,"../body/World":3,"../collision/Contact":4,"../collision/Detector":5,"../collision/Grid":6,"../collision/Pair":7,"../collision/Pairs":8,"../collision/Query":9,"../collision/Resolver":10,"../collision/SAT":11,"../constraint/Constraint":12,"../constraint/MouseConstraint":13,"../core/Common":14,"../core/Engine":15,"../core/Events":16,"../core/Metrics":17,"../core/Mouse":18,"../core/Runner":19,"../core/Sleeping":20,"../factory/Bodies":21,"../factory/Composites":22,"../geometry/Axes":23,"../geometry/Bounds":24,"../geometry/Svg":25,"../geometry/Vector":26,"../geometry/Vertices":27,"../render/Render":29,"../render/RenderPixi":30}],29:[function(e,t,n){var r={};t.exports=r;var i=e("../core/Common"),o=e("../body/Composite"),s=e("../geometry/Bounds"),a=e("../core/Events"),c=e("../collision/Grid"),l=e("../geometry/Vector");!function(){var e,t;"undefined"!=typeof window&&(e=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||function(e){window.setTimeout(function(){e(i.now())},1e3/60)},t=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),r.create=function(e){var t={controller:r,engine:null,element:null,canvas:null,mouse:null,frameRequestId:null,options:{width:800,height:600,pixelRatio:1,background:"#fafafa",wireframeBackground:"#222",hasBounds:!!e.bounds,enabled:!0,wireframes:!0,showSleeping:!0,showDebug:!1,showBroadphase:!1,showBounds:!1,showVelocity:!1,showCollisions:!1,showSeparations:!1,showAxes:!1,showPositions:!1,showAngleIndicator:!1,showIds:!1,showShadows:!1,showVertexNumbers:!1,showConvexHulls:!1,showInternalEdges:!1,showMousePosition:!1}},o=i.extend(t,e);return o.canvas&&(o.canvas.width=o.options.width||o.canvas.width,o.canvas.height=o.options.height||o.canvas.height),o.mouse=e.mouse,o.engine=e.engine,o.canvas=o.canvas||n(o.options.width,o.options.height),o.context=o.canvas.getContext("2d"),o.textures={},o.bounds=o.bounds||{min:{x:0,y:0},max:{x:o.canvas.width,y:o.canvas.height}},1!==o.options.pixelRatio&&r.setPixelRatio(o,o.options.pixelRatio),i.isElement(o.element)?o.element.appendChild(o.canvas):i.log("Render.create: options.element was undefined, render.canvas was created but not appended","warn"),o},r.run=function(t){!function n(i){t.frameRequestId=e(n),r.world(t)}()},r.stop=function(e){t(e.frameRequestId)},r.setPixelRatio=function(e,t){var n=e.options,r=e.canvas;"auto"===t&&(t=u(r)),n.pixelRatio=t,r.setAttribute("data-pixel-ratio",t),r.width=n.width*t,r.height=n.height*t,r.style.width=n.width+"px",r.style.height=n.height+"px",e.context.scale(t,t)},r.world=function(e){var t,n=e.engine,i=n.world,u=e.canvas,h=e.context,d=e.options,f=o.allBodies(i),g=o.allConstraints(i),y=d.wireframes?d.wireframeBackground:d.background,m=[],v=[],S={timestamp:n.timing.timestamp};if(a.trigger(e,"beforeRender",S),e.currentBackground!==y&&p(e,y),h.globalCompositeOperation="source-in",h.fillStyle="transparent",h.fillRect(0,0,u.width,u.height),h.globalCompositeOperation="source-over",d.hasBounds){var x=e.bounds.max.x-e.bounds.min.x,b=e.bounds.max.y-e.bounds.min.y,_=x/d.width,P=b/d.height;for(t=0;t<f.length;t++){var C=f[t];s.overlaps(C.bounds,e.bounds)&&m.push(C)}for(t=0;t<g.length;t++){var w=g[t],A=w.bodyA,T=w.bodyB,V=w.pointA,E=w.pointB;A&&(V=l.add(A.position,w.pointA)),T&&(E=l.add(T.position,w.pointB)),V&&E&&((s.contains(e.bounds,V)||s.contains(e.bounds,E))&&v.push(w))}h.scale(1/_,1/P),h.translate(-e.bounds.min.x,-e.bounds.min.y)}else v=g,m=f;!d.wireframes||n.enableSleeping&&d.showSleeping?r.bodies(e,m,h):(d.showConvexHulls&&r.bodyConvexHulls(e,m,h),r.bodyWireframes(e,m,h)),d.showBounds&&r.bodyBounds(e,m,h),(d.showAxes||d.showAngleIndicator)&&r.bodyAxes(e,m,h),d.showPositions&&r.bodyPositions(e,m,h),d.showVelocity&&r.bodyVelocity(e,m,h),d.showIds&&r.bodyIds(e,m,h),d.showSeparations&&r.separations(e,n.pairs.list,h),d.showCollisions&&r.collisions(e,n.pairs.list,h),d.showVertexNumbers&&r.vertexNumbers(e,m,h),d.showMousePosition&&r.mousePosition(e,e.mouse,h),r.constraints(v,h),d.showBroadphase&&n.broadphase.controller===c&&r.grid(e,n.broadphase,h),d.showDebug&&r.debug(e,h),d.hasBounds&&h.setTransform(d.pixelRatio,0,0,d.pixelRatio,0,0),a.trigger(e,"afterRender",S)},r.debug=function(e,t){var n=t,r=e.engine,i=r.world,s=r.metrics,a=e.options;o.allBodies(i);if(r.timing.timestamp-(e.debugTimestamp||0)>=500){var c="";s.timing&&(c+="fps: "+Math.round(s.timing.fps)+"    "),e.debugString=c,e.debugTimestamp=r.timing.timestamp}if(e.debugString){n.font="12px Arial",a.wireframes?n.fillStyle="rgba(255,255,255,0.5)":n.fillStyle="rgba(0,0,0,0.5)";for(var l=e.debugString.split("\n"),u=0;u<l.length;u++)n.fillText(l[u],50,50+18*u)}},r.constraints=function(e,t){for(var n=t,r=0;r<e.length;r++){var i=e[r];if(i.render.visible&&i.pointA&&i.pointB){var o=i.bodyA,s=i.bodyB;o?(n.beginPath(),n.moveTo(o.position.x+i.pointA.x,o.position.y+i.pointA.y)):(n.beginPath(),n.moveTo(i.pointA.x,i.pointA.y)),s?n.lineTo(s.position.x+i.pointB.x,s.position.y+i.pointB.y):n.lineTo(i.pointB.x,i.pointB.y),n.lineWidth=i.render.lineWidth,n.strokeStyle=i.render.strokeStyle,n.stroke()}}},r.bodyShadows=function(e,t,n){for(var r=n,i=(e.engine,0);i<t.length;i++){var o=t[i];if(o.render.visible){if(o.circleRadius)r.beginPath(),r.arc(o.position.x,o.position.y,o.circleRadius,0,2*Math.PI),r.closePath();else{r.beginPath(),r.moveTo(o.vertices[0].x,o.vertices[0].y);for(var s=1;s<o.vertices.length;s++)r.lineTo(o.vertices[s].x,o.vertices[s].y);r.closePath()}var a=o.position.x-.5*e.options.width,c=o.position.y-.2*e.options.height,l=Math.abs(a)+Math.abs(c);r.shadowColor="rgba(0,0,0,0.15)",r.shadowOffsetX=.05*a,r.shadowOffsetY=.05*c,r.shadowBlur=1+12*Math.min(1,l/1e3),r.fill(),r.shadowColor=null,r.shadowOffsetX=null,r.shadowOffsetY=null,r.shadowBlur=null}}},r.bodies=function(e,t,n){var r,i,o,s,a=n,c=(e.engine,e.options),l=c.showInternalEdges||!c.wireframes;for(o=0;o<t.length;o++)if((r=t[o]).render.visible)for(s=r.parts.length>1?1:0;s<r.parts.length;s++)if((i=r.parts[s]).render.visible){if(c.showSleeping&&r.isSleeping?a.globalAlpha=.5*i.render.opacity:1!==i.render.opacity&&(a.globalAlpha=i.render.opacity),i.render.sprite&&i.render.sprite.texture&&!c.wireframes){var u=i.render.sprite,p=h(e,u.texture);a.translate(i.position.x,i.position.y),a.rotate(i.angle),a.drawImage(p,p.width*-u.xOffset*u.xScale,p.height*-u.yOffset*u.yScale,p.width*u.xScale,p.height*u.yScale),a.rotate(-i.angle),a.translate(-i.position.x,-i.position.y)}else{if(i.circleRadius)a.beginPath(),a.arc(i.position.x,i.position.y,i.circleRadius,0,2*Math.PI);else{a.beginPath(),a.moveTo(i.vertices[0].x,i.vertices[0].y);for(var d=1;d<i.vertices.length;d++)!i.vertices[d-1].isInternal||l?a.lineTo(i.vertices[d].x,i.vertices[d].y):a.moveTo(i.vertices[d].x,i.vertices[d].y),i.vertices[d].isInternal&&!l&&a.moveTo(i.vertices[(d+1)%i.vertices.length].x,i.vertices[(d+1)%i.vertices.length].y);a.lineTo(i.vertices[0].x,i.vertices[0].y),a.closePath()}c.wireframes?(a.lineWidth=1,a.strokeStyle="#bbb"):(a.fillStyle=i.render.fillStyle,a.lineWidth=i.render.lineWidth,a.strokeStyle=i.render.strokeStyle,a.fill()),a.stroke()}a.globalAlpha=1}},r.bodyWireframes=function(e,t,n){var r,i,o,s,a,c=n,l=e.options.showInternalEdges;for(c.beginPath(),o=0;o<t.length;o++)if((r=t[o]).render.visible)for(a=r.parts.length>1?1:0;a<r.parts.length;a++){for(i=r.parts[a],c.moveTo(i.vertices[0].x,i.vertices[0].y),s=1;s<i.vertices.length;s++)!i.vertices[s-1].isInternal||l?c.lineTo(i.vertices[s].x,i.vertices[s].y):c.moveTo(i.vertices[s].x,i.vertices[s].y),i.vertices[s].isInternal&&!l&&c.moveTo(i.vertices[(s+1)%i.vertices.length].x,i.vertices[(s+1)%i.vertices.length].y);c.lineTo(i.vertices[0].x,i.vertices[0].y)}c.lineWidth=1,c.strokeStyle="#bbb",c.stroke()},r.bodyConvexHulls=function(e,t,n){var r,i,o,s=n;for(s.beginPath(),i=0;i<t.length;i++)if((r=t[i]).render.visible&&1!==r.parts.length){for(s.moveTo(r.vertices[0].x,r.vertices[0].y),o=1;o<r.vertices.length;o++)s.lineTo(r.vertices[o].x,r.vertices[o].y);s.lineTo(r.vertices[0].x,r.vertices[0].y)}s.lineWidth=1,s.strokeStyle="rgba(255,255,255,0.2)",s.stroke()},r.vertexNumbers=function(e,t,n){var r,i,o,s=n;for(r=0;r<t.length;r++){var a=t[r].parts;for(o=a.length>1?1:0;o<a.length;o++){var c=a[o];for(i=0;i<c.vertices.length;i++)s.fillStyle="rgba(255,255,255,0.2)",s.fillText(r+"_"+i,c.position.x+.8*(c.vertices[i].x-c.position.x),c.position.y+.8*(c.vertices[i].y-c.position.y))}}},r.mousePosition=function(e,t,n){var r=n;r.fillStyle="rgba(255,255,255,0.8)",r.fillText(t.position.x+"  "+t.position.y,t.position.x+5,t.position.y-5)},r.bodyBounds=function(e,t,n){var r=n,i=(e.engine,e.options);r.beginPath();for(var o=0;o<t.length;o++){if(t[o].render.visible)for(var s=t[o].parts,a=s.length>1?1:0;a<s.length;a++){var c=s[a];r.rect(c.bounds.min.x,c.bounds.min.y,c.bounds.max.x-c.bounds.min.x,c.bounds.max.y-c.bounds.min.y)}}i.wireframes?r.strokeStyle="rgba(255,255,255,0.08)":r.strokeStyle="rgba(0,0,0,0.1)",r.lineWidth=1,r.stroke()},r.bodyAxes=function(e,t,n){var r,i,o,s,a=n,c=(e.engine,e.options);for(a.beginPath(),i=0;i<t.length;i++){var l=t[i],u=l.parts;if(l.render.visible)if(c.showAxes)for(o=u.length>1?1:0;o<u.length;o++)for(r=u[o],s=0;s<r.axes.length;s++){var h=r.axes[s];a.moveTo(r.position.x,r.position.y),a.lineTo(r.position.x+20*h.x,r.position.y+20*h.y)}else for(o=u.length>1?1:0;o<u.length;o++)for(r=u[o],s=0;s<r.axes.length;s++)a.moveTo(r.position.x,r.position.y),a.lineTo((r.vertices[0].x+r.vertices[r.vertices.length-1].x)/2,(r.vertices[0].y+r.vertices[r.vertices.length-1].y)/2)}c.wireframes?a.strokeStyle="indianred":(a.strokeStyle="rgba(0,0,0,0.8)",a.globalCompositeOperation="overlay"),a.lineWidth=1,a.stroke(),a.globalCompositeOperation="source-over"},r.bodyPositions=function(e,t,n){var r,i,o,s,a=n,c=(e.engine,e.options);for(a.beginPath(),o=0;o<t.length;o++)if((r=t[o]).render.visible)for(s=0;s<r.parts.length;s++)i=r.parts[s],a.arc(i.position.x,i.position.y,3,0,2*Math.PI,!1),a.closePath();for(c.wireframes?a.fillStyle="indianred":a.fillStyle="rgba(0,0,0,0.5)",a.fill(),a.beginPath(),o=0;o<t.length;o++)(r=t[o]).render.visible&&(a.arc(r.positionPrev.x,r.positionPrev.y,2,0,2*Math.PI,!1),a.closePath());a.fillStyle="rgba(255,165,0,0.8)",a.fill()},r.bodyVelocity=function(e,t,n){var r=n;r.beginPath();for(var i=0;i<t.length;i++){var o=t[i];o.render.visible&&(r.moveTo(o.position.x,o.position.y),r.lineTo(o.position.x+2*(o.position.x-o.positionPrev.x),o.position.y+2*(o.position.y-o.positionPrev.y)))}r.lineWidth=3,r.strokeStyle="cornflowerblue",r.stroke()},r.bodyIds=function(e,t,n){var r,i,o=n;for(r=0;r<t.length;r++)if(t[r].render.visible){var s=t[r].parts;for(i=s.length>1?1:0;i<s.length;i++){var a=s[i];o.font="12px Arial",o.fillStyle="rgba(255,255,255,0.5)",o.fillText(a.id,a.position.x+10,a.position.y-10)}}},r.collisions=function(e,t,n){var r,i,o,s,a=n,c=e.options;for(a.beginPath(),o=0;o<t.length;o++)if((r=t[o]).isActive)for(i=r.collision,s=0;s<r.activeContacts.length;s++){var l=r.activeContacts[s].vertex;a.rect(l.x-1.5,l.y-1.5,3.5,3.5)}for(c.wireframes?a.fillStyle="rgba(255,255,255,0.7)":a.fillStyle="orange",a.fill(),a.beginPath(),o=0;o<t.length;o++)if((r=t[o]).isActive&&(i=r.collision,r.activeContacts.length>0)){var u=r.activeContacts[0].vertex.x,h=r.activeContacts[0].vertex.y;2===r.activeContacts.length&&(u=(r.activeContacts[0].vertex.x+r.activeContacts[1].vertex.x)/2,h=(r.activeContacts[0].vertex.y+r.activeContacts[1].vertex.y)/2),i.bodyB===i.supports[0].body||!0===i.bodyA.isStatic?a.moveTo(u-8*i.normal.x,h-8*i.normal.y):a.moveTo(u+8*i.normal.x,h+8*i.normal.y),a.lineTo(u,h)}c.wireframes?a.strokeStyle="rgba(255,165,0,0.7)":a.strokeStyle="orange",a.lineWidth=1,a.stroke()},r.separations=function(e,t,n){var r,i,o,s,a,c=n,l=e.options;for(c.beginPath(),a=0;a<t.length;a++)if((r=t[a]).isActive){o=(i=r.collision).bodyA;var u=1;(s=i.bodyB).isStatic||o.isStatic||(u=.5),s.isStatic&&(u=0),c.moveTo(s.position.x,s.position.y),c.lineTo(s.position.x-i.penetration.x*u,s.position.y-i.penetration.y*u),u=1,s.isStatic||o.isStatic||(u=.5),o.isStatic&&(u=0),c.moveTo(o.position.x,o.position.y),c.lineTo(o.position.x+i.penetration.x*u,o.position.y+i.penetration.y*u)}l.wireframes?c.strokeStyle="rgba(255,165,0,0.5)":c.strokeStyle="orange",c.stroke()},r.grid=function(e,t,n){var r=n;e.options.wireframes?r.strokeStyle="rgba(255,180,0,0.1)":r.strokeStyle="rgba(255,180,0,0.5)",r.beginPath();for(var o=i.keys(t.buckets),s=0;s<o.length;s++){var a=o[s];if(!(t.buckets[a].length<2)){var c=a.split(",");r.rect(.5+parseInt(c[0],10)*t.bucketWidth,.5+parseInt(c[1],10)*t.bucketHeight,t.bucketWidth,t.bucketHeight)}}r.lineWidth=1,r.stroke()},r.inspector=function(e,t){e.engine;var n,r=e.selected,i=e.render,o=i.options;if(o.hasBounds){var s=i.bounds.max.x-i.bounds.min.x,a=i.bounds.max.y-i.bounds.min.y,c=s/i.options.width,l=a/i.options.height;t.scale(1/c,1/l),t.translate(-i.bounds.min.x,-i.bounds.min.y)}for(var u=0;u<r.length;u++){var h=r[u].data;switch(t.translate(.5,.5),t.lineWidth=1,t.strokeStyle="rgba(255,165,0,0.9)",t.setLineDash([1,2]),h.type){case"body":n=h.bounds,t.beginPath(),t.rect(Math.floor(n.min.x-3),Math.floor(n.min.y-3),Math.floor(n.max.x-n.min.x+6),Math.floor(n.max.y-n.min.y+6)),t.closePath(),t.stroke();break;case"constraint":var p=h.pointA;h.bodyA&&(p=h.pointB),t.beginPath(),t.arc(p.x,p.y,10,0,2*Math.PI),t.closePath(),t.stroke()}t.setLineDash([]),t.translate(-.5,-.5)}null!==e.selectStart&&(t.translate(.5,.5),t.lineWidth=1,t.strokeStyle="rgba(255,165,0,0.6)",t.fillStyle="rgba(255,165,0,0.1)",n=e.selectBounds,t.beginPath(),t.rect(Math.floor(n.min.x),Math.floor(n.min.y),Math.floor(n.max.x-n.min.x),Math.floor(n.max.y-n.min.y)),t.closePath(),t.stroke(),t.fill(),t.translate(-.5,-.5)),o.hasBounds&&t.setTransform(1,0,0,1,0,0)};var n=function(e,t){var n=document.createElement("canvas");return n.width=e,n.height=t,n.oncontextmenu=function(){return!1},n.onselectstart=function(){return!1},n},u=function(e){var t=e.getContext("2d");return(window.devicePixelRatio||1)/(t.webkitBackingStorePixelRatio||t.mozBackingStorePixelRatio||t.msBackingStorePixelRatio||t.oBackingStorePixelRatio||t.backingStorePixelRatio||1)},h=function(e,t){var n=e.textures[t];return n||((n=e.textures[t]=new Image).src=t,n)},p=function(e,t){var n=t;/(jpg|gif|png)$/.test(t)&&(n="url("+t+")"),e.canvas.style.background=n,e.canvas.style.backgroundSize="contain",e.currentBackground=t}}()},{"../body/Composite":2,"../collision/Grid":6,"../core/Common":14,"../core/Events":16,"../geometry/Bounds":24,"../geometry/Vector":26}],30:[function(e,t,n){var r={};t.exports=r;var i=e("../body/Composite"),o=e("../core/Common");!function(){var e,t;"undefined"!=typeof window&&(e=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||function(e){window.setTimeout(function(){e(o.now())},1e3/60)},t=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),r.create=function(e){o.log("RenderPixi.create: Matter.RenderPixi is deprecated (see docs)","warn");var t={controller:r,engine:null,element:null,frameRequestId:null,canvas:null,renderer:null,container:null,spriteContainer:null,pixiOptions:null,options:{width:800,height:600,background:"#fafafa",wireframeBackground:"#222",hasBounds:!1,enabled:!0,wireframes:!0,showSleeping:!0,showDebug:!1,showBroadphase:!1,showBounds:!1,showVelocity:!1,showCollisions:!1,showAxes:!1,showPositions:!1,showAngleIndicator:!1,showIds:!1,showShadows:!1}},n=o.extend(t,e),i=!n.options.wireframes&&"transparent"===n.options.background;return n.pixiOptions=n.pixiOptions||{view:n.canvas,transparent:i,antialias:!0,backgroundColor:e.background},n.mouse=e.mouse,n.engine=e.engine,n.renderer=n.renderer||new PIXI.WebGLRenderer(n.options.width,n.options.height,n.pixiOptions),n.container=n.container||new PIXI.Container,n.spriteContainer=n.spriteContainer||new PIXI.Container,n.canvas=n.canvas||n.renderer.view,n.bounds=n.bounds||{min:{x:0,y:0},max:{x:n.options.width,y:n.options.height}},n.textures={},n.sprites={},n.primitives={},n.container.addChild(n.spriteContainer),o.isElement(n.element)?n.element.appendChild(n.canvas):o.log('No "render.element" passed, "render.canvas" was not inserted into document.',"warn"),n.canvas.oncontextmenu=function(){return!1},n.canvas.onselectstart=function(){return!1},n},r.run=function(t){!function n(i){t.frameRequestId=e(n),r.world(t)}()},r.stop=function(e){t(e.frameRequestId)},r.clear=function(e){for(var t=e.container,n=e.spriteContainer;t.children[0];)t.removeChild(t.children[0]);for(;n.children[0];)n.removeChild(n.children[0]);var r=e.sprites["bg-0"];e.textures={},e.sprites={},e.primitives={},e.sprites["bg-0"]=r,r&&t.addChildAt(r,0),e.container.addChild(e.spriteContainer),e.currentBackground=null,t.scale.set(1,1),t.position.set(0,0)},r.setBackground=function(e,t){if(e.currentBackground!==t){var n=t.indexOf&&-1!==t.indexOf("#"),r=e.sprites["bg-0"];if(n){var i=o.colorToNumber(t);e.renderer.backgroundColor=i,r&&e.container.removeChild(r)}else if(!r){var s=a(e,t);(r=e.sprites["bg-0"]=new PIXI.Sprite(s)).position.x=0,r.position.y=0,e.container.addChildAt(r,0)}e.currentBackground=t}},r.world=function(e){var t,n=e.engine.world,o=e.renderer,s=e.container,a=e.options,c=i.allBodies(n),l=i.allConstraints(n),u=[];a.wireframes?r.setBackground(e,a.wireframeBackground):r.setBackground(e,a.background);var h=e.bounds.max.x-e.bounds.min.x,p=e.bounds.max.y-e.bounds.min.y,d=h/e.options.width,f=p/e.options.height;if(a.hasBounds){for(t=0;t<c.length;t++){var g=c[t];g.render.sprite.visible=Bounds.overlaps(g.bounds,e.bounds)}for(t=0;t<l.length;t++){var y=l[t],m=y.bodyA,v=y.bodyB,S=y.pointA,x=y.pointB;m&&(S=Vector.add(m.position,y.pointA)),v&&(x=Vector.add(v.position,y.pointB)),S&&x&&((Bounds.contains(e.bounds,S)||Bounds.contains(e.bounds,x))&&u.push(y))}s.scale.set(1/d,1/f),s.position.set(-e.bounds.min.x*(1/d),-e.bounds.min.y*(1/f))}else u=l;for(t=0;t<c.length;t++)r.body(e,c[t]);for(t=0;t<u.length;t++)r.constraint(e,u[t]);o.render(s)},r.constraint=function(e,t){e.engine;var n=t.bodyA,r=t.bodyB,i=t.pointA,s=t.pointB,a=e.container,c=t.render,l="c-"+t.id,u=e.primitives[l];u||(u=e.primitives[l]=new PIXI.Graphics),c.visible&&t.pointA&&t.pointB?(-1===o.indexOf(a.children,u)&&a.addChild(u),u.clear(),u.beginFill(0,0),u.lineStyle(c.lineWidth,o.colorToNumber(c.strokeStyle),1),n?u.moveTo(n.position.x+i.x,n.position.y+i.y):u.moveTo(i.x,i.y),r?u.lineTo(r.position.x+s.x,r.position.y+s.y):u.lineTo(s.x,s.y),u.endFill()):u.clear()},r.body=function(e,t){e.engine;var r=t.render;if(r.visible)if(r.sprite&&r.sprite.texture){var i="b-"+t.id,a=e.sprites[i],c=e.spriteContainer;a||(a=e.sprites[i]=n(e,t)),-1===o.indexOf(c.children,a)&&c.addChild(a),a.position.x=t.position.x,a.position.y=t.position.y,a.rotation=t.angle,a.scale.x=r.sprite.xScale||1,a.scale.y=r.sprite.yScale||1}else{var l="b-"+t.id,u=e.primitives[l],h=e.container;u||((u=e.primitives[l]=s(e,t)).initialAngle=t.angle),-1===o.indexOf(h.children,u)&&h.addChild(u),u.position.x=t.position.x,u.position.y=t.position.y,u.rotation=t.angle-u.initialAngle}};var n=function(e,t){var n=t.render.sprite.texture,r=a(e,n),i=new PIXI.Sprite(r);return i.anchor.x=t.render.sprite.xOffset,i.anchor.y=t.render.sprite.yOffset,i},s=function(e,t){var n,r=t.render,i=e.options,s=new PIXI.Graphics,a=o.colorToNumber(r.fillStyle),c=o.colorToNumber(r.strokeStyle),l=o.colorToNumber(r.strokeStyle),u=o.colorToNumber("#bbb"),h=o.colorToNumber("#CD5C5C");s.clear();for(var p=t.parts.length>1?1:0;p<t.parts.length;p++){n=t.parts[p],i.wireframes?(s.beginFill(0,0),s.lineStyle(1,u,1)):(s.beginFill(a,1),s.lineStyle(r.lineWidth,c,1)),s.moveTo(n.vertices[0].x-t.position.x,n.vertices[0].y-t.position.y);for(var d=1;d<n.vertices.length;d++)s.lineTo(n.vertices[d].x-t.position.x,n.vertices[d].y-t.position.y);s.lineTo(n.vertices[0].x-t.position.x,n.vertices[0].y-t.position.y),s.endFill(),(i.showAngleIndicator||i.showAxes)&&(s.beginFill(0,0),i.wireframes?s.lineStyle(1,h,1):s.lineStyle(1,l),s.moveTo(n.position.x-t.position.x,n.position.y-t.position.y),s.lineTo((n.vertices[0].x+n.vertices[n.vertices.length-1].x)/2-t.position.x,(n.vertices[0].y+n.vertices[n.vertices.length-1].y)/2-t.position.y),s.endFill())}return s},a=function(e,t){var n=e.textures[t];return n||(n=e.textures[t]=PIXI.Texture.fromImage(t)),n}}()},{"../body/Composite":2,"../core/Common":14}]},{},[28])(28)}),function(e,t){"function"==typeof define&&define.amd?define([],t):"object"==typeof module&&module.exports?module.exports=t():e.anime=t()}(this,()=>{const e={update:void 0,begin:void 0,run:void 0,complete:void 0,loop:1,direction:"normal",autoplay:!0,offset:0},t={duration:1e3,delay:0,easing:"easeOutElastic",elasticity:500,round:0},n=["translateX","translateY","translateZ","rotate","rotateX","rotateY","rotateZ","scale","scaleX","scaleY","scaleZ","skewX","skewY","perspective"];let r;function i(e,t){return e.indexOf(t)>-1}const o={arr:e=>Array.isArray(e),obj:e=>i(Object.prototype.toString.call(e),"Object"),pth:e=>o.obj(e)&&e.hasOwnProperty("totalLength"),svg:e=>e instanceof SVGElement,dom:e=>e.nodeType||o.svg(e),str:e=>"string"==typeof e,fnc:e=>"function"==typeof e,und:e=>void 0===e,hex:e=>/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(e),rgb:e=>/^rgb/.test(e),hsl:e=>/^hsl/.test(e),col:e=>o.hex(e)||o.rgb(e)||o.hsl(e)},s=(()=>{const e=11,t=1/(e-1);function n(e,t){return 1-3*t+3*e}function r(e,t){return 3*t-6*e}function i(e){return 3*e}function o(e,t,o){return((n(t,o)*e+r(t,o))*e+i(t))*e}function s(e,t,o){return 3*n(t,o)*e*e+2*r(t,o)*e+i(t)}return function(n,r,i,a){if(!(0<=n&&n<=1&&0<=i&&i<=1))return;let c=new Float32Array(e);if(n!==r||i!==a)for(let r=0;r<e;++r)c[r]=o(r*t,n,i);function l(r){let a=0,l=1;const u=e-1;for(;l!==u&&c[l]<=r;++l)a+=t;const h=a+(r-c[--l])/(c[l+1]-c[l])*t,p=s(h,n,i);return p>=.001?function(e,t,n,r){for(let i=0;i<4;++i){const i=s(t,n,r);if(0===i)return t;t-=(o(t,n,r)-e)/i}return t}(r,h,n,i):0===p?h:function(e,t,n,r,i){let s,a,c=0;do{(s=o(a=t+(n-t)/2,r,i)-e)>0?n=a:t=a}while(Math.abs(s)>1e-7&&++c<10);return a}(r,a,a+t,n,i)}return e=>n===r&&i===a?e:0===e?0:1===e?1:o(l(e),r,a)}})(),a=(()=>{const e=["Quad","Cubic","Quart","Quint","Sine","Expo","Circ","Back","Elastic"];function t(e,t){return 0===e||1===e?e:-Math.pow(2,10*(e-1))*Math.sin((e-1-t/(2*Math.PI)*Math.asin(1))*(2*Math.PI)/t)}const n={In:[[.55,.085,.68,.53],[.55,.055,.675,.19],[.895,.03,.685,.22],[.755,.05,.855,.06],[.47,0,.745,.715],[.95,.05,.795,.035],[.6,.04,.98,.335],[.6,-.28,.735,.045],t],Out:[[.25,.46,.45,.94],[.215,.61,.355,1],[.165,.84,.44,1],[.23,1,.32,1],[.39,.575,.565,1],[.19,1,.22,1],[.075,.82,.165,1],[.175,.885,.32,1.275],(e,n)=>1-t(1-e,n)],InOut:[[.455,.03,.515,.955],[.645,.045,.355,1],[.77,0,.175,1],[.86,0,.07,1],[.445,.05,.55,.95],[1,0,0,1],[.785,.135,.15,.86],[.68,-.55,.265,1.55],(e,n)=>e<.5?t(2*e,n)/2:1-t(-2*e+2,n)/2]};let r={linear:s(.25,.25,.75,.75)};for(let t in n)n[t].forEach((n,i)=>{r["ease"+t+e[i]]=o.fnc(n)?n:s.apply(this,n)});return r})();function c(e){if(!o.col(e))try{return document.querySelectorAll(e)}catch(e){return}}function l(e,t){const n=e.length,r=arguments.length>=2?arguments[1]:void 0;let i=[];for(let o=0;o<n;o++)if(o in e){const n=e[o];t.call(r,n,o,e)&&i.push(n)}return i}function u(e){return e.reduce((e,t)=>e.concat(o.arr(t)?u(t):t),[])}function h(e){return o.arr(e)?e:(o.str(e)&&(e=c(e)||e),e instanceof NodeList||e instanceof HTMLCollection?[].slice.call(e):[e])}function p(e,t){return e.some(e=>e===t)}function d(e){let t={};for(let n in e)t[n]=e[n];return t}function f(e,t){let n=d(e);for(let r in e)n[r]=t.hasOwnProperty(r)?t[r]:e[r];return n}function g(e,t){let n=d(e);for(let r in t)n[r]=o.und(e[r])?t[r]:e[r];return n}function y(e){return o.rgb(e)?function(e){const t=/rgb\((\d+,\s*[\d]+,\s*[\d]+)\)/g.exec(e);return t?`rgba(${t[1]},1)`:e}(e):o.hex(e)?function(e){const t=e.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i,(e,t,n,r)=>t+t+n+n+r+r),n=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return`rgba(${parseInt(n[1],16)},${parseInt(n[2],16)},${parseInt(n[3],16)},1)`}(e):o.hsl(e)?function(e){const t=/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(e)||/hsla\((\d+),\s*([\d.]+)%,\s*([\d.]+)%,\s*([\d.]+)\)/g.exec(e),n=parseInt(t[1])/360,r=parseInt(t[2])/100,i=parseInt(t[3])/100,o=t[4]||1;function s(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*(t-e)*n:n<.5?t:n<2/3?e+(t-e)*(2/3-n)*6:e}let a,c,l;if(0==r)a=c=l=i;else{const e=i<.5?i*(1+r):i+r-i*r,t=2*i-e;a=s(t,e,n+1/3),c=s(t,e,n),l=s(t,e,n-1/3)}return`rgba(${255*a},${255*c},${255*l},${o})`}(e):void 0}function m(e){const t=/([\+\-]?[0-9#\.]+)(%|px|pt|em|rem|in|cm|mm|ex|ch|pc|vw|vh|vmin|vmax|deg|rad|turn)?$/.exec(e);if(t)return t[2]}function v(e,t,n){return Math.min(Math.max(e,t),n)}function S(e,t){return o.fnc(e)?e(t.target,t.id,t.total):e}function x(e,t){if(t in e.style)return getComputedStyle(e).getPropertyValue(t.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase())||"0"}function b(e,t){return o.dom(e)&&p(n,t)?"transform":o.dom(e)&&(e.getAttribute(t)||o.svg(e)&&e[t])?"attribute":o.dom(e)&&"transform"!==t&&x(e,t)?"css":null!=e[t]?"object":void 0}function _(e,t){const n=function(e){return i(e,"translate")||"perspective"===e?"px":i(e,"rotate")||i(e,"skew")?"deg":void 0}(t),r=i(t,"scale")?1:0+n,o=e.style.transform;if(!o)return r;let s=[],a=[],c=[];const u=/(\w+)\((.+?)\)/g;for(;s=u.exec(o);)a.push(s[1]),c.push(s[2]);const h=l(c,(e,n)=>a[n]===t);return h.length?h[0]:r}function P(e,t){switch(b(e,t)){case"transform":return _(e,t);case"css":return x(e,t);case"attribute":return e.getAttribute(t)}return e[t]||0}function C(e,t){const n=/^(\*=|\+=|-=)/.exec(e);if(!n)return e;const r=m(e)||0,i=parseFloat(t),o=parseFloat(e.replace(n[0],""));switch(n[0][0]){case"+":return i+o+r;case"-":return i-o+r;case"*":return i*o+r}}function w(e,t){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))}function A(e){const t=e.points;let n,r=0;for(let e=0;e<t.numberOfItems;e++){const i=t.getItem(e);e>0&&(r+=w(n,i)),n=i}return r}function T(e){if(e.getTotalLength)return e.getTotalLength();switch(e.tagName.toLowerCase()){case"circle":return function(e){return 2*Math.PI*e.getAttribute("r")}(e);case"rect":return function(e){return 2*e.getAttribute("width")+2*e.getAttribute("height")}(e);case"line":return function(e){return w({x:e.getAttribute("x1"),y:e.getAttribute("y1")},{x:e.getAttribute("x2"),y:e.getAttribute("y2")})}(e);case"polyline":return A(e);case"polygon":return function(e){const t=e.points;return A(e)+w(t.getItem(t.numberOfItems-1),t.getItem(0))}(e)}}function V(e,t){function n(n=0){const r=t+n>=1?t+n:0;return e.el.getPointAtLength(r)}const r=n(),i=n(-1),o=n(1);switch(e.property){case"x":return r.x;case"y":return r.y;case"angle":return 180*Math.atan2(o.y-i.y,o.x-i.x)/Math.PI}}function E(e,t){const n=/-?\d*\.?\d+/g,r=function(e,t){if(o.col(e))return y(e);const n=m(e),r=n?e.substr(0,e.length-n.length):e;return t&&!/\s/g.test(e)?r+t:r}(o.pth(e)?e.totalLength:e,t)+"";return{original:r,numbers:r.match(n)?r.match(n).map(Number):[0],strings:o.str(e)||t?r.split(n):[]}}function G(e){return l(e?u(o.arr(e)?e.map(h):h(e)):[],(e,t,n)=>n.indexOf(e)===t)}function L(e,t){let n=d(t);if(o.arr(e)){const r=e.length;2===r&&!o.obj(e[0])?e={value:e}:o.fnc(t.duration)||(n.duration=t.duration/r)}return h(e).map((e,n)=>{const r=n?0:t.delay;let i=o.obj(e)&&!o.pth(e)?e:{value:e};return o.und(i.delay)&&(i.delay=r),i}).map(e=>g(e,n))}function O(e,t){let n;return e.tweens.map(r=>{let i=function(e,t){let n={};for(let r in e){let i=S(e[r],t);o.arr(i)&&1===(i=i.map(e=>S(e,t))).length&&(i=i[0]),n[r]=i}return n.duration=parseFloat(n.duration),n.delay=parseFloat(n.delay),n}(r,t);const c=i.value,l=P(t.target,e.name),u=n?n.to.original:l,h=o.arr(c)?c[0]:u,p=C(o.arr(c)?c[1]:c,h),d=m(p)||m(h)||m(l);return i.from=E(h,d),i.to=E(p,d),i.start=n?n.end:e.offset,i.end=i.start+i.delay+i.duration,i.easing=function(e){return o.arr(e)?s.apply(this,e):a[e]}(i.easing),i.elasticity=(1e3-v(i.elasticity,1,999))/1e3,i.isPath=o.pth(c),i.isColor=o.col(i.from.original),i.isColor&&(i.round=1),n=i,i})}const k={css:(e,t,n)=>e.style[t]=n,attribute:(e,t,n)=>e.setAttribute(t,n),object:(e,t,n)=>e[t]=n,transform:(e,t,n,r,i)=>{r[i]||(r[i]=[]),r[i].push(`${t}(${n})`)}};function I(e,t){return l(u(e.map(e=>t.map(t=>(function(e,t){const n=b(e.target,t.name);if(n){const r=O(t,e);return{type:n,property:t.name,animatable:e,tweens:r,duration:r[r.length-1].end,delay:r[0].delay}}})(e,t)))),e=>!o.und(e))}function R(e,t,n,r){const i="delay"===e;return t.length?(i?Math.min:Math.max).apply(Math,t.map(t=>t[e])):i?r.delay:n.offset+r.delay+r.duration}function N(n){const r=f(e,n),i=f(t,n),o=function(e){const t=G(e);return t.map((e,n)=>({target:e,id:n,total:t.length}))}(n.targets),s=I(o,function(e,t,n){let r=[];const i=g(e,t);for(let e in n)i.hasOwnProperty(e)||"targets"===e||r.push({name:e,offset:i.offset,tweens:L(n[e],t)});return r}(r,i,n));return g(r,{children:[],animatables:o,animations:s,duration:R("duration",s,r,i),delay:R("delay",s,r,i)})}let M=[],B=0;const H=(()=>{function e(){B=requestAnimationFrame(t)}function t(t){const n=M.length;if(n){let r=0;for(;r<n;)M[r]&&M[r].tick(t),r++;e()}else cancelAnimationFrame(B),B=0}return e})();function j(e={}){let t,n,i=0,o=null;function s(){return window.Promise&&new Promise(e=>o=e)}let a=s(),c=N(e);function u(){c.reversed=!c.reversed}function h(e){return c.reversed?c.duration-e:e}function p(e){let t=0,n={};const i=c.animations,o=i.length;for(;t<o;){const r=i[t],o=r.animatable,s=r.tweens,a=s.length-1;let c=s[a];a&&(c=l(s,t=>e<t.end)[0]||c);const u=v(e-c.start-c.delay,0,c.duration)/c.duration,h=isNaN(u)?1:c.easing(u,c.elasticity),p=c.to.strings,d=c.round;let f,g=[];const y=c.to.numbers.length;for(let e=0;e<y;e++){let t;const n=c.to.numbers[e],r=c.from.numbers[e];t=c.isPath?V(c.value,h*n):r+h*(n-r),d&&(c.isColor&&e>2||(t=Math.round(t*d)/d)),g.push(t)}const m=p.length;if(m){f=p[0];for(let e=0;e<m;e++){p[e];const t=p[e+1],n=g[e];isNaN(n)||(f+=t?n+t:n+" ")}}else f=g[0];k[r.type](o.target,r.property,f,n,o.id),r.currentValue=f,t++}const s=Object.keys(n).length;if(s)for(let e=0;e<s;e++){if(!r){const e="transform";r=x(document.body,e)?e:`-webkit-${e}`}c.animatables[e].target.style[r]=n[e].join(" ")}c.currentTime=e,c.progress=e/c.duration*100}function d(e){c[e]&&c[e](c)}function f(){c.remaining&&!0!==c.remaining&&c.remaining--}function g(e){const r=c.duration,l=c.offset,g=l+c.delay,y=c.currentTime,m=c.reversed,v=h(e);c.children.length&&function(e){const t=c.children,n=t.length;if(e>=c.currentTime)for(let r=0;r<n;r++)t[r].seek(e);else for(let r=n;r--;)t[r].seek(e)}(v),(v>=g||!r)&&(c.began||(c.began=!0,d("begin")),d("run")),v>l&&v<r?p(v):(v<=l&&0!==y&&(p(0),m&&f()),(v>=r&&y!==r||!r)&&(p(r),m||f())),d("update"),e>=r&&(c.remaining?(n=t,"alternate"===c.direction&&u()):(c.pause(),c.completed||(c.completed=!0,d("complete"),"Promise"in window&&(o(),a=s()))),i=0)}return c.reset=function(){const e=c.direction,t=c.loop;c.currentTime=0,c.progress=0,c.paused=!0,c.began=!1,c.completed=!1,c.reversed="reverse"===e,c.remaining="alternate"===e&&1===t?2:t,p(0);for(let e=c.children.length;e--;)c.children[e].reset()},c.tick=function(e){t=e,n||(n=t),g((i+t-n)*j.speed)},c.seek=function(e){g(h(e))},c.pause=function(){const e=M.indexOf(c);e>-1&&M.splice(e,1),c.paused=!0},c.play=function(){c.paused&&(c.paused=!1,n=0,i=h(c.currentTime),M.push(c),B||H())},c.reverse=function(){u(),n=0,i=h(c.currentTime)},c.restart=function(){c.pause(),c.reset(),c.play()},c.finished=a,c.reset(),c.autoplay&&c.play(),c}return j.version="2.2.0",j.speed=1,j.running=M,j.remove=function(e){const t=G(e);for(let e=M.length;e--;){const n=M[e],r=n.animations;for(let e=r.length;e--;)p(t,r[e].animatable.target)&&(r.splice(e,1),r.length||n.pause())}},j.getValue=P,j.path=function(e,t){const n=o.str(e)?c(e)[0]:e,r=t||100;return function(e){return{el:n,property:e,totalLength:T(n)*(r/100)}}},j.setDashoffset=function(e){const t=T(e);return e.setAttribute("stroke-dasharray",t),t},j.bezier=s,j.easings=a,j.timeline=function(e){let n=j(e);return n.pause(),n.duration=0,n.add=function(r){return n.children.forEach(e=>{e.began=!0,e.completed=!0}),h(r).forEach(r=>{let i=g(r,f(t,e||{}));i.targets=i.targets||e.targets;const s=n.duration,a=i.offset;i.autoplay=!1,i.direction=n.direction,i.offset=o.und(a)?s:C(a,s),n.began=!0,n.completed=!0,n.seek(i.offset);const c=j(i);c.began=!0,c.completed=!0,c.duration>s&&(n.duration=c.duration),n.children.push(c)}),n.seek(0),n.reset(),n.autoplay&&n.restart(),n},n},j.random=((e,t)=>Math.floor(Math.random()*(t-e+1))+e),j}),function(e){"object"==typeof exports?module.exports=e():"function"==typeof define&&define.amd?define(e):"undefined"!=typeof window?window.decomp=e():"undefined"!=typeof global?global.decomp=e():"undefined"!=typeof self&&(self.decomp=e())}(function(){return function e(t,n,r){function i(s,a){if(!n[s]){if(!t[s]){var c="function"==typeof require&&require;if(!a&&c)return c(s,!0);if(o)return o(s,!0);throw new Error("Cannot find module '"+s+"'")}var l=n[s]={exports:{}};t[s][0].call(l.exports,function(e){var n=t[s][1][e];return i(n||e)},l,l.exports,e,t,n,r)}return n[s].exports}for(var o="function"==typeof require&&require,s=0;s<r.length;s++)i(r[s]);return i}({1:[function(e,t,n){var r=e("./Scalar");function i(){}t.exports=i,i.lineInt=function(e,t,n){n=n||0;var i,o,s,a,c,l,u,h=[0,0];return i=e[1][1]-e[0][1],o=e[0][0]-e[1][0],s=i*e[0][0]+o*e[0][1],a=t[1][1]-t[0][1],c=t[0][0]-t[1][0],l=a*t[0][0]+c*t[0][1],u=i*c-a*o,r.eq(u,0,n)||(h[0]=(c*s-o*l)/u,h[1]=(i*l-a*s)/u),h},i.segmentsIntersect=function(e,t,n,r){var i=t[0]-e[0],o=t[1]-e[1],s=r[0]-n[0],a=r[1]-n[1];if(s*o-a*i==0)return!1;var c=(i*(n[1]-e[1])+o*(e[0]-n[0]))/(s*o-a*i),l=(s*(e[1]-n[1])+a*(n[0]-e[0]))/(a*i-s*o);return c>=0&&c<=1&&l>=0&&l<=1}},{"./Scalar":4}],2:[function(e,t,n){function r(){}t.exports=r,r.area=function(e,t,n){return(t[0]-e[0])*(n[1]-e[1])-(n[0]-e[0])*(t[1]-e[1])},r.left=function(e,t,n){return r.area(e,t,n)>0},r.leftOn=function(e,t,n){return r.area(e,t,n)>=0},r.right=function(e,t,n){return r.area(e,t,n)<0},r.rightOn=function(e,t,n){return r.area(e,t,n)<=0};var i=[],o=[];r.collinear=function(e,t,n,s){if(s){var a=i,c=o;a[0]=t[0]-e[0],a[1]=t[1]-e[1],c[0]=n[0]-t[0],c[1]=n[1]-t[1];var l=a[0]*c[0]+a[1]*c[1],u=Math.sqrt(a[0]*a[0]+a[1]*a[1]),h=Math.sqrt(c[0]*c[0]+c[1]*c[1]);return Math.acos(l/(u*h))<s}return 0==r.area(e,t,n)},r.sqdist=function(e,t){var n=t[0]-e[0],r=t[1]-e[1];return n*n+r*r}},{}],3:[function(e,t,n){var r=e("./Line"),i=e("./Point"),o=e("./Scalar");function s(){this.vertices=[]}t.exports=s,s.prototype.at=function(e){var t=this.vertices,n=t.length;return t[e<0?e%n+n:e%n]},s.prototype.first=function(){return this.vertices[0]},s.prototype.last=function(){return this.vertices[this.vertices.length-1]},s.prototype.clear=function(){this.vertices.length=0},s.prototype.append=function(e,t,n){if(void 0===t)throw new Error("From is not given!");if(void 0===n)throw new Error("To is not given!");if(n-1<t)throw new Error("lol1");if(n>e.vertices.length)throw new Error("lol2");if(t<0)throw new Error("lol3");for(var r=t;r<n;r++)this.vertices.push(e.vertices[r])},s.prototype.makeCCW=function(){for(var e=0,t=this.vertices,n=1;n<this.vertices.length;++n)(t[n][1]<t[e][1]||t[n][1]==t[e][1]&&t[n][0]>t[e][0])&&(e=n);i.left(this.at(e-1),this.at(e),this.at(e+1))||this.reverse()},s.prototype.reverse=function(){for(var e=[],t=0,n=this.vertices.length;t!==n;t++)e.push(this.vertices.pop());this.vertices=e},s.prototype.isReflex=function(e){return i.right(this.at(e-1),this.at(e),this.at(e+1))};var a=[],c=[];function l(e,t,n,r,i){i=i||0;var s=t[1]-e[1],a=e[0]-t[0],c=s*e[0]+a*e[1],l=r[1]-n[1],u=n[0]-r[0],h=l*n[0]+u*n[1],p=s*u-l*a;return o.eq(p,0,i)?[0,0]:[(u*c-a*h)/p,(s*h-l*c)/p]}s.prototype.canSee=function(e,t){var n,o,s=a,l=c;if(i.leftOn(this.at(e+1),this.at(e),this.at(t))&&i.rightOn(this.at(e-1),this.at(e),this.at(t)))return!1;o=i.sqdist(this.at(e),this.at(t));for(var u=0;u!==this.vertices.length;++u)if((u+1)%this.vertices.length!==e&&u!==e&&i.leftOn(this.at(e),this.at(t),this.at(u+1))&&i.rightOn(this.at(e),this.at(t),this.at(u))&&(s[0]=this.at(e),s[1]=this.at(t),l[0]=this.at(u),l[1]=this.at(u+1),n=r.lineInt(s,l),i.sqdist(this.at(e),n)<o))return!1;return!0},s.prototype.copy=function(e,t,n){var r=n||new s;if(r.clear(),e<t)for(var i=e;i<=t;i++)r.vertices.push(this.vertices[i]);else{for(i=0;i<=t;i++)r.vertices.push(this.vertices[i]);for(i=e;i<this.vertices.length;i++)r.vertices.push(this.vertices[i])}return r},s.prototype.getCutEdges=function(){for(var e=[],t=[],n=[],r=new s,i=Number.MAX_VALUE,o=0;o<this.vertices.length;++o)if(this.isReflex(o))for(var a=0;a<this.vertices.length;++a)if(this.canSee(o,a)){t=this.copy(o,a,r).getCutEdges(),n=this.copy(a,o,r).getCutEdges();for(var c=0;c<n.length;c++)t.push(n[c]);t.length<i&&(e=t,i=t.length,e.push([this.at(o),this.at(a)]))}return e},s.prototype.decomp=function(){var e=this.getCutEdges();return e.length>0?this.slice(e):[this]},s.prototype.slice=function(e){if(0==e.length)return[this];if(e instanceof Array&&e.length&&e[0]instanceof Array&&2==e[0].length&&e[0][0]instanceof Array){for(var t=[this],n=0;n<e.length;n++)for(var r=e[n],i=0;i<t.length;i++){var o=t[i].slice(r);if(o){t.splice(i,1),t.push(o[0],o[1]);break}}return t}r=e,n=this.vertices.indexOf(r[0]),i=this.vertices.indexOf(r[1]);return-1!=n&&-1!=i&&[this.copy(n,i),this.copy(i,n)]},s.prototype.isSimple=function(){for(var e=this.vertices,t=0;t<e.length-1;t++)for(var n=0;n<t-1;n++)if(r.segmentsIntersect(e[t],e[t+1],e[n],e[n+1]))return!1;for(t=1;t<e.length-2;t++)if(r.segmentsIntersect(e[0],e[e.length-1],e[t],e[t+1]))return!1;return!0},s.prototype.quickDecomp=function(e,t,n,r,o,a){o=o||100,a=a||0,r=r||25,e=void 0!==e?e:[],t=t||[],n=n||[];var c=[0,0],u=[0,0],h=[0,0],p=0,d=0,f=0,g=0,y=0,m=0,v=0,S=new s,x=new s,b=this.vertices;if(b.length<3)return e;if(++a>o)return console.warn("quickDecomp: max level ("+o+") reached."),e;for(var _=0;_<this.vertices.length;++_)if(this.isReflex(_)){t.push(this.vertices[_]),p=d=Number.MAX_VALUE;for(var P=0;P<this.vertices.length;++P)i.left(this.at(_-1),this.at(_),this.at(P))&&i.rightOn(this.at(_-1),this.at(_),this.at(P-1))&&(h=l(this.at(_-1),this.at(_),this.at(P),this.at(P-1)),i.right(this.at(_+1),this.at(_),h)&&(f=i.sqdist(this.vertices[_],h))<d&&(d=f,u=h,m=P)),i.left(this.at(_+1),this.at(_),this.at(P+1))&&i.rightOn(this.at(_+1),this.at(_),this.at(P))&&(h=l(this.at(_+1),this.at(_),this.at(P),this.at(P+1)),i.left(this.at(_-1),this.at(_),h)&&(f=i.sqdist(this.vertices[_],h))<p&&(p=f,c=h,y=P));if(m==(y+1)%this.vertices.length)h[0]=(u[0]+c[0])/2,h[1]=(u[1]+c[1])/2,n.push(h),_<y?(S.append(this,_,y+1),S.vertices.push(h),x.vertices.push(h),0!=m&&x.append(this,m,this.vertices.length),x.append(this,0,_+1)):(0!=_&&S.append(this,_,this.vertices.length),S.append(this,0,y+1),S.vertices.push(h),x.vertices.push(h),x.append(this,m,_+1));else{if(m>y&&(y+=this.vertices.length),g=Number.MAX_VALUE,y<m)return e;for(P=m;P<=y;++P)i.leftOn(this.at(_-1),this.at(_),this.at(P))&&i.rightOn(this.at(_+1),this.at(_),this.at(P))&&(f=i.sqdist(this.at(_),this.at(P)))<g&&(g=f,v=P%this.vertices.length);_<v?(S.append(this,_,v+1),0!=v&&x.append(this,v,b.length),x.append(this,0,_+1)):(0!=_&&S.append(this,_,b.length),S.append(this,0,v+1),x.append(this,v,_+1))}return S.vertices.length<x.vertices.length?(S.quickDecomp(e,t,n,r,o,a),x.quickDecomp(e,t,n,r,o,a)):(x.quickDecomp(e,t,n,r,o,a),S.quickDecomp(e,t,n,r,o,a)),e}return e.push(this),e},s.prototype.removeCollinearPoints=function(e){for(var t=0,n=this.vertices.length-1;this.vertices.length>3&&n>=0;--n)i.collinear(this.at(n-1),this.at(n),this.at(n+1),e)&&(this.vertices.splice(n%this.vertices.length,1),n--,t++);return t}},{"./Line":1,"./Point":2,"./Scalar":4}],4:[function(e,t,n){function r(){}t.exports=r,r.eq=function(e,t,n){return n=n||0,Math.abs(e-t)<n}},{}],5:[function(e,t,n){t.exports={Polygon:e("./Polygon"),Point:e("./Point")}},{"./Point":2,"./Polygon":3}]},{},[5])(5)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5qcyIsInBhdGhzZWcuanMiLCJtYXR0ZXIuanMiLCJhbmltZS5qcyIsImRlY29tcC5qcyJdLCJuYW1lcyI6WyJnbG9iYWwiLCJmYWN0b3J5IiwibW9kdWxlIiwiZXhwb3J0cyIsImRvY3VtZW50IiwidyIsIkVycm9yIiwid2luZG93IiwidGhpcyIsIm5vR2xvYmFsIiwiZGVsZXRlZElkcyIsInNsaWNlIiwiY29uY2F0IiwicHVzaCIsImluZGV4T2YiLCJjbGFzczJ0eXBlIiwidG9TdHJpbmciLCJoYXNPd24iLCJoYXNPd25Qcm9wZXJ0eSIsInN1cHBvcnQiLCJqUXVlcnkiLCJzZWxlY3RvciIsImNvbnRleHQiLCJmbiIsImluaXQiLCJydHJpbSIsInJtc1ByZWZpeCIsInJkYXNoQWxwaGEiLCJmY2FtZWxDYXNlIiwiYWxsIiwibGV0dGVyIiwidG9VcHBlckNhc2UiLCJpc0FycmF5TGlrZSIsIm9iaiIsImxlbmd0aCIsInR5cGUiLCJpc1dpbmRvdyIsInByb3RvdHlwZSIsImpxdWVyeSIsImNvbnN0cnVjdG9yIiwidG9BcnJheSIsImNhbGwiLCJnZXQiLCJudW0iLCJwdXNoU3RhY2siLCJlbGVtcyIsInJldCIsIm1lcmdlIiwicHJldk9iamVjdCIsImVhY2giLCJjYWxsYmFjayIsIm1hcCIsImVsZW0iLCJpIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJmaXJzdCIsImVxIiwibGFzdCIsImxlbiIsImoiLCJlbmQiLCJzb3J0Iiwic3BsaWNlIiwiZXh0ZW5kIiwic3JjIiwiY29weUlzQXJyYXkiLCJjb3B5IiwibmFtZSIsIm9wdGlvbnMiLCJjbG9uZSIsInRhcmdldCIsImRlZXAiLCJpc0Z1bmN0aW9uIiwiaXNQbGFpbk9iamVjdCIsImlzQXJyYXkiLCJ1bmRlZmluZWQiLCJleHBhbmRvIiwiTWF0aCIsInJhbmRvbSIsInJlcGxhY2UiLCJpc1JlYWR5IiwiZXJyb3IiLCJtc2ciLCJub29wIiwiQXJyYXkiLCJpc051bWVyaWMiLCJyZWFsU3RyaW5nT2JqIiwicGFyc2VGbG9hdCIsImlzRW1wdHlPYmplY3QiLCJrZXkiLCJub2RlVHlwZSIsImUiLCJvd25GaXJzdCIsImdsb2JhbEV2YWwiLCJkYXRhIiwidHJpbSIsImV4ZWNTY3JpcHQiLCJjYW1lbENhc2UiLCJzdHJpbmciLCJub2RlTmFtZSIsInRvTG93ZXJDYXNlIiwidGV4dCIsIm1ha2VBcnJheSIsImFyciIsInJlc3VsdHMiLCJPYmplY3QiLCJpbkFycmF5IiwibWF4Iiwic2Vjb25kIiwiZ3JlcCIsImludmVydCIsIm1hdGNoZXMiLCJjYWxsYmFja0V4cGVjdCIsImFyZyIsInZhbHVlIiwiZ3VpZCIsInByb3h5IiwiYXJncyIsInRtcCIsIm5vdyIsIkRhdGUiLCJTeW1ib2wiLCJpdGVyYXRvciIsInNwbGl0IiwiU2l6emxlIiwiRXhwciIsImdldFRleHQiLCJpc1hNTCIsInRva2VuaXplIiwiY29tcGlsZSIsInNlbGVjdCIsIm91dGVybW9zdENvbnRleHQiLCJzb3J0SW5wdXQiLCJoYXNEdXBsaWNhdGUiLCJzZXREb2N1bWVudCIsImRvY0VsZW0iLCJkb2N1bWVudElzSFRNTCIsInJidWdneVFTQSIsInJidWdneU1hdGNoZXMiLCJjb250YWlucyIsInByZWZlcnJlZERvYyIsImRpcnJ1bnMiLCJkb25lIiwiY2xhc3NDYWNoZSIsImNyZWF0ZUNhY2hlIiwidG9rZW5DYWNoZSIsImNvbXBpbGVyQ2FjaGUiLCJzb3J0T3JkZXIiLCJhIiwiYiIsIk1BWF9ORUdBVElWRSIsInBvcCIsInB1c2hfbmF0aXZlIiwibGlzdCIsImJvb2xlYW5zIiwid2hpdGVzcGFjZSIsImlkZW50aWZpZXIiLCJhdHRyaWJ1dGVzIiwicHNldWRvcyIsInJ3aGl0ZXNwYWNlIiwiUmVnRXhwIiwicmNvbW1hIiwicmNvbWJpbmF0b3JzIiwicmF0dHJpYnV0ZVF1b3RlcyIsInJwc2V1ZG8iLCJyaWRlbnRpZmllciIsIm1hdGNoRXhwciIsIklEIiwiQ0xBU1MiLCJUQUciLCJBVFRSIiwiUFNFVURPIiwiQ0hJTEQiLCJib29sIiwibmVlZHNDb250ZXh0IiwicmlucHV0cyIsInJoZWFkZXIiLCJybmF0aXZlIiwicnF1aWNrRXhwciIsInJzaWJsaW5nIiwicmVzY2FwZSIsInJ1bmVzY2FwZSIsImZ1bmVzY2FwZSIsIl8iLCJlc2NhcGVkIiwiZXNjYXBlZFdoaXRlc3BhY2UiLCJoaWdoIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwidW5sb2FkSGFuZGxlciIsImNoaWxkTm9kZXMiLCJlbHMiLCJzZWVkIiwibSIsIm5pZCIsIm5pZHNlbGVjdCIsIm1hdGNoIiwiZ3JvdXBzIiwibmV3U2VsZWN0b3IiLCJuZXdDb250ZXh0Iiwib3duZXJEb2N1bWVudCIsImV4ZWMiLCJnZXRFbGVtZW50QnlJZCIsImlkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwidGVzdCIsImdldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsInRvU2VsZWN0b3IiLCJqb2luIiwidGVzdENvbnRleHQiLCJwYXJlbnROb2RlIiwicXVlcnlTZWxlY3RvckFsbCIsInFzYUVycm9yIiwicmVtb3ZlQXR0cmlidXRlIiwia2V5cyIsImNhY2hlIiwiY2FjaGVMZW5ndGgiLCJzaGlmdCIsIm1hcmtGdW5jdGlvbiIsImFzc2VydCIsImRpdiIsImNyZWF0ZUVsZW1lbnQiLCJyZW1vdmVDaGlsZCIsImFkZEhhbmRsZSIsImF0dHJzIiwiaGFuZGxlciIsImF0dHJIYW5kbGUiLCJzaWJsaW5nQ2hlY2siLCJjdXIiLCJkaWZmIiwic291cmNlSW5kZXgiLCJuZXh0U2libGluZyIsImNyZWF0ZUlucHV0UHNldWRvIiwiY3JlYXRlQnV0dG9uUHNldWRvIiwiY3JlYXRlUG9zaXRpb25hbFBzZXVkbyIsImFyZ3VtZW50IiwibWF0Y2hJbmRleGVzIiwiZG9jdW1lbnRFbGVtZW50Iiwibm9kZSIsImhhc0NvbXBhcmUiLCJwYXJlbnQiLCJkb2MiLCJkZWZhdWx0VmlldyIsInRvcCIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsImNsYXNzTmFtZSIsImFwcGVuZENoaWxkIiwiY3JlYXRlQ29tbWVudCIsImdldEJ5SWQiLCJnZXRFbGVtZW50c0J5TmFtZSIsImZpbmQiLCJmaWx0ZXIiLCJhdHRySWQiLCJnZXRBdHRyaWJ1dGVOb2RlIiwidGFnIiwiaW5uZXJIVE1MIiwiaW5wdXQiLCJtYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJkaXNjb25uZWN0ZWRNYXRjaCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiYWRvd24iLCJidXAiLCJjb21wYXJlIiwic29ydERldGFjaGVkIiwiYXVwIiwiYXAiLCJicCIsInVuc2hpZnQiLCJleHByIiwiZWxlbWVudHMiLCJhdHRyIiwidmFsIiwic3BlY2lmaWVkIiwidW5pcXVlU29ydCIsImR1cGxpY2F0ZXMiLCJkZXRlY3REdXBsaWNhdGVzIiwic29ydFN0YWJsZSIsInRleHRDb250ZW50IiwiZmlyc3RDaGlsZCIsIm5vZGVWYWx1ZSIsInNlbGVjdG9ycyIsImNyZWF0ZVBzZXVkbyIsInJlbGF0aXZlIiwiPiIsImRpciIsIiAiLCIrIiwifiIsInByZUZpbHRlciIsImV4Y2VzcyIsInVucXVvdGVkIiwibm9kZU5hbWVTZWxlY3RvciIsInBhdHRlcm4iLCJvcGVyYXRvciIsImNoZWNrIiwicmVzdWx0Iiwid2hhdCIsInNpbXBsZSIsImZvcndhcmQiLCJvZlR5cGUiLCJ4bWwiLCJ1bmlxdWVDYWNoZSIsIm91dGVyQ2FjaGUiLCJub2RlSW5kZXgiLCJzdGFydCIsInVzZUNhY2hlIiwibGFzdENoaWxkIiwidW5pcXVlSUQiLCJwc2V1ZG8iLCJzZXRGaWx0ZXJzIiwiaWR4IiwibWF0Y2hlZCIsIm5vdCIsIm1hdGNoZXIiLCJ1bm1hdGNoZWQiLCJoYXMiLCJpbm5lclRleHQiLCJsYW5nIiwiZWxlbUxhbmciLCJoYXNoIiwibG9jYXRpb24iLCJyb290IiwiZm9jdXMiLCJhY3RpdmVFbGVtZW50IiwiaGFzRm9jdXMiLCJocmVmIiwidGFiSW5kZXgiLCJlbmFibGVkIiwiZGlzYWJsZWQiLCJjaGVja2VkIiwic2VsZWN0ZWQiLCJzZWxlY3RlZEluZGV4IiwiZW1wdHkiLCJoZWFkZXIiLCJidXR0b24iLCJldmVuIiwib2RkIiwibHQiLCJndCIsInJhZGlvIiwiY2hlY2tib3giLCJmaWxlIiwicGFzc3dvcmQiLCJpbWFnZSIsInN1Ym1pdCIsInJlc2V0IiwidG9rZW5zIiwiYWRkQ29tYmluYXRvciIsImNvbWJpbmF0b3IiLCJiYXNlIiwiY2hlY2tOb25FbGVtZW50cyIsImRvbmVOYW1lIiwib2xkQ2FjaGUiLCJuZXdDYWNoZSIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJjb25kZW5zZSIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInRlbXAiLCJwcmVNYXAiLCJwb3N0TWFwIiwicHJlZXhpc3RpbmciLCJjb250ZXh0cyIsIm11bHRpcGxlQ29udGV4dHMiLCJtYXRjaGVySW4iLCJtYXRjaGVyT3V0IiwibWF0Y2hlckZyb21Ub2tlbnMiLCJjaGVja0NvbnRleHQiLCJsZWFkaW5nUmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0IiwiZmlsdGVycyIsInBhcnNlT25seSIsInNvRmFyIiwicHJlRmlsdGVycyIsImNhY2hlZCIsInNldE1hdGNoZXJzIiwiZWxlbWVudE1hdGNoZXJzIiwiYnlTZXQiLCJieUVsZW1lbnQiLCJzdXBlck1hdGNoZXIiLCJvdXRlcm1vc3QiLCJtYXRjaGVkQ291bnQiLCJzZXRNYXRjaGVkIiwiY29udGV4dEJhY2t1cCIsImRpcnJ1bnNVbmlxdWUiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJ0b2tlbiIsImNvbXBpbGVkIiwiZGl2MSIsImRlZmF1bHRWYWx1ZSIsInVuaXF1ZSIsImlzWE1MRG9jIiwidW50aWwiLCJ0cnVuY2F0ZSIsImlzIiwic2libGluZ3MiLCJuIiwicm5lZWRzQ29udGV4dCIsInJzaW5nbGVUYWciLCJyaXNTaW1wbGUiLCJ3aW5ub3ciLCJxdWFsaWZpZXIiLCJzZWxmIiwicm9vdGpRdWVyeSIsImNoYXJBdCIsInBhcnNlSFRNTCIsInJlYWR5IiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNoaWxkcmVuIiwiY29udGVudHMiLCJuZXh0IiwicHJldiIsInNpYmxpbmciLCJ0YXJnZXRzIiwiY2xvc2VzdCIsImwiLCJwb3MiLCJpbmRleCIsInByZXZBbGwiLCJhZGQiLCJhZGRCYWNrIiwicGFyZW50cyIsInBhcmVudHNVbnRpbCIsIm5leHRBbGwiLCJuZXh0VW50aWwiLCJwcmV2VW50aWwiLCJjb250ZW50RG9jdW1lbnQiLCJjb250ZW50V2luZG93IiwicmV2ZXJzZSIsInJlYWR5TGlzdCIsInJub3R3aGl0ZSIsImRldGFjaCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjb21wbGV0ZWQiLCJkZXRhY2hFdmVudCIsImV2ZW50IiwicmVhZHlTdGF0ZSIsIkNhbGxiYWNrcyIsIm9iamVjdCIsImZsYWciLCJjcmVhdGVPcHRpb25zIiwiZmlyaW5nIiwibWVtb3J5IiwiZmlyZWQiLCJsb2NrZWQiLCJxdWV1ZSIsImZpcmluZ0luZGV4IiwiZmlyZSIsIm9uY2UiLCJzdG9wT25GYWxzZSIsInJlbW92ZSIsImRpc2FibGUiLCJsb2NrIiwiZmlyZVdpdGgiLCJEZWZlcnJlZCIsImZ1bmMiLCJ0dXBsZXMiLCJzdGF0ZSIsInByb21pc2UiLCJhbHdheXMiLCJkZWZlcnJlZCIsImZhaWwiLCJ0aGVuIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwicHJvZ3Jlc3MiLCJub3RpZnkiLCJyZXNvbHZlIiwicmVqZWN0IiwicGlwZSIsInN0YXRlU3RyaW5nIiwid2hlbiIsInN1Ym9yZGluYXRlIiwicHJvZ3Jlc3NWYWx1ZXMiLCJwcm9ncmVzc0NvbnRleHRzIiwicmVzb2x2ZUNvbnRleHRzIiwicmVzb2x2ZVZhbHVlcyIsInJlbWFpbmluZyIsInVwZGF0ZUZ1bmMiLCJ2YWx1ZXMiLCJub3RpZnlXaXRoIiwicmVzb2x2ZVdpdGgiLCJyZWFkeVdhaXQiLCJob2xkUmVhZHkiLCJob2xkIiwid2FpdCIsInRyaWdnZXJIYW5kbGVyIiwib2ZmIiwiZG9TY3JvbGwiLCJzZXRUaW1lb3V0IiwiZnJhbWVFbGVtZW50IiwiZG9TY3JvbGxDaGVjayIsImlubGluZUJsb2NrTmVlZHNMYXlvdXQiLCJib2R5IiwiY29udGFpbmVyIiwic3R5bGUiLCJjc3NUZXh0Iiwiem9vbSIsIm9mZnNldFdpZHRoIiwiZGVsZXRlRXhwYW5kbyIsInNocmlua1dyYXBCbG9ja3NWYWwiLCJhY2NlcHREYXRhIiwibm9EYXRhIiwicmJyYWNlIiwicm11bHRpRGFzaCIsImRhdGFBdHRyIiwicGFyc2VKU09OIiwiaXNFbXB0eURhdGFPYmplY3QiLCJpbnRlcm5hbERhdGEiLCJwdnQiLCJ0aGlzQ2FjaGUiLCJpbnRlcm5hbEtleSIsImlzTm9kZSIsInRvSlNPTiIsImludGVybmFsUmVtb3ZlRGF0YSIsImNsZWFuRGF0YSIsImFwcGxldCAiLCJlbWJlZCAiLCJvYmplY3QgIiwiaGFzRGF0YSIsInJlbW92ZURhdGEiLCJfZGF0YSIsIl9yZW1vdmVEYXRhIiwiZGVxdWV1ZSIsInN0YXJ0TGVuZ3RoIiwiaG9va3MiLCJfcXVldWVIb29rcyIsInN0b3AiLCJzZXR0ZXIiLCJjbGVhclF1ZXVlIiwiY291bnQiLCJkZWZlciIsInNocmlua1dyYXBCbG9ja3MiLCJ3aWR0aCIsInBudW0iLCJzb3VyY2UiLCJyY3NzTnVtIiwiY3NzRXhwYW5kIiwiaXNIaWRkZW4iLCJlbCIsImNzcyIsImFkanVzdENTUyIsInByb3AiLCJ2YWx1ZVBhcnRzIiwidHdlZW4iLCJhZGp1c3RlZCIsInNjYWxlIiwibWF4SXRlcmF0aW9ucyIsImN1cnJlbnRWYWx1ZSIsImluaXRpYWwiLCJ1bml0IiwiY3NzTnVtYmVyIiwiaW5pdGlhbEluVW5pdCIsImZyYWdtZW50IiwiYWNjZXNzIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJyYXciLCJidWxrIiwicmNoZWNrYWJsZVR5cGUiLCJydGFnTmFtZSIsInJzY3JpcHRUeXBlIiwicmxlYWRpbmdXaGl0ZXNwYWNlIiwibm9kZU5hbWVzIiwiY3JlYXRlU2FmZUZyYWdtZW50Iiwic2FmZUZyYWciLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwibGVhZGluZ1doaXRlc3BhY2UiLCJ0Ym9keSIsImh0bWxTZXJpYWxpemUiLCJodG1sNUNsb25lIiwiY2xvbmVOb2RlIiwib3V0ZXJIVE1MIiwiYXBwZW5kQ2hlY2tlZCIsIm5vQ2xvbmVDaGVja2VkIiwiY2hlY2tDbG9uZSIsIm5vQ2xvbmVFdmVudCIsIndyYXBNYXAiLCJvcHRpb24iLCJsZWdlbmQiLCJhcmVhIiwicGFyYW0iLCJ0aGVhZCIsInRyIiwiY29sIiwidGQiLCJfZGVmYXVsdCIsImdldEFsbCIsImZvdW5kIiwic2V0R2xvYmFsRXZhbCIsInJlZkVsZW1lbnRzIiwib3B0Z3JvdXAiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwicmh0bWwiLCJydGJvZHkiLCJmaXhEZWZhdWx0Q2hlY2tlZCIsImRlZmF1bHRDaGVja2VkIiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJpZ25vcmVkIiwid3JhcCIsInNhZmUiLCJub2RlcyIsImh0bWxQcmVmaWx0ZXIiLCJjcmVhdGVUZXh0Tm9kZSIsImV2ZW50TmFtZSIsImNoYW5nZSIsImZvY3VzaW4iLCJyZm9ybUVsZW1zIiwicmtleUV2ZW50Iiwicm1vdXNlRXZlbnQiLCJyZm9jdXNNb3JwaCIsInJ0eXBlbmFtZXNwYWNlIiwicmV0dXJuVHJ1ZSIsInJldHVybkZhbHNlIiwic2FmZUFjdGl2ZUVsZW1lbnQiLCJlcnIiLCJvbiIsInR5cGVzIiwib25lIiwib3JpZ0ZuIiwiZXZlbnRzIiwidCIsImhhbmRsZU9iakluIiwic3BlY2lhbCIsImV2ZW50SGFuZGxlIiwiaGFuZGxlT2JqIiwiaGFuZGxlcnMiLCJuYW1lc3BhY2VzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsImhhbmRsZSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwiZGVsZWdhdGVUeXBlIiwiYmluZFR5cGUiLCJuYW1lc3BhY2UiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJ0cmlnZ2VyIiwib25seUhhbmRsZXJzIiwib250eXBlIiwiYnViYmxlVHlwZSIsImV2ZW50UGF0aCIsIkV2ZW50IiwiaXNUcmlnZ2VyIiwicm5hbWVzcGFjZSIsIm5vQnViYmxlIiwicGFyZW50V2luZG93IiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJwcmV2ZW50RGVmYXVsdCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImZpeCIsImhhbmRsZXJRdWV1ZSIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJjdXJyZW50VGFyZ2V0IiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJzdG9wUHJvcGFnYXRpb24iLCJwb3N0RGlzcGF0Y2giLCJzZWwiLCJpc05hTiIsIm9yaWdpbmFsRXZlbnQiLCJmaXhIb29rIiwiZml4SG9va3MiLCJtb3VzZUhvb2tzIiwia2V5SG9va3MiLCJwcm9wcyIsInNyY0VsZW1lbnQiLCJtZXRhS2V5Iiwib3JpZ2luYWwiLCJ3aGljaCIsImNoYXJDb2RlIiwia2V5Q29kZSIsImV2ZW50RG9jIiwiZnJvbUVsZW1lbnQiLCJwYWdlWCIsImNsaWVudFgiLCJzY3JvbGxMZWZ0IiwiY2xpZW50TGVmdCIsInBhZ2VZIiwiY2xpZW50WSIsInNjcm9sbFRvcCIsImNsaWVudFRvcCIsInJlbGF0ZWRUYXJnZXQiLCJ0b0VsZW1lbnQiLCJsb2FkIiwiYmx1ciIsImNsaWNrIiwiYmVmb3JldW5sb2FkIiwicmV0dXJuVmFsdWUiLCJzaW11bGF0ZSIsImlzU2ltdWxhdGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInRpbWVTdGFtcCIsImNhbmNlbEJ1YmJsZSIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmxlYXZlIiwib3JpZyIsInJlbGF0ZWQiLCJmb3JtIiwiX3N1Ym1pdEJ1YmJsZSIsInByb3BlcnR5TmFtZSIsIl9qdXN0Q2hhbmdlZCIsImF0dGFjaGVzIiwicmlubGluZWpRdWVyeSIsInJub3NoaW1jYWNoZSIsInJ4aHRtbFRhZyIsInJub0lubmVyaHRtbCIsInJjaGVja2VkIiwicnNjcmlwdFR5cGVNYXNrZWQiLCJyY2xlYW5TY3JpcHQiLCJmcmFnbWVudERpdiIsIm1hbmlwdWxhdGlvblRhcmdldCIsImNvbnRlbnQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsImNsb25lQ29weUV2ZW50IiwiZGVzdCIsIm9sZERhdGEiLCJjdXJEYXRhIiwiZml4Q2xvbmVOb2RlSXNzdWVzIiwiZGVmYXVsdFNlbGVjdGVkIiwiZG9tTWFuaXAiLCJjb2xsZWN0aW9uIiwiaGFzU2NyaXB0cyIsImlOb0Nsb25lIiwiaHRtbCIsIl9ldmFsVXJsIiwia2VlcERhdGEiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJkZXN0RWxlbWVudHMiLCJzcmNFbGVtZW50cyIsImluUGFnZSIsImZvcmNlQWNjZXB0RGF0YSIsImFwcGVuZCIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJiZWZvcmUiLCJhZnRlciIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwiYXBwZW5kVG8iLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJpbnNlcnQiLCJpZnJhbWUiLCJlbGVtZGlzcGxheSIsIkhUTUwiLCJCT0RZIiwiYWN0dWFsRGlzcGxheSIsImRpc3BsYXkiLCJkZWZhdWx0RGlzcGxheSIsIndyaXRlIiwiY2xvc2UiLCJybWFyZ2luIiwicm51bW5vbnB4Iiwic3dhcCIsIm9sZCIsInBpeGVsUG9zaXRpb25WYWwiLCJwaXhlbE1hcmdpblJpZ2h0VmFsIiwiYm94U2l6aW5nUmVsaWFibGVWYWwiLCJyZWxpYWJsZUhpZGRlbk9mZnNldHNWYWwiLCJyZWxpYWJsZU1hcmdpblJpZ2h0VmFsIiwicmVsaWFibGVNYXJnaW5MZWZ0VmFsIiwiY29tcHV0ZVN0eWxlVGVzdHMiLCJkaXZTdHlsZSIsImdldENvbXB1dGVkU3R5bGUiLCJtYXJnaW5MZWZ0IiwibWFyZ2luUmlnaHQiLCJnZXRDbGllbnRSZWN0cyIsImJvcmRlckNvbGxhcHNlIiwib2Zmc2V0SGVpZ2h0Iiwib3BhY2l0eSIsImNzc0Zsb2F0IiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJib3hTaXppbmciLCJNb3pCb3hTaXppbmciLCJXZWJraXRCb3hTaXppbmciLCJyZWxpYWJsZUhpZGRlbk9mZnNldHMiLCJib3hTaXppbmdSZWxpYWJsZSIsInBpeGVsTWFyZ2luUmlnaHQiLCJwaXhlbFBvc2l0aW9uIiwicmVsaWFibGVNYXJnaW5SaWdodCIsInJlbGlhYmxlTWFyZ2luTGVmdCIsImdldFN0eWxlcyIsImN1ckNTUyIsInJwb3NpdGlvbiIsImFkZEdldEhvb2tJZiIsImNvbmRpdGlvbkZuIiwiaG9va0ZuIiwidmlldyIsIm9wZW5lciIsImNvbXB1dGVkIiwibWluV2lkdGgiLCJtYXhXaWR0aCIsImdldFByb3BlcnR5VmFsdWUiLCJjdXJyZW50U3R5bGUiLCJsZWZ0IiwicnMiLCJyc0xlZnQiLCJydW50aW1lU3R5bGUiLCJwaXhlbExlZnQiLCJyYWxwaGEiLCJyb3BhY2l0eSIsInJkaXNwbGF5c3dhcCIsInJudW1zcGxpdCIsImNzc1Nob3ciLCJwb3NpdGlvbiIsInZpc2liaWxpdHkiLCJjc3NOb3JtYWxUcmFuc2Zvcm0iLCJsZXR0ZXJTcGFjaW5nIiwiZm9udFdlaWdodCIsImNzc1ByZWZpeGVzIiwiZW1wdHlTdHlsZSIsInZlbmRvclByb3BOYW1lIiwiY2FwTmFtZSIsInNob3dIaWRlIiwic2hvdyIsImhpZGRlbiIsInNldFBvc2l0aXZlTnVtYmVyIiwic3VidHJhY3QiLCJhdWdtZW50V2lkdGhPckhlaWdodCIsImV4dHJhIiwiaXNCb3JkZXJCb3giLCJzdHlsZXMiLCJnZXRXaWR0aE9ySGVpZ2h0IiwidmFsdWVJc0JvcmRlckJveCIsIlR3ZWVuIiwiZWFzaW5nIiwiY3NzSG9va3MiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImNvbHVtbkNvdW50IiwiZmlsbE9wYWNpdHkiLCJmbGV4R3JvdyIsImZsZXhTaHJpbmsiLCJsaW5lSGVpZ2h0Iiwib3JkZXIiLCJvcnBoYW5zIiwid2lkb3dzIiwiekluZGV4IiwiY3NzUHJvcHMiLCJmbG9hdCIsIm9yaWdOYW1lIiwic2V0IiwiaXNGaW5pdGUiLCIkMSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJwcmVmaXgiLCJzdWZmaXgiLCJleHBhbmQiLCJleHBhbmRlZCIsInBhcnRzIiwiaGlkZSIsInRvZ2dsZSIsInByb3BIb29rcyIsInJ1biIsInBlcmNlbnQiLCJlYXNlZCIsImR1cmF0aW9uIiwic3RlcCIsImZ4IiwibGluZWFyIiwicCIsInN3aW5nIiwiY29zIiwiUEkiLCJmeE5vdyIsInRpbWVySWQiLCJyZnh0eXBlcyIsInJydW4iLCJjcmVhdGVGeE5vdyIsImdlbkZ4IiwiaW5jbHVkZVdpZHRoIiwiaGVpZ2h0IiwiY3JlYXRlVHdlZW4iLCJhbmltYXRpb24iLCJBbmltYXRpb24iLCJ0d2VlbmVycyIsInByb3BlcnRpZXMiLCJzdG9wcGVkIiwicHJlZmlsdGVycyIsInRpY2siLCJjdXJyZW50VGltZSIsInN0YXJ0VGltZSIsInR3ZWVucyIsIm9wdHMiLCJzcGVjaWFsRWFzaW5nIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwiZ290b0VuZCIsInJlamVjdFdpdGgiLCJwcm9wRmlsdGVyIiwidGltZXIiLCJhbmltIiwiY29tcGxldGUiLCIqIiwidHdlZW5lciIsIm9sZGZpcmUiLCJkYXRhU2hvdyIsInVucXVldWVkIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsIm9wdCIsInNwZWVkcyIsImZhZGVUbyIsInRvIiwiYW5pbWF0ZSIsIm9wdGFsbCIsImRvQW5pbWF0aW9uIiwiZmluaXNoIiwic3RvcFF1ZXVlIiwidGltZXJzIiwiY3NzRm4iLCJzbGlkZURvd24iLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZmFkZVRvZ2dsZSIsImludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwic2xvdyIsImZhc3QiLCJkZWxheSIsInRpbWUiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiZ2V0U2V0QXR0cmlidXRlIiwiaHJlZk5vcm1hbGl6ZWQiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJlbmN0eXBlIiwib3B0RGlzYWJsZWQiLCJyYWRpb1ZhbHVlIiwicnJldHVybiIsInJzcGFjZXMiLCJ2YWxIb29rcyIsIm9wdGlvblNldCIsInNjcm9sbEhlaWdodCIsIm5vZGVIb29rIiwiYm9vbEhvb2siLCJydXNlRGVmYXVsdCIsImdldFNldElucHV0IiwicmVtb3ZlQXR0ciIsIm5UeXBlIiwiYXR0ckhvb2tzIiwicHJvcE5hbWUiLCJhdHRyTmFtZXMiLCJwcm9wRml4IiwiZ2V0dGVyIiwic2V0QXR0cmlidXRlTm9kZSIsImNyZWF0ZUF0dHJpYnV0ZSIsImNvb3JkcyIsImNvbnRlbnRlZGl0YWJsZSIsInJmb2N1c2FibGUiLCJyY2xpY2thYmxlIiwicmVtb3ZlUHJvcCIsInRhYmluZGV4IiwicGFyc2VJbnQiLCJmb3IiLCJjbGFzcyIsInJjbGFzcyIsImdldENsYXNzIiwiYWRkQ2xhc3MiLCJjbGFzc2VzIiwiY3VyVmFsdWUiLCJjbGF6eiIsImZpbmFsVmFsdWUiLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwic3RhdGVWYWwiLCJjbGFzc05hbWVzIiwiaGFzQ2xhc3MiLCJob3ZlciIsImZuT3ZlciIsImZuT3V0Iiwibm9uY2UiLCJycXVlcnkiLCJydmFsaWR0b2tlbnMiLCJKU09OIiwicGFyc2UiLCJyZXF1aXJlTm9uQ29tbWEiLCJkZXB0aCIsInN0ciIsImNvbW1hIiwib3BlbiIsIkZ1bmN0aW9uIiwicGFyc2VYTUwiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJBY3RpdmVYT2JqZWN0IiwiYXN5bmMiLCJsb2FkWE1MIiwicmhhc2giLCJydHMiLCJyaGVhZGVycyIsInJub0NvbnRlbnQiLCJycHJvdG9jb2wiLCJydXJsIiwidHJhbnNwb3J0cyIsImFsbFR5cGVzIiwiYWpheExvY2F0aW9uIiwiYWpheExvY1BhcnRzIiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZGF0YVR5cGUiLCJkYXRhVHlwZXMiLCJpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsImpxWEhSIiwiaW5zcGVjdGVkIiwic2Vla2luZ1RyYW5zcG9ydCIsImluc3BlY3QiLCJwcmVmaWx0ZXJPckZhY3RvcnkiLCJkYXRhVHlwZU9yVHJhbnNwb3J0IiwiYWpheEV4dGVuZCIsImZsYXRPcHRpb25zIiwiYWpheFNldHRpbmdzIiwiZ2V0RGlzcGxheSIsImFjdGl2ZSIsImxhc3RNb2RpZmllZCIsImV0YWciLCJ1cmwiLCJpc0xvY2FsIiwicHJvY2Vzc0RhdGEiLCJjb250ZW50VHlwZSIsImFjY2VwdHMiLCJqc29uIiwicmVzcG9uc2VGaWVsZHMiLCJjb252ZXJ0ZXJzIiwiKiB0ZXh0IiwidGV4dCBodG1sIiwidGV4dCBqc29uIiwidGV4dCB4bWwiLCJhamF4U2V0dXAiLCJzZXR0aW5ncyIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsImNhY2hlVVJMIiwicmVzcG9uc2VIZWFkZXJzU3RyaW5nIiwidGltZW91dFRpbWVyIiwiZmlyZUdsb2JhbHMiLCJ0cmFuc3BvcnQiLCJyZXNwb25zZUhlYWRlcnMiLCJzIiwiY2FsbGJhY2tDb250ZXh0IiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInN0YXR1c0NvZGUiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldFJlc3BvbnNlSGVhZGVyIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsImxuYW1lIiwib3ZlcnJpZGVNaW1lVHlwZSIsIm1pbWVUeXBlIiwiY29kZSIsInN0YXR1cyIsImFib3J0Iiwic3RhdHVzVGV4dCIsImZpbmFsVGV4dCIsInN1Y2Nlc3MiLCJtZXRob2QiLCJjcm9zc0RvbWFpbiIsInRyYWRpdGlvbmFsIiwiaGFzQ29udGVudCIsImlmTW9kaWZpZWQiLCJoZWFkZXJzIiwiYmVmb3JlU2VuZCIsInNlbmQiLCJuYXRpdmVTdGF0dXNUZXh0IiwicmVzcG9uc2VzIiwiaXNTdWNjZXNzIiwicmVzcG9uc2UiLCJtb2RpZmllZCIsImZpcnN0RGF0YVR5cGUiLCJjdCIsImZpbmFsRGF0YVR5cGUiLCJhamF4SGFuZGxlUmVzcG9uc2VzIiwiY29udjIiLCJjdXJyZW50IiwiY29udiIsImRhdGFGaWx0ZXIiLCJhamF4Q29udmVydCIsImdldEpTT04iLCJnZXRTY3JpcHQiLCJ0aHJvd3MiLCJ3cmFwQWxsIiwid3JhcElubmVyIiwidW53cmFwIiwiZmlsdGVySGlkZGVuIiwidmlzaWJsZSIsInIyMCIsInJicmFja2V0IiwickNSTEYiLCJyc3VibWl0dGVyVHlwZXMiLCJyc3VibWl0dGFibGUiLCJidWlsZFBhcmFtcyIsInYiLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZXJpYWxpemUiLCJzZXJpYWxpemVBcnJheSIsInhociIsImNyZWF0ZUFjdGl2ZVhIUiIsImRvY3VtZW50TW9kZSIsImNyZWF0ZVN0YW5kYXJkWEhSIiwieGhySWQiLCJ4aHJDYWxsYmFja3MiLCJ4aHJTdXBwb3J0ZWQiLCJYTUxIdHRwUmVxdWVzdCIsImNvcnMiLCJ1c2VybmFtZSIsInhockZpZWxkcyIsImlzQWJvcnQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVRleHQiLCJzY3JpcHQiLCJ0ZXh0IHNjcmlwdCIsImhlYWQiLCJzY3JpcHRDaGFyc2V0IiwiY2hhcnNldCIsIm9ubG9hZCIsIm9sZENhbGxiYWNrcyIsInJqc29ucCIsImpzb25wIiwianNvbnBDYWxsYmFjayIsIm9yaWdpbmFsU2V0dGluZ3MiLCJjYWxsYmFja05hbWUiLCJvdmVyd3JpdHRlbiIsInJlc3BvbnNlQ29udGFpbmVyIiwianNvblByb3AiLCJrZWVwU2NyaXB0cyIsInBhcnNlZCIsIl9sb2FkIiwiZ2V0V2luZG93IiwicGFyYW1zIiwiYW5pbWF0ZWQiLCJvZmZzZXQiLCJzZXRPZmZzZXQiLCJjdXJQb3NpdGlvbiIsImN1ckxlZnQiLCJjdXJDU1NUb3AiLCJjdXJUb3AiLCJjdXJPZmZzZXQiLCJjdXJDU1NMZWZ0IiwiY3VyRWxlbSIsInVzaW5nIiwid2luIiwiYm94IiwicGFnZVlPZmZzZXQiLCJwYWdlWE9mZnNldCIsIm9mZnNldFBhcmVudCIsInBhcmVudE9mZnNldCIsInNjcm9sbFRvIiwiSGVpZ2h0IiwiV2lkdGgiLCIiLCJkZWZhdWx0RXh0cmEiLCJmdW5jTmFtZSIsImJpbmQiLCJ1bmJpbmQiLCJkZWxlZ2F0ZSIsInVuZGVsZWdhdGUiLCJzaXplIiwiYW5kU2VsZiIsImRlZmluZSIsImFtZCIsIl9qUXVlcnkiLCJfJCIsIiQiLCJub0NvbmZsaWN0IiwiU1ZHUGF0aFNlZyIsInR5cGVBc0xldHRlciIsIm93bmluZ1BhdGhTZWdMaXN0IiwicGF0aFNlZ1R5cGUiLCJwYXRoU2VnVHlwZUFzTGV0dGVyIiwiX293bmluZ1BhdGhTZWdMaXN0IiwiY2xhc3NuYW1lIiwiUEFUSFNFR19VTktOT1dOIiwiUEFUSFNFR19DTE9TRVBBVEgiLCJQQVRIU0VHX01PVkVUT19BQlMiLCJQQVRIU0VHX01PVkVUT19SRUwiLCJQQVRIU0VHX0xJTkVUT19BQlMiLCJQQVRIU0VHX0xJTkVUT19SRUwiLCJQQVRIU0VHX0NVUlZFVE9fQ1VCSUNfQUJTIiwiUEFUSFNFR19DVVJWRVRPX0NVQklDX1JFTCIsIlBBVEhTRUdfQ1VSVkVUT19RVUFEUkFUSUNfQUJTIiwiUEFUSFNFR19DVVJWRVRPX1FVQURSQVRJQ19SRUwiLCJQQVRIU0VHX0FSQ19BQlMiLCJQQVRIU0VHX0FSQ19SRUwiLCJQQVRIU0VHX0xJTkVUT19IT1JJWk9OVEFMX0FCUyIsIlBBVEhTRUdfTElORVRPX0hPUklaT05UQUxfUkVMIiwiUEFUSFNFR19MSU5FVE9fVkVSVElDQUxfQUJTIiwiUEFUSFNFR19MSU5FVE9fVkVSVElDQUxfUkVMIiwiUEFUSFNFR19DVVJWRVRPX0NVQklDX1NNT09USF9BQlMiLCJQQVRIU0VHX0NVUlZFVE9fQ1VCSUNfU01PT1RIX1JFTCIsIlBBVEhTRUdfQ1VSVkVUT19RVUFEUkFUSUNfU01PT1RIX0FCUyIsIlBBVEhTRUdfQ1VSVkVUT19RVUFEUkFUSUNfU01PT1RIX1JFTCIsIl9zZWdtZW50Q2hhbmdlZCIsInNlZ21lbnRDaGFuZ2VkIiwiU1ZHUGF0aFNlZ0Nsb3NlUGF0aCIsImNyZWF0ZSIsIl9hc1BhdGhTdHJpbmciLCJTVkdQYXRoU2VnTW92ZXRvQWJzIiwieCIsInkiLCJfeCIsIl95IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiU1ZHUGF0aFNlZ01vdmV0b1JlbCIsIlNWR1BhdGhTZWdMaW5ldG9BYnMiLCJTVkdQYXRoU2VnTGluZXRvUmVsIiwiU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY0FicyIsIngxIiwieTEiLCJ4MiIsInkyIiwiX3gxIiwiX3kxIiwiX3gyIiwiX3kyIiwiU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1JlbCIsIlNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljQWJzIiwiU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNSZWwiLCJTVkdQYXRoU2VnQXJjQWJzIiwicjEiLCJyMiIsImFuZ2xlIiwibGFyZ2VBcmNGbGFnIiwic3dlZXBGbGFnIiwiX3IxIiwiX3IyIiwiX2FuZ2xlIiwiX2xhcmdlQXJjRmxhZyIsIl9zd2VlcEZsYWciLCJTVkdQYXRoU2VnQXJjUmVsIiwiU1ZHUGF0aFNlZ0xpbmV0b0hvcml6b250YWxBYnMiLCJTVkdQYXRoU2VnTGluZXRvSG9yaXpvbnRhbFJlbCIsIlNWR1BhdGhTZWdMaW5ldG9WZXJ0aWNhbEFicyIsIlNWR1BhdGhTZWdMaW5ldG9WZXJ0aWNhbFJlbCIsIlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNTbW9vdGhBYnMiLCJTVkdQYXRoU2VnQ3VydmV0b0N1YmljU21vb3RoUmVsIiwiU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNTbW9vdGhBYnMiLCJTVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1Ntb290aFJlbCIsIlNWR1BhdGhFbGVtZW50IiwiY3JlYXRlU1ZHUGF0aFNlZ0Nsb3NlUGF0aCIsImNyZWF0ZVNWR1BhdGhTZWdNb3ZldG9BYnMiLCJjcmVhdGVTVkdQYXRoU2VnTW92ZXRvUmVsIiwiY3JlYXRlU1ZHUGF0aFNlZ0xpbmV0b0FicyIsImNyZWF0ZVNWR1BhdGhTZWdMaW5ldG9SZWwiLCJjcmVhdGVTVkdQYXRoU2VnQ3VydmV0b0N1YmljQWJzIiwiY3JlYXRlU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1JlbCIsImNyZWF0ZVNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljQWJzIiwiY3JlYXRlU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNSZWwiLCJjcmVhdGVTVkdQYXRoU2VnQXJjQWJzIiwiY3JlYXRlU1ZHUGF0aFNlZ0FyY1JlbCIsImNyZWF0ZVNWR1BhdGhTZWdMaW5ldG9Ib3Jpem9udGFsQWJzIiwiY3JlYXRlU1ZHUGF0aFNlZ0xpbmV0b0hvcml6b250YWxSZWwiLCJjcmVhdGVTVkdQYXRoU2VnTGluZXRvVmVydGljYWxBYnMiLCJjcmVhdGVTVkdQYXRoU2VnTGluZXRvVmVydGljYWxSZWwiLCJjcmVhdGVTVkdQYXRoU2VnQ3VydmV0b0N1YmljU21vb3RoQWJzIiwiY3JlYXRlU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1Ntb290aFJlbCIsImNyZWF0ZVNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljU21vb3RoQWJzIiwiY3JlYXRlU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNTbW9vdGhSZWwiLCJTVkdQYXRoU2VnTGlzdCIsInBhdGhFbGVtZW50IiwiX3BhdGhFbGVtZW50IiwiX2xpc3QiLCJfcGFyc2VQYXRoIiwiX211dGF0aW9uT2JzZXJ2ZXJDb25maWciLCJhdHRyaWJ1dGVGaWx0ZXIiLCJfcGF0aEVsZW1lbnRNdXRhdGlvbk9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsIl91cGRhdGVMaXN0RnJvbVBhdGhNdXRhdGlvbnMiLCJvYnNlcnZlIiwiX2NoZWNrUGF0aFN5bmNocm9uaXplZFRvTGlzdCIsIl9wYXRoU2VnTGlzdCIsInBhdGhTZWdMaXN0IiwidGFrZVJlY29yZHMiLCJtdXRhdGlvblJlY29yZHMiLCJoYXNQYXRoTXV0YXRpb25zIiwiZm9yRWFjaCIsInJlY29yZCIsImF0dHJpYnV0ZU5hbWUiLCJfd3JpdGVMaXN0VG9QYXRoIiwiZGlzY29ubmVjdCIsIl9wYXRoU2VnQXJyYXlBc1N0cmluZyIsInBhdGhTZWciLCJjbGVhciIsImluaXRpYWxpemUiLCJuZXdJdGVtIiwiX2NoZWNrVmFsaWRJbmRleCIsIm51bWJlck9mSXRlbXMiLCJnZXRJdGVtIiwiaW5zZXJ0SXRlbUJlZm9yZSIsInJlcGxhY2VJdGVtIiwicmVtb3ZlSXRlbSIsIml0ZW0iLCJhcHBlbmRJdGVtIiwicGF0aFNlZ0FycmF5IiwiQnVpbGRlciIsImFwcGVuZFNlZ21lbnQiLCJTb3VyY2UiLCJfc3RyaW5nIiwiX2N1cnJlbnRJbmRleCIsIl9lbmRJbmRleCIsIl9wcmV2aW91c0NvbW1hbmQiLCJfc2tpcE9wdGlvbmFsU3BhY2VzIiwiX2lzQ3VycmVudFNwYWNlIiwiY2hhcmFjdGVyIiwiX3NraXBPcHRpb25hbFNwYWNlc09yRGVsaW1pdGVyIiwiaGFzTW9yZURhdGEiLCJwZWVrU2VnbWVudFR5cGUiLCJsb29rYWhlYWQiLCJfcGF0aFNlZ1R5cGVGcm9tQ2hhciIsIl9uZXh0Q29tbWFuZEhlbHBlciIsInByZXZpb3VzQ29tbWFuZCIsImluaXRpYWxDb21tYW5kSXNNb3ZlVG8iLCJjb21tYW5kIiwiX3BhcnNlTnVtYmVyIiwiZXhwb25lbnQiLCJpbnRlZ2VyIiwiZnJhYyIsImRlY2ltYWwiLCJzaWduIiwiZXhwc2lnbiIsInN0YXJ0SW5kZXgiLCJzdGFydEludFBhcnRJbmRleCIsInNjYW5JbnRQYXJ0SW5kZXgiLCJtdWx0aXBsaWVyIiwibnVtYmVyIiwicG93IiwiX3BhcnNlQXJjRmxhZyIsImZsYWdDaGFyIiwicGFyc2VTZWdtZW50IiwicG9pbnRzIiwiYXJjQW5nbGUiLCJhcmNMYXJnZSIsImFyY1N3ZWVwIiwiYnVpbGRlciIsImYiLCJNYXR0ZXIiLCJyIiwibyIsInUiLCJyZXF1aXJlIiwiMSIsIkJvZHkiLCJWZXJ0aWNlcyIsIlZlY3RvciIsIlNsZWVwaW5nIiwiQ29tbW9uIiwiQm91bmRzIiwiQXhlcyIsIl9pbmVydGlhU2NhbGUiLCJfbmV4dENvbGxpZGluZ0dyb3VwSWQiLCJfbmV4dE5vbkNvbGxpZGluZ0dyb3VwSWQiLCJfbmV4dENhdGVnb3J5IiwiZGVmYXVsdHMiLCJuZXh0SWQiLCJsYWJlbCIsInZlcnRpY2VzIiwiZnJvbVBhdGgiLCJmb3JjZSIsInRvcnF1ZSIsInBvc2l0aW9uSW1wdWxzZSIsImNvbnN0cmFpbnRJbXB1bHNlIiwidG90YWxDb250YWN0cyIsImFuZ3VsYXJTcGVlZCIsInZlbG9jaXR5IiwiYW5ndWxhclZlbG9jaXR5IiwiaXNTZW5zb3IiLCJpc1N0YXRpYyIsImlzU2xlZXBpbmciLCJtb3Rpb24iLCJzbGVlcFRocmVzaG9sZCIsImRlbnNpdHkiLCJyZXN0aXR1dGlvbiIsImZyaWN0aW9uIiwiZnJpY3Rpb25TdGF0aWMiLCJmcmljdGlvbkFpciIsImNvbGxpc2lvbkZpbHRlciIsImNhdGVnb3J5IiwibWFzayIsImdyb3VwIiwic2xvcCIsInRpbWVTY2FsZSIsInJlbmRlciIsInNwcml0ZSIsInhTY2FsZSIsInlTY2FsZSIsInhPZmZzZXQiLCJ5T2Zmc2V0IiwibGluZVdpZHRoIiwiX2luaXRQcm9wZXJ0aWVzIiwibmV4dEdyb3VwIiwiaXNOb25Db2xsaWRpbmciLCJuZXh0Q2F0ZWdvcnkiLCJib3VuZHMiLCJwb3NpdGlvblByZXYiLCJhbmdsZVByZXYiLCJyb3RhdGUiLCJheGVzIiwidXBkYXRlIiwibWFzcyIsImluZXJ0aWEiLCJkZWZhdWx0RmlsbFN0eWxlIiwiY2hvb3NlIiwiZGVmYXVsdFN0cm9rZVN0eWxlIiwic2hhZGVDb2xvciIsImZpbGxTdHlsZSIsInN0cm9rZVN0eWxlIiwibWluIiwicHJvcGVydHkiLCJzZXRTdGF0aWMiLCJzZXRNYXNzIiwic2V0RGVuc2l0eSIsInNldEluZXJ0aWEiLCJzZXRWZXJ0aWNlcyIsInNldFBvc2l0aW9uIiwic2V0QW5nbGUiLCJzZXRWZWxvY2l0eSIsInNldEFuZ3VsYXJWZWxvY2l0eSIsInNldFBhcnRzIiwicGFydCIsIkluZmluaXR5IiwiaW52ZXJzZU1hc3MiLCJpbnZlcnNlSW5lcnRpYSIsImZyb21WZXJ0aWNlcyIsImNlbnRyZSIsInRyYW5zbGF0ZSIsImF1dG9IdWxsIiwiY2xvY2t3aXNlU29ydCIsImh1bGwiLCJodWxsQ2VudHJlIiwidG90YWwiLCJfdG90YWxQcm9wZXJ0aWVzIiwiZGVsdGEiLCJzdWIiLCJyb3RhdGVBYm91dCIsIm1hZ25pdHVkZSIsImFicyIsInRyYW5zbGF0aW9uIiwicm90YXRpb24iLCJzY2FsZVgiLCJzY2FsZVkiLCJwb2ludCIsImNpcmNsZVJhZGl1cyIsImRlbHRhVGltZSIsImNvcnJlY3Rpb24iLCJkZWx0YVRpbWVTcXVhcmVkIiwidmVsb2NpdHlQcmV2WCIsInZlbG9jaXR5UHJldlkiLCJhcHBseUZvcmNlIiwibXVsdCIsIi4uL2NvcmUvQ29tbW9uIiwiLi4vY29yZS9TbGVlcGluZyIsIi4uL2dlb21ldHJ5L0F4ZXMiLCIuLi9nZW9tZXRyeS9Cb3VuZHMiLCIuLi9nZW9tZXRyeS9WZWN0b3IiLCIuLi9nZW9tZXRyeS9WZXJ0aWNlcyIsIi4uL3JlbmRlci9SZW5kZXIiLCIyIiwiQ29tcG9zaXRlIiwiRXZlbnRzIiwiaXNNb2RpZmllZCIsImJvZGllcyIsImNvbnN0cmFpbnRzIiwiY29tcG9zaXRlcyIsInNldE1vZGlmaWVkIiwiY29tcG9zaXRlIiwidXBkYXRlUGFyZW50cyIsInVwZGF0ZUNoaWxkcmVuIiwiY2hpbGRDb21wb3NpdGUiLCJvYmplY3RzIiwibG9nIiwiYWRkQm9keSIsImFkZENvbnN0cmFpbnQiLCJhZGRDb21wb3NpdGUiLCJjb25zdHJhaW50IiwicmVtb3ZlQm9keSIsInJlbW92ZUNvbnN0cmFpbnQiLCJyZW1vdmVDb21wb3NpdGUiLCJjb21wb3NpdGVBIiwiY29tcG9zaXRlQiIsInJlbW92ZUNvbXBvc2l0ZUF0IiwicmVtb3ZlQm9keUF0IiwicmVtb3ZlQ29uc3RyYWludEF0Iiwia2VlcFN0YXRpYyIsImFsbEJvZGllcyIsImFsbENvbnN0cmFpbnRzIiwiYWxsQ29tcG9zaXRlcyIsIm1vdmUiLCJyZWJhc2UiLCJyZWN1cnNpdmUiLCJzaW4iLCJkeCIsImR5IiwiLi4vY29yZS9FdmVudHMiLCIuL0JvZHkiLCIzIiwiV29ybGQiLCJncmF2aXR5IiwiLi4vY29uc3RyYWludC9Db25zdHJhaW50IiwiLi9Db21wb3NpdGUiLCI0IiwiQ29udGFjdCIsInZlcnRleCIsIm5vcm1hbEltcHVsc2UiLCJ0YW5nZW50SW1wdWxzZSIsIjUiLCJEZXRlY3RvciIsIlNBVCIsIlBhaXIiLCJjb2xsaXNpb25zIiwiYnJvYWRwaGFzZVBhaXJzIiwiZW5naW5lIiwicGFpcnNUYWJsZSIsInBhaXJzIiwidGFibGUiLCJib2R5QSIsImJvZHlCIiwiY2FuQ29sbGlkZSIsIm92ZXJsYXBzIiwicGFydEEiLCJrIiwicGFydEIiLCJwcmV2aW91c0NvbGxpc2lvbiIsInBhaXIiLCJpc0FjdGl2ZSIsImNvbGxpc2lvbiIsImNvbGxpZGVzIiwiY29sbGlkZWQiLCJmaWx0ZXJBIiwiZmlsdGVyQiIsIi4vUGFpciIsIi4vU0FUIiwiNiIsIkdyaWQiLCJjb250cm9sbGVyIiwiZGV0ZWN0b3IiLCJidWNrZXRzIiwicGFpcnNMaXN0IiwiYnVja2V0V2lkdGgiLCJidWNrZXRIZWlnaHQiLCJncmlkIiwiZm9yY2VVcGRhdGUiLCJyb3ciLCJidWNrZXQiLCJidWNrZXRJZCIsIndvcmxkIiwiZ3JpZENoYW5nZWQiLCJuZXdSZWdpb24iLCJfZ2V0UmVnaW9uIiwicmVnaW9uIiwidW5pb24iLCJfcmVnaW9uVW5pb24iLCJzdGFydENvbCIsImVuZENvbCIsInN0YXJ0Um93IiwiZW5kUm93IiwiX2dldEJ1Y2tldElkIiwiaXNJbnNpZGVOZXdSZWdpb24iLCJpc0luc2lkZU9sZFJlZ2lvbiIsIl9idWNrZXRSZW1vdmVCb2R5IiwiX2NyZWF0ZUJ1Y2tldCIsIl9idWNrZXRBZGRCb2R5IiwiX2NyZWF0ZUFjdGl2ZVBhaXJzTGlzdCIsInJlZ2lvbkEiLCJyZWdpb25CIiwiX2NyZWF0ZVJlZ2lvbiIsImZsb29yIiwiY29sdW1uIiwicGFpcklkIiwicGFpcktleXMiLCIuL0RldGVjdG9yIiwiNyIsInRpbWVzdGFtcCIsInBhcmVudEEiLCJwYXJlbnRCIiwiY29udGFjdHMiLCJhY3RpdmVDb250YWN0cyIsInNlcGFyYXRpb24iLCJ0aW1lQ3JlYXRlZCIsInRpbWVVcGRhdGVkIiwic3VwcG9ydHMiLCJjb250YWN0SWQiLCJjb250YWN0Iiwic2V0QWN0aXZlIiwiLi9Db250YWN0IiwiOCIsIlBhaXJzIiwiY29sbGlzaW9uU3RhcnQiLCJjb2xsaXNpb25BY3RpdmUiLCJjb2xsaXNpb25FbmQiLCJhY3RpdmVQYWlySWRzIiwicmVtb3ZlT2xkIiwicGFpckluZGV4IiwiaW5kZXhlc1RvUmVtb3ZlIiwiOSIsIlF1ZXJ5IiwiQm9kaWVzIiwicmF5Iiwic3RhcnRQb2ludCIsImVuZFBvaW50IiwicmF5V2lkdGgiLCJyYXlBbmdsZSIsInJheUxlbmd0aCIsInJheVgiLCJyYXlZIiwicmVjdGFuZ2xlIiwib3V0c2lkZSIsIi4uL2ZhY3RvcnkvQm9kaWVzIiwiMTAiLCJSZXNvbHZlciIsIl9yZXN0aW5nVGhyZXNoIiwiX3Jlc3RpbmdUaHJlc2hUYW5nZW50IiwiX3Bvc2l0aW9uRGFtcGVuIiwiX3Bvc2l0aW9uV2FybWluZyIsIl9mcmljdGlvbk5vcm1hbE11bHRpcGxpZXIiLCJwcmVTb2x2ZVBvc2l0aW9uIiwiYWN0aXZlQ291bnQiLCJzb2x2ZVBvc2l0aW9uIiwibm9ybWFsIiwiYm9keUJ0b0EiLCJjb250YWN0U2hhcmUiLCJ0ZW1wQSIsIl90ZW1wIiwidGVtcEIiLCJ0ZW1wQyIsInRlbXBEIiwicGVuZXRyYXRpb24iLCJkb3QiLCJwb3N0U29sdmVQb3NpdGlvbiIsInByZVNvbHZlVmVsb2NpdHkiLCJ0YW5nZW50IiwiY29udGFjdFZlcnRleCIsImltcHVsc2UiLCJjcm9zcyIsInNvbHZlVmVsb2NpdHkiLCJ0aW1lU2NhbGVTcXVhcmVkIiwidGVtcEUiLCJvZmZzZXRBIiwib2Zmc2V0QiIsInZlbG9jaXR5UG9pbnRBIiwicGVycCIsInZlbG9jaXR5UG9pbnRCIiwicmVsYXRpdmVWZWxvY2l0eSIsIm5vcm1hbFZlbG9jaXR5IiwidGFuZ2VudFZlbG9jaXR5IiwidGFuZ2VudFNwZWVkIiwidGFuZ2VudFZlbG9jaXR5RGlyZWN0aW9uIiwibm9ybWFsRm9yY2UiLCJjbGFtcCIsIm1heEZyaWN0aW9uIiwib0FjTiIsIm9CY04iLCJzaGFyZSIsImNvbnRhY3ROb3JtYWxJbXB1bHNlIiwiY29udGFjdFRhbmdlbnRJbXB1bHNlIiwiMTEiLCJvdmVybGFwQUIiLCJvdmVybGFwQkEiLCJtaW5PdmVybGFwIiwicHJldkNvbCIsImNhblJldXNlUHJldkNvbCIsImF4aXNCb2R5QSIsImF4aXNCb2R5IiwiYXhpc0JvZHlCIiwiYXhpc051bWJlciIsIl9vdmVybGFwQXhlcyIsInJldXNlZCIsIm92ZXJsYXAiLCJheGlzIiwibmVnIiwidmVydGljZXNCIiwiX2ZpbmRTdXBwb3J0cyIsInZlcnRpY2VzQSIsInByb2plY3Rpb25BIiwicHJvamVjdGlvbkIiLCJOdW1iZXIiLCJNQVhfVkFMVUUiLCJfcHJvamVjdFRvQXhpcyIsInByb2plY3Rpb24iLCJkaXN0YW5jZSIsInZlcnRleEEiLCJ2ZXJ0ZXhCIiwibmVhcmVzdERpc3RhbmNlIiwidmVydGV4VG9Cb2R5IiwiYm9keUFQb3NpdGlvbiIsIjEyIiwiQ29uc3RyYWludCIsInBvaW50QSIsInBvaW50QiIsImluaXRpYWxQb2ludEEiLCJpbml0aWFsUG9pbnRCIiwic3RpZmZuZXNzIiwiYW5ndWxhclN0aWZmbmVzcyIsImFuZ2xlQSIsImFuZ2xlQiIsInNvbHZlQWxsIiwic29sdmUiLCJwb2ludEFXb3JsZCIsInBvaW50QldvcmxkIiwiY3VycmVudExlbmd0aCIsImRpZmZlcmVuY2UiLCJvQW4iLCJvQm4iLCJib2R5QURlbm9tIiwiYm9keUJEZW5vbSIsInBvc3RTb2x2ZUFsbCIsIjEzIiwiTW91c2VDb25zdHJhaW50IiwiTW91c2UiLCJtb3VzZSIsImNhbnZhcyIsImVsZW1lbnQiLCJtb3VzZUNvbnN0cmFpbnQiLCJfdHJpZ2dlckV2ZW50cyIsIm1vdXNlRXZlbnRzIiwic291cmNlRXZlbnRzIiwibW91c2Vtb3ZlIiwibW91c2Vkb3duIiwibW91c2V1cCIsImNsZWFyU291cmNlRXZlbnRzIiwiLi4vYm9keS9Db21wb3NpdGUiLCIuLi9jb2xsaXNpb24vRGV0ZWN0b3IiLCIuLi9jb3JlL01vdXNlIiwiLi9Db25zdHJhaW50IiwiMTQiLCJfbmV4dElkIiwiX3NlZWQiLCJhcmdzU3RhcnQiLCJkZWVwQ2xvbmUiLCJjb2xvciIsImNvbG9ySW50ZWdlciIsImFtb3VudCIsInJvdW5kIiwiUiIsIkIiLCJHIiwic2h1ZmZsZSIsImFycmF5IiwiY2hvaWNlcyIsImlzRWxlbWVudCIsIkhUTUxFbGVtZW50IiwicGVyZm9ybWFuY2UiLCJ3ZWJraXROb3ciLCJtc05vdyIsIm9Ob3ciLCJtb3pOb3ciLCJfc2VlZGVkUmFuZG9tIiwiY29sb3JUb051bWJlciIsImNvbG9yU3RyaW5nIiwibWVzc2FnZSIsImNvbnNvbGUiLCJ3YXJuIiwiaGF5c3RhY2siLCJuZWVkbGUiLCIxNSIsIkVuZ2luZSIsIlJlbmRlciIsInBvc2l0aW9uSXRlcmF0aW9ucyIsInZlbG9jaXR5SXRlcmF0aW9ucyIsImNvbnN0cmFpbnRJdGVyYXRpb25zIiwiZW5hYmxlU2xlZXBpbmciLCJ0aW1pbmciLCJicm9hZHBoYXNlIiwicmVuZGVyRGVmYXVsdHMiLCJtZXRyaWNzIiwiZXh0ZW5kZWQiLCJfYm9kaWVzQXBwbHlHcmF2aXR5IiwiX2JvZGllc1VwZGF0ZSIsImFmdGVyQ29sbGlzaW9ucyIsIl9ib2RpZXNDbGVhckZvcmNlcyIsImVuZ2luZUEiLCJlbmdpbmVCIiwiZ3Jhdml0eVNjYWxlIiwid29ybGRCb3VuZHMiLCIuLi9ib2R5L0JvZHkiLCIuLi9ib2R5L1dvcmxkIiwiLi4vY29sbGlzaW9uL0dyaWQiLCIuLi9jb2xsaXNpb24vUGFpcnMiLCIuLi9jb2xsaXNpb24vUmVzb2x2ZXIiLCIuL0NvbW1vbiIsIi4vRXZlbnRzIiwiLi9NZXRyaWNzIiwiLi9TbGVlcGluZyIsIjE2IiwiZXZlbnROYW1lcyIsIm5hbWVzIiwiY2FsbGJhY2tzIiwibmV3Q2FsbGJhY2tzIiwiZXZlbnRDbG9uZSIsIjE3IiwiMTgiLCJhYnNvbHV0ZSIsIm1vdXNlZG93blBvc2l0aW9uIiwibW91c2V1cFBvc2l0aW9uIiwid2hlZWxEZWx0YSIsInBpeGVsUmF0aW8iLCJtb3VzZXdoZWVsIiwiX2dldFJlbGF0aXZlTW91c2VQb3NpdGlvbiIsImNoYW5nZWRUb3VjaGVzIiwiZGV0YWlsIiwic2V0RWxlbWVudCIsInNldFNjYWxlIiwiZWxlbWVudEJvdW5kcyIsInJvb3ROb2RlIiwic2Nyb2xsWCIsInNjcm9sbFkiLCJ0b3VjaGVzIiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCIxOSIsIlJ1bm5lciIsIl9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJfY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ3ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtc1JlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwibW96Q2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJ3ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSIsIm1zQ2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJydW5uZXIiLCJmcHMiLCJkZWx0YVNhbXBsZVNpemUiLCJjb3VudGVyVGltZXN0YW1wIiwiZnJhbWVDb3VudGVyIiwiZGVsdGFIaXN0b3J5IiwidGltZVByZXYiLCJ0aW1lU2NhbGVQcmV2IiwiZnJhbWVSZXF1ZXN0SWQiLCJpc0ZpeGVkIiwiZGVsdGFNaW4iLCJkZWx0YU1heCIsIi4vRW5naW5lIiwiMjAiLCJfbW90aW9uV2FrZVRocmVzaG9sZCIsIl9tb3Rpb25TbGVlcFRocmVzaG9sZCIsIl9taW5CaWFzIiwidGltZUZhY3RvciIsIm1pbk1vdGlvbiIsIm1heE1vdGlvbiIsInNsZWVwQ291bnRlciIsInNsZWVwaW5nQm9keSIsIm1vdmluZ0JvZHkiLCJ3YXNTbGVlcGluZyIsIjIxIiwiY2hhbWZlciIsInJhZGl1cyIsInF1YWxpdHkiLCJxdWFsaXR5TWluIiwicXVhbGl0eU1heCIsInRyYXBlem9pZCIsInNsb3BlIiwidmVydGljZXNQYXRoIiwieDMiLCJjaXJjbGUiLCJtYXhTaWRlcyIsInNpZGVzIiwiY2VpbCIsInBvbHlnb24iLCJ0aGV0YSIsInBhdGgiLCJ4eCIsInl5IiwidG9GaXhlZCIsInZlcnRleFNldHMiLCJmbGFnSW50ZXJuYWwiLCJyZW1vdmVDb2xsaW5lYXIiLCJtaW5pbXVtQXJlYSIsImlzQ29udmV4IiwieiIsImRlY29tcCIsImNvbmNhdmUiLCJQb2x5Z29uIiwibWFrZUNDVyIsInJlbW92ZUNvbGxpbmVhclBvaW50cyIsImRlY29tcG9zZWQiLCJxdWlja0RlY29tcCIsImNodW5rIiwiY2h1bmtWZXJ0aWNlcyIsInBhdiIsInBidiIsImRhIiwibWFnbml0dWRlU3F1YXJlZCIsImRiIiwiaXNJbnRlcm5hbCIsIjIyIiwiQ29tcG9zaXRlcyIsInN0YWNrIiwiY29sdW1ucyIsInJvd3MiLCJjb2x1bW5HYXAiLCJyb3dHYXAiLCJsYXN0Qm9keSIsIm1heEhlaWdodCIsImJvZHlIZWlnaHQiLCJib2R5V2lkdGgiLCJjaGFpbiIsInhPZmZzZXRBIiwieU9mZnNldEEiLCJ4T2Zmc2V0QiIsInlPZmZzZXRCIiwiYm9keUFIZWlnaHQiLCJib2R5QVdpZHRoIiwiYm9keUJIZWlnaHQiLCJtZXNoIiwiY3Jvc3NCcmFjZSIsImJvZHlDIiwicHlyYW1pZCIsImFjdHVhbFJvd3MiLCJsYXN0Qm9keVdpZHRoIiwibmV3dG9uc0NyYWRsZSIsImNhciIsIndoZWVsU2l6ZSIsIndoZWVsQU9mZnNldCIsIndoZWVsQk9mZnNldCIsIndoZWVsQSIsIndoZWVsQiIsImF4ZWxBIiwiYXhlbEIiLCJzb2Z0Qm9keSIsInBhcnRpY2xlUmFkaXVzIiwicGFydGljbGVPcHRpb25zIiwiY29uc3RyYWludE9wdGlvbnMiLCIuL0JvZGllcyIsIjIzIiwibm9ybWFsaXNlIiwiZ3JhZGllbnQiLCIyNCIsImJvdW5kc0EiLCJib3VuZHNCIiwidmVjdG9yIiwiZGVsdGFYIiwiZGVsdGFZIiwiMjUiLCJTdmciLCJwYXRoVG9WZXJ0aWNlcyIsInNhbXBsZUxlbmd0aCIsImlsIiwic2VnbWVudCIsInNlZ21lbnRzIiwic2VnbWVudHNRdWV1ZSIsImxhc3RTZWdtZW50IiwibGFzdFBvaW50IiwibHgiLCJseSIsImFkZFBvaW50IiwicHgiLCJweSIsImlzUmVsYXRpdmUiLCJhZGRTZWdtZW50UG9pbnQiLCJzZWdUeXBlIiwiX3N2Z1BhdGhUb0Fic29sdXRlIiwiZ2V0VG90YWxMZW5ndGgiLCJnZXRQYXRoU2VnQXRMZW5ndGgiLCJnZXRQb2ludEF0TGVuZ3RoIiwieDAiLCJ5MCIsInNlZ3MiLCJzZWciLCIyNiIsInNxcnQiLCJvdXRwdXQiLCJ2ZWN0b3JBIiwidmVjdG9yQiIsImNyb3NzMyIsInZlY3RvckMiLCJzY2FsYXIiLCJuZWdhdGUiLCJhdGFuMiIsIjI3IiwibWVhbiIsImF2ZXJhZ2UiLCJzaWduZWQiLCJudW1lcmF0b3IiLCJkZW5vbWluYXRvciIsInZlcnRpY2UiLCJuZXh0VmVydGljZSIsIm5ld1ZlcnRpY2VzIiwicHJldlZlcnRleCIsIm5leHRWZXJ0ZXgiLCJjdXJyZW50UmFkaXVzIiwicHJldk5vcm1hbCIsIm5leHROb3JtYWwiLCJkaWFnb25hbFJhZGl1cyIsInJhZGl1c1ZlY3RvciIsIm1pZE5vcm1hbCIsInNjYWxlZFZlcnRleCIsInByZWNpc2lvbiIsImFjb3MiLCJ1cHBlciIsImxvd2VyIiwiMjgiLCJ2ZXJzaW9uIiwiUmVuZGVyUGl4aSIsIi4uL2NvbGxpc2lvbi9Db250YWN0IiwiLi4vY29sbGlzaW9uL1BhaXIiLCIuLi9jb2xsaXNpb24vUXVlcnkiLCIuLi9jb2xsaXNpb24vU0FUIiwiLi4vY29uc3RyYWludC9Nb3VzZUNvbnN0cmFpbnQiLCIuLi9jb3JlL0VuZ2luZSIsIi4uL2NvcmUvTWV0cmljcyIsIi4uL2NvcmUvUnVubmVyIiwiLi4vZmFjdG9yeS9Db21wb3NpdGVzIiwiLi4vZ2VvbWV0cnkvU3ZnIiwiLi4vcmVuZGVyL1JlbmRlclBpeGkiLCIyOSIsImJhY2tncm91bmQiLCJ3aXJlZnJhbWVCYWNrZ3JvdW5kIiwiaGFzQm91bmRzIiwid2lyZWZyYW1lcyIsInNob3dTbGVlcGluZyIsInNob3dEZWJ1ZyIsInNob3dCcm9hZHBoYXNlIiwic2hvd0JvdW5kcyIsInNob3dWZWxvY2l0eSIsInNob3dDb2xsaXNpb25zIiwic2hvd1NlcGFyYXRpb25zIiwic2hvd0F4ZXMiLCJzaG93UG9zaXRpb25zIiwic2hvd0FuZ2xlSW5kaWNhdG9yIiwic2hvd0lkcyIsInNob3dTaGFkb3dzIiwic2hvd1ZlcnRleE51bWJlcnMiLCJzaG93Q29udmV4SHVsbHMiLCJzaG93SW50ZXJuYWxFZGdlcyIsInNob3dNb3VzZVBvc2l0aW9uIiwiX2NyZWF0ZUNhbnZhcyIsImdldENvbnRleHQiLCJ0ZXh0dXJlcyIsInNldFBpeGVsUmF0aW8iLCJsb29wIiwiX2dldFBpeGVsUmF0aW8iLCJjdXJyZW50QmFja2dyb3VuZCIsIl9hcHBseUJhY2tncm91bmQiLCJnbG9iYWxDb21wb3NpdGVPcGVyYXRpb24iLCJmaWxsUmVjdCIsImJvdW5kc1dpZHRoIiwiYm91bmRzSGVpZ2h0IiwiYm91bmRzU2NhbGVYIiwiYm91bmRzU2NhbGVZIiwiYm9keUNvbnZleEh1bGxzIiwiYm9keVdpcmVmcmFtZXMiLCJib2R5Qm91bmRzIiwiYm9keUF4ZXMiLCJib2R5UG9zaXRpb25zIiwiYm9keVZlbG9jaXR5IiwiYm9keUlkcyIsInNlcGFyYXRpb25zIiwidmVydGV4TnVtYmVycyIsIm1vdXNlUG9zaXRpb24iLCJkZWJ1ZyIsInNldFRyYW5zZm9ybSIsImMiLCJkZWJ1Z1RpbWVzdGFtcCIsImRlYnVnU3RyaW5nIiwiZm9udCIsImZpbGxUZXh0IiwiYmVnaW5QYXRoIiwibW92ZVRvIiwibGluZVRvIiwic3Ryb2tlIiwiYm9keVNoYWRvd3MiLCJhcmMiLCJjbG9zZVBhdGgiLCJkaXN0YW5jZVgiLCJkaXN0YW5jZVkiLCJzaGFkb3dDb2xvciIsInNoYWRvd09mZnNldFgiLCJzaGFkb3dPZmZzZXRZIiwic2hhZG93Qmx1ciIsImZpbGwiLCJnbG9iYWxBbHBoYSIsInRleHR1cmUiLCJfZ2V0VGV4dHVyZSIsImRyYXdJbWFnZSIsInJlY3QiLCJub3JtYWxQb3NYIiwibm9ybWFsUG9zWSIsImJ1Y2tldEtleXMiLCJpbnNwZWN0b3IiLCJzZXRMaW5lRGFzaCIsInNlbGVjdFN0YXJ0Iiwic2VsZWN0Qm91bmRzIiwib25jb250ZXh0bWVudSIsIm9uc2VsZWN0c3RhcnQiLCJkZXZpY2VQaXhlbFJhdGlvIiwid2Via2l0QmFja2luZ1N0b3JlUGl4ZWxSYXRpbyIsIm1vekJhY2tpbmdTdG9yZVBpeGVsUmF0aW8iLCJtc0JhY2tpbmdTdG9yZVBpeGVsUmF0aW8iLCJvQmFja2luZ1N0b3JlUGl4ZWxSYXRpbyIsImJhY2tpbmdTdG9yZVBpeGVsUmF0aW8iLCJpbWFnZVBhdGgiLCJJbWFnZSIsImNzc0JhY2tncm91bmQiLCJiYWNrZ3JvdW5kU2l6ZSIsIjMwIiwicmVuZGVyZXIiLCJzcHJpdGVDb250YWluZXIiLCJwaXhpT3B0aW9ucyIsInRyYW5zcGFyZW50IiwiYW50aWFsaWFzIiwiYmFja2dyb3VuZENvbG9yIiwiUElYSSIsIldlYkdMUmVuZGVyZXIiLCJDb250YWluZXIiLCJzcHJpdGVzIiwicHJpbWl0aXZlcyIsImFkZENoaWxkIiwiYmdTcHJpdGUiLCJhZGRDaGlsZEF0Iiwic2V0QmFja2dyb3VuZCIsImlzQ29sb3IiLCJTcHJpdGUiLCJjb25zdHJhaW50UmVuZGVyIiwicHJpbWl0aXZlSWQiLCJwcmltaXRpdmUiLCJHcmFwaGljcyIsImJlZ2luRmlsbCIsImxpbmVTdHlsZSIsImVuZEZpbGwiLCJib2R5UmVuZGVyIiwic3ByaXRlSWQiLCJfY3JlYXRlQm9keVNwcml0ZSIsIl9jcmVhdGVCb2R5UHJpbWl0aXZlIiwiaW5pdGlhbEFuZ2xlIiwidGV4dHVyZVBhdGgiLCJhbmNob3IiLCJzdHJva2VTdHlsZUluZGljYXRvciIsInN0cm9rZVN0eWxlV2lyZWZyYW1lIiwic3Ryb2tlU3R5bGVXaXJlZnJhbWVJbmRpY2F0b3IiLCJUZXh0dXJlIiwiZnJvbUltYWdlIiwiYW5pbWUiLCJkZWZhdWx0SW5zdGFuY2VTZXR0aW5ncyIsImJlZ2luIiwiZGlyZWN0aW9uIiwiYXV0b3BsYXkiLCJkZWZhdWx0VHdlZW5TZXR0aW5ncyIsImVsYXN0aWNpdHkiLCJ2YWxpZFRyYW5zZm9ybXMiLCJ0cmFuc2Zvcm1TdHJpbmciLCJzdHJpbmdDb250YWlucyIsInB0aCIsInN2ZyIsIlNWR0VsZW1lbnQiLCJkb20iLCJmbmMiLCJ1bmQiLCJoZXgiLCJyZ2IiLCJoc2wiLCJiZXppZXIiLCJrU3BsaW5lVGFibGVTaXplIiwia1NhbXBsZVN0ZXBTaXplIiwiQSIsImFBMSIsImFBMiIsIkMiLCJjYWxjQmV6aWVyIiwiYVQiLCJnZXRTbG9wZSIsIm1YMSIsIm1ZMSIsIm1YMiIsIm1ZMiIsInNhbXBsZVZhbHVlcyIsIkZsb2F0MzJBcnJheSIsImdldFRGb3JYIiwiYVgiLCJpbnRlcnZhbFN0YXJ0IiwiY3VycmVudFNhbXBsZSIsImxhc3RTYW1wbGUiLCJndWVzc0ZvclQiLCJpbml0aWFsU2xvcGUiLCJhR3Vlc3NUIiwiY3VycmVudFNsb3BlIiwibmV3dG9uUmFwaHNvbkl0ZXJhdGUiLCJhQSIsImFCIiwiY3VycmVudFgiLCJjdXJyZW50VCIsImJpbmFyeVN1YmRpdmlkZSIsImVhc2luZ3MiLCJlbGFzdGljIiwiYXNpbiIsImVxdWF0aW9ucyIsIkluIiwiT3V0IiwiSW5PdXQiLCJmdW5jdGlvbnMiLCJzZWxlY3RTdHJpbmciLCJmaWx0ZXJBcnJheSIsInRoaXNBcmciLCJmbGF0dGVuQXJyYXkiLCJyZWR1Y2UiLCJOb2RlTGlzdCIsIkhUTUxDb2xsZWN0aW9uIiwiYXJyYXlDb250YWlucyIsInNvbWUiLCJjbG9uZU9iamVjdCIsInJlcGxhY2VPYmplY3RQcm9wcyIsIm8xIiwibzIiLCJtZXJnZU9iamVjdHMiLCJjb2xvclRvUmdiIiwicmdiVmFsdWUiLCJyZ2JUb1JnYmEiLCJoZXhWYWx1ZSIsImciLCJoZXhUb1JnYmEiLCJoc2xWYWx1ZSIsImgiLCJodWUycmdiIiwicSIsImhzbFRvUmdiYSIsImdldFVuaXQiLCJtaW5NYXhWYWx1ZSIsImdldEZ1bmN0aW9uVmFsdWUiLCJhbmltYXRhYmxlIiwiZ2V0Q1NTVmFsdWUiLCJnZXRBbmltYXRpb25UeXBlIiwiZ2V0VHJhbnNmb3JtVmFsdWUiLCJkZWZhdWx0VW5pdCIsImdldFRyYW5zZm9ybVVuaXQiLCJkZWZhdWx0VmFsIiwidHJhbnNmb3JtIiwicmd4IiwiZ2V0T3JpZ2luYWxUYXJnZXRWYWx1ZSIsImdldFJlbGF0aXZlVmFsdWUiLCJmcm9tIiwiZ2V0RGlzdGFuY2UiLCJwMSIsInAyIiwiZ2V0UG9seWxpbmVMZW5ndGgiLCJwcmV2aW91c1BvcyIsInRvdGFsTGVuZ3RoIiwiY3VycmVudFBvcyIsInRhZ05hbWUiLCJnZXRDaXJjbGVMZW5ndGgiLCJnZXRSZWN0TGVuZ3RoIiwiZ2V0TGluZUxlbmd0aCIsImdldFBvbHlnb25MZW5ndGgiLCJnZXRQYXRoUHJvZ3Jlc3MiLCJwMCIsImRlY29tcG9zZVZhbHVlIiwib3JpZ2luYWxVbml0IiwidW5pdExlc3MiLCJzdWJzdHIiLCJ2YWxpZGF0ZVZhbHVlIiwibnVtYmVycyIsInN0cmluZ3MiLCJwYXJzZVRhcmdldHMiLCJub3JtYWxpemVQcm9wZXJ0eVR3ZWVucyIsInR3ZWVuU2V0dGluZ3MiLCJub3JtYWxpemVUd2VlbnMiLCJwcmV2aW91c1R3ZWVuIiwibm9ybWFsaXplVHdlZW5WYWx1ZXMiLCJ0d2VlblZhbHVlIiwib3JpZ2luYWxWYWx1ZSIsInByZXZpb3VzVmFsdWUiLCJub3JtYWxpemVFYXNpbmciLCJpc1BhdGgiLCJzZXRUd2VlblByb2dyZXNzIiwiYXR0cmlidXRlIiwidHJhbnNmb3JtcyIsImdldEFuaW1hdGlvbnMiLCJhbmltYXRhYmxlcyIsImFuaW1UeXBlIiwiY3JlYXRlQW5pbWF0aW9uIiwiZ2V0SW5zdGFuY2VUaW1pbmdzIiwiYW5pbWF0aW9ucyIsImluc3RhbmNlU2V0dGluZ3MiLCJpc0RlbGF5IiwiY3JlYXRlTmV3SW5zdGFuY2UiLCJnZXRBbmltYXRhYmxlcyIsImdldFByb3BlcnRpZXMiLCJhY3RpdmVJbnN0YW5jZXMiLCJyYWYiLCJwbGF5IiwiYWN0aXZlTGVuZ3RoIiwibGFzdFRpbWUiLCJtYWtlUHJvbWlzZSIsIlByb21pc2UiLCJfcmVzb2x2ZSIsImluc3RhbmNlIiwidG9nZ2xlSW5zdGFuY2VEaXJlY3Rpb24iLCJyZXZlcnNlZCIsImFkanVzdFRpbWUiLCJzZXRBbmltYXRpb25zUHJvZ3Jlc3MiLCJpbnNUaW1lIiwiYW5pbWF0aW9uc0xlbmd0aCIsInR3ZWVuTGVuZ3RoIiwiZWxhcHNlZCIsInRvTnVtYmVyc0xlbmd0aCIsInRvTnVtYmVyIiwiZnJvbU51bWJlciIsInN0cmluZ3NMZW5ndGgiLCJ0cmFuc2Zvcm1zTGVuZ3RoIiwic2V0Q2FsbGJhY2siLCJjYiIsImNvdW50SXRlcmF0aW9uIiwic2V0SW5zdGFuY2VQcm9ncmVzcyIsImVuZ2luZVRpbWUiLCJpbnNEdXJhdGlvbiIsImluc09mZnNldCIsImluc1N0YXJ0IiwiaW5zQ3VycmVudFRpbWUiLCJpbnNSZXZlcnNlZCIsImNoaWxkcmVuTGVuZ3RoIiwic2VlayIsInN5bmNJbnN0YW5jZUNoaWxkcmVuIiwiYmVnYW4iLCJwYXVzZSIsImxvb3BzIiwicGF1c2VkIiwicmVzdGFydCIsImZpbmlzaGVkIiwicnVubmluZyIsInRhcmdldHNBcnJheSIsImdldFZhbHVlIiwic2V0RGFzaG9mZnNldCIsInBhdGhMZW5ndGgiLCJ0aW1lbGluZSIsInRsIiwiaW5zdGFuY2VzUGFyYW1zIiwiaW5zdGFuY2VQYXJhbXMiLCJpbnNQYXJhbXMiLCJ0bER1cmF0aW9uIiwiaW5zIiwiU2NhbGFyIiwiTGluZSIsImxpbmVJbnQiLCJsMSIsImwyIiwiYTEiLCJiMSIsImMxIiwiYTIiLCJiMiIsImMyIiwiZGV0Iiwic2VnbWVudHNJbnRlcnNlY3QiLCJxMSIsInEyIiwiLi9TY2FsYXIiLCJQb2ludCIsImxlZnRPbiIsInJpZ2h0IiwicmlnaHRPbiIsInRtcFBvaW50MSIsInRtcFBvaW50MiIsImNvbGxpbmVhciIsInRocmVzaG9sZEFuZ2xlIiwiYWIiLCJiYyIsIm1hZ0EiLCJtYWdCIiwic3FkaXN0IiwiYXQiLCJwb2x5IiwiYnIiLCJOIiwiaXNSZWZsZXgiLCJ0bXBMaW5lMSIsInRtcExpbmUyIiwiZ2V0SW50ZXJzZWN0aW9uUG9pbnQiLCJjYW5TZWUiLCJkaXN0IiwidGFyZ2V0UG9seSIsImdldEN1dEVkZ2VzIiwidG1wMSIsInRtcDIiLCJ0bXBQb2x5IiwibkRpYWdzIiwiZWRnZXMiLCJjdXRFZGdlcyIsInBvbHlzIiwiY3V0RWRnZSIsImlzU2ltcGxlIiwicmVmbGV4VmVydGljZXMiLCJzdGVpbmVyUG9pbnRzIiwibWF4bGV2ZWwiLCJsZXZlbCIsInVwcGVySW50IiwibG93ZXJJbnQiLCJ1cHBlckRpc3QiLCJsb3dlckRpc3QiLCJkIiwiY2xvc2VzdERpc3QiLCJ1cHBlckluZGV4IiwibG93ZXJJbmRleCIsImNsb3Nlc3RJbmRleCIsImxvd2VyUG9seSIsInVwcGVyUG9seSIsIi4vTGluZSIsIi4vUG9pbnQiLCIu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QUF2bEQsRUFBQThrRSxFQUFBQyxFQUFBcjdCLEVBQUFzN0IsRUFBQUMsSUFHQWpsRSxFQUtBLE9BRkFBLEVBQUFuUyxLQUFBTCxNQUVBd1MsR0FTQW1sRCxFQUFBOTFELFVBQUFnMkQsc0JBQUEsU0FBQWlILEdBRUEsSUFEQSxJQUFBMzhELEVBQUEsRUFDQVUsRUFBQTdDLEtBQUFzM0MsU0FBQTUxQyxPQUFBLEVBQUExQixLQUFBczNDLFNBQUE1MUMsT0FBQSxHQUFBbUIsR0FBQSxJQUFBQSxFQUNBdXlFLEVBQUFNLFVBQUExMUUsS0FBQWkyRSxHQUFBcHpFLEVBQUEsR0FBQTdDLEtBQUFpMkUsR0FBQXB6RSxHQUFBN0MsS0FBQWkyRSxHQUFBcHpFLEVBQUEsR0FBQWk4RCxLQUVBOStELEtBQUFzM0MsU0FBQS96QyxPQUFBVixFQUFBN0MsS0FBQXMzQyxTQUFBNTFDLE9BQUEsR0FDQW1CLElBQ0FWLEtBR0EsT0FBQUEsS0FHQWsyRSxTQUFBLEVBQUFDLFVBQUEsRUFBQW5ELFdBQUEsSUFBQTcwQixHQUFBLFNBQUFoSyxFQUFBNTJDLEVBQUFDLEdBT0EsU0FBQXkwRSxLQU5BMTBFLEVBQUFDLFFBQUF5MEUsRUFpQkFBLEVBQUFueEUsR0FBQSxTQUFBNEYsRUFBQUMsRUFBQWcyRCxHQUVBLE9BREFBLEVBQUFBLEdBQUEsRUFDQXg2RCxLQUFBZzRDLElBQUF6ekMsRUFBQUMsR0FBQWcyRCxRQUdBbmUsR0FBQSxTQUFBckssRUFBQTUyQyxFQUFBQyxHQUNBRCxFQUFBQyxTQUNBZzRELFFBQUFyaEIsRUFBQSxhQUNBOCtCLE1BQUE5K0IsRUFBQSxjQUdBZ2lDLFVBQUEsRUFBQUMsWUFBQSxTQUFBLEdBenBCQSxDQTBwQkEiLCJmaWxlIjoidmVuZG9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYxLjEyLjRcbiAqIGh0dHA6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cDovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNi0wNS0yMFQxNzoxN1pcbiAqL1xuXG4oZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2Bcblx0XHQvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0odHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDE4K1xuLy8gQ2FuJ3QgYmUgaW4gc3RyaWN0IG1vZGUsIHNldmVyYWwgbGlicyBpbmNsdWRpbmcgQVNQLk5FVCB0cmFjZVxuLy8gdGhlIHN0YWNrIHZpYSBhcmd1bWVudHMuY2FsbGVyLmNhbGxlZSBhbmQgRmlyZWZveCBkaWVzIGlmXG4vLyB5b3UgdHJ5IHRvIHRyYWNlIHRocm91Z2ggXCJ1c2Ugc3RyaWN0XCIgY2FsbCBjaGFpbnMuICgjMTMzMzUpXG4vL1widXNlIHN0cmljdFwiO1xudmFyIGRlbGV0ZWRJZHMgPSBbXTtcblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG52YXIgc2xpY2UgPSBkZWxldGVkSWRzLnNsaWNlO1xuXG52YXIgY29uY2F0ID0gZGVsZXRlZElkcy5jb25jYXQ7XG5cbnZhciBwdXNoID0gZGVsZXRlZElkcy5wdXNoO1xuXG52YXIgaW5kZXhPZiA9IGRlbGV0ZWRJZHMuaW5kZXhPZjtcblxudmFyIGNsYXNzMnR5cGUgPSB7fTtcblxudmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcblxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cblxuXG52YXJcblx0dmVyc2lvbiA9IFwiMS4xMi40XCIsXG5cblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xLCBJRTw5XG5cdC8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxuXHRydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZyxcblxuXHQvLyBNYXRjaGVzIGRhc2hlZCBzdHJpbmcgZm9yIGNhbWVsaXppbmdcblx0cm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFtcXGRhLXpdKS9naSxcblxuXHQvLyBVc2VkIGJ5IGpRdWVyeS5jYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5cdGZjYW1lbENhc2UgPSBmdW5jdGlvbiggYWxsLCBsZXR0ZXIgKSB7XG5cdFx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xuXHR9O1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gU3RhcnQgd2l0aCBhbiBlbXB0eSBzZWxlY3RvclxuXHRzZWxlY3RvcjogXCJcIixcblxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcblx0bGVuZ3RoOiAwLFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG5cdFx0cmV0dXJuIG51bSAhPSBudWxsID9cblxuXHRcdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxuXHRcdFx0KCBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdICkgOlxuXG5cdFx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG5cdFx0XHRzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXHRcdHJldC5jb250ZXh0ID0gdGhpcy5jb250ZXh0O1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1sgaiBdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHQvLyBCZWhhdmVzIGxpa2UgYW4gQXJyYXkncyBtZXRob2QsIG5vdCBsaWtlIGEgalF1ZXJ5IG1ldGhvZC5cblx0cHVzaDogcHVzaCxcblx0c29ydDogZGVsZXRlZElkcy5zb3J0LFxuXHRzcGxpY2U6IGRlbGV0ZWRJZHMuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgc3JjLCBjb3B5SXNBcnJheSwgY29weSwgbmFtZSwgb3B0aW9ucywgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBza2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24oIHRhcmdldCApICkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Ly8gZXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG5cdGlmICggaSA9PT0gbGVuZ3RoICkge1xuXHRcdHRhcmdldCA9IHRoaXM7XG5cdFx0aS0tO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XG5cblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRcdFx0c3JjID0gdGFyZ2V0WyBuYW1lIF07XG5cdFx0XHRcdGNvcHkgPSBvcHRpb25zWyBuYW1lIF07XG5cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAoIHRhcmdldCA9PT0gY29weSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb3B5ICkgfHxcblx0XHRcdFx0XHQoIGNvcHlJc0FycmF5ID0galF1ZXJ5LmlzQXJyYXkoIGNvcHkgKSApICkgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICkge1xuXHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc0FycmF5KCBzcmMgKSA/IHNyYyA6IFtdO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSA/IHNyYyA6IHt9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcblxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXG5cdGlzUmVhZHk6IHRydWUsXG5cblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblx0fSxcblxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxuXG5cdC8vIFNlZSB0ZXN0L3VuaXQvY29yZS5qcyBmb3IgZGV0YWlscyBjb25jZXJuaW5nIGlzRnVuY3Rpb24uXG5cdC8vIFNpbmNlIHZlcnNpb24gMS4zLCBET00gbWV0aG9kcyBhbmQgZnVuY3Rpb25zIGxpa2UgYWxlcnRcblx0Ly8gYXJlbid0IHN1cHBvcnRlZC4gVGhleSByZXR1cm4gZmFsc2Ugb24gSUUgKCMyOTY4KS5cblx0aXNGdW5jdGlvbjogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LnR5cGUoIG9iaiApID09PSBcImZ1bmN0aW9uXCI7XG5cdH0sXG5cblx0aXNBcnJheTogQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiggb2JqICkge1xuXHRcdHJldHVybiBqUXVlcnkudHlwZSggb2JqICkgPT09IFwiYXJyYXlcIjtcblx0fSxcblxuXHRpc1dpbmRvdzogZnVuY3Rpb24oIG9iaiApIHtcblx0XHQvKiBqc2hpbnQgZXFlcWVxOiBmYWxzZSAqL1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT0gb2JqLndpbmRvdztcblx0fSxcblxuXHRpc051bWVyaWM6IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAobnVsbHx0cnVlfGZhbHNlfFwiXCIpXG5cdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxuXHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxuXHRcdC8vIGFkZGluZyAxIGNvcnJlY3RzIGxvc3Mgb2YgcHJlY2lzaW9uIGZyb20gcGFyc2VGbG9hdCAoIzE1MTAwKVxuXHRcdHZhciByZWFsU3RyaW5nT2JqID0gb2JqICYmIG9iai50b1N0cmluZygpO1xuXHRcdHJldHVybiAhalF1ZXJ5LmlzQXJyYXkoIG9iaiApICYmICggcmVhbFN0cmluZ09iaiAtIHBhcnNlRmxvYXQoIHJlYWxTdHJpbmdPYmogKSArIDEgKSA+PSAwO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIG5hbWU7XG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIGtleTtcblxuXHRcdC8vIE11c3QgYmUgYW4gT2JqZWN0LlxuXHRcdC8vIEJlY2F1c2Ugb2YgSUUsIHdlIGFsc28gaGF2ZSB0byBjaGVjayB0aGUgcHJlc2VuY2Ugb2YgdGhlIGNvbnN0cnVjdG9yIHByb3BlcnR5LlxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IERPTSBub2RlcyBhbmQgd2luZG93IG9iamVjdHMgZG9uJ3QgcGFzcyB0aHJvdWdoLCBhcyB3ZWxsXG5cdFx0aWYgKCAhb2JqIHx8IGpRdWVyeS50eXBlKCBvYmogKSAhPT0gXCJvYmplY3RcIiB8fCBvYmoubm9kZVR5cGUgfHwgalF1ZXJ5LmlzV2luZG93KCBvYmogKSApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHR0cnkge1xuXG5cdFx0XHQvLyBOb3Qgb3duIGNvbnN0cnVjdG9yIHByb3BlcnR5IG11c3QgYmUgT2JqZWN0XG5cdFx0XHRpZiAoIG9iai5jb25zdHJ1Y3RvciAmJlxuXHRcdFx0XHQhaGFzT3duLmNhbGwoIG9iaiwgXCJjb25zdHJ1Y3RvclwiICkgJiZcblx0XHRcdFx0IWhhc093bi5jYWxsKCBvYmouY29uc3RydWN0b3IucHJvdG90eXBlLCBcImlzUHJvdG90eXBlT2ZcIiApICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdC8vIElFOCw5IFdpbGwgdGhyb3cgZXhjZXB0aW9ucyBvbiBjZXJ0YWluIGhvc3Qgb2JqZWN0cyAjOTg5N1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBIYW5kbGUgaXRlcmF0aW9uIG92ZXIgaW5oZXJpdGVkIHByb3BlcnRpZXMgYmVmb3JlIG93biBwcm9wZXJ0aWVzLlxuXHRcdGlmICggIXN1cHBvcnQub3duRmlyc3QgKSB7XG5cdFx0XHRmb3IgKCBrZXkgaW4gb2JqICkge1xuXHRcdFx0XHRyZXR1cm4gaGFzT3duLmNhbGwoIG9iaiwga2V5ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3duIHByb3BlcnRpZXMgYXJlIGVudW1lcmF0ZWQgZmlyc3RseSwgc28gdG8gc3BlZWQgdXAsXG5cdFx0Ly8gaWYgbGFzdCBvbmUgaXMgb3duLCB0aGVuIGFsbCBwcm9wZXJ0aWVzIGFyZSBvd24uXG5cdFx0Zm9yICgga2V5IGluIG9iaiApIHt9XG5cblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgfHwgaGFzT3duLmNhbGwoIG9iaiwga2V5ICk7XG5cdH0sXG5cblx0dHlwZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRpZiAoIG9iaiA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIG9iaiArIFwiXCI7XG5cdFx0fVxuXHRcdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdFx0XHRjbGFzczJ0eXBlWyB0b1N0cmluZy5jYWxsKCBvYmogKSBdIHx8IFwib2JqZWN0XCIgOlxuXHRcdFx0dHlwZW9mIG9iajtcblx0fSxcblxuXHQvLyBXb3JrYXJvdW5kcyBiYXNlZCBvbiBmaW5kaW5ncyBieSBKaW0gRHJpc2NvbGxcblx0Ly8gaHR0cDovL3dlYmxvZ3MuamF2YS5uZXQvYmxvZy9kcmlzY29sbC9hcmNoaXZlLzIwMDkvMDkvMDgvZXZhbC1qYXZhc2NyaXB0LWdsb2JhbC1jb250ZXh0XG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBkYXRhICkge1xuXHRcdGlmICggZGF0YSAmJiBqUXVlcnkudHJpbSggZGF0YSApICkge1xuXG5cdFx0XHQvLyBXZSB1c2UgZXhlY1NjcmlwdCBvbiBJbnRlcm5ldCBFeHBsb3JlclxuXHRcdFx0Ly8gV2UgdXNlIGFuIGFub255bW91cyBmdW5jdGlvbiBzbyB0aGF0IGNvbnRleHQgaXMgd2luZG93XG5cdFx0XHQvLyByYXRoZXIgdGhhbiBqUXVlcnkgaW4gRmlyZWZveFxuXHRcdFx0KCB3aW5kb3cuZXhlY1NjcmlwdCB8fCBmdW5jdGlvbiggZGF0YSApIHtcblx0XHRcdFx0d2luZG93WyBcImV2YWxcIiBdLmNhbGwoIHdpbmRvdywgZGF0YSApOyAvLyBqc2NzOmlnbm9yZSByZXF1aXJlRG90Tm90YXRpb25cblx0XHRcdH0gKSggZGF0YSApO1xuXHRcdH1cblx0fSxcblxuXHQvLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG5cdC8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICgjOTU3Milcblx0Y2FtZWxDYXNlOiBmdW5jdGlvbiggc3RyaW5nICkge1xuXHRcdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xuXHR9LFxuXG5cdG5vZGVOYW1lOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0fSxcblxuXHRlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHtcblx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcblxuXHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xLCBJRTw5XG5cdHRyaW06IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFx0XCJcIiA6XG5cdFx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlMaWtlKCBPYmplY3QoIGFyciApICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggcmV0LFxuXHRcdFx0XHRcdHR5cGVvZiBhcnIgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFsgYXJyIF0gOiBhcnJcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guY2FsbCggcmV0LCBhcnIgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdGluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnIsIGkgKSB7XG5cdFx0dmFyIGxlbjtcblxuXHRcdGlmICggYXJyICkge1xuXHRcdFx0aWYgKCBpbmRleE9mICkge1xuXHRcdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0XHRcdH1cblxuXHRcdFx0bGVuID0gYXJyLmxlbmd0aDtcblx0XHRcdGkgPSBpID8gaSA8IDAgPyBNYXRoLm1heCggMCwgbGVuICsgaSApIDogaSA6IDA7XG5cblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXG5cdFx0XHRcdC8vIFNraXAgYWNjZXNzaW5nIGluIHNwYXJzZSBhcnJheXNcblx0XHRcdFx0aWYgKCBpIGluIGFyciAmJiBhcnJbIGkgXSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiAtMTtcblx0fSxcblxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0d2hpbGUgKCBqIDwgbGVuICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqKysgXTtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gV29ya2Fyb3VuZCBjYXN0aW5nIG9mIC5sZW5ndGggdG8gTmFOIG9uIG90aGVyd2lzZSBhcnJheWxpa2Ugb2JqZWN0cyAoZS5nLiwgTm9kZUxpc3RzKVxuXHRcdGlmICggbGVuICE9PSBsZW4gKSB7XG5cdFx0XHR3aGlsZSAoIHNlY29uZFsgaiBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGZpcnN0WyBpKysgXSA9IHNlY29uZFsgaisrIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gY29uY2F0LmFwcGx5KCBbXSwgcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG5cdC8vIGFyZ3VtZW50cy5cblx0cHJveHk6IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0XHR2YXIgYXJncywgcHJveHksIHRtcDtcblxuXHRcdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdFx0Y29udGV4dCA9IGZuO1xuXHRcdFx0Zm4gPSB0bXA7XG5cdFx0fVxuXG5cdFx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcblx0XHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRcdGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBTaW11bGF0ZWQgYmluZFxuXHRcdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0XHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdFx0fTtcblxuXHRcdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuXHRcdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdFx0cmV0dXJuIHByb3h5O1xuXHR9LFxuXG5cdG5vdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuICsoIG5ldyBEYXRlKCkgKTtcblx0fSxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSApO1xuXG4vLyBKU0hpbnQgd291bGQgZXJyb3Igb24gdGhpcyBjb2RlIGR1ZSB0byB0aGUgU3ltYm9sIG5vdCBiZWluZyBkZWZpbmVkIGluIEVTNS5cbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5qc2hpbnRyYyB3b3VsZCBjcmVhdGUgYSBkYW5nZXIgb2YgdXNpbmcgdGhlIGdsb2JhbFxuLy8gdW5ndWFyZGVkIGluIGFub3RoZXIgcGxhY2UsIGl0IHNlZW1zIHNhZmVyIHRvIGp1c3QgZGlzYWJsZSBKU0hpbnQgZm9yIHRoZXNlXG4vLyB0aHJlZSBsaW5lcy5cbi8qIGpzaGludCBpZ25vcmU6IHN0YXJ0ICovXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGRlbGV0ZWRJZHNbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuLyoganNoaW50IGlnbm9yZTogZW5kICovXG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcbmZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbn0gKTtcblxuZnVuY3Rpb24gaXNBcnJheUxpa2UoIG9iaiApIHtcblxuXHQvLyBTdXBwb3J0OiBpT1MgOC4yIChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcblx0Ly8gYGluYCBjaGVjayB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0yMTQ1KVxuXHQvLyBoYXNPd24gaXNuJ3QgdXNlZCBoZXJlIGR1ZSB0byBmYWxzZSBuZWdhdGl2ZXNcblx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxuXHR2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcblx0XHR0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXG5cdGlmICggdHlwZSA9PT0gXCJmdW5jdGlvblwiIHx8IGpRdWVyeS5pc1dpbmRvdyggb2JqICkgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcblx0XHR0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgKCBsZW5ndGggLSAxICkgaW4gb2JqO1xufVxudmFyIFNpenpsZSA9XG4vKiFcbiAqIFNpenpsZSBDU1MgU2VsZWN0b3IgRW5naW5lIHYyLjIuMVxuICogaHR0cDovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNS0xMC0xN1xuICovXG4oZnVuY3Rpb24oIHdpbmRvdyApIHtcblxudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIDA7XG5cdH0sXG5cblx0Ly8gR2VuZXJhbC1wdXJwb3NlIGNvbnN0YW50c1xuXHRNQVhfTkVHQVRJVkUgPSAxIDw8IDMxLFxuXG5cdC8vIEluc3RhbmNlIG1ldGhvZHNcblx0aGFzT3duID0gKHt9KS5oYXNPd25Qcm9wZXJ0eSxcblx0YXJyID0gW10sXG5cdHBvcCA9IGFyci5wb3AsXG5cdHB1c2hfbmF0aXZlID0gYXJyLnB1c2gsXG5cdHB1c2ggPSBhcnIucHVzaCxcblx0c2xpY2UgPSBhcnIuc2xpY2UsXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHQvLyBodHRwOi8vanNwZXJmLmNvbS90aG9yLWluZGV4b2YtdnMtZm9yLzVcblx0aW5kZXhPZiA9IGZ1bmN0aW9uKCBsaXN0LCBlbGVtICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdGxlbiA9IGxpc3QubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0aWYgKCBsaXN0W2ldID09PSBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCN2YWx1ZS1kZWYtaWRlbnRpZmllclxuXHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXFxceDAwLVxcXFx4YTBdKStcIixcblxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcblx0XHRcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCIqXFxcXF1cIixcblxuXHRwc2V1ZG9zID0gXCI6KFwiICsgaWRlbnRpZmllciArIFwiKSg/OlxcXFwoKFwiICtcblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcblx0XHQvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpXG5cdFx0XCIuKlwiICtcblx0XHRcIilcXFxcKXwpXCIsXG5cblx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxuXHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcblx0cnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgKyB3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblxuXHRyYXR0cmlidXRlUXVvdGVzID0gbmV3IFJlZ0V4cCggXCI9XCIgKyB3aGl0ZXNwYWNlICsgXCIqKFteXFxcXF0nXFxcIl0qPylcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLCBcImdcIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cdHJlc2NhcGUgPSAvJ3xcXFxcL2csXG5cblx0Ly8gQ1NTIGVzY2FwZXMgaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3woXCIgKyB3aGl0ZXNwYWNlICsgXCIpfC4pXCIsIFwiaWdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggXywgZXNjYXBlZCwgZXNjYXBlZFdoaXRlc3BhY2UgKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGVkIC0gMHgxMDAwMDtcblx0XHQvLyBOYU4gbWVhbnMgbm9uLWNvZGVwb2ludFxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjRcblx0XHQvLyBXb3JrYXJvdW5kIGVycm9uZW91cyBudW1lcmljIGludGVycHJldGF0aW9uIG9mICtcIjB4XCJcblx0XHRyZXR1cm4gaGlnaCAhPT0gaGlnaCB8fCBlc2NhcGVkV2hpdGVzcGFjZSA/XG5cdFx0XHRlc2NhcGVkIDpcblx0XHRcdGhpZ2ggPCAwID9cblx0XHRcdFx0Ly8gQk1QIGNvZGVwb2ludFxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0Ly8gU3VwcGxlbWVudGFsIFBsYW5lIGNvZGVwb2ludCAoc3Vycm9nYXRlIHBhaXIpXG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0Ly8gU2VlIHNldERvY3VtZW50KClcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdC8vIGVycm9yIGluIElFXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzZXREb2N1bWVudCgpO1xuXHR9O1xuXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxudHJ5IHtcblx0cHVzaC5hcHBseShcblx0XHQoYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuXHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0cHVzaF9uYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbChlbHMpICk7XG5cdFx0fSA6XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcblx0XHRcdHdoaWxlICggKHRhcmdldFtqKytdID0gZWxzW2krK10pICkge31cblx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtLCBpLCBlbGVtLCBuaWQsIG5pZHNlbGVjdCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxuXG5cdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRpZiAoICFzZWVkICkge1xuXG5cdFx0aWYgKCAoIGNvbnRleHQgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IHByZWZlcnJlZERvYyApICE9PSBkb2N1bWVudCApIHtcblx0XHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0fVxuXHRcdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcblxuXHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2Rcblx0XHRcdC8vIChleGNlcHRpbmcgRG9jdW1lbnRGcmFnbWVudCBjb250ZXh0LCB3aGVyZSB0aGUgbWV0aG9kcyBkb24ndCBleGlzdClcblx0XHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmIChtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSkgKSB7XG5cblx0XHRcdFx0Ly8gSUQgc2VsZWN0b3Jcblx0XHRcdFx0aWYgKCAobSA9IG1hdGNoWzFdKSApIHtcblxuXHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcblx0XHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRWxlbWVudCBjb250ZXh0XG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgJiYgKGVsZW0gPSBuZXdDb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICYmXG5cdFx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcblxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbMl0gKSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHRcdC8vIENsYXNzIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIChtID0gbWF0Y2hbM10pICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJlxuXHRcdFx0XHRcdGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVGFrZSBhZHZhbnRhZ2Ugb2YgcXVlcnlTZWxlY3RvckFsbFxuXHRcdFx0aWYgKCBzdXBwb3J0LnFzYSAmJlxuXHRcdFx0XHQhY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdICYmXG5cdFx0XHRcdCghcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSkgKSB7XG5cblx0XHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xuXG5cdFx0XHRcdC8vIHFTQSBsb29rcyBvdXRzaWRlIEVsZW1lbnQgY29udGV4dCwgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudFxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB3b3JrYXJvdW5kIHRlY2huaXF1ZVxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PThcblx0XHRcdFx0Ly8gRXhjbHVkZSBvYmplY3QgZWxlbWVudHNcblx0XHRcdFx0fSBlbHNlIGlmICggY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2FwdHVyZSB0aGUgY29udGV4dCBJRCwgc2V0dGluZyBpdCBmaXJzdCBpZiBuZWNlc3Nhcnlcblx0XHRcdFx0XHRpZiAoIChuaWQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZSggXCJpZFwiICkpICkge1xuXHRcdFx0XHRcdFx0bmlkID0gbmlkLnJlcGxhY2UoIHJlc2NhcGUsIFwiXFxcXCQmXCIgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgKG5pZCA9IGV4cGFuZG8pICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJlZml4IGV2ZXJ5IHNlbGVjdG9yIGluIHRoZSBsaXN0XG5cdFx0XHRcdFx0Z3JvdXBzID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XG5cdFx0XHRcdFx0bmlkc2VsZWN0ID0gcmlkZW50aWZpZXIudGVzdCggbmlkICkgPyBcIiNcIiArIG5pZCA6IFwiW2lkPSdcIiArIG5pZCArIFwiJ11cIjtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1tpXSA9IG5pZHNlbGVjdCArIFwiIFwiICsgdG9TZWxlY3RvciggZ3JvdXBzW2ldICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oIFwiLFwiICk7XG5cblx0XHRcdFx0XHQvLyBFeHBhbmQgY29udGV4dCBmb3Igc2libGluZyBzZWxlY3RvcnNcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIG5ld1NlbGVjdG9yICkge1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9IGNhdGNoICggcXNhRXJyb3IgKSB7XG5cdFx0XHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZGl2IGFuZCBleHBlY3RzIGEgYm9vbGVhbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcblx0dmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4gISFmbiggZGl2ICk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XG5cdFx0aWYgKCBkaXYucGFyZW50Tm9kZSApIHtcblx0XHRcdGRpdi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBkaXYgKTtcblx0XHR9XG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRkaXYgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdChcInxcIiksXG5cdFx0aSA9IGFyci5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbaV0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0KCB+Yi5zb3VyY2VJbmRleCB8fCBNQVhfTkVHQVRJVkUgKSAtXG5cdFx0XHQoIH5hLnNvdXJjZUluZGV4IHx8IE1BWF9ORUdBVElWRSApO1xuXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xuXHRpZiAoIGRpZmYgKSB7XG5cdFx0cmV0dXJuIGRpZmY7XG5cdH1cblxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxuXHRpZiAoIGN1ciApIHtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIubmV4dFNpYmxpbmcpICkge1xuXHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYSA/IDEgOiAtMTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIChuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIikgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0dmFyIGosXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIHNlZWRbIChqID0gbWF0Y2hJbmRleGVzW2ldKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbal0gPSAhKG1hdGNoZXNbal0gPSBzZWVkW2pdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdC8vIGRvY3VtZW50RWxlbWVudCBpcyB2ZXJpZmllZCBmb3IgY2FzZXMgd2hlcmUgaXQgZG9lc24ndCB5ZXQgZXhpc3Rcblx0Ly8gKHN1Y2ggYXMgbG9hZGluZyBpZnJhbWVzIGluIElFIC0gIzQ4MzMpXG5cdHZhciBkb2N1bWVudEVsZW1lbnQgPSBlbGVtICYmIChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkuZG9jdW1lbnRFbGVtZW50O1xuXHRyZXR1cm4gZG9jdW1lbnRFbGVtZW50ID8gZG9jdW1lbnRFbGVtZW50Lm5vZGVOYW1lICE9PSBcIkhUTUxcIiA6IGZhbHNlO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLCBwYXJlbnQsXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXG5cdGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDktMTEsIEVkZ2Vcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHRpZiAoIChwYXJlbnQgPSBkb2N1bWVudC5kZWZhdWx0VmlldykgJiYgcGFyZW50LnRvcCAhPT0gcGFyZW50ICkge1xuXHRcdC8vIFN1cHBvcnQ6IElFIDExXG5cdFx0aWYgKCBwYXJlbnQuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHBhcmVudC5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDEwIG9ubHlcblx0XHR9IGVsc2UgaWYgKCBwYXJlbnQuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRwYXJlbnQuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0XHRkaXYuY2xhc3NOYW1lID0gXCJpXCI7XG5cdFx0cmV0dXJuICFkaXYuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpO1xuXHR9KTtcblxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0XHRkaXYuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoXCJcIikgKTtcblx0XHRyZXR1cm4gIWRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZGl2ICkuaWQgPSBleHBhbmRvO1xuXHRcdHJldHVybiAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBJRCBmaW5kIGFuZCBmaWx0ZXJcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBtID8gWyBtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKFwiaWRcIikgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHQvLyBTdXBwb3J0OiBJRTYvN1xuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRkZWxldGUgRXhwci5maW5kW1wiSURcIl07XG5cblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gIGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHR9XG5cblx0Ly8gVGFnXG5cdEV4cHIuZmluZFtcIlRBR1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHR0bXAgPSBbXSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRtcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH07XG5cblx0Ly8gQ2xhc3Ncblx0RXhwci5maW5kW1wiQ0xBU1NcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKSkgKSB7XG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRcdGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG5cdFx0XHQvLyBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZGl2ICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0Ly8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlsqXiRdPVwiICsgd2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseVxuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuNCwgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjgrXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJ+PVwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiOmNoZWNrZWRcIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIi4jLitbK35dXCIpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcblx0XHRcdC8vIFRoZSB0eXBlIGFuZCBuYW1lIGF0dHJpYnV0ZXMgYXJlIHJlc3RyaWN0ZWQgZHVyaW5nIC5pbm5lckhUTUwgYXNzaWdubWVudFxuXHRcdFx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xuXHRcdFx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXG5cdFx0XHRpZiAoIGRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZW5hYmxlZFwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3BlcmEgMTAtMTEgZG9lcyBub3QgdGhyb3cgb24gcG9zdC1jb21tYSBpbnZhbGlkIHBzZXVkb3Ncblx0XHRcdGRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKFwiLC4qOlwiKTtcblx0XHR9KTtcblx0fVxuXG5cdGlmICggKHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAobWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yKSApKSApIHtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZGl2LCBcImRpdlwiICk7XG5cblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcblx0XHRcdG1hdGNoZXMuY2FsbCggZGl2LCBcIltzIT0nJ106eFwiICk7XG5cdFx0XHRyYnVnZ3lNYXRjaGVzLnB1c2goIFwiIT1cIiwgcHNldWRvcyApO1xuXHRcdH0pO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbihcInxcIikgKTtcblx0cmJ1Z2d5TWF0Y2hlcyA9IHJidWdneU1hdGNoZXMubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneU1hdGNoZXMuam9pbihcInxcIikgKTtcblxuXHQvKiBDb250YWluc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcblxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcblx0Ly8gUHVycG9zZWZ1bGx5IHNlbGYtZXhjbHVzaXZlXG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0XHRcdCkpO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0aWYgKCBiICkge1xuXHRcdFx0XHR3aGlsZSAoIChiID0gYi5wYXJlbnROb2RlKSApIHtcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0MTtcblxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdCghc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHRpZiAoIGEgPT09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYSkgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHRcdGlmICggYiA9PT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBiKSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1haW50YWluIG9yaWdpbmFsIG9yZGVyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcblx0fSA6XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0YXAgPSBbIGEgXSxcblx0XHRcdGJwID0gWyBiIF07XG5cblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xuXHRcdFx0cmV0dXJuIGEgPT09IGRvY3VtZW50ID8gLTEgOlxuXHRcdFx0XHRiID09PSBkb2N1bWVudCA/IDEgOlxuXHRcdFx0XHRhdXAgPyAtMSA6XG5cdFx0XHRcdGJ1cCA/IDEgOlxuXHRcdFx0XHRzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXG5cdFx0Y3VyID0gYTtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRicC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cblx0XHQvLyBXYWxrIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeVxuXHRcdHdoaWxlICggYXBbaV0gPT09IGJwW2ldICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblx0XHRcdC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvclxuXHRcdFx0c2libGluZ0NoZWNrKCBhcFtpXSwgYnBbaV0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0YXBbaV0gPT09IHByZWZlcnJlZERvYyA/IC0xIDpcblx0XHRcdGJwW2ldID09PSBwcmVmZXJyZWREb2MgPyAxIDpcblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvY3VtZW50O1xufTtcblxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdC8vIE1ha2Ugc3VyZSB0aGF0IGF0dHJpYnV0ZSBzZWxlY3RvcnMgYXJlIHF1b3RlZFxuXHRleHByID0gZXhwci5yZXBsYWNlKCByYXR0cmlidXRlUXVvdGVzLCBcIj0nJDEnXVwiICk7XG5cblx0aWYgKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdCFjb21waWxlckNhY2hlWyBleHByICsgXCIgXCIgXSAmJlxuXHRcdCggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiZcblx0XHQoICFyYnVnZ3lRU0EgICAgIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cdFx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcblx0XHRcdFx0XHQvLyBmcmFnbWVudCBpbiBJRSA5XG5cdFx0XHRcdFx0ZWxlbS5kb2N1bWVudCAmJiBlbGVtLmRvY3VtZW50Lm5vZGVUeXBlICE9PSAxMSApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblx0XHR9IGNhdGNoIChlKSB7fVxuXHR9XG5cblx0cmV0dXJuIFNpenpsZSggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcbn07XG5cblNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdH1cblx0cmV0dXJuIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7XG59O1xuXG5TaXp6bGUuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXHRcdC8vIERvbid0IGdldCBmb29sZWQgYnkgT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzIChqUXVlcnkgIzEzODA3KVxuXHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cblx0XHRcdGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6XG5cdFx0XHR1bmRlZmluZWQ7XG5cblx0cmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkID9cblx0XHR2YWwgOlxuXHRcdHN1cHBvcnQuYXR0cmlidXRlcyB8fCAhZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSA6XG5cdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKG5hbWUpKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcbn07XG5cblNpenpsZS5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdHRocm93IG5ldyBFcnJvciggXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIG1zZyApO1xufTtcblxuLyoqXG4gKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXG4gKiBAcGFyYW0ge0FycmF5TGlrZX0gcmVzdWx0c1xuICovXG5TaXp6bGUudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkge1xuXHR2YXIgZWxlbSxcblx0XHRkdXBsaWNhdGVzID0gW10sXG5cdFx0aiA9IDAsXG5cdFx0aSA9IDA7XG5cblx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxuXHRoYXNEdXBsaWNhdGUgPSAhc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzO1xuXHRzb3J0SW5wdXQgPSAhc3VwcG9ydC5zb3J0U3RhYmxlICYmIHJlc3VsdHMuc2xpY2UoIDAgKTtcblx0cmVzdWx0cy5zb3J0KCBzb3J0T3JkZXIgKTtcblxuXHRpZiAoIGhhc0R1cGxpY2F0ZSApIHtcblx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXG4gKi9cbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbm9kZSxcblx0XHRyZXQgPSBcIlwiLFxuXHRcdGkgPSAwLFxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRpZiAoICFub2RlVHlwZSApIHtcblx0XHQvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheVxuXHRcdHdoaWxlICggKG5vZGUgPSBlbGVtW2krK10pICkge1xuXHRcdFx0Ly8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXNcblx0XHRcdHJldCArPSBnZXRUZXh0KCBub2RlICk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7XG5cdFx0Ly8gVXNlIHRleHRDb250ZW50IGZvciBlbGVtZW50c1xuXHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHR9XG5cdC8vIERvIG5vdCBpbmNsdWRlIGNvbW1lbnQgb3IgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBub2Rlc1xuXG5cdHJldHVybiByZXQ7XG59O1xuXG5FeHByID0gU2l6emxlLnNlbGVjdG9ycyA9IHtcblxuXHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcblx0Y2FjaGVMZW5ndGg6IDUwLFxuXG5cdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxuXG5cdG1hdGNoOiBtYXRjaEV4cHIsXG5cblx0YXR0ckhhbmRsZToge30sXG5cblx0ZmluZDoge30sXG5cblx0cmVsYXRpdmU6IHtcblx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSxcblx0XHRcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cblx0fSxcblxuXHRwcmVGaWx0ZXI6IHtcblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbM10gPSAoIG1hdGNoWzNdIHx8IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCIgKS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzJdID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdG1hdGNoWzNdID0gXCIgXCIgKyBtYXRjaFszXSArIFwiIFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG5cdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG5cdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcblx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XG5cdFx0XHQqL1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzFdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWzNdICkge1xuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXG5cdFx0XHRcdG1hdGNoWzRdID0gKyggbWF0Y2hbNF0gPyBtYXRjaFs1XSArIChtYXRjaFs2XSB8fCAxKSA6IDIgKiAoIG1hdGNoWzNdID09PSBcImV2ZW5cIiB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApICk7XG5cdFx0XHRcdG1hdGNoWzVdID0gKyggKCBtYXRjaFs3XSArIG1hdGNoWzhdICkgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKTtcblxuXHRcdFx0Ly8gb3RoZXIgdHlwZXMgcHJvaGliaXQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWzZdICYmIG1hdGNoWzJdO1xuXG5cdFx0XHRpZiAoIG1hdGNoRXhwcltcIkNISUxEXCJdLnRlc3QoIG1hdGNoWzBdICkgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pc1xuXHRcdFx0aWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0bWF0Y2hbMl0gPSBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdChleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSkgJiZcblx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdChleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCBcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzICkgLSB1bnF1b3RlZC5sZW5ndGgpICkge1xuXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0XHRtYXRjaFsyXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyOiB7XG5cblx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9IDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBub2RlTmFtZTtcblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDTEFTU1wiOiBmdW5jdGlvbiggY2xhc3NOYW1lICkge1xuXHRcdFx0dmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlWyBjbGFzc05hbWUgKyBcIiBcIiBdO1xuXG5cdFx0XHRyZXR1cm4gcGF0dGVybiB8fFxuXHRcdFx0XHQocGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyBjbGFzc05hbWUgKyBcIihcIiArIHdoaXRlc3BhY2UgKyBcInwkKVwiICkpICYmXG5cdFx0XHRcdGNsYXNzQ2FjaGUoIGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhdHRlcm4udGVzdCggdHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBlbGVtLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIgKTtcblx0XHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XG5cblx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIj1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiE9XCIgPyByZXN1bHQgIT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJePVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDAgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIkPVwiID8gY2hlY2sgJiYgcmVzdWx0LnNsaWNlKCAtY2hlY2subGVuZ3RoICkgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ+PVwiID8gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiICkuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ8PVwiID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIiA6XG5cdFx0XHRcdFx0ZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCB0eXBlLCB3aGF0LCBhcmd1bWVudCwgZmlyc3QsIGxhc3QgKSB7XG5cdFx0XHR2YXIgc2ltcGxlID0gdHlwZS5zbGljZSggMCwgMyApICE9PSBcIm50aFwiLFxuXHRcdFx0XHRmb3J3YXJkID0gdHlwZS5zbGljZSggLTQgKSAhPT0gXCJsYXN0XCIsXG5cdFx0XHRcdG9mVHlwZSA9IHdoYXQgPT09IFwib2YtdHlwZVwiO1xuXG5cdFx0XHRyZXR1cm4gZmlyc3QgPT09IDEgJiYgbGFzdCA9PT0gMCA/XG5cblx0XHRcdFx0Ly8gU2hvcnRjdXQgZm9yIDpudGgtKihuKVxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gISFlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRcdH0gOlxuXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgbm9kZUluZGV4LCBzdGFydCxcblx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlLFxuXHRcdFx0XHRcdFx0ZGlmZiA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gbm9kZVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdO1xuXG5cdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxuXHRcdFx0XHRcdFx0aWYgKCBmb3J3YXJkICYmIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0bm9kZSA9IHBhcmVudDtcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleCAmJiBjYWNoZVsgMiBdO1xuXHRcdFx0XHRcdFx0XHRub2RlID0gbm9kZUluZGV4ICYmIHBhcmVudC5jaGlsZE5vZGVzWyBub2RlSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleDtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdC8vIHhtbCA6bnRoLWNoaWxkKC4uLilcblx0XHRcdFx0XHRcdFx0Ly8gb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKVxuXHRcdFx0XHRcdFx0XHRpZiAoIGRpZmYgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCsrZGlmZiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdFx0dmFyIGlkeCxcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZiggc2VlZCwgbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pIDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xuXHRcdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cdH0sXG5cblx0cHNldWRvczoge1xuXHRcdC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xuXHRcdFwibm90XCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHQvLyBUcmltIHRoZSBzZWxlY3RvciBwYXNzZWQgdG8gY29tcGlsZVxuXHRcdFx0Ly8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcblx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xuXHRcdFx0dmFyIGlucHV0ID0gW10sXG5cdFx0XHRcdHJlc3VsdHMgPSBbXSxcblx0XHRcdFx0bWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSApO1xuXG5cdFx0XHRyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cblx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXG5cdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XG5cblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0c2VlZFtpXSA9ICEobWF0Y2hlc1tpXSA9IGVsZW0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSkgOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdGlucHV0WzBdID0gZWxlbTtcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XG5cdFx0XHRcdFx0Ly8gRG9uJ3Qga2VlcCB0aGUgZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdFx0XHRpbnB1dFswXSA9IG51bGw7XG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xuXHRcdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJoYXNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiY29udGFpbnNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS50ZXh0Q29udGVudCB8fCBlbGVtLmlubmVyVGV4dCB8fCBnZXRUZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3Jcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuXHRcdFx0Ly8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxuXHRcdFx0aWYgKCAhcmlkZW50aWZpZXIudGVzdChsYW5nIHx8IFwiXCIpICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG5cdFx0XHR9XG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGlmICggKGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0XHRcdFx0ZWxlbS5sYW5nIDpcblx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKFwieG1sOmxhbmdcIikgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoXCJsYW5nXCIpKSApIHtcblxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSB3aGlsZSAoIChlbGVtID0gZWxlbS5wYXJlbnROb2RlKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0XCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcblx0XHR9LFxuXG5cdFx0XCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XG5cdFx0fSxcblxuXHRcdFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAoIWRvY3VtZW50Lmhhc0ZvY3VzIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkpICYmICEhKGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXgpO1xuXHRcdH0sXG5cblx0XHQvLyBCb29sZWFuIHByb3BlcnRpZXNcblx0XHRcImVuYWJsZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2U7XG5cdFx0fSxcblxuXHRcdFwiZGlzYWJsZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0XCJjaGVja2VkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0dmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIChub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmICEhZWxlbS5jaGVja2VkKSB8fCAobm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkKTtcblx0XHR9LFxuXG5cdFx0XCJzZWxlY3RlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcblx0XHRcdC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHlcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIENvbnRlbnRzXG5cdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXG5cdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXG5cdFx0XHQvLyAgIGJ1dCBub3QgYnkgb3RoZXJzIChjb21tZW50OiA4OyBwcm9jZXNzaW5nIGluc3RydWN0aW9uOiA3OyBldGMuKVxuXHRcdFx0Ly8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA8IDYgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0XCJwYXJlbnRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gIUV4cHIucHNldWRvc1tcImVtcHR5XCJdKCBlbGVtICk7XG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRcImhlYWRlclwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XG5cdFx0fSxcblxuXHRcdFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBhdHRyO1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmXG5cdFx0XHRcdGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXG5cdFx0XHRcdCggKGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZShcInR5cGVcIikpID09IG51bGwgfHwgYXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xuXHRcdH0sXG5cblx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG5cdFx0XCJmaXJzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIFsgMCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIFsgbGVuZ3RoIC0gMSBdO1xuXHRcdH0pLFxuXG5cdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gWyBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50IF07XG5cdFx0fSksXG5cblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcIm9kZFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyAtLWkgPj0gMDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pXG5cdH1cbn07XG5cbkV4cHIucHNldWRvc1tcIm50aFwiXSA9IEV4cHIucHNldWRvc1tcImVxXCJdO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggY2FjaGVkICkge1xuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdH1cblxuXHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRncm91cHMgPSBbXTtcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG5cdHdoaWxlICggc29GYXIgKSB7XG5cblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAobWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRpZiAoIG1hdGNoICkge1xuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFswXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdH1cblx0XHRcdGdyb3Vwcy5wdXNoKCAodG9rZW5zID0gW10pICk7XG5cdFx0fVxuXG5cdFx0bWF0Y2hlZCA9IGZhbHNlO1xuXG5cdFx0Ly8gQ29tYmluYXRvcnNcblx0XHRpZiAoIChtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG5cdFx0XHRcdHR5cGU6IG1hdGNoWzBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXG5cdFx0XHR9KTtcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmlsdGVyc1xuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG5cdFx0XHRpZiAoIChtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkpICYmICghcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG5cdFx0XHRcdChtYXRjaCA9IHByZUZpbHRlcnNbIHR5cGUgXSggbWF0Y2ggKSkpICkge1xuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdFx0bWF0Y2hlczogbWF0Y2hcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdHJldHVybiBwYXJzZU9ubHkgP1xuXHRcdHNvRmFyLmxlbmd0aCA6XG5cdFx0c29GYXIgP1xuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcblx0XHRcdC8vIENhY2hlIHRoZSB0b2tlbnNcblx0XHRcdHRva2VuQ2FjaGUoIHNlbGVjdG9yLCBncm91cHMgKS5zbGljZSggMCApO1xufTtcblxuZnVuY3Rpb24gdG9TZWxlY3RvciggdG9rZW5zICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRzZWxlY3RvciA9IFwiXCI7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdHNlbGVjdG9yICs9IHRva2Vuc1tpXS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBkaXIgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gfHwgKG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0aWYgKCAob2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsgZGlyIF0pICYmXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0cmV0dXJuIChuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBkaXIgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoIChuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkpICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggIW1hdGNoZXJzW2ldKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWzBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzW2ldLCByZXN1bHRzICk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XG5cdHZhciBlbGVtLFxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yIHx8IFwiKlwiLCBjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LCBbXSApLFxuXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdGVsZW1zLFxuXG5cdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoZWxlbSA9IHRlbXBbaV0pICkge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbaV0gXSA9ICEobWF0Y2hlckluWyBwb3N0TWFwW2ldIF0gPSBlbGVtKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggc2VlZCApIHtcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goIChtYXRjaGVySW5baV0gPSBlbGVtKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAobWF0Y2hlck91dCA9IFtdKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSAmJlxuXHRcdFx0XHRcdFx0KHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwW2ldKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkW3RlbXBdID0gIShyZXN1bHRzW3RlbXBdID0gZWxlbSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVtcIiBcIl0sXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxuXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdChjaGVja0NvbnRleHQgPSBjb250ZXh0KS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAobWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1tpXS50eXBlIF0pICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIpIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zW2ldLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zW2ldLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbal0udHlwZSBdICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXG5cdFx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxuXHRcdFx0XHRcdFx0dG9rZW5zLnNsaWNlKCAwLCBpIC0gMSApLmNvbmNhdCh7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSlcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICh0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXG5cdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXG5cdFx0XHRcdGkgPSBcIjBcIixcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcblx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFtcIlRBR1wiXSggXCIqXCIsIG91dGVybW9zdCApLFxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmIChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwpICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IHNldE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEodW5tYXRjaGVkW2ldIHx8IHNldE1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbaV0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcblxuXHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xuXHRcdH07XG5cblx0cmV0dXJuIGJ5U2V0ID9cblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcblx0XHRzdXBlck1hdGNoZXI7XG59XG5cbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdHZhciBpLFxuXHRcdHNldE1hdGNoZXJzID0gW10sXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggIWNhY2hlZCApIHtcblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbaV0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoIHNlbGVjdG9yLCBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSApO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvcikgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAodG9rZW4gPSB0b2tlbnNbMF0pLnR5cGUgPT09IFwiSURcIiAmJlxuXHRcdFx0XHRzdXBwb3J0LmdldEJ5SWQgJiYgY29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdFx0XHRFeHByLnJlbGF0aXZlWyB0b2tlbnNbMV0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbXCJJRFwiXSggdG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKSwgY29udGV4dCApIHx8IFtdIClbMF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByW1wibmVlZHNDb250ZXh0XCJdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zW2ldO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICh0eXBlID0gdG9rZW4udHlwZSkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIChmaW5kID0gRXhwci5maW5kWyB0eXBlIF0pICkge1xuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1swXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0XHRcdFx0KSkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoXCJcIikuc29ydCggc29ydE9yZGVyICkuam9pbihcIlwiKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdjEgKSB7XG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxuXHRyZXR1cm4gZGl2MS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSApICYgMTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBJRTw4XG4vLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSBcImludGVycG9sYXRpb25cIlxuLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdGRpdi5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcblx0cmV0dXJuIGRpdi5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcImhyZWZcIikgPT09IFwiI1wiIDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcbmlmICggIXN1cHBvcnQuYXR0cmlidXRlcyB8fCAhYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdGRpdi5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGRpdi5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiLCBcIlwiICk7XG5cdHJldHVybiBkaXYuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdHJldHVybiBkaXYuZ2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIikgPT0gbnVsbDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHZhbDtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcblx0XHR9XG5cdH0pO1xufVxuXG5yZXR1cm4gU2l6emxlO1xuXG59KSggd2luZG93ICk7XG5cblxuXG5qUXVlcnkuZmluZCA9IFNpenpsZTtcbmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW1xcdy1dKylcXHMqXFwvPz4oPzo8XFwvXFwxPnwpJC8gKTtcblxuXG5cbnZhciByaXNTaW1wbGUgPSAvXi5bXjojXFxbXFwuLF0qJC87XG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHQvKiBqc2hpbnQgLVcwMTggKi9cblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9ICk7XG5cblx0fVxuXG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9ICk7XG5cblx0fVxuXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRpZiAoIHJpc1NpbXBsZS50ZXN0KCBxdWFsaWZpZXIgKSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcblx0XHR9XG5cblx0XHRxdWFsaWZpZXIgPSBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzICk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gKCBqUXVlcnkuaW5BcnJheSggZWxlbSwgcXVhbGlmaWVyICkgPiAtMSApICE9PSBub3Q7XG5cdH0gKTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdHJldHVybiBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSA/XG5cdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdIDpcblx0XHRqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdFx0fSApICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0c2VsZiA9IHRoaXMsXG5cdFx0XHRsZW4gPSBzZWxmLmxlbmd0aDtcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKSApO1xuXHRcdH1cblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XG5cdFx0fVxuXG5cdFx0Ly8gTmVlZGVkIGJlY2F1c2UgJCggc2VsZWN0b3IsIGNvbnRleHQgKSBiZWNvbWVzICQoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlKCByZXQgKSA6IHJldCApO1xuXHRcdHJldC5zZWxlY3RvciA9IHRoaXMuc2VsZWN0b3IgPyB0aGlzLnNlbGVjdG9yICsgXCIgXCIgKyBzZWxlY3RvciA6IHNlbGVjdG9yO1xuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UgKSApO1xuXHR9LFxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUgKSApO1xuXHR9LFxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiAhIXdpbm5vdyhcblx0XHRcdHRoaXMsXG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcblx0XHRcdGZhbHNlXG5cdFx0KS5sZW5ndGg7XG5cdH1cbn0gKTtcblxuXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxuXG5cbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxudmFyIHJvb3RqUXVlcnksXG5cblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Ncblx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKCM5NTIxKVxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSopKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcm9vdCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIGluaXQgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxuXHRcdC8vIHNvIG1pZ3JhdGUgY2FuIHN1cHBvcnQgalF1ZXJ5LnN1YiAoZ2gtMjEwMSlcblx0XHRyb290ID0gcm9vdCB8fCByb290alF1ZXJ5O1xuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3Rvci5jaGFyQXQoIDAgKSA9PT0gXCI8XCIgJiZcblx0XHRcdFx0c2VsZWN0b3IuY2hhckF0KCBzZWxlY3Rvci5sZW5ndGggLSAxICkgPT09IFwiPlwiICYmXG5cdFx0XHRcdHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xuXG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAoIG1hdGNoWyAxIF0gfHwgIWNvbnRleHQgKSApIHtcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcblx0XHRcdFx0aWYgKCBtYXRjaFsgMSBdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFsgMCBdIDogY29udGV4dDtcblxuXHRcdFx0XHRcdC8vIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxuXHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdCkgKTtcblxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbIDEgXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcblxuXHRcdFx0XHRcdC8vIENoZWNrIHBhcmVudE5vZGUgdG8gY2F0Y2ggd2hlbiBCbGFja2JlcnJ5IDQuNiByZXR1cm5zXG5cdFx0XHRcdFx0Ly8gbm9kZXMgdGhhdCBhcmUgbm8gbG9uZ2VyIGluIHRoZSBkb2N1bWVudCAjNjk2M1xuXHRcdFx0XHRcdGlmICggZWxlbSAmJiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSB0aGUgY2FzZSB3aGVyZSBJRSBhbmQgT3BlcmEgcmV0dXJuIGl0ZW1zXG5cdFx0XHRcdFx0XHQvLyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCAhPT0gbWF0Y2hbIDIgXSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJvb3RqUXVlcnkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB3ZSBpbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0XHRcdFx0dGhpc1sgMCBdID0gZWxlbTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0aGlzLmNvbnRleHQgPSBkb2N1bWVudDtcblx0XHRcdFx0XHR0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzLmNvbnRleHQgPSB0aGlzWyAwIF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHR5cGVvZiByb290LnJlYWR5ICE9PSBcInVuZGVmaW5lZFwiID9cblx0XHRcdFx0cm9vdC5yZWFkeSggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3Rvci5zZWxlY3RvciAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yLnNlbGVjdG9yO1xuXHRcdFx0dGhpcy5jb250ZXh0ID0gc2VsZWN0b3IuY29udGV4dDtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcblx0fTtcblxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxuaW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XG5cbi8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2VcbnJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XG5cblxudmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXG5cdC8vIG1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XG5cdGd1YXJhbnRlZWRVbmlxdWUgPSB7XG5cdFx0Y2hpbGRyZW46IHRydWUsXG5cdFx0Y29udGVudHM6IHRydWUsXG5cdFx0bmV4dDogdHJ1ZSxcblx0XHRwcmV2OiB0cnVlXG5cdH07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdHZhciBpLFxuXHRcdFx0dGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsZW4gPSB0YXJnZXRzLmxlbmd0aDtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1sgaSBdICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHRwb3MgPSBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApIHx8IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9ycywgY29udGV4dCB8fCB0aGlzLmNvbnRleHQgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXG5cdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmICggcG9zID9cblx0XHRcdFx0XHRwb3MuaW5kZXgoIGN1ciApID4gLTEgOlxuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXG5cdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGN1ciwgc2VsZWN0b3JzICkgKSApIHtcblxuXHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpblxuXHQvLyB0aGUgbWF0Y2hlZCBzZXQgb2YgZWxlbWVudHNcblx0aW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuICggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5wYXJlbnROb2RlICkgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xuXHRcdH1cblxuXHRcdC8vIGluZGV4IGluIHNlbGVjdG9yXG5cdFx0aWYgKCB0eXBlb2YgZWxlbSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuaW5BcnJheSggdGhpc1sgMCBdLCBqUXVlcnkoIGVsZW0gKSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBqUXVlcnkuaW5BcnJheShcblxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW0sIHRoaXMgKTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0ZG8ge1xuXHRcdGN1ciA9IGN1clsgZGlyIF07XG5cdH0gd2hpbGUgKCBjdXIgJiYgY3VyLm5vZGVUeXBlICE9PSAxICk7XG5cblx0cmV0dXJuIGN1cjtcbn1cblxualF1ZXJ5LmVhY2goIHtcblx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XG5cdH0sXG5cdHBhcmVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XG5cdH0sXG5cdHBhcmVudHNVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCApO1xuXHR9LFxuXHRuZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXY6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0cHJldlVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0c2libGluZ3M6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XG5cdH0sXG5cdGNoaWxkcmVuOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoIGVsZW0uZmlyc3RDaGlsZCApO1xuXHR9LFxuXHRjb250ZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJpZnJhbWVcIiApID9cblx0XHRcdGVsZW0uY29udGVudERvY3VtZW50IHx8IGVsZW0uY29udGVudFdpbmRvdy5kb2N1bWVudCA6XG5cdFx0XHRqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIHJldCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRyZXQgPSBqUXVlcnkudW5pcXVlU29ydCggcmV0ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdHJldCA9IHJldC5yZXZlcnNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0gKTtcbnZhciBybm90d2hpdGUgPSAoIC9cXFMrL2cgKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9ICk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRtZW1vcnksXG5cblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXG5cdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xuXHRcdGxvY2tlZCxcblxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXG5cdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRxdWV1ZSA9IFtdLFxuXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcblx0XHRcdGxvY2tlZCA9IG9wdGlvbnMub25jZTtcblxuXHRcdFx0Ly8gRXhlY3V0ZSBjYWxsYmFja3MgZm9yIGFsbCBwZW5kaW5nIGV4ZWN1dGlvbnMsXG5cdFx0XHQvLyByZXNwZWN0aW5nIGZpcmluZ0luZGV4IG92ZXJyaWRlcyBhbmQgcnVudGltZSBjaGFuZ2VzXG5cdFx0XHRmaXJlZCA9IGZpcmluZyA9IHRydWU7XG5cdFx0XHRmb3IgKCA7IHF1ZXVlLmxlbmd0aDsgZmlyaW5nSW5kZXggPSAtMSApIHtcblx0XHRcdFx0bWVtb3J5ID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdFx0d2hpbGUgKCArK2ZpcmluZ0luZGV4IDwgbGlzdC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBSdW4gY2FsbGJhY2sgYW5kIGNoZWNrIGZvciBlYXJseSB0ZXJtaW5hdGlvblxuXHRcdFx0XHRcdGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggbWVtb3J5WyAwIF0sIG1lbW9yeVsgMSBdICkgPT09IGZhbHNlICYmXG5cdFx0XHRcdFx0XHRvcHRpb25zLnN0b3BPbkZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBKdW1wIHRvIGVuZCBhbmQgZm9yZ2V0IHRoZSBkYXRhIHNvIC5hZGQgZG9lc24ndCByZS1maXJlXG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvcmdldCB0aGUgZGF0YSBpZiB3ZSdyZSBkb25lIHdpdGggaXRcblx0XHRcdGlmICggIW9wdGlvbnMubWVtb3J5ICkge1xuXHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0ZmlyaW5nID0gZmFsc2U7XG5cblx0XHRcdC8vIENsZWFuIHVwIGlmIHdlJ3JlIGRvbmUgZmlyaW5nIGZvciBnb29kXG5cdFx0XHRpZiAoIGxvY2tlZCApIHtcblxuXHRcdFx0XHQvLyBLZWVwIGFuIGVtcHR5IGxpc3QgaWYgd2UgaGF2ZSBkYXRhIGZvciBmdXR1cmUgYWRkIGNhbGxzXG5cdFx0XHRcdGlmICggbWVtb3J5ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIHRoaXMgb2JqZWN0IGlzIHNwZW50XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bGlzdCA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gQWN0dWFsIENhbGxiYWNrcyBvYmplY3Rcblx0XHRzZWxmID0ge1xuXG5cdFx0XHQvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0XG5cdFx0XHRhZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIG1lbW9yeSBmcm9tIGEgcGFzdCBydW4sIHdlIHNob3VsZCBmaXJlIGFmdGVyIGFkZGluZ1xuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoIC0gMTtcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2goIG1lbW9yeSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdCggZnVuY3Rpb24gYWRkKCBhcmdzICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3MsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgalF1ZXJ5LnR5cGUoIGFyZyApICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSW5zcGVjdCByZWN1cnNpdmVseVxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHR9ICkoIGFyZ3VtZW50cyApO1xuXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XG5cdFx0XHRyZW1vdmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdHZhciBpbmRleDtcblx0XHRcdFx0XHR3aGlsZSAoICggaW5kZXggPSBqUXVlcnkuaW5BcnJheSggYXJnLCBsaXN0LCBpbmRleCApICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcblx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nSW5kZXggKSB7XG5cdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cblx0XHRcdC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxuXHRcdFx0aGFzOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdHJldHVybiBmbiA/XG5cdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGZuLCBsaXN0ICkgPiAtMSA6XG5cdFx0XHRcdFx0bGlzdC5sZW5ndGggPiAwO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxuXHRcdFx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZSBhbmQgLmFkZFxuXHRcdFx0Ly8gQWJvcnQgYW55IGN1cnJlbnQvcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHQvLyBDbGVhciBhbGwgY2FsbGJhY2tzIGFuZCB2YWx1ZXNcblx0XHRcdGRpc2FibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0ZGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gIWxpc3Q7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlXG5cdFx0XHQvLyBBbHNvIGRpc2FibGUgLmFkZCB1bmxlc3Mgd2UgaGF2ZSBtZW1vcnkgKHNpbmNlIGl0IHdvdWxkIGhhdmUgbm8gZWZmZWN0KVxuXHRcdFx0Ly8gQWJvcnQgYW55IHBlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0bG9jazogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHRydWU7XG5cdFx0XHRcdGlmICggIW1lbW9yeSApIHtcblx0XHRcdFx0XHRzZWxmLmRpc2FibGUoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFsb2NrZWQ7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XG5cdFx0XHRcdGlmICggIWxvY2tlZCApIHtcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHRpZiAoICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBsaXN0ZW5lciBsaXN0LCBmaW5hbCBzdGF0ZVxuXHRcdFx0XHRbIFwicmVzb2x2ZVwiLCBcImRvbmVcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIFwicmVzb2x2ZWRcIiBdLFxuXHRcdFx0XHRbIFwicmVqZWN0XCIsIFwiZmFpbFwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgXCJyZWplY3RlZFwiIF0sXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICkgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBmbnNbIGkgXSApICYmIGZuc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkWyBkb25lIHwgZmFpbCB8IHByb2dyZXNzIF0gZm9yIGZvcndhcmRpbmcgYWN0aW9ucyB0byBuZXdEZWZlclxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBqUXVlcnkuaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5IClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZmFpbCggbmV3RGVmZXIucmVqZWN0ICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXShcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcyA9PT0gcHJvbWlzZSA/IG5ld0RlZmVyLnByb21pc2UoKSA6IHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XG5cdFx0cHJvbWlzZS5waXBlID0gcHJvbWlzZS50aGVuO1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgMyBdO1xuXG5cdFx0XHQvLyBwcm9taXNlWyBkb25lIHwgZmFpbCB8IHByb2dyZXNzIF0gPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbIDEgXSBdID0gbGlzdC5hZGQ7XG5cblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcblx0XHRcdFx0bGlzdC5hZGQoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0Ly8gc3RhdGUgPSBbIHJlc29sdmVkIHwgcmVqZWN0ZWQgXVxuXHRcdFx0XHRcdHN0YXRlID0gc3RhdGVTdHJpbmc7XG5cblx0XHRcdFx0Ly8gWyByZWplY3RfbGlzdCB8IHJlc29sdmVfbGlzdCBdLmRpc2FibGU7IHByb2dyZXNzX2xpc3QubG9ja1xuXHRcdFx0XHR9LCB0dXBsZXNbIGkgXiAxIF1bIDIgXS5kaXNhYmxlLCB0dXBsZXNbIDIgXVsgMiBdLmxvY2sgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gZGVmZXJyZWRbIHJlc29sdmUgfCByZWplY3QgfCBub3RpZnkgXVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gcHJvbWlzZSA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0gKTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHN1Ym9yZGluYXRlIC8qICwgLi4uLCBzdWJvcmRpbmF0ZU4gKi8gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXHRcdFx0bGVuZ3RoID0gcmVzb2x2ZVZhbHVlcy5sZW5ndGgsXG5cblx0XHRcdC8vIHRoZSBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGxlbmd0aCAhPT0gMSB8fFxuXHRcdFx0XHQoIHN1Ym9yZGluYXRlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBzdWJvcmRpbmF0ZS5wcm9taXNlICkgKSA/IGxlbmd0aCA6IDAsXG5cblx0XHRcdC8vIHRoZSBtYXN0ZXIgRGVmZXJyZWQuXG5cdFx0XHQvLyBJZiByZXNvbHZlVmFsdWVzIGNvbnNpc3Qgb2Ygb25seSBhIHNpbmdsZSBEZWZlcnJlZCwganVzdCB1c2UgdGhhdC5cblx0XHRcdGRlZmVycmVkID0gcmVtYWluaW5nID09PSAxID8gc3Vib3JkaW5hdGUgOiBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gVXBkYXRlIGZ1bmN0aW9uIGZvciBib3RoIHJlc29sdmUgYW5kIHByb2dyZXNzIHZhbHVlc1xuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpLCBjb250ZXh0cywgdmFsdWVzICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdGNvbnRleHRzWyBpIF0gPSB0aGlzO1xuXHRcdFx0XHRcdHZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggdmFsdWVzID09PSBwcm9ncmVzc1ZhbHVlcyApIHtcblx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGNvbnRleHRzLCB2YWx1ZXMgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICEoIC0tcmVtYWluaW5nICkgKSB7XG5cdFx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY29udGV4dHMsIHZhbHVlcyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH0sXG5cblx0XHRcdHByb2dyZXNzVmFsdWVzLCBwcm9ncmVzc0NvbnRleHRzLCByZXNvbHZlQ29udGV4dHM7XG5cblx0XHQvLyBhZGQgbGlzdGVuZXJzIHRvIERlZmVycmVkIHN1Ym9yZGluYXRlczsgdHJlYXQgb3RoZXJzIGFzIHJlc29sdmVkXG5cdFx0aWYgKCBsZW5ndGggPiAxICkge1xuXHRcdFx0cHJvZ3Jlc3NWYWx1ZXMgPSBuZXcgQXJyYXkoIGxlbmd0aCApO1xuXHRcdFx0cHJvZ3Jlc3NDb250ZXh0cyA9IG5ldyBBcnJheSggbGVuZ3RoICk7XG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBuZXcgQXJyYXkoIGxlbmd0aCApO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0ucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXS5wcm9taXNlKClcblx0XHRcdFx0XHRcdC5wcm9ncmVzcyggdXBkYXRlRnVuYyggaSwgcHJvZ3Jlc3NDb250ZXh0cywgcHJvZ3Jlc3NWYWx1ZXMgKSApXG5cdFx0XHRcdFx0XHQuZG9uZSggdXBkYXRlRnVuYyggaSwgcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICkgKVxuXHRcdFx0XHRcdFx0LmZhaWwoIGRlZmVycmVkLnJlamVjdCApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC0tcmVtYWluaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gaWYgd2UncmUgbm90IHdhaXRpbmcgb24gYW55dGhpbmcsIHJlc29sdmUgdGhlIG1hc3RlclxuXHRcdGlmICggIXJlbWFpbmluZyApIHtcblx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpO1xuXHR9XG59ICk7XG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0O1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cblx0Ly8gQWRkIHRoZSBjYWxsYmFja1xuXHRqUXVlcnkucmVhZHkucHJvbWlzZSgpLmRvbmUoIGZuICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSG9sZCAob3IgcmVsZWFzZSkgdGhlIHJlYWR5IGV2ZW50XG5cdGhvbGRSZWFkeTogZnVuY3Rpb24oIGhvbGQgKSB7XG5cdFx0aWYgKCBob2xkICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXG5cdFx0Ly8gVHJpZ2dlciBhbnkgYm91bmQgcmVhZHkgZXZlbnRzXG5cdFx0aWYgKCBqUXVlcnkuZm4udHJpZ2dlckhhbmRsZXIgKSB7XG5cdFx0XHRqUXVlcnkoIGRvY3VtZW50ICkudHJpZ2dlckhhbmRsZXIoIFwicmVhZHlcIiApO1xuXHRcdFx0alF1ZXJ5KCBkb2N1bWVudCApLm9mZiggXCJyZWFkeVwiICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8qKlxuICogQ2xlYW4tdXAgbWV0aG9kIGZvciBkb20gcmVhZHkgZXZlbnRzXG4gKi9cbmZ1bmN0aW9uIGRldGFjaCgpIHtcblx0aWYgKCBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXG5cdH0gZWxzZSB7XG5cdFx0ZG9jdW1lbnQuZGV0YWNoRXZlbnQoIFwib25yZWFkeXN0YXRlY2hhbmdlXCIsIGNvbXBsZXRlZCApO1xuXHRcdHdpbmRvdy5kZXRhY2hFdmVudCggXCJvbmxvYWRcIiwgY29tcGxldGVkICk7XG5cdH1cbn1cblxuLyoqXG4gKiBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuICovXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cblx0Ly8gcmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIGlzIGdvb2QgZW5vdWdoIGZvciB1cyB0byBjYWxsIHRoZSBkb20gcmVhZHkgaW4gb2xkSUVcblx0aWYgKCBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyIHx8XG5cdFx0d2luZG93LmV2ZW50LnR5cGUgPT09IFwibG9hZFwiIHx8XG5cdFx0ZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiICkge1xuXG5cdFx0ZGV0YWNoKCk7XG5cdFx0alF1ZXJ5LnJlYWR5KCk7XG5cdH1cbn1cblxualF1ZXJ5LnJlYWR5LnByb21pc2UgPSBmdW5jdGlvbiggb2JqICkge1xuXHRpZiAoICFyZWFkeUxpc3QgKSB7XG5cblx0XHRyZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblxuXHRcdC8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkXG5cdFx0Ly8gYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXG5cdFx0Ly8gU3VwcG9ydDogSUU2LTEwXG5cdFx0Ly8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXG5cdFx0aWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0XHRcdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xuXG5cdFx0XHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxuXHRcdC8vIFN0YW5kYXJkcy1iYXNlZCBicm93c2VycyBzdXBwb3J0IERPTUNvbnRlbnRMb2FkZWRcblx0XHR9IGVsc2UgaWYgKCBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyICkge1xuXG5cdFx0XHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cblx0XHRcdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdFx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXG5cdFx0Ly8gSWYgSUUgZXZlbnQgbW9kZWwgaXMgdXNlZFxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEVuc3VyZSBmaXJpbmcgYmVmb3JlIG9ubG9hZCwgbWF5YmUgbGF0ZSBidXQgc2FmZSBhbHNvIGZvciBpZnJhbWVzXG5cdFx0XHRkb2N1bWVudC5hdHRhY2hFdmVudCggXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIiwgY29tcGxldGVkICk7XG5cblx0XHRcdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdFx0XHR3aW5kb3cuYXR0YWNoRXZlbnQoIFwib25sb2FkXCIsIGNvbXBsZXRlZCApO1xuXG5cdFx0XHQvLyBJZiBJRSBhbmQgbm90IGEgZnJhbWVcblx0XHRcdC8vIGNvbnRpbnVhbGx5IGNoZWNrIHRvIHNlZSBpZiB0aGUgZG9jdW1lbnQgaXMgcmVhZHlcblx0XHRcdHZhciB0b3AgPSBmYWxzZTtcblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dG9wID0gd2luZG93LmZyYW1lRWxlbWVudCA9PSBudWxsICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0aWYgKCB0b3AgJiYgdG9wLmRvU2Nyb2xsICkge1xuXHRcdFx0XHQoIGZ1bmN0aW9uIGRvU2Nyb2xsQ2hlY2soKSB7XG5cdFx0XHRcdFx0aWYgKCAhalF1ZXJ5LmlzUmVhZHkgKSB7XG5cblx0XHRcdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSB0cmljayBieSBEaWVnbyBQZXJpbmlcblx0XHRcdFx0XHRcdFx0Ly8gaHR0cDovL2phdmFzY3JpcHQubndib3guY29tL0lFQ29udGVudExvYWRlZC9cblx0XHRcdFx0XHRcdFx0dG9wLmRvU2Nyb2xsKCBcImxlZnRcIiApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB3aW5kb3cuc2V0VGltZW91dCggZG9TY3JvbGxDaGVjaywgNTAgKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gZGV0YWNoIGFsbCBkb20gcmVhZHkgZXZlbnRzXG5cdFx0XHRcdFx0XHRkZXRhY2goKTtcblxuXHRcdFx0XHRcdFx0Ly8gYW5kIGV4ZWN1dGUgYW55IHdhaXRpbmcgZnVuY3Rpb25zXG5cdFx0XHRcdFx0XHRqUXVlcnkucmVhZHkoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKSgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gcmVhZHlMaXN0LnByb21pc2UoIG9iaiApO1xufTtcblxuLy8gS2ljayBvZmYgdGhlIERPTSByZWFkeSBjaGVjayBldmVuIGlmIHRoZSB1c2VyIGRvZXMgbm90XG5qUXVlcnkucmVhZHkucHJvbWlzZSgpO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBJdGVyYXRpb24gb3ZlciBvYmplY3QncyBpbmhlcml0ZWQgcHJvcGVydGllcyBiZWZvcmUgaXRzIG93blxudmFyIGk7XG5mb3IgKCBpIGluIGpRdWVyeSggc3VwcG9ydCApICkge1xuXHRicmVhaztcbn1cbnN1cHBvcnQub3duRmlyc3QgPSBpID09PSBcIjBcIjtcblxuLy8gTm90ZTogbW9zdCBzdXBwb3J0IHRlc3RzIGFyZSBkZWZpbmVkIGluIHRoZWlyIHJlc3BlY3RpdmUgbW9kdWxlcy5cbi8vIGZhbHNlIHVudGlsIHRoZSB0ZXN0IGlzIHJ1blxuc3VwcG9ydC5pbmxpbmVCbG9ja05lZWRzTGF5b3V0ID0gZmFsc2U7XG5cbi8vIEV4ZWN1dGUgQVNBUCBpbiBjYXNlIHdlIG5lZWQgdG8gc2V0IGJvZHkuc3R5bGUuem9vbVxualF1ZXJ5KCBmdW5jdGlvbigpIHtcblxuXHQvLyBNaW5pZmllZDogdmFyIGEsYixjLGRcblx0dmFyIHZhbCwgZGl2LCBib2R5LCBjb250YWluZXI7XG5cblx0Ym9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcImJvZHlcIiApWyAwIF07XG5cdGlmICggIWJvZHkgfHwgIWJvZHkuc3R5bGUgKSB7XG5cblx0XHQvLyBSZXR1cm4gZm9yIGZyYW1lc2V0IGRvY3MgdGhhdCBkb24ndCBoYXZlIGEgYm9keVxuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFNldHVwXG5cdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7Ym9yZGVyOjA7d2lkdGg6MDtoZWlnaHQ6MDt0b3A6MDtsZWZ0Oi05OTk5cHhcIjtcblx0Ym9keS5hcHBlbmRDaGlsZCggY29udGFpbmVyICkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdGlmICggdHlwZW9mIGRpdi5zdHlsZS56b29tICE9PSBcInVuZGVmaW5lZFwiICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdC8vIENoZWNrIGlmIG5hdGl2ZWx5IGJsb2NrLWxldmVsIGVsZW1lbnRzIGFjdCBsaWtlIGlubGluZS1ibG9ja1xuXHRcdC8vIGVsZW1lbnRzIHdoZW4gc2V0dGluZyB0aGVpciBkaXNwbGF5IHRvICdpbmxpbmUnIGFuZCBnaXZpbmdcblx0XHQvLyB0aGVtIGxheW91dFxuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID0gXCJkaXNwbGF5OmlubGluZTttYXJnaW46MDtib3JkZXI6MDtwYWRkaW5nOjFweDt3aWR0aDoxcHg7em9vbToxXCI7XG5cblx0XHRzdXBwb3J0LmlubGluZUJsb2NrTmVlZHNMYXlvdXQgPSB2YWwgPSBkaXYub2Zmc2V0V2lkdGggPT09IDM7XG5cdFx0aWYgKCB2YWwgKSB7XG5cblx0XHRcdC8vIFByZXZlbnQgSUUgNiBmcm9tIGFmZmVjdGluZyBsYXlvdXQgZm9yIHBvc2l0aW9uZWQgZWxlbWVudHMgIzExMDQ4XG5cdFx0XHQvLyBQcmV2ZW50IElFIGZyb20gc2hyaW5raW5nIHRoZSBib2R5IGluIElFIDcgbW9kZSAjMTI4Njlcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDhcblx0XHRcdGJvZHkuc3R5bGUuem9vbSA9IDE7XG5cdFx0fVxuXHR9XG5cblx0Ym9keS5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG59ICk7XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZGVsZXRlRXhwYW5kbyA9IHRydWU7XG5cdHRyeSB7XG5cdFx0ZGVsZXRlIGRpdi50ZXN0O1xuXHR9IGNhdGNoICggZSApIHtcblx0XHRzdXBwb3J0LmRlbGV0ZUV4cGFuZG8gPSBmYWxzZTtcblx0fVxuXG5cdC8vIE51bGwgZWxlbWVudHMgdG8gYXZvaWQgbGVha3MgaW4gSUUuXG5cdGRpdiA9IG51bGw7XG59ICkoKTtcbnZhciBhY2NlcHREYXRhID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub0RhdGEgPSBqUXVlcnkubm9EYXRhWyAoIGVsZW0ubm9kZU5hbWUgKyBcIiBcIiApLnRvTG93ZXJDYXNlKCkgXSxcblx0XHRub2RlVHlwZSA9ICtlbGVtLm5vZGVUeXBlIHx8IDE7XG5cblx0Ly8gRG8gbm90IHNldCBkYXRhIG9uIG5vbi1lbGVtZW50IERPTSBub2RlcyBiZWNhdXNlIGl0IHdpbGwgbm90IGJlIGNsZWFyZWQgKCM4MzM1KS5cblx0cmV0dXJuIG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ID9cblx0XHRmYWxzZSA6XG5cblx0XHQvLyBOb2RlcyBhY2NlcHQgZGF0YSB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZDsgcmVqZWN0aW9uIGNhbiBiZSBjb25kaXRpb25hbFxuXHRcdCFub0RhdGEgfHwgbm9EYXRhICE9PSB0cnVlICYmIGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzaWRcIiApID09PSBub0RhdGE7XG59O1xuXG5cblxuXG52YXIgcmJyYWNlID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxuXHRybXVsdGlEYXNoID0gLyhbQS1aXSkvZztcblxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0dmFyIG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJDFcIiApLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZGF0YSA9PT0gXCJ0cnVlXCIgPyB0cnVlIDpcblx0XHRcdFx0XHRkYXRhID09PSBcImZhbHNlXCIgPyBmYWxzZSA6XG5cdFx0XHRcdFx0ZGF0YSA9PT0gXCJudWxsXCIgPyBudWxsIDpcblxuXHRcdFx0XHRcdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdFx0XHRcdFx0K2RhdGEgKyBcIlwiID09PSBkYXRhID8gK2RhdGEgOlxuXHRcdFx0XHRcdHJicmFjZS50ZXN0KCBkYXRhICkgPyBqUXVlcnkucGFyc2VKU09OKCBkYXRhICkgOlxuXHRcdFx0XHRcdGRhdGE7XG5cdFx0XHR9IGNhdGNoICggZSApIHt9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxuXHRcdFx0alF1ZXJ5LmRhdGEoIGVsZW0sIGtleSwgZGF0YSApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbi8vIGNoZWNrcyBhIGNhY2hlIG9iamVjdCBmb3IgZW1wdGluZXNzXG5mdW5jdGlvbiBpc0VtcHR5RGF0YU9iamVjdCggb2JqICkge1xuXHR2YXIgbmFtZTtcblx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cblx0XHQvLyBpZiB0aGUgcHVibGljIGRhdGEgb2JqZWN0IGlzIGVtcHR5LCB0aGUgcHJpdmF0ZSBpcyBzdGlsbCBlbXB0eVxuXHRcdGlmICggbmFtZSA9PT0gXCJkYXRhXCIgJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9ialsgbmFtZSBdICkgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cdFx0aWYgKCBuYW1lICE9PSBcInRvSlNPTlwiICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBpbnRlcm5hbERhdGEoIGVsZW0sIG5hbWUsIGRhdGEsIHB2dCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0aWYgKCAhYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdHZhciByZXQsIHRoaXNDYWNoZSxcblx0XHRpbnRlcm5hbEtleSA9IGpRdWVyeS5leHBhbmRvLFxuXG5cdFx0Ly8gV2UgaGF2ZSB0byBoYW5kbGUgRE9NIG5vZGVzIGFuZCBKUyBvYmplY3RzIGRpZmZlcmVudGx5IGJlY2F1c2UgSUU2LTdcblx0XHQvLyBjYW4ndCBHQyBvYmplY3QgcmVmZXJlbmNlcyBwcm9wZXJseSBhY3Jvc3MgdGhlIERPTS1KUyBib3VuZGFyeVxuXHRcdGlzTm9kZSA9IGVsZW0ubm9kZVR5cGUsXG5cblx0XHQvLyBPbmx5IERPTSBub2RlcyBuZWVkIHRoZSBnbG9iYWwgalF1ZXJ5IGNhY2hlOyBKUyBvYmplY3QgZGF0YSBpc1xuXHRcdC8vIGF0dGFjaGVkIGRpcmVjdGx5IHRvIHRoZSBvYmplY3Qgc28gR0MgY2FuIG9jY3VyIGF1dG9tYXRpY2FsbHlcblx0XHRjYWNoZSA9IGlzTm9kZSA/IGpRdWVyeS5jYWNoZSA6IGVsZW0sXG5cblx0XHQvLyBPbmx5IGRlZmluaW5nIGFuIElEIGZvciBKUyBvYmplY3RzIGlmIGl0cyBjYWNoZSBhbHJlYWR5IGV4aXN0cyBhbGxvd3Ncblx0XHQvLyB0aGUgY29kZSB0byBzaG9ydGN1dCBvbiB0aGUgc2FtZSBwYXRoIGFzIGEgRE9NIG5vZGUgd2l0aCBubyBjYWNoZVxuXHRcdGlkID0gaXNOb2RlID8gZWxlbVsgaW50ZXJuYWxLZXkgXSA6IGVsZW1bIGludGVybmFsS2V5IF0gJiYgaW50ZXJuYWxLZXk7XG5cblx0Ly8gQXZvaWQgZG9pbmcgYW55IG1vcmUgd29yayB0aGFuIHdlIG5lZWQgdG8gd2hlbiB0cnlpbmcgdG8gZ2V0IGRhdGEgb24gYW5cblx0Ly8gb2JqZWN0IHRoYXQgaGFzIG5vIGRhdGEgYXQgYWxsXG5cdGlmICggKCAhaWQgfHwgIWNhY2hlWyBpZCBdIHx8ICggIXB2dCAmJiAhY2FjaGVbIGlkIF0uZGF0YSApICkgJiZcblx0XHRkYXRhID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIG5hbWUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aWYgKCAhaWQgKSB7XG5cblx0XHQvLyBPbmx5IERPTSBub2RlcyBuZWVkIGEgbmV3IHVuaXF1ZSBJRCBmb3IgZWFjaCBlbGVtZW50IHNpbmNlIHRoZWlyIGRhdGFcblx0XHQvLyBlbmRzIHVwIGluIHRoZSBnbG9iYWwgY2FjaGVcblx0XHRpZiAoIGlzTm9kZSApIHtcblx0XHRcdGlkID0gZWxlbVsgaW50ZXJuYWxLZXkgXSA9IGRlbGV0ZWRJZHMucG9wKCkgfHwgalF1ZXJ5Lmd1aWQrKztcblx0XHR9IGVsc2Uge1xuXHRcdFx0aWQgPSBpbnRlcm5hbEtleTtcblx0XHR9XG5cdH1cblxuXHRpZiAoICFjYWNoZVsgaWQgXSApIHtcblxuXHRcdC8vIEF2b2lkIGV4cG9zaW5nIGpRdWVyeSBtZXRhZGF0YSBvbiBwbGFpbiBKUyBvYmplY3RzIHdoZW4gdGhlIG9iamVjdFxuXHRcdC8vIGlzIHNlcmlhbGl6ZWQgdXNpbmcgSlNPTi5zdHJpbmdpZnlcblx0XHRjYWNoZVsgaWQgXSA9IGlzTm9kZSA/IHt9IDogeyB0b0pTT046IGpRdWVyeS5ub29wIH07XG5cdH1cblxuXHQvLyBBbiBvYmplY3QgY2FuIGJlIHBhc3NlZCB0byBqUXVlcnkuZGF0YSBpbnN0ZWFkIG9mIGEga2V5L3ZhbHVlIHBhaXI7IHRoaXMgZ2V0c1xuXHQvLyBzaGFsbG93IGNvcGllZCBvdmVyIG9udG8gdGhlIGV4aXN0aW5nIGNhY2hlXG5cdGlmICggdHlwZW9mIG5hbWUgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0XHRpZiAoIHB2dCApIHtcblx0XHRcdGNhY2hlWyBpZCBdID0galF1ZXJ5LmV4dGVuZCggY2FjaGVbIGlkIF0sIG5hbWUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y2FjaGVbIGlkIF0uZGF0YSA9IGpRdWVyeS5leHRlbmQoIGNhY2hlWyBpZCBdLmRhdGEsIG5hbWUgKTtcblx0XHR9XG5cdH1cblxuXHR0aGlzQ2FjaGUgPSBjYWNoZVsgaWQgXTtcblxuXHQvLyBqUXVlcnkgZGF0YSgpIGlzIHN0b3JlZCBpbiBhIHNlcGFyYXRlIG9iamVjdCBpbnNpZGUgdGhlIG9iamVjdCdzIGludGVybmFsIGRhdGFcblx0Ly8gY2FjaGUgaW4gb3JkZXIgdG8gYXZvaWQga2V5IGNvbGxpc2lvbnMgYmV0d2VlbiBpbnRlcm5hbCBkYXRhIGFuZCB1c2VyLWRlZmluZWRcblx0Ly8gZGF0YS5cblx0aWYgKCAhcHZ0ICkge1xuXHRcdGlmICggIXRoaXNDYWNoZS5kYXRhICkge1xuXHRcdFx0dGhpc0NhY2hlLmRhdGEgPSB7fTtcblx0XHR9XG5cblx0XHR0aGlzQ2FjaGUgPSB0aGlzQ2FjaGUuZGF0YTtcblx0fVxuXG5cdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdHRoaXNDYWNoZVsgalF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApIF0gPSBkYXRhO1xuXHR9XG5cblx0Ly8gQ2hlY2sgZm9yIGJvdGggY29udmVydGVkLXRvLWNhbWVsIGFuZCBub24tY29udmVydGVkIGRhdGEgcHJvcGVydHkgbmFtZXNcblx0Ly8gSWYgYSBkYXRhIHByb3BlcnR5IHdhcyBzcGVjaWZpZWRcblx0aWYgKCB0eXBlb2YgbmFtZSA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdC8vIEZpcnN0IFRyeSB0byBmaW5kIGFzLWlzIHByb3BlcnR5IGRhdGFcblx0XHRyZXQgPSB0aGlzQ2FjaGVbIG5hbWUgXTtcblxuXHRcdC8vIFRlc3QgZm9yIG51bGx8dW5kZWZpbmVkIHByb3BlcnR5IGRhdGFcblx0XHRpZiAoIHJldCA9PSBudWxsICkge1xuXG5cdFx0XHQvLyBUcnkgdG8gZmluZCB0aGUgY2FtZWxDYXNlZCBwcm9wZXJ0eVxuXHRcdFx0cmV0ID0gdGhpc0NhY2hlWyBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICkgXTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gdGhpc0NhY2hlO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gaW50ZXJuYWxSZW1vdmVEYXRhKCBlbGVtLCBuYW1lLCBwdnQgKSB7XG5cdGlmICggIWFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHR2YXIgdGhpc0NhY2hlLCBpLFxuXHRcdGlzTm9kZSA9IGVsZW0ubm9kZVR5cGUsXG5cblx0XHQvLyBTZWUgalF1ZXJ5LmRhdGEgZm9yIG1vcmUgaW5mb3JtYXRpb25cblx0XHRjYWNoZSA9IGlzTm9kZSA/IGpRdWVyeS5jYWNoZSA6IGVsZW0sXG5cdFx0aWQgPSBpc05vZGUgPyBlbGVtWyBqUXVlcnkuZXhwYW5kbyBdIDogalF1ZXJ5LmV4cGFuZG87XG5cblx0Ly8gSWYgdGhlcmUgaXMgYWxyZWFkeSBubyBjYWNoZSBlbnRyeSBmb3IgdGhpcyBvYmplY3QsIHRoZXJlIGlzIG5vXG5cdC8vIHB1cnBvc2UgaW4gY29udGludWluZ1xuXHRpZiAoICFjYWNoZVsgaWQgXSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpZiAoIG5hbWUgKSB7XG5cblx0XHR0aGlzQ2FjaGUgPSBwdnQgPyBjYWNoZVsgaWQgXSA6IGNhY2hlWyBpZCBdLmRhdGE7XG5cblx0XHRpZiAoIHRoaXNDYWNoZSApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG5hbWVzIGZvciBkYXRhIGtleXNcblx0XHRcdGlmICggIWpRdWVyeS5pc0FycmF5KCBuYW1lICkgKSB7XG5cblx0XHRcdFx0Ly8gdHJ5IHRoZSBzdHJpbmcgYXMgYSBrZXkgYmVmb3JlIGFueSBtYW5pcHVsYXRpb25cblx0XHRcdFx0aWYgKCBuYW1lIGluIHRoaXNDYWNoZSApIHtcblx0XHRcdFx0XHRuYW1lID0gWyBuYW1lIF07XG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBzcGxpdCB0aGUgY2FtZWwgY2FzZWQgdmVyc2lvbiBieSBzcGFjZXMgdW5sZXNzIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHNcblx0XHRcdFx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApO1xuXHRcdFx0XHRcdGlmICggbmFtZSBpbiB0aGlzQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gWyBuYW1lIF07XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdG5hbWUgPSBuYW1lLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBJZiBcIm5hbWVcIiBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG5cdFx0XHRcdC8vIFdoZW4gZGF0YSBpcyBpbml0aWFsbHkgY3JlYXRlZCwgdmlhIChcImtleVwiLCBcInZhbFwiKSBzaWduYXR1cmUsXG5cdFx0XHRcdC8vIGtleXMgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gY2FtZWxDYXNlLlxuXHRcdFx0XHQvLyBTaW5jZSB0aGVyZSBpcyBubyB3YXkgdG8gdGVsbCBfaG93XyBhIGtleSB3YXMgYWRkZWQsIHJlbW92ZVxuXHRcdFx0XHQvLyBib3RoIHBsYWluIGtleSBhbmQgY2FtZWxDYXNlIGtleS4gIzEyNzg2XG5cdFx0XHRcdC8vIFRoaXMgd2lsbCBvbmx5IHBlbmFsaXplIHRoZSBhcnJheSBhcmd1bWVudCBwYXRoLlxuXHRcdFx0XHRuYW1lID0gbmFtZS5jb25jYXQoIGpRdWVyeS5tYXAoIG5hbWUsIGpRdWVyeS5jYW1lbENhc2UgKSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0gbmFtZS5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIHRoaXNDYWNoZVsgbmFtZVsgaSBdIF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoZXJlIGlzIG5vIGRhdGEgbGVmdCBpbiB0aGUgY2FjaGUsIHdlIHdhbnQgdG8gY29udGludWVcblx0XHRcdC8vIGFuZCBsZXQgdGhlIGNhY2hlIG9iamVjdCBpdHNlbGYgZ2V0IGRlc3Ryb3llZFxuXHRcdFx0aWYgKCBwdnQgPyAhaXNFbXB0eURhdGFPYmplY3QoIHRoaXNDYWNoZSApIDogIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCB0aGlzQ2FjaGUgKSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNlZSBqUXVlcnkuZGF0YSBmb3IgbW9yZSBpbmZvcm1hdGlvblxuXHRpZiAoICFwdnQgKSB7XG5cdFx0ZGVsZXRlIGNhY2hlWyBpZCBdLmRhdGE7XG5cblx0XHQvLyBEb24ndCBkZXN0cm95IHRoZSBwYXJlbnQgY2FjaGUgdW5sZXNzIHRoZSBpbnRlcm5hbCBkYXRhIG9iamVjdFxuXHRcdC8vIGhhZCBiZWVuIHRoZSBvbmx5IHRoaW5nIGxlZnQgaW4gaXRcblx0XHRpZiAoICFpc0VtcHR5RGF0YU9iamVjdCggY2FjaGVbIGlkIF0gKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdH1cblxuXHQvLyBEZXN0cm95IHRoZSBjYWNoZVxuXHRpZiAoIGlzTm9kZSApIHtcblx0XHRqUXVlcnkuY2xlYW5EYXRhKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXG5cdC8vIFVzZSBkZWxldGUgd2hlbiBzdXBwb3J0ZWQgZm9yIGV4cGFuZG9zIG9yIGBjYWNoZWAgaXMgbm90IGEgd2luZG93IHBlciBpc1dpbmRvdyAoIzEwMDgwKVxuXHQvKiBqc2hpbnQgZXFlcWVxOiBmYWxzZSAqL1xuXHR9IGVsc2UgaWYgKCBzdXBwb3J0LmRlbGV0ZUV4cGFuZG8gfHwgY2FjaGUgIT0gY2FjaGUud2luZG93ICkge1xuXHRcdC8qIGpzaGludCBlcWVxZXE6IHRydWUgKi9cblx0XHRkZWxldGUgY2FjaGVbIGlkIF07XG5cblx0Ly8gV2hlbiBhbGwgZWxzZSBmYWlscywgdW5kZWZpbmVkXG5cdH0gZWxzZSB7XG5cdFx0Y2FjaGVbIGlkIF0gPSB1bmRlZmluZWQ7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRjYWNoZToge30sXG5cblx0Ly8gVGhlIGZvbGxvd2luZyBlbGVtZW50cyAoc3BhY2Utc3VmZml4ZWQgdG8gYXZvaWQgT2JqZWN0LnByb3RvdHlwZSBjb2xsaXNpb25zKVxuXHQvLyB0aHJvdyB1bmNhdGNoYWJsZSBleGNlcHRpb25zIGlmIHlvdSBhdHRlbXB0IHRvIHNldCBleHBhbmRvIHByb3BlcnRpZXNcblx0bm9EYXRhOiB7XG5cdFx0XCJhcHBsZXQgXCI6IHRydWUsXG5cdFx0XCJlbWJlZCBcIjogdHJ1ZSxcblxuXHRcdC8vIC4uLmJ1dCBGbGFzaCBvYmplY3RzICh3aGljaCBoYXZlIHRoaXMgY2xhc3NpZCkgKmNhbiogaGFuZGxlIGV4cGFuZG9zXG5cdFx0XCJvYmplY3QgXCI6IFwiY2xzaWQ6RDI3Q0RCNkUtQUU2RC0xMWNmLTk2QjgtNDQ0NTUzNTQwMDAwXCJcblx0fSxcblxuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRlbGVtID0gZWxlbS5ub2RlVHlwZSA/IGpRdWVyeS5jYWNoZVsgZWxlbVsgalF1ZXJ5LmV4cGFuZG8gXSBdIDogZWxlbVsgalF1ZXJ5LmV4cGFuZG8gXTtcblx0XHRyZXR1cm4gISFlbGVtICYmICFpc0VtcHR5RGF0YU9iamVjdCggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBpbnRlcm5hbERhdGEoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRyZXR1cm4gaW50ZXJuYWxSZW1vdmVEYXRhKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGludGVybmFsRGF0YSggZWxlbSwgbmFtZSwgZGF0YSwgdHJ1ZSApO1xuXHR9LFxuXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRyZXR1cm4gaW50ZXJuYWxSZW1vdmVEYXRhKCBlbGVtLCBuYW1lLCB0cnVlICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gU3BlY2lhbCBleHBlY3Rpb25zIG9mIC5kYXRhIGJhc2ljYWxseSB0aHdhcnQgalF1ZXJ5LmFjY2Vzcyxcblx0XHQvLyBzbyBpbXBsZW1lbnQgdGhlIHJlbGV2YW50IGJlaGF2aW9yIG91cnNlbHZlc1xuXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRcdGRhdGEgPSBqUXVlcnkuZGF0YSggZWxlbSApO1xuXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhalF1ZXJ5Ll9kYXRhKCBlbGVtLCBcInBhcnNlZEF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTExK1xuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGpRdWVyeS5fZGF0YSggZWxlbSwgXCJwYXJzZWRBdHRyc1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcblx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmRhdGEoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMSA/XG5cblx0XHRcdC8vIFNldHMgb25lIHZhbHVlXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGF0YSggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0fSApIDpcblxuXHRcdFx0Ly8gR2V0cyBvbmUgdmFsdWVcblx0XHRcdC8vIFRyeSB0byBmZXRjaCBhbnkgaW50ZXJuYWxseSBzdG9yZWQgZGF0YSBmaXJzdFxuXHRcdFx0ZWxlbSA/IGRhdGFBdHRyKCBlbGVtLCBrZXksIGpRdWVyeS5kYXRhKCBlbGVtLCBrZXkgKSApIDogdW5kZWZpbmVkO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlRGF0YSggdGhpcywga2V5ICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0galF1ZXJ5Ll9kYXRhKCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgalF1ZXJ5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGpRdWVyeS5fZGF0YSggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGNsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gbm90IGludGVuZGVkIGZvciBwdWJsaWMgY29uc3VtcHRpb24gLSBnZW5lcmF0ZXMgYSBxdWV1ZUhvb2tzIG9iamVjdCxcblx0Ly8gb3IgcmV0dXJucyB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGpRdWVyeS5fZGF0YSggZWxlbSwga2V5ICkgfHwgalF1ZXJ5Ll9kYXRhKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuX3JlbW92ZURhdGEoIGVsZW0sIHR5cGUgKyBcInF1ZXVlXCIgKTtcblx0XHRcdFx0alF1ZXJ5Ll9yZW1vdmVEYXRhKCBlbGVtLCBrZXkgKTtcblx0XHRcdH0gKVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gZW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSApO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBqUXVlcnkuX2RhdGEoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0gKTtcblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgc2hyaW5rV3JhcEJsb2Nrc1ZhbDtcblxuXHRzdXBwb3J0LnNocmlua1dyYXBCbG9ja3MgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoIHNocmlua1dyYXBCbG9ja3NWYWwgIT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBzaHJpbmtXcmFwQmxvY2tzVmFsO1xuXHRcdH1cblxuXHRcdC8vIFdpbGwgYmUgY2hhbmdlZCBsYXRlciBpZiBuZWVkZWQuXG5cdFx0c2hyaW5rV3JhcEJsb2Nrc1ZhbCA9IGZhbHNlO1xuXG5cdFx0Ly8gTWluaWZpZWQ6IHZhciBiLGMsZFxuXHRcdHZhciBkaXYsIGJvZHksIGNvbnRhaW5lcjtcblxuXHRcdGJvZHkgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJib2R5XCIgKVsgMCBdO1xuXHRcdGlmICggIWJvZHkgfHwgIWJvZHkuc3R5bGUgKSB7XG5cblx0XHRcdC8vIFRlc3QgZmlyZWQgdG9vIGVhcmx5IG9yIGluIGFuIHVuc3VwcG9ydGVkIGVudmlyb25tZW50LCBleGl0LlxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFNldHVwXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7Ym9yZGVyOjA7d2lkdGg6MDtoZWlnaHQ6MDt0b3A6MDtsZWZ0Oi05OTk5cHhcIjtcblx0XHRib2R5LmFwcGVuZENoaWxkKCBjb250YWluZXIgKS5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0XHQvLyBTdXBwb3J0OiBJRTZcblx0XHQvLyBDaGVjayBpZiBlbGVtZW50cyB3aXRoIGxheW91dCBzaHJpbmstd3JhcCB0aGVpciBjaGlsZHJlblxuXHRcdGlmICggdHlwZW9mIGRpdi5zdHlsZS56b29tICE9PSBcInVuZGVmaW5lZFwiICkge1xuXG5cdFx0XHQvLyBSZXNldCBDU1M6IGJveC1zaXppbmc7IGRpc3BsYXk7IG1hcmdpbjsgYm9yZGVyXG5cdFx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyOSwgQW5kcm9pZCAyLjNcblx0XHRcdFx0Ly8gVmVuZG9yLXByZWZpeCBib3gtc2l6aW5nXG5cdFx0XHRcdFwiLXdlYmtpdC1ib3gtc2l6aW5nOmNvbnRlbnQtYm94Oy1tb3otYm94LXNpemluZzpjb250ZW50LWJveDtcIiArXG5cdFx0XHRcdFwiYm94LXNpemluZzpjb250ZW50LWJveDtkaXNwbGF5OmJsb2NrO21hcmdpbjowO2JvcmRlcjowO1wiICtcblx0XHRcdFx0XCJwYWRkaW5nOjFweDt3aWR0aDoxcHg7em9vbToxXCI7XG5cdFx0XHRkaXYuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLnN0eWxlLndpZHRoID0gXCI1cHhcIjtcblx0XHRcdHNocmlua1dyYXBCbG9ja3NWYWwgPSBkaXYub2Zmc2V0V2lkdGggIT09IDM7XG5cdFx0fVxuXG5cdFx0Ym9keS5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHRyZXR1cm4gc2hyaW5rV3JhcEJsb2Nrc1ZhbDtcblx0fTtcblxufSApKCk7XG52YXIgcG51bSA9ICggL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8gKS5zb3VyY2U7XG5cbnZhciByY3NzTnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKTtcblxuXG52YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XG5cbnZhciBpc0hpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiIHx8XG5cdFx0XHQhalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblx0fTtcblxuXG5cbmZ1bmN0aW9uIGFkanVzdENTUyggZWxlbSwgcHJvcCwgdmFsdWVQYXJ0cywgdHdlZW4gKSB7XG5cdHZhciBhZGp1c3RlZCxcblx0XHRzY2FsZSA9IDEsXG5cdFx0bWF4SXRlcmF0aW9ucyA9IDIwLFxuXHRcdGN1cnJlbnRWYWx1ZSA9IHR3ZWVuID9cblx0XHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gdHdlZW4uY3VyKCk7IH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7IHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7IH0sXG5cdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0aW5pdGlhbEluVW5pdCA9ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXG5cdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xuXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XG5cblx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFsgMyBdO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xuXG5cdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcblxuXHRcdGRvIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgaXRlcmF0aW9uIHplcm9lZCBvdXQsIGRvdWJsZSB1bnRpbCB3ZSBnZXQgKnNvbWV0aGluZyouXG5cdFx0XHQvLyBVc2Ugc3RyaW5nIGZvciBkb3VibGluZyBzbyB3ZSBkb24ndCBhY2NpZGVudGFsbHkgc2VlIHNjYWxlIGFzIHVuY2hhbmdlZCBiZWxvd1xuXHRcdFx0c2NhbGUgPSBzY2FsZSB8fCBcIi41XCI7XG5cblx0XHRcdC8vIEFkanVzdCBhbmQgYXBwbHlcblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cblx0XHQvLyBVcGRhdGUgc2NhbGUsIHRvbGVyYXRpbmcgemVybyBvciBOYU4gZnJvbSB0d2Vlbi5jdXIoKVxuXHRcdC8vIEJyZWFrIHRoZSBsb29wIGlmIHNjYWxlIGlzIHVuY2hhbmdlZCBvciBwZXJmZWN0LCBvciBpZiB3ZSd2ZSBqdXN0IGhhZCBlbm91Z2guXG5cdFx0fSB3aGlsZSAoXG5cdFx0XHRzY2FsZSAhPT0gKCBzY2FsZSA9IGN1cnJlbnRWYWx1ZSgpIC8gaW5pdGlhbCApICYmIHNjYWxlICE9PSAxICYmIC0tbWF4SXRlcmF0aW9uc1xuXHRcdCk7XG5cdH1cblxuXHRpZiAoIHZhbHVlUGFydHMgKSB7XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsSW5Vbml0IHx8ICtpbml0aWFsIHx8IDA7XG5cblx0XHQvLyBBcHBseSByZWxhdGl2ZSBvZmZzZXQgKCs9Ly09KSBpZiBzcGVjaWZpZWRcblx0XHRhZGp1c3RlZCA9IHZhbHVlUGFydHNbIDEgXSA/XG5cdFx0XHRpbml0aWFsSW5Vbml0ICsgKCB2YWx1ZVBhcnRzWyAxIF0gKyAxICkgKiB2YWx1ZVBhcnRzWyAyIF0gOlxuXHRcdFx0K3ZhbHVlUGFydHNbIDIgXTtcblx0XHRpZiAoIHR3ZWVuICkge1xuXHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XG5cdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG5cdFx0XHR0d2Vlbi5lbmQgPSBhZGp1c3RlZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGFkanVzdGVkO1xufVxuXG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggalF1ZXJ5LnR5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBrZXksIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0Zm4oXG5cdFx0XHRcdFx0ZWxlbXNbIGkgXSxcblx0XHRcdFx0XHRrZXksXG5cdFx0XHRcdFx0cmF3ID8gdmFsdWUgOiB2YWx1ZS5jYWxsKCBlbGVtc1sgaSBdLCBpLCBmbiggZWxlbXNbIGkgXSwga2V5ICkgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjaGFpbmFibGUgP1xuXHRcdGVsZW1zIDpcblxuXHRcdC8vIEdldHNcblx0XHRidWxrID9cblx0XHRcdGZuLmNhbGwoIGVsZW1zICkgOlxuXHRcdFx0bGVuZ3RoID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xudmFyIHJjaGVja2FibGVUeXBlID0gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xuXG52YXIgcnRhZ05hbWUgPSAoIC88KFtcXHc6LV0rKS8gKTtcblxudmFyIHJzY3JpcHRUeXBlID0gKCAvXiR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pICk7XG5cbnZhciBybGVhZGluZ1doaXRlc3BhY2UgPSAoIC9eXFxzKy8gKTtcblxudmFyIG5vZGVOYW1lcyA9IFwiYWJicnxhcnRpY2xlfGFzaWRlfGF1ZGlvfGJkaXxjYW52YXN8ZGF0YXxkYXRhbGlzdHxcIiArXG5cdFx0XCJkZXRhaWxzfGRpYWxvZ3xmaWdjYXB0aW9ufGZpZ3VyZXxmb290ZXJ8aGVhZGVyfGhncm91cHxtYWlufFwiICtcblx0XHRcIm1hcmt8bWV0ZXJ8bmF2fG91dHB1dHxwaWN0dXJlfHByb2dyZXNzfHNlY3Rpb258c3VtbWFyeXx0ZW1wbGF0ZXx0aW1lfHZpZGVvXCI7XG5cblxuXG5mdW5jdGlvbiBjcmVhdGVTYWZlRnJhZ21lbnQoIGRvY3VtZW50ICkge1xuXHR2YXIgbGlzdCA9IG5vZGVOYW1lcy5zcGxpdCggXCJ8XCIgKSxcblx0XHRzYWZlRnJhZyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcblxuXHRpZiAoIHNhZmVGcmFnLmNyZWF0ZUVsZW1lbnQgKSB7XG5cdFx0d2hpbGUgKCBsaXN0Lmxlbmd0aCApIHtcblx0XHRcdHNhZmVGcmFnLmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHRcdGxpc3QucG9wKClcblx0XHRcdCk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBzYWZlRnJhZztcbn1cblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gU2V0dXBcblx0ZGl2LmlubmVySFRNTCA9IFwiICA8bGluay8+PHRhYmxlPjwvdGFibGU+PGEgaHJlZj0nL2EnPmE8L2E+PGlucHV0IHR5cGU9J2NoZWNrYm94Jy8+XCI7XG5cblx0Ly8gSUUgc3RyaXBzIGxlYWRpbmcgd2hpdGVzcGFjZSB3aGVuIC5pbm5lckhUTUwgaXMgdXNlZFxuXHRzdXBwb3J0LmxlYWRpbmdXaGl0ZXNwYWNlID0gZGl2LmZpcnN0Q2hpbGQubm9kZVR5cGUgPT09IDM7XG5cblx0Ly8gTWFrZSBzdXJlIHRoYXQgdGJvZHkgZWxlbWVudHMgYXJlbid0IGF1dG9tYXRpY2FsbHkgaW5zZXJ0ZWRcblx0Ly8gSUUgd2lsbCBpbnNlcnQgdGhlbSBpbnRvIGVtcHR5IHRhYmxlc1xuXHRzdXBwb3J0LnRib2R5ID0gIWRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJ0Ym9keVwiICkubGVuZ3RoO1xuXG5cdC8vIE1ha2Ugc3VyZSB0aGF0IGxpbmsgZWxlbWVudHMgZ2V0IHNlcmlhbGl6ZWQgY29ycmVjdGx5IGJ5IGlubmVySFRNTFxuXHQvLyBUaGlzIHJlcXVpcmVzIGEgd3JhcHBlciBlbGVtZW50IGluIElFXG5cdHN1cHBvcnQuaHRtbFNlcmlhbGl6ZSA9ICEhZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcImxpbmtcIiApLmxlbmd0aDtcblxuXHQvLyBNYWtlcyBzdXJlIGNsb25pbmcgYW4gaHRtbDUgZWxlbWVudCBkb2VzIG5vdCBjYXVzZSBwcm9ibGVtc1xuXHQvLyBXaGVyZSBvdXRlckhUTUwgaXMgdW5kZWZpbmVkLCB0aGlzIHN0aWxsIHdvcmtzXG5cdHN1cHBvcnQuaHRtbDVDbG9uZSA9XG5cdFx0ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJuYXZcIiApLmNsb25lTm9kZSggdHJ1ZSApLm91dGVySFRNTCAhPT0gXCI8Om5hdj48LzpuYXY+XCI7XG5cblx0Ly8gQ2hlY2sgaWYgYSBkaXNjb25uZWN0ZWQgY2hlY2tib3ggd2lsbCByZXRhaW4gaXRzIGNoZWNrZWRcblx0Ly8gdmFsdWUgb2YgdHJ1ZSBhZnRlciBhcHBlbmRlZCB0byB0aGUgRE9NIChJRTYvNylcblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblx0aW5wdXQuY2hlY2tlZCA9IHRydWU7XG5cdGZyYWdtZW50LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXHRzdXBwb3J0LmFwcGVuZENoZWNrZWQgPSBpbnB1dC5jaGVja2VkO1xuXG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdC8vIFN1cHBvcnQ6IElFNi1JRTExK1xuXHRkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xuXG5cdC8vICMxMTIxNyAtIFdlYktpdCBsb3NlcyBjaGVjayB3aGVuIHRoZSBuYW1lIGlzIGFmdGVyIHRoZSBjaGVja2VkIGF0dHJpYnV0ZVxuXHRmcmFnbWVudC5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IFNhZmFyaSA1LjEsIGlPUyA1LjEsIEFuZHJvaWQgNC54LCBBbmRyb2lkIDIuM1xuXHQvLyBvbGQgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdC8vIENsb25lZCBlbGVtZW50cyBrZWVwIGF0dGFjaEV2ZW50IGhhbmRsZXJzLCB3ZSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBvbiBJRTkrXG5cdHN1cHBvcnQubm9DbG9uZUV2ZW50ID0gISFkaXYuYWRkRXZlbnRMaXN0ZW5lcjtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdC8vIFNpbmNlIGF0dHJpYnV0ZXMgYW5kIHByb3BlcnRpZXMgYXJlIHRoZSBzYW1lIGluIElFLFxuXHQvLyBjbGVhbkRhdGEgbXVzdCBzZXQgcHJvcGVydGllcyB0byB1bmRlZmluZWQgcmF0aGVyIHRoYW4gdXNlIHJlbW92ZUF0dHJpYnV0ZVxuXHRkaXZbIGpRdWVyeS5leHBhbmRvIF0gPSAxO1xuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSAhZGl2LmdldEF0dHJpYnV0ZSggalF1ZXJ5LmV4cGFuZG8gKTtcbn0gKSgpO1xuXG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblx0b3B0aW9uOiBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF0sXG5cdGxlZ2VuZDogWyAxLCBcIjxmaWVsZHNldD5cIiwgXCI8L2ZpZWxkc2V0PlwiIF0sXG5cdGFyZWE6IFsgMSwgXCI8bWFwPlwiLCBcIjwvbWFwPlwiIF0sXG5cblx0Ly8gU3VwcG9ydDogSUU4XG5cdHBhcmFtOiBbIDEsIFwiPG9iamVjdD5cIiwgXCI8L29iamVjdD5cIiBdLFxuXHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG5cdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0Y29sOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT48L3Rib2R5Pjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXG5cdC8vIElFNi04IGNhbid0IHNlcmlhbGl6ZSBsaW5rLCBzY3JpcHQsIHN0eWxlLCBvciBhbnkgaHRtbDUgKE5vU2NvcGUpIHRhZ3MsXG5cdC8vIHVubGVzcyB3cmFwcGVkIGluIGEgZGl2IHdpdGggbm9uLWJyZWFraW5nIGNoYXJhY3RlcnMgaW4gZnJvbnQgb2YgaXQuXG5cdF9kZWZhdWx0OiBzdXBwb3J0Lmh0bWxTZXJpYWxpemUgPyBbIDAsIFwiXCIsIFwiXCIgXSA6IFsgMSwgXCJYPGRpdj5cIiwgXCI8L2Rpdj5cIiBdXG59O1xuXG4vLyBTdXBwb3J0OiBJRTgtSUU5XG53cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblx0dmFyIGVsZW1zLCBlbGVtLFxuXHRcdGkgPSAwLFxuXHRcdGZvdW5kID0gdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgP1xuXHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICkgOlxuXHRcdFx0dHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiA/XG5cdFx0XHRcdGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICkgOlxuXHRcdFx0XHR1bmRlZmluZWQ7XG5cblx0aWYgKCAhZm91bmQgKSB7XG5cdFx0Zm9yICggZm91bmQgPSBbXSwgZWxlbXMgPSBjb250ZXh0LmNoaWxkTm9kZXMgfHwgY29udGV4dDtcblx0XHRcdCggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPSBudWxsO1xuXHRcdFx0aSsrXG5cdFx0KSB7XG5cdFx0XHRpZiAoICF0YWcgfHwgalF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCB0YWcgKSApIHtcblx0XHRcdFx0Zm91bmQucHVzaCggZWxlbSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBmb3VuZCwgZ2V0QWxsKCBlbGVtLCB0YWcgKSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgalF1ZXJ5Lm5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSA/XG5cdFx0alF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgZm91bmQgKSA6XG5cdFx0Zm91bmQ7XG59XG5cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGkgPSAwO1xuXHRmb3IgKCA7ICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0alF1ZXJ5Ll9kYXRhKFxuXHRcdFx0ZWxlbSxcblx0XHRcdFwiZ2xvYmFsRXZhbFwiLFxuXHRcdFx0IXJlZkVsZW1lbnRzIHx8IGpRdWVyeS5fZGF0YSggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdCk7XG5cdH1cbn1cblxuXG52YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy8sXG5cdHJ0Ym9keSA9IC88dGJvZHkvaTtcblxuZnVuY3Rpb24gZml4RGVmYXVsdENoZWNrZWQoIGVsZW0gKSB7XG5cdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWxlbS50eXBlICkgKSB7XG5cdFx0ZWxlbS5kZWZhdWx0Q2hlY2tlZCA9IGVsZW0uY2hlY2tlZDtcblx0fVxufVxuXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xuXHR2YXIgaiwgZWxlbSwgY29udGFpbnMsXG5cdFx0dG1wLCB0YWcsIHRib2R5LCB3cmFwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGgsXG5cblx0XHQvLyBFbnN1cmUgYSBzYWZlIGZyYWdtZW50XG5cdFx0c2FmZSA9IGNyZWF0ZVNhZmVGcmFnbWVudCggY29udGV4dCApLFxuXG5cdFx0bm9kZXMgPSBbXSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cblx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XG5cdFx0XHRpZiAoIGpRdWVyeS50eXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSB0bXAgfHwgc2FmZS5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuXHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXG5cdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcblxuXHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcblxuXHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE1hbnVhbGx5IGFkZCBsZWFkaW5nIHdoaXRlc3BhY2UgcmVtb3ZlZCBieSBJRVxuXHRcdFx0XHRpZiAoICFzdXBwb3J0LmxlYWRpbmdXaGl0ZXNwYWNlICYmIHJsZWFkaW5nV2hpdGVzcGFjZS50ZXN0KCBlbGVtICkgKSB7XG5cdFx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggcmxlYWRpbmdXaGl0ZXNwYWNlLmV4ZWMoIGVsZW0gKVsgMCBdICkgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlbW92ZSBJRSdzIGF1dG9pbnNlcnRlZCA8dGJvZHk+IGZyb20gdGFibGUgZnJhZ21lbnRzXG5cdFx0XHRcdGlmICggIXN1cHBvcnQudGJvZHkgKSB7XG5cblx0XHRcdFx0XHQvLyBTdHJpbmcgd2FzIGEgPHRhYmxlPiwgKm1heSogaGF2ZSBzcHVyaW91cyA8dGJvZHk+XG5cdFx0XHRcdFx0ZWxlbSA9IHRhZyA9PT0gXCJ0YWJsZVwiICYmICFydGJvZHkudGVzdCggZWxlbSApID9cblx0XHRcdFx0XHRcdHRtcC5maXJzdENoaWxkIDpcblxuXHRcdFx0XHRcdFx0Ly8gU3RyaW5nIHdhcyBhIGJhcmUgPHRoZWFkPiBvciA8dGZvb3Q+XG5cdFx0XHRcdFx0XHR3cmFwWyAxIF0gPT09IFwiPHRhYmxlPlwiICYmICFydGJvZHkudGVzdCggZWxlbSApID9cblx0XHRcdFx0XHRcdFx0dG1wIDpcblx0XHRcdFx0XHRcdFx0MDtcblxuXHRcdFx0XHRcdGogPSBlbGVtICYmIGVsZW0uY2hpbGROb2Rlcy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5ub2RlTmFtZSggKCB0Ym9keSA9IGVsZW0uY2hpbGROb2Rlc1sgaiBdICksIFwidGJvZHlcIiApICYmXG5cdFx0XHRcdFx0XHRcdCF0Ym9keS5jaGlsZE5vZGVzLmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRlbGVtLnJlbW92ZUNoaWxkKCB0Ym9keSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XG5cblx0XHRcdFx0Ly8gRml4ICMxMjM5MiBmb3IgV2ViS2l0IGFuZCBJRSA+IDlcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRcdFx0XHQvLyBGaXggIzEyMzkyIGZvciBvbGRJRVxuXHRcdFx0XHR3aGlsZSAoIHRtcC5maXJzdENoaWxkICkge1xuXHRcdFx0XHRcdHRtcC5yZW1vdmVDaGlsZCggdG1wLmZpcnN0Q2hpbGQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyIGZvciBwcm9wZXIgY2xlYW51cFxuXHRcdFx0XHR0bXAgPSBzYWZlLmxhc3RDaGlsZDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBGaXggIzExMzU2OiBDbGVhciBlbGVtZW50cyBmcm9tIGZyYWdtZW50XG5cdGlmICggdG1wICkge1xuXHRcdHNhZmUucmVtb3ZlQ2hpbGQoIHRtcCApO1xuXHR9XG5cblx0Ly8gUmVzZXQgZGVmYXVsdENoZWNrZWQgZm9yIGFueSByYWRpb3MgYW5kIGNoZWNrYm94ZXNcblx0Ly8gYWJvdXQgdG8gYmUgYXBwZW5kZWQgdG8gdGhlIERPTSBpbiBJRSA2LzcgKCM4MDYwKVxuXHRpZiAoICFzdXBwb3J0LmFwcGVuZENoZWNrZWQgKSB7XG5cdFx0alF1ZXJ5LmdyZXAoIGdldEFsbCggbm9kZXMsIFwiaW5wdXRcIiApLCBmaXhEZWZhdWx0Q2hlY2tlZCApO1xuXHR9XG5cblx0aSA9IDA7XG5cdHdoaWxlICggKCBlbGVtID0gbm9kZXNbIGkrKyBdICkgKSB7XG5cblx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxuXHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSA+IC0xICkge1xuXHRcdFx0aWYgKCBpZ25vcmVkICkge1xuXHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcblx0XHRcdH1cblxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0Y29udGFpbnMgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXG5cdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XG5cdFx0dG1wID0gZ2V0QWxsKCBzYWZlLmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRpZiAoIGNvbnRhaW5zICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FwdHVyZSBleGVjdXRhYmxlc1xuXHRcdGlmICggc2NyaXB0cyApIHtcblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0bXBbIGorKyBdICkgKSB7XG5cdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHRtcCA9IG51bGw7XG5cblx0cmV0dXJuIHNhZmU7XG59XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGksIGV2ZW50TmFtZSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8OSAobGFjayBzdWJtaXQvY2hhbmdlIGJ1YmJsZSksIEZpcmVmb3ggKGxhY2sgZm9jdXMoaW4gfCBvdXQpIGV2ZW50cylcblx0Zm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgY2hhbmdlOiB0cnVlLCBmb2N1c2luOiB0cnVlIH0gKSB7XG5cdFx0ZXZlbnROYW1lID0gXCJvblwiICsgaTtcblxuXHRcdGlmICggISggc3VwcG9ydFsgaSBdID0gZXZlbnROYW1lIGluIHdpbmRvdyApICkge1xuXG5cdFx0XHQvLyBCZXdhcmUgb2YgQ1NQIHJlc3RyaWN0aW9ucyAoaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vU2VjdXJpdHkvQ1NQKVxuXHRcdFx0ZGl2LnNldEF0dHJpYnV0ZSggZXZlbnROYW1lLCBcInRcIiApO1xuXHRcdFx0c3VwcG9ydFsgaSBdID0gZGl2LmF0dHJpYnV0ZXNbIGV2ZW50TmFtZSBdLmV4cGFuZG8gPT09IGZhbHNlO1xuXHRcdH1cblx0fVxuXG5cdC8vIE51bGwgZWxlbWVudHMgdG8gYXZvaWQgbGVha3MgaW4gSUUuXG5cdGRpdiA9IG51bGw7XG59ICkoKTtcblxuXG52YXIgcmZvcm1FbGVtcyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhKSQvaSxcblx0cmtleUV2ZW50ID0gL15rZXkvLFxuXHRybW91c2VFdmVudCA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLyxcblx0cmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8sXG5cdHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpLztcblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRyZXR1cm4gZmFsc2U7XG59XG5cbi8vIFN1cHBvcnQ6IElFOVxuLy8gU2VlICMxMzM5MyBmb3IgbW9yZSBpbmZvXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblx0XHR2YXIgdG1wLCBldmVudHMsIHQsIGhhbmRsZU9iakluLFxuXHRcdFx0c3BlY2lhbCwgZXZlbnRIYW5kbGUsIGhhbmRsZU9iaixcblx0XHRcdGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0galF1ZXJ5Ll9kYXRhKCBlbGVtICk7XG5cblx0XHQvLyBEb24ndCBhdHRhY2ggZXZlbnRzIHRvIG5vRGF0YSBvciB0ZXh0L2NvbW1lbnQgbm9kZXMgKGJ1dCBhbGxvdyBwbGFpbiBvYmplY3RzKVxuXHRcdGlmICggIWVsZW1EYXRhICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlclxuXHRcdGlmICggaGFuZGxlci5oYW5kbGVyICkge1xuXHRcdFx0aGFuZGxlT2JqSW4gPSBoYW5kbGVyO1xuXHRcdFx0aGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XG5cdFx0XHRzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0fVxuXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdGlmICggISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSB7fTtcblx0XHR9XG5cdFx0aWYgKCAhKCBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSApICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0KCAhZSB8fCBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBldmVudEhhbmRsZS5lbGVtLCBhcmd1bWVudHMgKSA6XG5cdFx0XHRcdFx0dW5kZWZpbmVkO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gQWRkIGVsZW0gYXMgYSBwcm9wZXJ0eSBvZiB0aGUgaGFuZGxlIGZuIHRvIHByZXZlbnQgYSBtZW1vcnkgbGVha1xuXHRcdFx0Ly8gd2l0aCBJRSBub24tbmF0aXZlIGV2ZW50c1xuXHRcdFx0ZXZlbnRIYW5kbGUuZWxlbSA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0b3JpZ1R5cGU6IG9yaWdUeXBlLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxuXHRcdFx0XHRndWlkOiBoYW5kbGVyLmd1aWQsXG5cdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3Rvcixcblx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcblx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiIClcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XG5cblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG5cdFx0XHRpZiAoICEoIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gKSApIHtcblx0XHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSA9IFtdO1xuXHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDtcblxuXHRcdFx0XHQvLyBPbmx5IHVzZSBhZGRFdmVudExpc3RlbmVyL2F0dGFjaEV2ZW50IGlmIHRoZSBzcGVjaWFsIGV2ZW50cyBoYW5kbGVyIHJldHVybnMgZmFsc2Vcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC5zZXR1cCB8fFxuXHRcdFx0XHRcdHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHQvLyBCaW5kIHRoZSBnbG9iYWwgZXZlbnQgaGFuZGxlciB0byB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSwgZmFsc2UgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIGVsZW0uYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmF0dGFjaEV2ZW50KCBcIm9uXCIgKyB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIE51bGxpZnkgZWxlbSB0byBwcmV2ZW50IG1lbW9yeSBsZWFrcyBpbiBJRVxuXHRcdGVsZW0gPSBudWxsO1xuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXHRcdHZhciBqLCBoYW5kbGVPYmosIHRtcCxcblx0XHRcdG9yaWdDb3VudCwgdCwgZXZlbnRzLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsXG5cdFx0XHRuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0galF1ZXJ5Lmhhc0RhdGEoIGVsZW0gKSAmJiBqUXVlcnkuX2RhdGEoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHR0bXAgPSB0bXBbIDIgXSAmJlxuXHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XG5cdFx0XHRcdFx0XHRzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRkZWxldGUgZWxlbURhdGEuaGFuZGxlO1xuXG5cdFx0XHQvLyByZW1vdmVEYXRhIGFsc28gY2hlY2tzIGZvciBlbXB0aW5lc3MgYW5kIGNsZWFycyB0aGUgZXhwYW5kbyBpZiBlbXB0eVxuXHRcdFx0Ly8gc28gdXNlIGl0IGluc3RlYWQgb2YgZGVsZXRlXG5cdFx0XHRqUXVlcnkuX3JlbW92ZURhdGEoIGVsZW0sIFwiZXZlbnRzXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7XG5cdFx0dmFyIGhhbmRsZSwgb250eXBlLCBjdXIsXG5cdFx0XHRidWJibGVUeXBlLCBzcGVjaWFsLCB0bXAsIGksXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoIFwiLlwiICkgOiBbXTtcblxuXHRcdGN1ciA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcblx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0dG1wID0gY3VyO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPbmx5IGFkZCB3aW5kb3cgaWYgd2UgZ290IHRvIGRvY3VtZW50IChlLmcuLCBub3QgcGxhaW4gb2JqIG9yIGRldGFjaGVkIERPTSlcblx0XHRcdGlmICggdG1wID09PSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBjdXIgPSBldmVudFBhdGhbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XG5cdFx0XHRcdGJ1YmJsZVR5cGUgOlxuXHRcdFx0XHRzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XG5cblx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSAoIGpRdWVyeS5fZGF0YSggY3VyLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdICYmXG5cdFx0XHRcdGpRdWVyeS5fZGF0YSggY3VyLCBcImhhbmRsZVwiICk7XG5cblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmIChcblx0XHRcdFx0KCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHQgc3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlXG5cdFx0XHRcdCkgJiYgYWNjZXB0RGF0YSggZWxlbSApXG5cdFx0XHQpIHtcblxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgbmFtZSBhcyB0aGUgZXZlbnQuXG5cdFx0XHRcdC8vIENhbid0IHVzZSBhbiAuaXNGdW5jdGlvbigpIGNoZWNrIGhlcmUgYmVjYXVzZSBJRTYvNyBmYWlscyB0aGF0IHRlc3QuXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgZWxlbVsgdHlwZSBdICYmICFqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJRTw5IGRpZXMgb24gZm9jdXMvYmx1ciB0byBoaWRkZW4gZWxlbWVudCAoIzE0ODYsIzEyNTE4KVxuXHRcdFx0XHRcdFx0Ly8gb25seSByZXByb2R1Y2libGUgb24gd2luWFAgSUU4IG5hdGl2ZSwgbm90IElFOSBpbiBJRTggbW9kZVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHRldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICk7XG5cblx0XHR2YXIgaSwgaiwgcmV0LCBtYXRjaGVkLCBoYW5kbGVPYmosXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblx0XHRcdGhhbmRsZXJzID0gKCBqUXVlcnkuX2RhdGEoIHRoaXMsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gfHwgW10sXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fTtcblxuXHRcdC8vIFVzZSB0aGUgZml4LWVkIGpRdWVyeS5FdmVudCByYXRoZXIgdGhhbiB0aGUgKHJlYWQtb25seSkgbmF0aXZlIGV2ZW50XG5cdFx0YXJnc1sgMCBdID0gZXZlbnQ7XG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIFRyaWdnZXJlZCBldmVudCBtdXN0IGVpdGhlciAxKSBoYXZlIG5vIG5hbWVzcGFjZSwgb3IgMikgaGF2ZSBuYW1lc3BhY2Uocylcblx0XHRcdFx0Ly8gYSBzdWJzZXQgb3IgZXF1YWwgdG8gdGhvc2UgaW4gdGhlIGJvdW5kIGV2ZW50IChib3RoIGNhbiBoYXZlIG5vIG5hbWVzcGFjZSkuXG5cdFx0XHRcdGlmICggIWV2ZW50LnJuYW1lc3BhY2UgfHwgZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fFxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIG1hdGNoZXMsIHNlbCwgaGFuZGxlT2JqLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcblxuXHRcdC8vIFN1cHBvcnQgKGF0IGxlYXN0KTogQ2hyb21lLCBJRTlcblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKCMxMzE4MClcblx0XHQvL1xuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8PTQyK1xuXHRcdC8vIEF2b2lkIG5vbi1sZWZ0LWNsaWNrIGluIEZGIGJ1dCBkb24ndCBibG9jayBJRSByYWRpbyBldmVudHMgKCMzODYxLCBnaC0yMzQzKVxuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJiBjdXIubm9kZVR5cGUgJiZcblx0XHRcdCggZXZlbnQudHlwZSAhPT0gXCJjbGlja1wiIHx8IGlzTmFOKCBldmVudC5idXR0b24gKSB8fCBldmVudC5idXR0b24gPCAxICkgKSB7XG5cblx0XHRcdC8qIGpzaGludCBlcWVxZXE6IGZhbHNlICovXG5cdFx0XHRmb3IgKCA7IGN1ciAhPSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXHRcdFx0XHQvKiBqc2hpbnQgZXFlcWVxOiB0cnVlICovXG5cblx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICgjMTMyMDgpXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAoIGN1ci5kaXNhYmxlZCAhPT0gdHJ1ZSB8fCBldmVudC50eXBlICE9PSBcImNsaWNrXCIgKSApIHtcblx0XHRcdFx0XHRtYXRjaGVzID0gW107XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoIzEzMjAzKVxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+IC0xIDpcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVzWyBzZWwgXSApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZXMgfSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiB0aGlzLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRpZiAoIGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdICkge1xuXHRcdFx0cmV0dXJuIGV2ZW50O1xuXHRcdH1cblxuXHRcdC8vIENyZWF0ZSBhIHdyaXRhYmxlIGNvcHkgb2YgdGhlIGV2ZW50IG9iamVjdCBhbmQgbm9ybWFsaXplIHNvbWUgcHJvcGVydGllc1xuXHRcdHZhciBpLCBwcm9wLCBjb3B5LFxuXHRcdFx0dHlwZSA9IGV2ZW50LnR5cGUsXG5cdFx0XHRvcmlnaW5hbEV2ZW50ID0gZXZlbnQsXG5cdFx0XHRmaXhIb29rID0gdGhpcy5maXhIb29rc1sgdHlwZSBdO1xuXG5cdFx0aWYgKCAhZml4SG9vayApIHtcblx0XHRcdHRoaXMuZml4SG9va3NbIHR5cGUgXSA9IGZpeEhvb2sgPVxuXHRcdFx0XHRybW91c2VFdmVudC50ZXN0KCB0eXBlICkgPyB0aGlzLm1vdXNlSG9va3MgOlxuXHRcdFx0XHRya2V5RXZlbnQudGVzdCggdHlwZSApID8gdGhpcy5rZXlIb29rcyA6XG5cdFx0XHRcdHt9O1xuXHRcdH1cblx0XHRjb3B5ID0gZml4SG9vay5wcm9wcyA/IHRoaXMucHJvcHMuY29uY2F0KCBmaXhIb29rLnByb3BzICkgOiB0aGlzLnByb3BzO1xuXG5cdFx0ZXZlbnQgPSBuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cblx0XHRpID0gY29weS5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRwcm9wID0gY29weVsgaSBdO1xuXHRcdFx0ZXZlbnRbIHByb3AgXSA9IG9yaWdpbmFsRXZlbnRbIHByb3AgXTtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gRml4IHRhcmdldCBwcm9wZXJ0eSAoIzE5MjUpXG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gb3JpZ2luYWxFdmVudC5zcmNFbGVtZW50IHx8IGRvY3VtZW50O1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA2LTgrXG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0Mylcblx0XHRpZiAoIGV2ZW50LnRhcmdldC5ub2RlVHlwZSA9PT0gMyApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGV2ZW50LnRhcmdldC5wYXJlbnROb2RlO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBGb3IgbW91c2Uva2V5IGV2ZW50cywgbWV0YUtleT09ZmFsc2UgaWYgaXQncyB1bmRlZmluZWQgKCMzMzY4LCAjMTEzMjgpXG5cdFx0ZXZlbnQubWV0YUtleSA9ICEhZXZlbnQubWV0YUtleTtcblxuXHRcdHJldHVybiBmaXhIb29rLmZpbHRlciA/IGZpeEhvb2suZmlsdGVyKCBldmVudCwgb3JpZ2luYWxFdmVudCApIDogZXZlbnQ7XG5cdH0sXG5cblx0Ly8gSW5jbHVkZXMgc29tZSBldmVudCBwcm9wcyBzaGFyZWQgYnkgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnRcblx0cHJvcHM6ICggXCJhbHRLZXkgYnViYmxlcyBjYW5jZWxhYmxlIGN0cmxLZXkgY3VycmVudFRhcmdldCBkZXRhaWwgZXZlbnRQaGFzZSBcIiArXG5cdFx0XCJtZXRhS2V5IHJlbGF0ZWRUYXJnZXQgc2hpZnRLZXkgdGFyZ2V0IHRpbWVTdGFtcCB2aWV3IHdoaWNoXCIgKS5zcGxpdCggXCIgXCIgKSxcblxuXHRmaXhIb29rczoge30sXG5cblx0a2V5SG9va3M6IHtcblx0XHRwcm9wczogXCJjaGFyIGNoYXJDb2RlIGtleSBrZXlDb2RlXCIuc3BsaXQoIFwiIFwiICksXG5cdFx0ZmlsdGVyOiBmdW5jdGlvbiggZXZlbnQsIG9yaWdpbmFsICkge1xuXG5cdFx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcblx0XHRcdGlmICggZXZlbnQud2hpY2ggPT0gbnVsbCApIHtcblx0XHRcdFx0ZXZlbnQud2hpY2ggPSBvcmlnaW5hbC5jaGFyQ29kZSAhPSBudWxsID8gb3JpZ2luYWwuY2hhckNvZGUgOiBvcmlnaW5hbC5rZXlDb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXZlbnQ7XG5cdFx0fVxuXHR9LFxuXG5cdG1vdXNlSG9va3M6IHtcblx0XHRwcm9wczogKCBcImJ1dHRvbiBidXR0b25zIGNsaWVudFggY2xpZW50WSBmcm9tRWxlbWVudCBvZmZzZXRYIG9mZnNldFkgXCIgK1xuXHRcdFx0XCJwYWdlWCBwYWdlWSBzY3JlZW5YIHNjcmVlblkgdG9FbGVtZW50XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0XHRmaWx0ZXI6IGZ1bmN0aW9uKCBldmVudCwgb3JpZ2luYWwgKSB7XG5cdFx0XHR2YXIgYm9keSwgZXZlbnREb2MsIGRvYyxcblx0XHRcdFx0YnV0dG9uID0gb3JpZ2luYWwuYnV0dG9uLFxuXHRcdFx0XHRmcm9tRWxlbWVudCA9IG9yaWdpbmFsLmZyb21FbGVtZW50O1xuXG5cdFx0XHQvLyBDYWxjdWxhdGUgcGFnZVgvWSBpZiBtaXNzaW5nIGFuZCBjbGllbnRYL1kgYXZhaWxhYmxlXG5cdFx0XHRpZiAoIGV2ZW50LnBhZ2VYID09IG51bGwgJiYgb3JpZ2luYWwuY2xpZW50WCAhPSBudWxsICkge1xuXHRcdFx0XHRldmVudERvYyA9IGV2ZW50LnRhcmdldC5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50O1xuXHRcdFx0XHRkb2MgPSBldmVudERvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0XHRcdGJvZHkgPSBldmVudERvYy5ib2R5O1xuXG5cdFx0XHRcdGV2ZW50LnBhZ2VYID0gb3JpZ2luYWwuY2xpZW50WCArXG5cdFx0XHRcdFx0KCBkb2MgJiYgZG9jLnNjcm9sbExlZnQgfHwgYm9keSAmJiBib2R5LnNjcm9sbExlZnQgfHwgMCApIC1cblx0XHRcdFx0XHQoIGRvYyAmJiBkb2MuY2xpZW50TGVmdCB8fCBib2R5ICYmIGJvZHkuY2xpZW50TGVmdCB8fCAwICk7XG5cdFx0XHRcdGV2ZW50LnBhZ2VZID0gb3JpZ2luYWwuY2xpZW50WSArXG5cdFx0XHRcdFx0KCBkb2MgJiYgZG9jLnNjcm9sbFRvcCAgfHwgYm9keSAmJiBib2R5LnNjcm9sbFRvcCAgfHwgMCApIC1cblx0XHRcdFx0XHQoIGRvYyAmJiBkb2MuY2xpZW50VG9wICB8fCBib2R5ICYmIGJvZHkuY2xpZW50VG9wICB8fCAwICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCByZWxhdGVkVGFyZ2V0LCBpZiBuZWNlc3Nhcnlcblx0XHRcdGlmICggIWV2ZW50LnJlbGF0ZWRUYXJnZXQgJiYgZnJvbUVsZW1lbnQgKSB7XG5cdFx0XHRcdGV2ZW50LnJlbGF0ZWRUYXJnZXQgPSBmcm9tRWxlbWVudCA9PT0gZXZlbnQudGFyZ2V0ID9cblx0XHRcdFx0XHRvcmlnaW5hbC50b0VsZW1lbnQgOlxuXHRcdFx0XHRcdGZyb21FbGVtZW50O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgd2hpY2ggZm9yIGNsaWNrOiAxID09PSBsZWZ0OyAyID09PSBtaWRkbGU7IDMgPT09IHJpZ2h0XG5cdFx0XHQvLyBOb3RlOiBidXR0b24gaXMgbm90IG5vcm1hbGl6ZWQsIHNvIGRvbid0IHVzZSBpdFxuXHRcdFx0aWYgKCAhZXZlbnQud2hpY2ggJiYgYnV0dG9uICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGV2ZW50LndoaWNoID0gKCBidXR0b24gJiAxID8gMSA6ICggYnV0dG9uICYgMiA/IDMgOiAoIGJ1dHRvbiAmIDQgPyAyIDogMCApICkgKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV2ZW50O1xuXHRcdH1cblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdH0sXG5cdFx0Zm9jdXM6IHtcblxuXHRcdFx0Ly8gRmlyZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzICE9PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuZm9jdXMgKSB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdHRoaXMuZm9jdXMoKTtcblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdFx0XHRcdFx0Ly8gSWYgd2UgZXJyb3Igb24gZm9jdXMgdG8gaGlkZGVuIGVsZW1lbnQgKCMxNDg2LCAjMTI1MTgpLFxuXHRcdFx0XHRcdFx0Ly8gbGV0IC50cmlnZ2VyKCkgcnVuIHRoZSBoYW5kbGVyc1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c2luXCJcblx0XHR9LFxuXHRcdGJsdXI6IHtcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5ibHVyICkge1xuXHRcdFx0XHRcdHRoaXMuYmx1cigpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c291dFwiXG5cdFx0fSxcblx0XHRjbGljazoge1xuXG5cdFx0XHQvLyBGb3IgY2hlY2tib3gsIGZpcmUgbmF0aXZlIGV2ZW50IHNvIGNoZWNrZWQgc3RhdGUgd2lsbCBiZSByaWdodFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggalF1ZXJ5Lm5vZGVOYW1lKCB0aGlzLCBcImlucHV0XCIgKSAmJiB0aGlzLnR5cGUgPT09IFwiY2hlY2tib3hcIiAmJiB0aGlzLmNsaWNrICkge1xuXHRcdFx0XHRcdHRoaXMuY2xpY2soKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBkb24ndCBmaXJlIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5ub2RlTmFtZSggZXZlbnQudGFyZ2V0LCBcImFcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmV1bmxvYWQ6IHtcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQgKSB7XG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXG5cblx0XHRcdFx0Ly8gUHJldmlvdXNseSwgYG9yaWdpbmFsRXZlbnQ6IHt9YCB3YXMgc2V0IGhlcmUsIHNvIHN0b3BQcm9wYWdhdGlvbiBjYWxsXG5cdFx0XHRcdC8vIHdvdWxkIG5vdCBiZSB0cmlnZ2VyZWQgb24gZG9ub3IgZXZlbnQsIHNpbmNlIGluIG91ciBvd25cblx0XHRcdFx0Ly8galF1ZXJ5LmV2ZW50LnN0b3BQcm9wYWdhdGlvbiBmdW5jdGlvbiB3ZSBoYWQgYSBjaGVjayBmb3IgZXhpc3RlbmNlIG9mXG5cdFx0XHRcdC8vIG9yaWdpbmFsRXZlbnQuc3RvcFByb3BhZ2F0aW9uIG1ldGhvZCwgc28sIGNvbnNlcXVlbnRseSBpdCB3b3VsZCBiZSBhIG5vb3AuXG5cdFx0XHRcdC8vXG5cdFx0XHRcdC8vIEd1YXJkIGZvciBzaW11bGF0ZWQgZXZlbnRzIHdhcyBtb3ZlZCB0byBqUXVlcnkuZXZlbnQuc3RvcFByb3BhZ2F0aW9uIGZ1bmN0aW9uXG5cdFx0XHRcdC8vIHNpbmNlIGBvcmlnaW5hbEV2ZW50YCBzaG91bGQgcG9pbnQgdG8gdGhlIG9yaWdpbmFsIGV2ZW50IGZvciB0aGVcblx0XHRcdFx0Ly8gY29uc3RhbmN5IHdpdGggb3RoZXIgZXZlbnRzIGFuZCBmb3IgbW9yZSBmb2N1c2VkIGxvZ2ljXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XG5cblx0XHRpZiAoIGUuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciA/XG5cdGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XG5cblx0XHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0XHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlICk7XG5cdFx0fVxuXHR9IDpcblx0ZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblx0XHR2YXIgbmFtZSA9IFwib25cIiArIHR5cGU7XG5cblx0XHRpZiAoIGVsZW0uZGV0YWNoRXZlbnQgKSB7XG5cblx0XHRcdC8vICM4NTQ1LCAjNzA1NCwgcHJldmVudGluZyBtZW1vcnkgbGVha3MgZm9yIGN1c3RvbSBldmVudHMgaW4gSUU2LThcblx0XHRcdC8vIGRldGFjaEV2ZW50IG5lZWRlZCBwcm9wZXJ0eSBvbiBlbGVtZW50LCBieSBuYW1lIG9mIHRoYXQgZXZlbnQsXG5cdFx0XHQvLyB0byBwcm9wZXJseSBleHBvc2UgaXQgdG8gR0Ncblx0XHRcdGlmICggdHlwZW9mIGVsZW1bIG5hbWUgXSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0ZWxlbVsgbmFtZSBdID0gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5kZXRhY2hFdmVudCggbmFtZSwgaGFuZGxlICk7XG5cdFx0fVxuXHR9O1xuXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblxuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcblx0aWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50ICkgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIEV2ZW50IG9iamVjdFxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XG5cdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XG5cblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDwgOSwgQW5kcm9pZCA8IDQuMFxuXHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cblx0XHRcdHJldHVyblRydWUgOlxuXHRcdFx0cmV0dXJuRmFsc2U7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgalF1ZXJ5Lm5vdygpO1xuXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XG59O1xuXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcbi8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDMwMzMxL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbFxualF1ZXJ5LkV2ZW50LnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IGpRdWVyeS5FdmVudCxcblx0aXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSxcblx0aXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXHRcdGlmICggIWUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgcHJldmVudERlZmF1bHQgZXhpc3RzLCBydW4gaXQgb24gdGhlIG9yaWdpbmFsIGV2ZW50XG5cdFx0aWYgKCBlLnByZXZlbnREZWZhdWx0ICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUVcblx0XHQvLyBPdGhlcndpc2Ugc2V0IHRoZSByZXR1cm5WYWx1ZSBwcm9wZXJ0eSBvZiB0aGUgb3JpZ2luYWwgZXZlbnQgdG8gZmFsc2Vcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZS5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCAhZSB8fCB0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHN0b3BQcm9wYWdhdGlvbiBleGlzdHMsIHJ1biBpdCBvbiB0aGUgb3JpZ2luYWwgZXZlbnRcblx0XHRpZiAoIGUuc3RvcFByb3BhZ2F0aW9uICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRVxuXHRcdC8vIFNldCB0aGUgY2FuY2VsQnViYmxlIHByb3BlcnR5IG9mIHRoZSBvcmlnaW5hbCBldmVudCB0byB0cnVlXG5cdFx0ZS5jYW5jZWxCdWJibGUgPSB0cnVlO1xuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24gKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cbi8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XG4vL1xuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuLy8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XG4vLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDcwMjU4XG4vLyBmb3IgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBidWcgKGl0IGV4aXN0ZWQgaW4gb2xkZXIgQ2hyb21lIHZlcnNpb25zIGFzIHdlbGwpLlxualF1ZXJ5LmVhY2goIHtcblx0bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIixcblx0bW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLFxuXHRwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIixcblx0cG9pbnRlcmxlYXZlOiBcInBvaW50ZXJvdXRcIlxufSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIG9yaWcgXSA9IHtcblx0XHRkZWxlZ2F0ZVR5cGU6IGZpeCxcblx0XHRiaW5kVHlwZTogZml4LFxuXG5cdFx0aGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgcmV0LFxuXHRcdFx0XHR0YXJnZXQgPSB0aGlzLFxuXHRcdFx0XHRyZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCxcblx0XHRcdFx0aGFuZGxlT2JqID0gZXZlbnQuaGFuZGxlT2JqO1xuXG5cdFx0XHQvLyBGb3IgbW91c2VlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxuXHRcdFx0Ly8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcblx0XHRcdGlmICggIXJlbGF0ZWQgfHwgKCByZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkgKSApIHtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGhhbmRsZU9iai5vcmlnVHlwZTtcblx0XHRcdFx0cmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRldmVudC50eXBlID0gZml4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cdH07XG59ICk7XG5cbi8vIElFIHN1Ym1pdCBkZWxlZ2F0aW9uXG5pZiAoICFzdXBwb3J0LnN1Ym1pdCApIHtcblxuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbC5zdWJtaXQgPSB7XG5cdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBPbmx5IG5lZWQgdGhpcyBmb3IgZGVsZWdhdGVkIGZvcm0gc3VibWl0IGV2ZW50c1xuXHRcdFx0aWYgKCBqUXVlcnkubm9kZU5hbWUoIHRoaXMsIFwiZm9ybVwiICkgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTGF6eS1hZGQgYSBzdWJtaXQgaGFuZGxlciB3aGVuIGEgZGVzY2VuZGFudCBmb3JtIG1heSBwb3RlbnRpYWxseSBiZSBzdWJtaXR0ZWRcblx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIFwiY2xpY2suX3N1Ym1pdCBrZXlwcmVzcy5fc3VibWl0XCIsIGZ1bmN0aW9uKCBlICkge1xuXG5cdFx0XHRcdC8vIE5vZGUgbmFtZSBjaGVjayBhdm9pZHMgYSBWTUwtcmVsYXRlZCBjcmFzaCBpbiBJRSAoIzk4MDcpXG5cdFx0XHRcdHZhciBlbGVtID0gZS50YXJnZXQsXG5cdFx0XHRcdFx0Zm9ybSA9IGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgfHwgalF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCBcImJ1dHRvblwiICkgP1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PThcblx0XHRcdFx0XHRcdC8vIFdlIHVzZSBqUXVlcnkucHJvcCBpbnN0ZWFkIG9mIGVsZW0uZm9ybVxuXHRcdFx0XHRcdFx0Ly8gdG8gYWxsb3cgZml4aW5nIHRoZSBJRTggZGVsZWdhdGVkIHN1Ym1pdCBpc3N1ZSAoZ2gtMjMzMilcblx0XHRcdFx0XHRcdC8vIGJ5IDNyZCBwYXJ0eSBwb2x5ZmlsbHMvd29ya2Fyb3VuZHMuXG5cdFx0XHRcdFx0XHRqUXVlcnkucHJvcCggZWxlbSwgXCJmb3JtXCIgKSA6XG5cdFx0XHRcdFx0XHR1bmRlZmluZWQ7XG5cblx0XHRcdFx0aWYgKCBmb3JtICYmICFqUXVlcnkuX2RhdGEoIGZvcm0sIFwic3VibWl0XCIgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBmb3JtLCBcInN1Ym1pdC5fc3VibWl0XCIsIGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0XHRcdGV2ZW50Ll9zdWJtaXRCdWJibGUgPSB0cnVlO1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRqUXVlcnkuX2RhdGEoIGZvcm0sIFwic3VibWl0XCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXG5cdFx0XHQvLyByZXR1cm4gdW5kZWZpbmVkIHNpbmNlIHdlIGRvbid0IG5lZWQgYW4gZXZlbnQgbGlzdGVuZXJcblx0XHR9LFxuXG5cdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdC8vIElmIGZvcm0gd2FzIHN1Ym1pdHRlZCBieSB0aGUgdXNlciwgYnViYmxlIHRoZSBldmVudCB1cCB0aGUgdHJlZVxuXHRcdFx0aWYgKCBldmVudC5fc3VibWl0QnViYmxlICkge1xuXHRcdFx0XHRkZWxldGUgZXZlbnQuX3N1Ym1pdEJ1YmJsZTtcblx0XHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgJiYgIWV2ZW50LmlzVHJpZ2dlciApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIFwic3VibWl0XCIsIHRoaXMucGFyZW50Tm9kZSwgZXZlbnQgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIE9ubHkgbmVlZCB0aGlzIGZvciBkZWxlZ2F0ZWQgZm9ybSBzdWJtaXQgZXZlbnRzXG5cdFx0XHRpZiAoIGpRdWVyeS5ub2RlTmFtZSggdGhpcywgXCJmb3JtXCIgKSApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1vdmUgZGVsZWdhdGVkIGhhbmRsZXJzOyBjbGVhbkRhdGEgZXZlbnR1YWxseSByZWFwcyBzdWJtaXQgaGFuZGxlcnMgYXR0YWNoZWQgYWJvdmVcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIFwiLl9zdWJtaXRcIiApO1xuXHRcdH1cblx0fTtcbn1cblxuLy8gSUUgY2hhbmdlIGRlbGVnYXRpb24gYW5kIGNoZWNrYm94L3JhZGlvIGZpeFxuaWYgKCAhc3VwcG9ydC5jaGFuZ2UgKSB7XG5cblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWwuY2hhbmdlID0ge1xuXG5cdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRpZiAoIHJmb3JtRWxlbXMudGVzdCggdGhpcy5ub2RlTmFtZSApICkge1xuXG5cdFx0XHRcdC8vIElFIGRvZXNuJ3QgZmlyZSBjaGFuZ2Ugb24gYSBjaGVjay9yYWRpbyB1bnRpbCBibHVyOyB0cmlnZ2VyIGl0IG9uIGNsaWNrXG5cdFx0XHRcdC8vIGFmdGVyIGEgcHJvcGVydHljaGFuZ2UuIEVhdCB0aGUgYmx1ci1jaGFuZ2UgaW4gc3BlY2lhbC5jaGFuZ2UuaGFuZGxlLlxuXHRcdFx0XHQvLyBUaGlzIHN0aWxsIGZpcmVzIG9uY2hhbmdlIGEgc2Vjb25kIHRpbWUgZm9yIGNoZWNrL3JhZGlvIGFmdGVyIGJsdXIuXG5cdFx0XHRcdGlmICggdGhpcy50eXBlID09PSBcImNoZWNrYm94XCIgfHwgdGhpcy50eXBlID09PSBcInJhZGlvXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgXCJwcm9wZXJ0eWNoYW5nZS5fY2hhbmdlXCIsIGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0XHRcdGlmICggZXZlbnQub3JpZ2luYWxFdmVudC5wcm9wZXJ0eU5hbWUgPT09IFwiY2hlY2tlZFwiICkge1xuXHRcdFx0XHRcdFx0XHR0aGlzLl9qdXN0Q2hhbmdlZCA9IHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIFwiY2xpY2suX2NoYW5nZVwiLCBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIHRoaXMuX2p1c3RDaGFuZ2VkICYmICFldmVudC5pc1RyaWdnZXIgKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMuX2p1c3RDaGFuZ2VkID0gZmFsc2U7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEFsbG93IHRyaWdnZXJlZCwgc2ltdWxhdGVkIGNoYW5nZSBldmVudHMgKCMxMTUwMClcblx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggXCJjaGFuZ2VcIiwgdGhpcywgZXZlbnQgKTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZWxlZ2F0ZWQgZXZlbnQ7IGxhenktYWRkIGEgY2hhbmdlIGhhbmRsZXIgb24gZGVzY2VuZGFudCBpbnB1dHNcblx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIFwiYmVmb3JlYWN0aXZhdGUuX2NoYW5nZVwiLCBmdW5jdGlvbiggZSApIHtcblx0XHRcdFx0dmFyIGVsZW0gPSBlLnRhcmdldDtcblxuXHRcdFx0XHRpZiAoIHJmb3JtRWxlbXMudGVzdCggZWxlbS5ub2RlTmFtZSApICYmICFqUXVlcnkuX2RhdGEoIGVsZW0sIFwiY2hhbmdlXCIgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBlbGVtLCBcImNoYW5nZS5fY2hhbmdlXCIsIGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICYmICFldmVudC5pc1NpbXVsYXRlZCAmJiAhZXZlbnQuaXNUcmlnZ2VyICkge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIFwiY2hhbmdlXCIsIHRoaXMucGFyZW50Tm9kZSwgZXZlbnQgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0alF1ZXJ5Ll9kYXRhKCBlbGVtLCBcImNoYW5nZVwiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9LFxuXG5cdFx0aGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IGV2ZW50LnRhcmdldDtcblxuXHRcdFx0Ly8gU3dhbGxvdyBuYXRpdmUgY2hhbmdlIGV2ZW50cyBmcm9tIGNoZWNrYm94L3JhZGlvLCB3ZSBhbHJlYWR5IHRyaWdnZXJlZCB0aGVtIGFib3ZlXG5cdFx0XHRpZiAoIHRoaXMgIT09IGVsZW0gfHwgZXZlbnQuaXNTaW11bGF0ZWQgfHwgZXZlbnQuaXNUcmlnZ2VyIHx8XG5cdFx0XHRcdCggZWxlbS50eXBlICE9PSBcInJhZGlvXCIgJiYgZWxlbS50eXBlICE9PSBcImNoZWNrYm94XCIgKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gZXZlbnQuaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCBcIi5fY2hhbmdlXCIgKTtcblxuXHRcdFx0cmV0dXJuICFyZm9ybUVsZW1zLnRlc3QoIHRoaXMubm9kZU5hbWUgKTtcblx0XHR9XG5cdH07XG59XG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3hcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG4vL1xuLy8gU3VwcG9ydDogQ2hyb21lLCBTYWZhcmlcbi8vIGZvY3VzKGluIHwgb3V0KSBldmVudHMgZmlyZSBhZnRlciBmb2N1cyAmIGJsdXIgZXZlbnRzLFxuLy8gd2hpY2ggaXMgc3BlYyB2aW9sYXRpb24gLSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1mb2N1c2V2ZW50LWV2ZW50LW9yZGVyXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcbmlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApICk7XG5cdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0galF1ZXJ5Ll9kYXRhKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0alF1ZXJ5Ll9kYXRhKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBqUXVlcnkuX2RhdGEoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0alF1ZXJ5Ll9yZW1vdmVEYXRhKCBkb2MsIGZpeCApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGpRdWVyeS5fZGF0YSggZG9jLCBmaXgsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9ICk7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRvbjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAxICk7XG5cdH0sXG5cdG9mZjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZm4gKSB7XG5cdFx0dmFyIGhhbmRsZU9iaiwgdHlwZTtcblx0XHRpZiAoIHR5cGVzICYmIHR5cGVzLnByZXZlbnREZWZhdWx0ICYmIHR5cGVzLmhhbmRsZU9iaiApIHtcblxuXHRcdFx0Ly8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudFxuXHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xuXHRcdFx0alF1ZXJ5KCB0eXBlcy5kZWxlZ2F0ZVRhcmdldCApLm9mZihcblx0XHRcdFx0aGFuZGxlT2JqLm5hbWVzcGFjZSA/XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDpcblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUsXG5cdFx0XHRcdGhhbmRsZU9iai5zZWxlY3Rvcixcblx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXJcblx0XHRcdCk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtb2JqZWN0IFssIHNlbGVjdG9yXSApXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0XHR0aGlzLm9mZiggdHlwZSwgc2VsZWN0b3IsIHR5cGVzWyB0eXBlIF0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHNlbGVjdG9yID09PSBmYWxzZSB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcyBbLCBmbl0gKVxuXHRcdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgdHlwZXMsIGZuLCBzZWxlY3RvciApO1xuXHRcdH0gKTtcblx0fSxcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XG5cdFx0fSApO1xuXHR9LFxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF07XG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxudmFyIHJpbmxpbmVqUXVlcnkgPSAvIGpRdWVyeVxcZCs9XCIoPzpudWxsfFxcZCspXCIvZyxcblx0cm5vc2hpbWNhY2hlID0gbmV3IFJlZ0V4cCggXCI8KD86XCIgKyBub2RlTmFtZXMgKyBcIilbXFxcXHMvPl1cIiwgXCJpXCIgKSxcblx0cnhodG1sVGFnID0gLzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW1xcdzotXSspW14+XSopXFwvPi9naSxcblxuXHQvLyBTdXBwb3J0OiBJRSAxMC0xMSwgRWRnZSAxMDI0MCtcblx0Ly8gSW4gSUUvRWRnZSB1c2luZyByZWdleCBncm91cHMgaGVyZSBjYXVzZXMgc2V2ZXJlIHNsb3dkb3ducy5cblx0Ly8gU2VlIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvMTczNjUxMi9cblx0cm5vSW5uZXJodG1sID0gLzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksXG5cblx0Ly8gY2hlY2tlZD1cImNoZWNrZWRcIiBvciBjaGVja2VkXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcblx0cnNjcmlwdFR5cGVNYXNrZWQgPSAvXnRydWVcXC8oLiopLyxcblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nLFxuXHRzYWZlRnJhZ21lbnQgPSBjcmVhdGVTYWZlRnJhZ21lbnQoIGRvY3VtZW50ICksXG5cdGZyYWdtZW50RGl2ID0gc2FmZUZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gTWFuaXB1bGF0aW5nIHRhYmxlcyByZXF1aXJlcyBhIHRib2R5XG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdHJldHVybiBqUXVlcnkubm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0alF1ZXJ5Lm5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApID9cblxuXHRcdGVsZW0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwidGJvZHlcIiApWyAwIF0gfHxcblx0XHRcdGVsZW0uYXBwZW5kQ2hpbGQoIGVsZW0ub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInRib2R5XCIgKSApIDpcblx0XHRlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidHlwZVwiICkgIT09IG51bGwgKSArIFwiL1wiICsgZWxlbS50eXBlO1xuXHRyZXR1cm4gZWxlbTtcbn1cbmZ1bmN0aW9uIHJlc3RvcmVTY3JpcHQoIGVsZW0gKSB7XG5cdHZhciBtYXRjaCA9IHJzY3JpcHRUeXBlTWFza2VkLmV4ZWMoIGVsZW0udHlwZSApO1xuXHRpZiAoIG1hdGNoICkge1xuXHRcdGVsZW0udHlwZSA9IG1hdGNoWyAxIF07XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblx0cmV0dXJuIGVsZW07XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSB8fCAhalF1ZXJ5Lmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdHZhciB0eXBlLCBpLCBsLFxuXHRcdG9sZERhdGEgPSBqUXVlcnkuX2RhdGEoIHNyYyApLFxuXHRcdGN1ckRhdGEgPSBqUXVlcnkuX2RhdGEoIGRlc3QsIG9sZERhdGEgKSxcblx0XHRldmVudHMgPSBvbGREYXRhLmV2ZW50cztcblxuXHRpZiAoIGV2ZW50cyApIHtcblx0XHRkZWxldGUgY3VyRGF0YS5oYW5kbGU7XG5cdFx0Y3VyRGF0YS5ldmVudHMgPSB7fTtcblxuXHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBtYWtlIHRoZSBjbG9uZWQgcHVibGljIGRhdGEgb2JqZWN0IGEgY29weSBmcm9tIHRoZSBvcmlnaW5hbFxuXHRpZiAoIGN1ckRhdGEuZGF0YSApIHtcblx0XHRjdXJEYXRhLmRhdGEgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyRGF0YS5kYXRhICk7XG5cdH1cbn1cblxuZnVuY3Rpb24gZml4Q2xvbmVOb2RlSXNzdWVzKCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSwgZSwgZGF0YTtcblxuXHQvLyBXZSBkbyBub3QgbmVlZCB0byBkbyBhbnl0aGluZyBmb3Igbm9uLUVsZW1lbnRzXG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBJRTYtOCBjb3BpZXMgZXZlbnRzIGJvdW5kIHZpYSBhdHRhY2hFdmVudCB3aGVuIHVzaW5nIGNsb25lTm9kZS5cblx0aWYgKCAhc3VwcG9ydC5ub0Nsb25lRXZlbnQgJiYgZGVzdFsgalF1ZXJ5LmV4cGFuZG8gXSApIHtcblx0XHRkYXRhID0galF1ZXJ5Ll9kYXRhKCBkZXN0ICk7XG5cblx0XHRmb3IgKCBlIGluIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBkZXN0LCBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdH1cblxuXHRcdC8vIEV2ZW50IGRhdGEgZ2V0cyByZWZlcmVuY2VkIGluc3RlYWQgb2YgY29waWVkIGlmIHRoZSBleHBhbmRvIGdldHMgY29waWVkIHRvb1xuXHRcdGRlc3QucmVtb3ZlQXR0cmlidXRlKCBqUXVlcnkuZXhwYW5kbyApO1xuXHR9XG5cblx0Ly8gSUUgYmxhbmtzIGNvbnRlbnRzIHdoZW4gY2xvbmluZyBzY3JpcHRzLCBhbmQgdHJpZXMgdG8gZXZhbHVhdGUgbmV3bHktc2V0IHRleHRcblx0aWYgKCBub2RlTmFtZSA9PT0gXCJzY3JpcHRcIiAmJiBkZXN0LnRleHQgIT09IHNyYy50ZXh0ICkge1xuXHRcdGRpc2FibGVTY3JpcHQoIGRlc3QgKS50ZXh0ID0gc3JjLnRleHQ7XG5cdFx0cmVzdG9yZVNjcmlwdCggZGVzdCApO1xuXG5cdC8vIElFNi0xMCBpbXByb3Blcmx5IGNsb25lcyBjaGlsZHJlbiBvZiBvYmplY3QgZWxlbWVudHMgdXNpbmcgY2xhc3NpZC5cblx0Ly8gSUUxMCB0aHJvd3MgTm9Nb2RpZmljYXRpb25BbGxvd2VkRXJyb3IgaWYgcGFyZW50IGlzIG51bGwsICMxMjEzMi5cblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0aWYgKCBkZXN0LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRkZXN0Lm91dGVySFRNTCA9IHNyYy5vdXRlckhUTUw7XG5cdFx0fVxuXG5cdFx0Ly8gVGhpcyBwYXRoIGFwcGVhcnMgdW5hdm9pZGFibGUgZm9yIElFOS4gV2hlbiBjbG9uaW5nIGFuIG9iamVjdFxuXHRcdC8vIGVsZW1lbnQgaW4gSUU5LCB0aGUgb3V0ZXJIVE1MIHN0cmF0ZWd5IGFib3ZlIGlzIG5vdCBzdWZmaWNpZW50LlxuXHRcdC8vIElmIHRoZSBzcmMgaGFzIGlubmVySFRNTCBhbmQgdGhlIGRlc3RpbmF0aW9uIGRvZXMgbm90LFxuXHRcdC8vIGNvcHkgdGhlIHNyYy5pbm5lckhUTUwgaW50byB0aGUgZGVzdC5pbm5lckhUTUwuICMxMDMyNFxuXHRcdGlmICggc3VwcG9ydC5odG1sNUNsb25lICYmICggc3JjLmlubmVySFRNTCAmJiAhalF1ZXJ5LnRyaW0oIGRlc3QuaW5uZXJIVE1MICkgKSApIHtcblx0XHRcdGRlc3QuaW5uZXJIVE1MID0gc3JjLmlubmVySFRNTDtcblx0XHR9XG5cblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkge1xuXG5cdFx0Ly8gSUU2LTggZmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveFxuXHRcdC8vIG9yIHJhZGlvIGJ1dHRvbi4gV29yc2UsIElFNi03IGZhaWwgdG8gZ2l2ZSB0aGUgY2xvbmVkIGVsZW1lbnRcblx0XHQvLyBhIGNoZWNrZWQgYXBwZWFyYW5jZSBpZiB0aGUgZGVmYXVsdENoZWNrZWQgdmFsdWUgaXNuJ3QgYWxzbyBzZXRcblxuXHRcdGRlc3QuZGVmYXVsdENoZWNrZWQgPSBkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblxuXHRcdC8vIElFNi03IGdldCBjb25mdXNlZCBhbmQgZW5kIHVwIHNldHRpbmcgdGhlIHZhbHVlIG9mIGEgY2xvbmVkXG5cdFx0Ly8gY2hlY2tib3gvcmFkaW8gYnV0dG9uIHRvIGFuIGVtcHR5IHN0cmluZyBpbnN0ZWFkIG9mIFwib25cIlxuXHRcdGlmICggZGVzdC52YWx1ZSAhPT0gc3JjLnZhbHVlICkge1xuXHRcdFx0ZGVzdC52YWx1ZSA9IHNyYy52YWx1ZTtcblx0XHR9XG5cblx0Ly8gSUU2LTggZmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWRcblx0Ly8gc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwib3B0aW9uXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0U2VsZWN0ZWQgPSBkZXN0LnNlbGVjdGVkID0gc3JjLmRlZmF1bHRTZWxlY3RlZDtcblxuXHQvLyBJRTYtOCBmYWlscyB0byBzZXQgdGhlIGRlZmF1bHRWYWx1ZSB0byB0aGUgY29ycmVjdCB2YWx1ZSB3aGVuXG5cdC8vIGNsb25pbmcgb3RoZXIgdHlwZXMgb2YgaW5wdXQgZmllbGRzXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcblx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XG5cdH1cbn1cblxuZnVuY3Rpb24gZG9tTWFuaXAoIGNvbGxlY3Rpb24sIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICkge1xuXG5cdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0YXJncyA9IGNvbmNhdC5hcHBseSggW10sIGFyZ3MgKTtcblxuXHR2YXIgZmlyc3QsIG5vZGUsIGhhc1NjcmlwdHMsXG5cdFx0c2NyaXB0cywgZG9jLCBmcmFnbWVudCxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHRpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdGlmICggaXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xuXHRcdFx0XHRhcmdzWyAwIF0gPSB2YWx1ZS5jYWxsKCB0aGlzLCBpbmRleCwgc2VsZi5odG1sKCkgKTtcblx0XHRcdH1cblx0XHRcdGRvbU1hbmlwKCBzZWxmLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggbCApIHtcblx0XHRmcmFnbWVudCA9IGJ1aWxkRnJhZ21lbnQoIGFyZ3MsIGNvbGxlY3Rpb25bIDAgXS5vd25lckRvY3VtZW50LCBmYWxzZSwgY29sbGVjdGlvbiwgaWdub3JlZCApO1xuXHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdGlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7XG5cdFx0XHRmcmFnbWVudCA9IGZpcnN0O1xuXHRcdH1cblxuXHRcdC8vIFJlcXVpcmUgZWl0aGVyIG5ldyBjb250ZW50IG9yIGFuIGludGVyZXN0IGluIGlnbm9yZWQgZWxlbWVudHMgdG8gaW52b2tlIHRoZSBjYWxsYmFja1xuXHRcdGlmICggZmlyc3QgfHwgaWdub3JlZCApIHtcblx0XHRcdHNjcmlwdHMgPSBqUXVlcnkubWFwKCBnZXRBbGwoIGZyYWdtZW50LCBcInNjcmlwdFwiICksIGRpc2FibGVTY3JpcHQgKTtcblx0XHRcdGhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDtcblxuXHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbVxuXHRcdFx0Ly8gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXG5cdFx0XHQvLyBiZWluZyBlbXB0aWVkIGluY29ycmVjdGx5IGluIGNlcnRhaW4gc2l0dWF0aW9ucyAoIzgwNzApLlxuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XG5cblx0XHRcdFx0aWYgKCBpICE9PSBpTm9DbG9uZSApIHtcblx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHQvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMSwgUGhhbnRvbUpTPDJcblx0XHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjYWxsYmFjay5jYWxsKCBjb2xsZWN0aW9uWyBpIF0sIG5vZGUsIGkgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xuXG5cdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcblx0XHRcdFx0alF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApO1xuXG5cdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcblx0XHRcdFx0XHRcdCFqUXVlcnkuX2RhdGEoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiZcblx0XHRcdFx0XHRcdGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbChcblx0XHRcdFx0XHRcdFx0XHQoIG5vZGUudGV4dCB8fCBub2RlLnRleHRDb250ZW50IHx8IG5vZGUuaW5uZXJIVE1MIHx8IFwiXCIgKVxuXHRcdFx0XHRcdFx0XHRcdFx0LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApXG5cdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZpeCAjMTE4MDk6IEF2b2lkIGxlYWtpbmcgbWVtb3J5XG5cdFx0XHRmcmFnbWVudCA9IGZpcnN0ID0gbnVsbDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdGVsZW1zID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IGVsZW1zWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cblx0XHRpZiAoICFrZWVwRGF0YSAmJiBub2RlLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBub2RlICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG5vZGUucGFyZW50Tm9kZSApIHtcblx0XHRcdGlmICgga2VlcERhdGEgJiYgalF1ZXJ5LmNvbnRhaW5zKCBub2RlLm93bmVyRG9jdW1lbnQsIG5vZGUgKSApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdH1cblx0XHRcdG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggbm9kZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHJldHVybiBodG1sLnJlcGxhY2UoIHJ4aHRtbFRhZywgXCI8JDE+PC8kMj5cIiApO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0dmFyIGRlc3RFbGVtZW50cywgbm9kZSwgY2xvbmUsIGksIHNyY0VsZW1lbnRzLFxuXHRcdFx0aW5QYWdlID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdGlmICggc3VwcG9ydC5odG1sNUNsb25lIHx8IGpRdWVyeS5pc1hNTERvYyggZWxlbSApIHx8XG5cdFx0XHQhcm5vc2hpbWNhY2hlLnRlc3QoIFwiPFwiICsgZWxlbS5ub2RlTmFtZSArIFwiPlwiICkgKSB7XG5cblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKTtcblxuXHRcdC8vIElFPD04IGRvZXMgbm90IHByb3Blcmx5IGNsb25lIGRldGFjaGVkLCB1bmtub3duIGVsZW1lbnQgbm9kZXNcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZnJhZ21lbnREaXYuaW5uZXJIVE1MID0gZWxlbS5vdXRlckhUTUw7XG5cdFx0XHRmcmFnbWVudERpdi5yZW1vdmVDaGlsZCggY2xvbmUgPSBmcmFnbWVudERpdi5maXJzdENoaWxkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAoICFzdXBwb3J0Lm5vQ2xvbmVFdmVudCB8fCAhc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCApICYmXG5cdFx0XHRcdCggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cblx0XHRcdC8vIEZpeCBhbGwgSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRcdGZvciAoIGkgPSAwOyAoIG5vZGUgPSBzcmNFbGVtZW50c1sgaSBdICkgIT0gbnVsbDsgKytpICkge1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGF0IHRoZSBkZXN0aW5hdGlvbiBub2RlIGlzIG5vdCBudWxsOyBGaXhlcyAjOTU4N1xuXHRcdFx0XHRpZiAoIGRlc3RFbGVtZW50c1sgaSBdICkge1xuXHRcdFx0XHRcdGZpeENsb25lTm9kZUlzc3Vlcyggbm9kZSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmVcblx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0XHRzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApO1xuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwOyAoIG5vZGUgPSBzcmNFbGVtZW50c1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBub2RlLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSwgXCJzY3JpcHRcIiApO1xuXHRcdGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcblx0XHR9XG5cblx0XHRkZXN0RWxlbWVudHMgPSBzcmNFbGVtZW50cyA9IG5vZGUgPSBudWxsO1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zLCAvKiBpbnRlcm5hbCAqLyBmb3JjZUFjY2VwdERhdGEgKSB7XG5cdFx0dmFyIGVsZW0sIHR5cGUsIGlkLCBkYXRhLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRpbnRlcm5hbEtleSA9IGpRdWVyeS5leHBhbmRvLFxuXHRcdFx0Y2FjaGUgPSBqUXVlcnkuY2FjaGUsXG5cdFx0XHRhdHRyaWJ1dGVzID0gc3VwcG9ydC5hdHRyaWJ1dGVzLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBmb3JjZUFjY2VwdERhdGEgfHwgYWNjZXB0RGF0YSggZWxlbSApICkge1xuXG5cdFx0XHRcdGlkID0gZWxlbVsgaW50ZXJuYWxLZXkgXTtcblx0XHRcdFx0ZGF0YSA9IGlkICYmIGNhY2hlWyBpZCBdO1xuXG5cdFx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBSZW1vdmUgY2FjaGUgb25seSBpZiBpdCB3YXMgbm90IGFscmVhZHkgcmVtb3ZlZCBieSBqUXVlcnkuZXZlbnQucmVtb3ZlXG5cdFx0XHRcdFx0aWYgKCBjYWNoZVsgaWQgXSApIHtcblxuXHRcdFx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBpZCBdO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0XHRcdFx0XHQvLyBJRSBkb2VzIG5vdCBhbGxvdyB1cyB0byBkZWxldGUgZXhwYW5kbyBwcm9wZXJ0aWVzIGZyb20gbm9kZXNcblx0XHRcdFx0XHRcdC8vIElFIGNyZWF0ZXMgZXhwYW5kbyBhdHRyaWJ1dGVzIGFsb25nIHdpdGggdGhlIHByb3BlcnR5XG5cdFx0XHRcdFx0XHQvLyBJRSBkb2VzIG5vdCBoYXZlIGEgcmVtb3ZlQXR0cmlidXRlIGZ1bmN0aW9uIG9uIERvY3VtZW50IG5vZGVzXG5cdFx0XHRcdFx0XHRpZiAoICFhdHRyaWJ1dGVzICYmIHR5cGVvZiBlbGVtLnJlbW92ZUF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIGludGVybmFsS2V5ICk7XG5cblx0XHRcdFx0XHRcdC8vIFdlYmtpdCAmIEJsaW5rIHBlcmZvcm1hbmNlIHN1ZmZlcnMgd2hlbiBkZWxldGluZyBwcm9wZXJ0aWVzXG5cdFx0XHRcdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXG5cdFx0XHRcdFx0XHQvLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRlbGVtWyBpbnRlcm5hbEtleSBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRkZWxldGVkSWRzLnB1c2goIGlkICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHQvLyBLZWVwIGRvbU1hbmlwIGV4cG9zZWQgdW50aWwgMy4wIChnaC0yMjI1KVxuXHRkb21NYW5pcDogZG9tTWFuaXAsXG5cblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciApO1xuXHR9LFxuXG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKFxuXHRcdFx0XHRcdCggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkuY3JlYXRlVGV4dE5vZGUoIHZhbHVlIClcblx0XHRcdFx0KTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdGFwcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHByZXBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGJlZm9yZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSB0aGlzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcblx0XHRcdHdoaWxlICggZWxlbS5maXJzdENoaWxkICkge1xuXHRcdFx0XHRlbGVtLnJlbW92ZUNoaWxkKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHNlbGVjdCwgZW5zdXJlIHRoYXQgaXQgZGlzcGxheXMgZW1wdHkgKCMxMjMzNilcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHRcdGlmICggZWxlbS5vcHRpb25zICYmIGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJzZWxlY3RcIiApICkge1xuXHRcdFx0XHRlbGVtLm9wdGlvbnMubGVuZ3RoID0gMDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMSA/XG5cdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwucmVwbGFjZSggcmlubGluZWpRdWVyeSwgXCJcIiApIDpcblx0XHRcdFx0XHR1bmRlZmluZWQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxuXHRcdFx0XHQoIHN1cHBvcnQuaHRtbFNlcmlhbGl6ZSB8fCAhcm5vc2hpbWNhY2hlLnRlc3QoIHZhbHVlICkgICkgJiZcblx0XHRcdFx0KCBzdXBwb3J0LmxlYWRpbmdXaGl0ZXNwYWNlIHx8ICFybGVhZGluZ1doaXRlc3BhY2UudGVzdCggdmFsdWUgKSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF0gfHwge307XG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRpID0gMCxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIE1vZGVybiBicm93c2VycyBjYW4gYXBwbHkgalF1ZXJ5IGNvbGxlY3Rpb25zIGFzIGFycmF5cywgYnV0IG9sZElFIG5lZWRzIGEgLmdldCgpXG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0gKTtcblxuXG52YXIgaWZyYW1lLFxuXHRlbGVtZGlzcGxheSA9IHtcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3hcblx0XHQvLyBXZSBoYXZlIHRvIHByZS1kZWZpbmUgdGhlc2UgdmFsdWVzIGZvciBGRiAoIzEwMjI3KVxuXHRcdEhUTUw6IFwiYmxvY2tcIixcblx0XHRCT0RZOiBcImJsb2NrXCJcblx0fTtcblxuLyoqXG4gKiBSZXRyaWV2ZSB0aGUgYWN0dWFsIGRpc3BsYXkgb2YgYSBlbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBub2RlTmFtZSBvZiB0aGUgZWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IGRvYyBEb2N1bWVudCBvYmplY3RcbiAqL1xuXG4vLyBDYWxsZWQgb25seSBmcm9tIHdpdGhpbiBkZWZhdWx0RGlzcGxheVxuZnVuY3Rpb24gYWN0dWFsRGlzcGxheSggbmFtZSwgZG9jICkge1xuXHR2YXIgZWxlbSA9IGpRdWVyeSggZG9jLmNyZWF0ZUVsZW1lbnQoIG5hbWUgKSApLmFwcGVuZFRvKCBkb2MuYm9keSApLFxuXG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW1bIDAgXSwgXCJkaXNwbGF5XCIgKTtcblxuXHQvLyBXZSBkb24ndCBoYXZlIGFueSBkYXRhIHN0b3JlZCBvbiB0aGUgZWxlbWVudCxcblx0Ly8gc28gdXNlIFwiZGV0YWNoXCIgbWV0aG9kIGFzIGZhc3Qgd2F5IHRvIGdldCByaWQgb2YgdGhlIGVsZW1lbnRcblx0ZWxlbS5kZXRhY2goKTtcblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuLyoqXG4gKiBUcnkgdG8gZGV0ZXJtaW5lIHRoZSBkZWZhdWx0IGRpc3BsYXkgdmFsdWUgb2YgYW4gZWxlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IG5vZGVOYW1lXG4gKi9cbmZ1bmN0aW9uIGRlZmF1bHREaXNwbGF5KCBub2RlTmFtZSApIHtcblx0dmFyIGRvYyA9IGRvY3VtZW50LFxuXHRcdGRpc3BsYXkgPSBlbGVtZGlzcGxheVsgbm9kZU5hbWUgXTtcblxuXHRpZiAoICFkaXNwbGF5ICkge1xuXHRcdGRpc3BsYXkgPSBhY3R1YWxEaXNwbGF5KCBub2RlTmFtZSwgZG9jICk7XG5cblx0XHQvLyBJZiB0aGUgc2ltcGxlIHdheSBmYWlscywgcmVhZCBmcm9tIGluc2lkZSBhbiBpZnJhbWVcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiIHx8ICFkaXNwbGF5ICkge1xuXG5cdFx0XHQvLyBVc2UgdGhlIGFscmVhZHktY3JlYXRlZCBpZnJhbWUgaWYgcG9zc2libGVcblx0XHRcdGlmcmFtZSA9ICggaWZyYW1lIHx8IGpRdWVyeSggXCI8aWZyYW1lIGZyYW1lYm9yZGVyPScwJyB3aWR0aD0nMCcgaGVpZ2h0PScwJy8+XCIgKSApXG5cdFx0XHRcdC5hcHBlbmRUbyggZG9jLmRvY3VtZW50RWxlbWVudCApO1xuXG5cdFx0XHQvLyBBbHdheXMgd3JpdGUgYSBuZXcgSFRNTCBza2VsZXRvbiBzbyBXZWJraXQgYW5kIEZpcmVmb3ggZG9uJ3QgY2hva2Ugb24gcmV1c2Vcblx0XHRcdGRvYyA9ICggaWZyYW1lWyAwIF0uY29udGVudFdpbmRvdyB8fCBpZnJhbWVbIDAgXS5jb250ZW50RG9jdW1lbnQgKS5kb2N1bWVudDtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUVcblx0XHRcdGRvYy53cml0ZSgpO1xuXHRcdFx0ZG9jLmNsb3NlKCk7XG5cblx0XHRcdGRpc3BsYXkgPSBhY3R1YWxEaXNwbGF5KCBub2RlTmFtZSwgZG9jICk7XG5cdFx0XHRpZnJhbWUuZGV0YWNoKCk7XG5cdFx0fVxuXG5cdFx0Ly8gU3RvcmUgdGhlIGNvcnJlY3QgZGVmYXVsdCBkaXNwbGF5XG5cdFx0ZWxlbWRpc3BsYXlbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuXHR9XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG52YXIgcm1hcmdpbiA9ICggL15tYXJnaW4vICk7XG5cbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5hcHBseSggZWxlbSwgYXJncyB8fCBbXSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIHBpeGVsUG9zaXRpb25WYWwsIHBpeGVsTWFyZ2luUmlnaHRWYWwsIGJveFNpemluZ1JlbGlhYmxlVmFsLFxuXHRcdHJlbGlhYmxlSGlkZGVuT2Zmc2V0c1ZhbCwgcmVsaWFibGVNYXJnaW5SaWdodFZhbCwgcmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcblx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGRpdi5zdHlsZS5jc3NUZXh0ID0gXCJmbG9hdDpsZWZ0O29wYWNpdHk6LjVcIjtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdC8vIE1ha2Ugc3VyZSB0aGF0IGVsZW1lbnQgb3BhY2l0eSBleGlzdHMgKGFzIG9wcG9zZWQgdG8gZmlsdGVyKVxuXHRzdXBwb3J0Lm9wYWNpdHkgPSBkaXYuc3R5bGUub3BhY2l0eSA9PT0gXCIwLjVcIjtcblxuXHQvLyBWZXJpZnkgc3R5bGUgZmxvYXQgZXhpc3RlbmNlXG5cdC8vIChJRSB1c2VzIHN0eWxlRmxvYXQgaW5zdGVhZCBvZiBjc3NGbG9hdClcblx0c3VwcG9ydC5jc3NGbG9hdCA9ICEhZGl2LnN0eWxlLmNzc0Zsb2F0O1xuXG5cdGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiY29udGVudC1ib3hcIjtcblx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcblx0c3VwcG9ydC5jbGVhckNsb25lU3R5bGUgPSBkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPT09IFwiY29udGVudC1ib3hcIjtcblxuXHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJib3JkZXI6MDt3aWR0aDo4cHg7aGVpZ2h0OjA7dG9wOjA7bGVmdDotOTk5OXB4O1wiICtcblx0XHRcInBhZGRpbmc6MDttYXJnaW4tdG9wOjFweDtwb3NpdGlvbjphYnNvbHV0ZVwiO1xuXHRkaXYuaW5uZXJIVE1MID0gXCJcIjtcblx0Y29udGFpbmVyLmFwcGVuZENoaWxkKCBkaXYgKTtcblxuXHQvLyBTdXBwb3J0OiBGaXJlZm94PDI5LCBBbmRyb2lkIDIuM1xuXHQvLyBWZW5kb3ItcHJlZml4IGJveC1zaXppbmdcblx0c3VwcG9ydC5ib3hTaXppbmcgPSBkaXYuc3R5bGUuYm94U2l6aW5nID09PSBcIlwiIHx8IGRpdi5zdHlsZS5Nb3pCb3hTaXppbmcgPT09IFwiXCIgfHxcblx0XHRkaXYuc3R5bGUuV2Via2l0Qm94U2l6aW5nID09PSBcIlwiO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRyZWxpYWJsZUhpZGRlbk9mZnNldHM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBwaXhlbFBvc2l0aW9uVmFsID09IG51bGwgKSB7XG5cdFx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVIaWRkZW5PZmZzZXRzVmFsO1xuXHRcdH0sXG5cblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGNoZWNraW5nIGZvciBwaXhlbFBvc2l0aW9uVmFsIGhlcmUgaW5zdGVhZCBvZiBib3hTaXppbmdSZWxpYWJsZVZhbFxuXHRcdFx0Ly8gc2luY2UgdGhhdCBjb21wcmVzc2VzIGJldHRlciBhbmQgdGhleSdyZSBjb21wdXRlZCB0b2dldGhlciBhbnl3YXkuXG5cdFx0XHRpZiAoIHBpeGVsUG9zaXRpb25WYWwgPT0gbnVsbCApIHtcblx0XHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBib3hTaXppbmdSZWxpYWJsZVZhbDtcblx0XHR9LFxuXG5cdFx0cGl4ZWxNYXJnaW5SaWdodDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wLTQuM1xuXHRcdFx0aWYgKCBwaXhlbFBvc2l0aW9uVmFsID09IG51bGwgKSB7XG5cdFx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcGl4ZWxNYXJnaW5SaWdodFZhbDtcblx0XHR9LFxuXG5cdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHBpeGVsUG9zaXRpb25WYWwgPT0gbnVsbCApIHtcblx0XHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cblx0XHRyZWxpYWJsZU1hcmdpblJpZ2h0OiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjNcblx0XHRcdGlmICggcGl4ZWxQb3NpdGlvblZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlbGlhYmxlTWFyZ2luUmlnaHRWYWw7XG5cdFx0fSxcblxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCBvbmx5LCBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBGaXJlZm94IDw9MyAtIDM3XG5cdFx0XHRpZiAoIHBpeGVsUG9zaXRpb25WYWwgPT0gbnVsbCApIHtcblx0XHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpbkxlZnRWYWw7XG5cdFx0fVxuXHR9ICk7XG5cblx0ZnVuY3Rpb24gY29tcHV0ZVN0eWxlVGVzdHMoKSB7XG5cdFx0dmFyIGNvbnRlbnRzLCBkaXZTdHlsZSxcblx0XHRcdGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXHRcdC8vIFNldHVwXG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjNcblx0XHRcdC8vIFZlbmRvci1wcmVmaXggYm94LXNpemluZ1xuXHRcdFx0XCItd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7XCIgK1xuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO1wiICtcblx0XHRcdFwibWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDtcIiArXG5cdFx0XHRcInRvcDoxJTt3aWR0aDo1MCVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBBc3N1bWUgcmVhc29uYWJsZSB2YWx1ZXMgaW4gdGhlIGFic2VuY2Ugb2YgZ2V0Q29tcHV0ZWRTdHlsZVxuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBib3hTaXppbmdSZWxpYWJsZVZhbCA9IHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IGZhbHNlO1xuXHRcdHBpeGVsTWFyZ2luUmlnaHRWYWwgPSByZWxpYWJsZU1hcmdpblJpZ2h0VmFsID0gdHJ1ZTtcblxuXHRcdC8vIENoZWNrIGZvciBnZXRDb21wdXRlZFN0eWxlIHNvIHRoYXQgdGhpcyBjb2RlIGlzIG5vdCBydW4gaW4gSUU8OS5cblx0XHRpZiAoIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlICkge1xuXHRcdFx0ZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2ICk7XG5cdFx0XHRwaXhlbFBvc2l0aW9uVmFsID0gKCBkaXZTdHlsZSB8fCB7fSApLnRvcCAhPT0gXCIxJVwiO1xuXHRcdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsID0gKCBkaXZTdHlsZSB8fCB7fSApLm1hcmdpbkxlZnQgPT09IFwiMnB4XCI7XG5cdFx0XHRib3hTaXppbmdSZWxpYWJsZVZhbCA9ICggZGl2U3R5bGUgfHwgeyB3aWR0aDogXCI0cHhcIiB9ICkud2lkdGggPT09IFwiNHB4XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0XHRcdC8vIFNvbWUgc3R5bGVzIGNvbWUgYmFjayB3aXRoIHBlcmNlbnRhZ2UgdmFsdWVzLCBldmVuIHRob3VnaCB0aGV5IHNob3VsZG4ndFxuXHRcdFx0ZGl2LnN0eWxlLm1hcmdpblJpZ2h0ID0gXCI1MCVcIjtcblx0XHRcdHBpeGVsTWFyZ2luUmlnaHRWYWwgPSAoIGRpdlN0eWxlIHx8IHsgbWFyZ2luUmlnaHQ6IFwiNHB4XCIgfSApLm1hcmdpblJpZ2h0ID09PSBcIjRweFwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuMyBvbmx5XG5cdFx0XHQvLyBEaXYgd2l0aCBleHBsaWNpdCB3aWR0aCBhbmQgbm8gbWFyZ2luLXJpZ2h0IGluY29ycmVjdGx5XG5cdFx0XHQvLyBnZXRzIGNvbXB1dGVkIG1hcmdpbi1yaWdodCBiYXNlZCBvbiB3aWR0aCBvZiBjb250YWluZXIgKCMzMzMzKVxuXHRcdFx0Ly8gV2ViS2l0IEJ1ZyAxMzM0MyAtIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyB3cm9uZyB2YWx1ZSBmb3IgbWFyZ2luLXJpZ2h0XG5cdFx0XHRjb250ZW50cyA9IGRpdi5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdC8vIFJlc2V0IENTUzogYm94LXNpemluZzsgZGlzcGxheTsgbWFyZ2luOyBib3JkZXI7IHBhZGRpbmdcblx0XHRcdGNvbnRlbnRzLnN0eWxlLmNzc1RleHQgPSBkaXYuc3R5bGUuY3NzVGV4dCA9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjNcblx0XHRcdFx0Ly8gVmVuZG9yLXByZWZpeCBib3gtc2l6aW5nXG5cdFx0XHRcdFwiLXdlYmtpdC1ib3gtc2l6aW5nOmNvbnRlbnQtYm94Oy1tb3otYm94LXNpemluZzpjb250ZW50LWJveDtcIiArXG5cdFx0XHRcdFwiYm94LXNpemluZzpjb250ZW50LWJveDtkaXNwbGF5OmJsb2NrO21hcmdpbjowO2JvcmRlcjowO3BhZGRpbmc6MFwiO1xuXHRcdFx0Y29udGVudHMuc3R5bGUubWFyZ2luUmlnaHQgPSBjb250ZW50cy5zdHlsZS53aWR0aCA9IFwiMFwiO1xuXHRcdFx0ZGl2LnN0eWxlLndpZHRoID0gXCIxcHhcIjtcblxuXHRcdFx0cmVsaWFibGVNYXJnaW5SaWdodFZhbCA9XG5cdFx0XHRcdCFwYXJzZUZsb2F0KCAoIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBjb250ZW50cyApIHx8IHt9ICkubWFyZ2luUmlnaHQgKTtcblxuXHRcdFx0ZGl2LnJlbW92ZUNoaWxkKCBjb250ZW50cyApO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFNi04XG5cdFx0Ly8gRmlyc3QgY2hlY2sgdGhhdCBnZXRDbGllbnRSZWN0cyB3b3JrcyBhcyBleHBlY3RlZFxuXHRcdC8vIENoZWNrIGlmIHRhYmxlIGNlbGxzIHN0aWxsIGhhdmUgb2Zmc2V0V2lkdGgvSGVpZ2h0IHdoZW4gdGhleSBhcmUgc2V0XG5cdFx0Ly8gdG8gZGlzcGxheTpub25lIGFuZCB0aGVyZSBhcmUgc3RpbGwgb3RoZXIgdmlzaWJsZSB0YWJsZSBjZWxscyBpbiBhXG5cdFx0Ly8gdGFibGUgcm93OyBpZiBzbywgb2Zmc2V0V2lkdGgvSGVpZ2h0IGFyZSBub3QgcmVsaWFibGUgZm9yIHVzZSB3aGVuXG5cdFx0Ly8gZGV0ZXJtaW5pbmcgaWYgYW4gZWxlbWVudCBoYXMgYmVlbiBoaWRkZW4gZGlyZWN0bHkgdXNpbmdcblx0XHQvLyBkaXNwbGF5Om5vbmUgKGl0IGlzIHN0aWxsIHNhZmUgdG8gdXNlIG9mZnNldHMgaWYgYSBwYXJlbnQgZWxlbWVudCBpc1xuXHRcdC8vIGhpZGRlbjsgZG9uIHNhZmV0eSBnb2dnbGVzIGFuZCBzZWUgYnVnICM0NTEyIGZvciBtb3JlIGluZm9ybWF0aW9uKS5cblx0XHRkaXYuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuXHRcdHJlbGlhYmxlSGlkZGVuT2Zmc2V0c1ZhbCA9IGRpdi5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCA9PT0gMDtcblx0XHRpZiAoIHJlbGlhYmxlSGlkZGVuT2Zmc2V0c1ZhbCApIHtcblx0XHRcdGRpdi5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdGRpdi5pbm5lckhUTUwgPSBcIjx0YWJsZT48dHI+PHRkPjwvdGQ+PHRkPnQ8L3RkPjwvdHI+PC90YWJsZT5cIjtcblx0XHRcdGRpdi5jaGlsZE5vZGVzWyAwIF0uc3R5bGUuYm9yZGVyQ29sbGFwc2UgPSBcInNlcGFyYXRlXCI7XG5cdFx0XHRjb250ZW50cyA9IGRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJ0ZFwiICk7XG5cdFx0XHRjb250ZW50c1sgMCBdLnN0eWxlLmNzc1RleHQgPSBcIm1hcmdpbjowO2JvcmRlcjowO3BhZGRpbmc6MDtkaXNwbGF5Om5vbmVcIjtcblx0XHRcdHJlbGlhYmxlSGlkZGVuT2Zmc2V0c1ZhbCA9IGNvbnRlbnRzWyAwIF0ub2Zmc2V0SGVpZ2h0ID09PSAwO1xuXHRcdFx0aWYgKCByZWxpYWJsZUhpZGRlbk9mZnNldHNWYWwgKSB7XG5cdFx0XHRcdGNvbnRlbnRzWyAwIF0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHRcdGNvbnRlbnRzWyAxIF0uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuXHRcdFx0XHRyZWxpYWJsZUhpZGRlbk9mZnNldHNWYWwgPSBjb250ZW50c1sgMCBdLm9mZnNldEhlaWdodCA9PT0gMDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBUZWFyZG93blxuXHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cdH1cblxufSApKCk7XG5cblxudmFyIGdldFN0eWxlcywgY3VyQ1NTLFxuXHRycG9zaXRpb24gPSAvXih0b3B8cmlnaHR8Ym90dG9tfGxlZnQpJC87XG5cbmlmICggd2luZG93LmdldENvbXB1dGVkU3R5bGUgKSB7XG5cdGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUU8PTExKywgRmlyZWZveDw9MzArICgjMTUwOTgsICMxNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cdH07XG5cblx0Y3VyQ1NTID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHRcdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xuXG5cdFx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBvbmx5IG5lZWRlZCBmb3IgLmNzcygnZmlsdGVyJykgaW4gSUU5LCBzZWUgIzEyNTM3XG5cdFx0cmV0ID0gY29tcHV0ZWQgPyBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXSA6IHVuZGVmaW5lZDtcblxuXHRcdC8vIFN1cHBvcnQ6IE9wZXJhIDEyLjF4IG9ubHlcblx0XHQvLyBGYWxsIGJhY2sgdG8gc3R5bGUgZXZlbiB3aXRob3V0IGNvbXB1dGVkXG5cdFx0Ly8gY29tcHV0ZWQgaXMgdW5kZWZpbmVkIGZvciBlbGVtcyBvbiBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRpZiAoICggcmV0ID09PSBcIlwiIHx8IHJldCA9PT0gdW5kZWZpbmVkICkgJiYgIWpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0XHQvLyBDaHJvbWUgPCAxNyBhbmQgU2FmYXJpIDUuMCB1c2VzIFwiY29tcHV0ZWQgdmFsdWVcIlxuXHRcdFx0Ly8gaW5zdGVhZCBvZiBcInVzZWQgdmFsdWVcIiBmb3IgbWFyZ2luLXJpZ2h0XG5cdFx0XHQvLyBTYWZhcmkgNS4xLjcgKGF0IGxlYXN0KSByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIGEgbGFyZ2VyIHNldCBvZiB2YWx1ZXMsXG5cdFx0XHQvLyBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzXG5cdFx0XHQvLyB0aGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XG5cdFx0XHQvLyBodHRwOi8vZGV2LnczLm9yZy9jc3N3Zy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LnBpeGVsTWFyZ2luUmlnaHQoKSAmJiBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcm1hcmdpbi50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuXHRcdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0XHRtYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoO1xuXG5cdFx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0XHRyZXQgPSBjb21wdXRlZC53aWR0aDtcblxuXHRcdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRcdHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XG5cdFx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogSUVcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldHVybiByZXQgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRyZXQgOlxuXHRcdFx0cmV0ICsgXCJcIjtcblx0fTtcbn0gZWxzZSBpZiAoIGRvY3VtZW50RWxlbWVudC5jdXJyZW50U3R5bGUgKSB7XG5cdGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLmN1cnJlbnRTdHlsZTtcblx0fTtcblxuXHRjdXJDU1MgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdFx0dmFyIGxlZnQsIHJzLCByc0xlZnQsIHJldCxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0cmV0ID0gY29tcHV0ZWQgPyBjb21wdXRlZFsgbmFtZSBdIDogdW5kZWZpbmVkO1xuXG5cdFx0Ly8gQXZvaWQgc2V0dGluZyByZXQgdG8gZW1wdHkgc3RyaW5nIGhlcmVcblx0XHQvLyBzbyB3ZSBkb24ndCBkZWZhdWx0IHRvIGF1dG9cblx0XHRpZiAoIHJldCA9PSBudWxsICYmIHN0eWxlICYmIHN0eWxlWyBuYW1lIF0gKSB7XG5cdFx0XHRyZXQgPSBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIEZyb20gdGhlIGF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcblx0XHQvLyBodHRwOi8vZXJpay5lYWUubmV0L2FyY2hpdmVzLzIwMDcvMDcvMjcvMTguNTQuMTUvI2NvbW1lbnQtMTAyMjkxXG5cblx0XHQvLyBJZiB3ZSdyZSBub3QgZGVhbGluZyB3aXRoIGEgcmVndWxhciBwaXhlbCBudW1iZXJcblx0XHQvLyBidXQgYSBudW1iZXIgdGhhdCBoYXMgYSB3ZWlyZCBlbmRpbmcsIHdlIG5lZWQgdG8gY29udmVydCBpdCB0byBwaXhlbHNcblx0XHQvLyBidXQgbm90IHBvc2l0aW9uIGNzcyBhdHRyaWJ1dGVzLCBhcyB0aG9zZSBhcmVcblx0XHQvLyBwcm9wb3J0aW9uYWwgdG8gdGhlIHBhcmVudCBlbGVtZW50IGluc3RlYWRcblx0XHQvLyBhbmQgd2UgY2FuJ3QgbWVhc3VyZSB0aGUgcGFyZW50IGluc3RlYWQgYmVjYXVzZSBpdFxuXHRcdC8vIG1pZ2h0IHRyaWdnZXIgYSBcInN0YWNraW5nIGRvbGxzXCIgcHJvYmxlbVxuXHRcdGlmICggcm51bW5vbnB4LnRlc3QoIHJldCApICYmICFycG9zaXRpb24udGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHRsZWZ0ID0gc3R5bGUubGVmdDtcblx0XHRcdHJzID0gZWxlbS5ydW50aW1lU3R5bGU7XG5cdFx0XHRyc0xlZnQgPSBycyAmJiBycy5sZWZ0O1xuXG5cdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG5cdFx0XHRpZiAoIHJzTGVmdCApIHtcblx0XHRcdFx0cnMubGVmdCA9IGVsZW0uY3VycmVudFN0eWxlLmxlZnQ7XG5cdFx0XHR9XG5cdFx0XHRzdHlsZS5sZWZ0ID0gbmFtZSA9PT0gXCJmb250U2l6ZVwiID8gXCIxZW1cIiA6IHJldDtcblx0XHRcdHJldCA9IHN0eWxlLnBpeGVsTGVmdCArIFwicHhcIjtcblxuXHRcdFx0Ly8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xuXHRcdFx0c3R5bGUubGVmdCA9IGxlZnQ7XG5cdFx0XHRpZiAoIHJzTGVmdCApIHtcblx0XHRcdFx0cnMubGVmdCA9IHJzTGVmdDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRVxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0dXJuIHJldCA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHJldCA6XG5cdFx0XHRyZXQgKyBcIlwiIHx8IFwiYXV0b1wiO1xuXHR9O1xufVxuXG5cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXJcblxuXHRcdHJhbHBoYSA9IC9hbHBoYVxcKFteKV0qXFwpL2ksXG5cdHJvcGFjaXR5ID0gL29wYWNpdHlcXHMqPVxccyooW14pXSopL2ksXG5cblx0Ly8gc3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZSBleGNlcHRcblx0Ly8gXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gc2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOlxuXHQvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0cm51bXNwbGl0ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSguKikkXCIsIFwiaVwiICksXG5cblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH0sXG5cblx0Y3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiT1wiLCBcIk1velwiLCBcIm1zXCIgXSxcblx0ZW1wdHlTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKS5zdHlsZTtcblxuXG4vLyByZXR1cm4gYSBjc3MgcHJvcGVydHkgbWFwcGVkIHRvIGEgcG90ZW50aWFsbHkgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5XG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcblxuXHQvLyBzaG9ydGN1dCBmb3IgbmFtZXMgdGhhdCBhcmUgbm90IHZlbmRvciBwcmVmaXhlZFxuXHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXG5cdC8vIGNoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lLmNoYXJBdCggMCApLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHR2YXIgZGlzcGxheSwgZWxlbSwgaGlkZGVuLFxuXHRcdHZhbHVlcyA9IFtdLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdHZhbHVlc1sgaW5kZXggXSA9IGpRdWVyeS5fZGF0YSggZWxlbSwgXCJvbGRkaXNwbGF5XCIgKTtcblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblxuXHRcdFx0Ly8gUmVzZXQgdGhlIGlubGluZSBkaXNwbGF5IG9mIHRoaXMgZWxlbWVudCB0byBsZWFybiBpZiBpdCBpc1xuXHRcdFx0Ly8gYmVpbmcgaGlkZGVuIGJ5IGNhc2NhZGVkIHJ1bGVzIG9yIG5vdFxuXHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICYmIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZWxlbWVudHMgd2hpY2ggaGF2ZSBiZWVuIG92ZXJyaWRkZW4gd2l0aCBkaXNwbGF5OiBub25lXG5cdFx0XHQvLyBpbiBhIHN0eWxlc2hlZXQgdG8gd2hhdGV2ZXIgdGhlIGRlZmF1bHQgYnJvd3NlciBzdHlsZSBpc1xuXHRcdFx0Ly8gZm9yIHN1Y2ggYW4gZWxlbWVudFxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW4oIGVsZW0gKSApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID1cblx0XHRcdFx0XHRqUXVlcnkuX2RhdGEoIGVsZW0sIFwib2xkZGlzcGxheVwiLCBkZWZhdWx0RGlzcGxheSggZWxlbS5ub2RlTmFtZSApICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGhpZGRlbiA9IGlzSGlkZGVuKCBlbGVtICk7XG5cblx0XHRcdGlmICggZGlzcGxheSAmJiBkaXNwbGF5ICE9PSBcIm5vbmVcIiB8fCAhaGlkZGVuICkge1xuXHRcdFx0XHRqUXVlcnkuX2RhdGEoXG5cdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRcIm9sZGRpc3BsYXlcIixcblx0XHRcdFx0XHRoaWRkZW4gPyBkaXNwbGF5IDogalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiBtb3N0IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wXG5cdC8vIHRvIGF2b2lkIHRoZSBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblx0XHRpZiAoICFzaG93IHx8IGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHwgZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gc2hvdyA/IHZhbHVlc1sgaW5kZXggXSB8fCBcIlwiIDogXCJub25lXCI7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG5mdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xuXHR2YXIgbWF0Y2hlcyA9IHJudW1zcGxpdC5leGVjKCB2YWx1ZSApO1xuXHRyZXR1cm4gbWF0Y2hlcyA/XG5cblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAxIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAyIF0gfHwgXCJweFwiICkgOlxuXHRcdHZhbHVlO1xufVxuXG5mdW5jdGlvbiBhdWdtZW50V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEsIGlzQm9yZGVyQm94LCBzdHlsZXMgKSB7XG5cdHZhciBpID0gZXh0cmEgPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSA/XG5cblx0XHQvLyBJZiB3ZSBhbHJlYWR5IGhhdmUgdGhlIHJpZ2h0IG1lYXN1cmVtZW50LCBhdm9pZCBhdWdtZW50YXRpb25cblx0XHQ0IDpcblxuXHRcdC8vIE90aGVyd2lzZSBpbml0aWFsaXplIGZvciBob3Jpem9udGFsIG9yIHZlcnRpY2FsIHByb3BlcnRpZXNcblx0XHRuYW1lID09PSBcIndpZHRoXCIgPyAxIDogMCxcblxuXHRcdHZhbCA9IDA7XG5cblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xuXG5cdFx0Ly8gYm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luLCBzbyBhZGQgaXQgaWYgd2Ugd2FudCBpdFxuXHRcdGlmICggZXh0cmEgPT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgZXh0cmEgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0JvcmRlckJveCApIHtcblxuXHRcdFx0Ly8gYm9yZGVyLWJveCBpbmNsdWRlcyBwYWRkaW5nLCBzbyByZW1vdmUgaXQgaWYgd2Ugd2FudCBjb250ZW50XG5cdFx0XHRpZiAoIGV4dHJhID09PSBcImNvbnRlbnRcIiApIHtcblx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBhdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBib3JkZXIgbm9yIG1hcmdpbiwgc28gcmVtb3ZlIGJvcmRlclxuXHRcdFx0aWYgKCBleHRyYSAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gYXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCwgc28gYWRkIHBhZGRpbmdcblx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gYXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCBub3IgcGFkZGluZywgc28gYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBleHRyYSAhPT0gXCJwYWRkaW5nXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB2YWw7XG59XG5cbmZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICkge1xuXG5cdC8vIFN0YXJ0IHdpdGggb2Zmc2V0IHByb3BlcnR5LCB3aGljaCBpcyBlcXVpdmFsZW50IHRvIHRoZSBib3JkZXItYm94IHZhbHVlXG5cdHZhciB2YWx1ZUlzQm9yZGVyQm94ID0gdHJ1ZSxcblx0XHR2YWwgPSBuYW1lID09PSBcIndpZHRoXCIgPyBlbGVtLm9mZnNldFdpZHRoIDogZWxlbS5vZmZzZXRIZWlnaHQsXG5cdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cdFx0aXNCb3JkZXJCb3ggPSBzdXBwb3J0LmJveFNpemluZyAmJlxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIjtcblxuXHQvLyBzb21lIG5vbi1odG1sIGVsZW1lbnRzIHJldHVybiB1bmRlZmluZWQgZm9yIG9mZnNldFdpZHRoLCBzbyBjaGVjayBmb3IgbnVsbC91bmRlZmluZWRcblx0Ly8gc3ZnIC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjQ5Mjg1XG5cdC8vIE1hdGhNTCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTQ5MTY2OFxuXHRpZiAoIHZhbCA8PSAwIHx8IHZhbCA9PSBudWxsICkge1xuXG5cdFx0Ly8gRmFsbCBiYWNrIHRvIGNvbXB1dGVkIHRoZW4gdW5jb21wdXRlZCBjc3MgaWYgbmVjZXNzYXJ5XG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHRpZiAoIHZhbCA8IDAgfHwgdmFsID09IG51bGwgKSB7XG5cdFx0XHR2YWwgPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gQ29tcHV0ZWQgdW5pdCBpcyBub3QgcGl4ZWxzLiBTdG9wIGhlcmUgYW5kIHJldHVybi5cblx0XHRpZiAoIHJudW1ub25weC50ZXN0KCB2YWwgKSApIHtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXG5cdFx0Ly8gd2UgbmVlZCB0aGUgY2hlY2sgZm9yIHN0eWxlIGluIGNhc2UgYSBicm93c2VyIHdoaWNoIHJldHVybnMgdW5yZWxpYWJsZSB2YWx1ZXNcblx0XHQvLyBmb3IgZ2V0Q29tcHV0ZWRTdHlsZSBzaWxlbnRseSBmYWxscyBiYWNrIHRvIHRoZSByZWxpYWJsZSBlbGVtLnN0eWxlXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94ICYmXG5cdFx0XHQoIHN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCB2YWwgPT09IGVsZW0uc3R5bGVbIG5hbWUgXSApO1xuXG5cdFx0Ly8gTm9ybWFsaXplIFwiXCIsIGF1dG8sIGFuZCBwcmVwYXJlIGZvciBleHRyYVxuXHRcdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cdH1cblxuXHQvLyB1c2UgdGhlIGFjdGl2ZSBib3gtc2l6aW5nIG1vZGVsIHRvIGFkZC9zdWJ0cmFjdCBpcnJlbGV2YW50IHN0eWxlc1xuXHRyZXR1cm4gKCB2YWwgK1xuXHRcdGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxuXHRcdFx0ZWxlbSxcblx0XHRcdG5hbWUsXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdFx0c3R5bGVzXG5cdFx0KVxuXHQpICsgXCJweFwiO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxuXHRjc3NIb29rczoge1xuXHRcdG9wYWNpdHk6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcblx0XHRcdFx0XHR2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCBcIm9wYWNpdHlcIiApO1xuXHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xuXHRjc3NOdW1iZXI6IHtcblx0XHRcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IHRydWUsXG5cdFx0XCJjb2x1bW5Db3VudFwiOiB0cnVlLFxuXHRcdFwiZmlsbE9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcImZsZXhHcm93XCI6IHRydWUsXG5cdFx0XCJmbGV4U2hyaW5rXCI6IHRydWUsXG5cdFx0XCJmb250V2VpZ2h0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge1xuXG5cdFx0Ly8gbm9ybWFsaXplIGZsb2F0IGNzcyBwcm9wZXJ0eVxuXHRcdFwiZmxvYXRcIjogc3VwcG9ydC5jc3NGbG9hdCA/IFwiY3NzRmxvYXRcIiA6IFwic3R5bGVGbG9hdFwiXG5cdH0sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdFx0bmFtZSA9IGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSB8fFxuXHRcdFx0KCBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggb3JpZ05hbWUgKSB8fCBvcmlnTmFtZSApO1xuXG5cdFx0Ly8gZ2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvblxuXHRcdC8vIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICgjNzM0NSlcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAoIHJldCA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmIHJldFsgMSBdICkge1xuXHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XG5cblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQuIFNlZTogIzcxMTZcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbHVlICs9IHJldCAmJiByZXRbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZpeGVzICM4OTA4LCBpdCBjYW4gYmUgZG9uZSBtb3JlIGNvcnJlY3RseSBieSBzcGVjaWZpbmcgc2V0dGVycyBpbiBjc3NIb29rcyxcblx0XHRcdC8vIGJ1dCBpdCB3b3VsZCBtZWFuIHRvIGRlZmluZSBlaWdodFxuXHRcdFx0Ly8gKGZvciBldmVyeSBwcm9ibGVtYXRpYyBwcm9wZXJ0eSkgaWRlbnRpY2FsIGZ1bmN0aW9uc1xuXHRcdFx0aWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09IFwiXCIgJiYgbmFtZS5pbmRleE9mKCBcImJhY2tncm91bmRcIiApID09PSAwICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8XG5cdFx0XHRcdCggdmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRVxuXHRcdFx0XHQvLyBTd2FsbG93IGVycm9ycyBmcm9tICdpbnZhbGlkJyBDU1MgdmFsdWVzICgjNTUwOSlcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xuXHRcdHZhciBudW0sIHZhbCwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdG5hbWUgPSBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gfHxcblx0XHRcdCggalF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIG9yaWdOYW1lICkgfHwgb3JpZ05hbWUgKTtcblxuXHRcdC8vIGdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb25cblx0XHQvLyBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vY29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XG5cdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4sIGNvbnZlcnRpbmcgdG8gbnVtYmVyIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBjZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gaG93ZXZlciwgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdCBmcm9tIHRoaXNcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblx0XHRcdFx0XHRlbGVtLm9mZnNldFdpZHRoID09PSAwID9cblx0XHRcdFx0XHRcdHN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTtcblx0XHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSB7XG5cdFx0XHR2YXIgc3R5bGVzID0gZXh0cmEgJiYgZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBleHRyYSA/XG5cdFx0XHRcdGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxuXHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0bmFtZSxcblx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRzdXBwb3J0LmJveFNpemluZyAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHRcdFx0XHRzdHlsZXNcblx0XHRcdFx0KSA6IDBcblx0XHRcdCk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5pZiAoICFzdXBwb3J0Lm9wYWNpdHkgKSB7XG5cdGpRdWVyeS5jc3NIb29rcy5vcGFjaXR5ID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXG5cdFx0XHQvLyBJRSB1c2VzIGZpbHRlcnMgZm9yIG9wYWNpdHlcblx0XHRcdHJldHVybiByb3BhY2l0eS50ZXN0KCAoIGNvbXB1dGVkICYmIGVsZW0uY3VycmVudFN0eWxlID9cblx0XHRcdFx0ZWxlbS5jdXJyZW50U3R5bGUuZmlsdGVyIDpcblx0XHRcdFx0ZWxlbS5zdHlsZS5maWx0ZXIgKSB8fCBcIlwiICkgP1xuXHRcdFx0XHRcdCggMC4wMSAqIHBhcnNlRmxvYXQoIFJlZ0V4cC4kMSApICkgKyBcIlwiIDpcblx0XHRcdFx0XHRjb21wdXRlZCA/IFwiMVwiIDogXCJcIjtcblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdFx0XHRjdXJyZW50U3R5bGUgPSBlbGVtLmN1cnJlbnRTdHlsZSxcblx0XHRcdFx0b3BhY2l0eSA9IGpRdWVyeS5pc051bWVyaWMoIHZhbHVlICkgPyBcImFscGhhKG9wYWNpdHk9XCIgKyB2YWx1ZSAqIDEwMCArIFwiKVwiIDogXCJcIixcblx0XHRcdFx0ZmlsdGVyID0gY3VycmVudFN0eWxlICYmIGN1cnJlbnRTdHlsZS5maWx0ZXIgfHwgc3R5bGUuZmlsdGVyIHx8IFwiXCI7XG5cblx0XHRcdC8vIElFIGhhcyB0cm91YmxlIHdpdGggb3BhY2l0eSBpZiBpdCBkb2VzIG5vdCBoYXZlIGxheW91dFxuXHRcdFx0Ly8gRm9yY2UgaXQgYnkgc2V0dGluZyB0aGUgem9vbSBsZXZlbFxuXHRcdFx0c3R5bGUuem9vbSA9IDE7XG5cblx0XHRcdC8vIGlmIHNldHRpbmcgb3BhY2l0eSB0byAxLCBhbmQgbm8gb3RoZXIgZmlsdGVycyBleGlzdCAtXG5cdFx0XHQvLyBhdHRlbXB0IHRvIHJlbW92ZSBmaWx0ZXIgYXR0cmlidXRlICM2NjUyXG5cdFx0XHQvLyBpZiB2YWx1ZSA9PT0gXCJcIiwgdGhlbiByZW1vdmUgaW5saW5lIG9wYWNpdHkgIzEyNjg1XG5cdFx0XHRpZiAoICggdmFsdWUgPj0gMSB8fCB2YWx1ZSA9PT0gXCJcIiApICYmXG5cdFx0XHRcdFx0alF1ZXJ5LnRyaW0oIGZpbHRlci5yZXBsYWNlKCByYWxwaGEsIFwiXCIgKSApID09PSBcIlwiICYmXG5cdFx0XHRcdFx0c3R5bGUucmVtb3ZlQXR0cmlidXRlICkge1xuXG5cdFx0XHRcdC8vIFNldHRpbmcgc3R5bGUuZmlsdGVyIHRvIG51bGwsIFwiXCIgJiBcIiBcIiBzdGlsbCBsZWF2ZSBcImZpbHRlcjpcIiBpbiB0aGUgY3NzVGV4dFxuXHRcdFx0XHQvLyBpZiBcImZpbHRlcjpcIiBpcyBwcmVzZW50IGF0IGFsbCwgY2xlYXJUeXBlIGlzIGRpc2FibGVkLCB3ZSB3YW50IHRvIGF2b2lkIHRoaXNcblx0XHRcdFx0Ly8gc3R5bGUucmVtb3ZlQXR0cmlidXRlIGlzIElFIE9ubHksIGJ1dCBzbyBhcHBhcmVudGx5IGlzIHRoaXMgY29kZSBwYXRoLi4uXG5cdFx0XHRcdHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSggXCJmaWx0ZXJcIiApO1xuXG5cdFx0XHRcdC8vIGlmIHRoZXJlIGlzIG5vIGZpbHRlciBzdHlsZSBhcHBsaWVkIGluIGEgY3NzIHJ1bGVcblx0XHRcdFx0Ly8gb3IgdW5zZXQgaW5saW5lIG9wYWNpdHksIHdlIGFyZSBkb25lXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwiXCIgfHwgY3VycmVudFN0eWxlICYmICFjdXJyZW50U3R5bGUuZmlsdGVyICkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBvdGhlcndpc2UsIHNldCBuZXcgZmlsdGVyIHZhbHVlc1xuXHRcdFx0c3R5bGUuZmlsdGVyID0gcmFscGhhLnRlc3QoIGZpbHRlciApID9cblx0XHRcdFx0ZmlsdGVyLnJlcGxhY2UoIHJhbHBoYSwgb3BhY2l0eSApIDpcblx0XHRcdFx0ZmlsdGVyICsgXCIgXCIgKyBvcGFjaXR5O1xuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmNzc0hvb2tzLm1hcmdpblJpZ2h0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luUmlnaHQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuIHN3YXAoIGVsZW0sIHsgXCJkaXNwbGF5XCI6IFwiaW5saW5lLWJsb2NrXCIgfSxcblx0XHRcdFx0Y3VyQ1NTLCBbIGVsZW0sIFwibWFyZ2luUmlnaHRcIiBdICk7XG5cdFx0fVxuXHR9XG4pO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuIChcblx0XHRcdFx0cGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw9MTErXG5cdFx0XHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFOCBvbmx5XG5cdFx0XHRcdC8vIGdldENsaWVudFJlY3RzKCkgZXJyb3JzIG9uIGRpc2Nvbm5lY3RlZCBlbGVtc1xuXHRcdFx0XHQoIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgP1xuXHRcdFx0XHRcdGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtXG5cdFx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdDBcblx0XHRcdFx0KVxuXHRcdFx0KSArIFwicHhcIjtcblx0XHR9XG5cdH1cbik7XG5cbi8vIFRoZXNlIGhvb2tzIGFyZSB1c2VkIGJ5IGFuaW1hdGUgdG8gZXhwYW5kIHByb3BlcnRpZXNcbmpRdWVyeS5lYWNoKCB7XG5cdG1hcmdpbjogXCJcIixcblx0cGFkZGluZzogXCJcIixcblx0Ym9yZGVyOiBcIldpZHRoXCJcbn0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN1ZmZpeCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXSA9IHtcblx0XHRleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBpID0gMCxcblx0XHRcdFx0ZXhwYW5kZWQgPSB7fSxcblxuXHRcdFx0XHQvLyBhc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdCggXCIgXCIgKSA6IFsgdmFsdWUgXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xuXHRcdFx0XHRleHBhbmRlZFsgcHJlZml4ICsgY3NzRXhwYW5kWyBpIF0gKyBzdWZmaXggXSA9XG5cdFx0XHRcdFx0cGFydHNbIGkgXSB8fCBwYXJ0c1sgaSAtIDIgXSB8fCBwYXJ0c1sgMCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXhwYW5kZWQ7XG5cdFx0fVxuXHR9O1xuXG5cdGlmICggIXJtYXJnaW4udGVzdCggcHJlZml4ICkgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCBuYW1lICkgKSB7XG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0XHRsZW4gPSBuYW1lLmxlbmd0aDtcblxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRtYXBbIG5hbWVbIGkgXSBdID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZVsgaSBdLCBmYWxzZSwgc3R5bGVzICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbWFwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHR9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbiggdGhpcyApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gcGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzXG5cdFx0XHQvLyBzbywgc2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQuXG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzIGlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIHVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0IC0gdXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlIC0gdXNlIC5zdHlsZSBpZiBpdHNcblx0XHRcdC8vIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggdHdlZW4uZWxlbS5zdHlsZVsgalF1ZXJ5LmNzc1Byb3BzWyB0d2Vlbi5wcm9wIF0gXSAhPSBudWxsIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTlcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fSxcblx0X2RlZmF1bHQ6IFwic3dpbmdcIlxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgQ29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5cblxuXG52YXJcblx0ZnhOb3csIHRpbWVySWQsXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRycnVuID0gL3F1ZXVlSG9va3MkLztcblxuLy8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseVxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcblx0fSApO1xuXHRyZXR1cm4gKCBmeE5vdyA9IGpRdWVyeS5ub3coKSApO1xufVxuXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0dmFyIHdoaWNoLFxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfSxcblx0XHRpID0gMDtcblxuXHQvLyBpZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXG5cdC8vIGlmIHdlIGRvbid0IGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQgOyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xuXG5cdFx0XHQvLyB3ZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0LyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgdHdlZW4sIGhvb2tzLCBvbGRmaXJlLCBkaXNwbGF5LCBjaGVja0Rpc3BsYXksXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBqUXVlcnkuX2RhdGEoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBoYW5kbGUgcXVldWU6IGZhbHNlIHByb21pc2VzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIGRvaW5nIHRoaXMgbWFrZXMgc3VyZSB0aGF0IHRoZSBjb21wbGV0ZSBoYW5kbGVyIHdpbGwgYmUgY2FsbGVkXG5cdFx0XHQvLyBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gaGVpZ2h0L3dpZHRoIG92ZXJmbG93IHBhc3Ncblx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCJoZWlnaHRcIiBpbiBwcm9wcyB8fCBcIndpZHRoXCIgaW4gcHJvcHMgKSApIHtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG5vdGhpbmcgc25lYWtzIG91dFxuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3Rcblx0XHQvLyBjaGFuZ2UgdGhlIG92ZXJmbG93IGF0dHJpYnV0ZSB3aGVuIG92ZXJmbG93WCBhbmRcblx0XHQvLyBvdmVyZmxvd1kgYXJlIHNldCB0byB0aGUgc2FtZSB2YWx1ZVxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gU2V0IGRpc3BsYXkgcHJvcGVydHkgdG8gaW5saW5lLWJsb2NrIGZvciBoZWlnaHQvd2lkdGhcblx0XHQvLyBhbmltYXRpb25zIG9uIGlubGluZSBlbGVtZW50cyB0aGF0IGFyZSBoYXZpbmcgd2lkdGgvaGVpZ2h0IGFuaW1hdGVkXG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cblx0XHQvLyBUZXN0IGRlZmF1bHQgZGlzcGxheSBpZiBkaXNwbGF5IGlzIGN1cnJlbnRseSBcIm5vbmVcIlxuXHRcdGNoZWNrRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID9cblx0XHRcdGpRdWVyeS5fZGF0YSggZWxlbSwgXCJvbGRkaXNwbGF5XCIgKSB8fCBkZWZhdWx0RGlzcGxheSggZWxlbS5ub2RlTmFtZSApIDogZGlzcGxheTtcblxuXHRcdGlmICggY2hlY2tEaXNwbGF5ID09PSBcImlubGluZVwiICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblxuXHRcdFx0Ly8gaW5saW5lLWxldmVsIGVsZW1lbnRzIGFjY2VwdCBpbmxpbmUtYmxvY2s7XG5cdFx0XHQvLyBibG9jay1sZXZlbCBlbGVtZW50cyBuZWVkIHRvIGJlIGlubGluZSB3aXRoIGxheW91dFxuXHRcdFx0aWYgKCAhc3VwcG9ydC5pbmxpbmVCbG9ja05lZWRzTGF5b3V0IHx8IGRlZmF1bHREaXNwbGF5KCBlbGVtLm5vZGVOYW1lICkgPT09IFwiaW5saW5lXCIgKSB7XG5cdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c3R5bGUuem9vbSA9IDE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRpZiAoICFzdXBwb3J0LnNocmlua1dyYXBCbG9ja3MoKSApIHtcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdFx0c3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1sgMiBdO1xuXHRcdFx0fSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIHNob3cvaGlkZSBwYXNzXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMuZXhlYyggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgZGF0YVNob3cgbGVmdCBvdmVyIGZyb20gYSBzdG9wcGVkIGhpZGUgb3Igc2hvd1xuXHRcdFx0XHQvLyBhbmQgd2UgYXJlIGdvaW5nIHRvIHByb2NlZWQgd2l0aCBzaG93LCB3ZSBzaG91bGQgcHJldGVuZCB0byBiZSBoaWRkZW5cblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cblx0XHQvLyBBbnkgbm9uLWZ4IHZhbHVlIHN0b3BzIHVzIGZyb20gcmVzdG9yaW5nIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlXG5cdFx0fSBlbHNlIHtcblx0XHRcdGRpc3BsYXkgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRpZiAoIGRhdGFTaG93ICkge1xuXHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGFTaG93ID0galF1ZXJ5Ll9kYXRhKCBlbGVtLCBcImZ4c2hvd1wiLCB7fSApO1xuXHRcdH1cblxuXHRcdC8vIHN0b3JlIHN0YXRlIGlmIGl0cyB0b2dnbGUgLSBlbmFibGVzIC5zdG9wKCkudG9nZ2xlKCkgdG8gXCJyZXZlcnNlXCJcblx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47XG5cdFx0fVxuXHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0alF1ZXJ5KCBlbGVtICkuc2hvdygpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5oaWRlKCk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgcHJvcDtcblx0XHRcdGpRdWVyeS5fcmVtb3ZlRGF0YSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHR0d2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXG5cdFx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcblx0XHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0XHR0d2Vlbi5lbmQgPSB0d2Vlbi5zdGFydDtcblx0XHRcdFx0XHR0d2Vlbi5zdGFydCA9IHByb3AgPT09IFwid2lkdGhcIiB8fCBwcm9wID09PSBcImhlaWdodFwiID8gMSA6IDA7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0Ly8gSWYgdGhpcyBpcyBhIG5vb3AgbGlrZSAuaGlkZSgpLmhpZGUoKSwgcmVzdG9yZSBhbiBvdmVyd3JpdHRlbiBkaXNwbGF5IHZhbHVlXG5cdH0gZWxzZSBpZiAoICggZGlzcGxheSA9PT0gXCJub25lXCIgPyBkZWZhdWx0RGlzcGxheSggZWxlbS5ub2RlTmFtZSApIDogZGlzcGxheSApID09PSBcImlubGluZVwiICkge1xuXHRcdHN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5O1xuXHR9XG59XG5cbmZ1bmN0aW9uIHByb3BGaWx0ZXIoIHByb3BzLCBzcGVjaWFsRWFzaW5nICkge1xuXHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xuXG5cdC8vIGNhbWVsQ2FzZSwgc3BlY2lhbEVhc2luZyBhbmQgZXhwYW5kIGNzc0hvb2sgcGFzc1xuXHRmb3IgKCBpbmRleCBpbiBwcm9wcyApIHtcblx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xuXHRcdH1cblxuXHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XG5cdFx0fVxuXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcblx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xuXG5cdFx0XHQvLyBub3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29udCBvdmVyd3JpdGUga2V5cyBhbHJlYWR5IHByZXNlbnQuXG5cdFx0XHQvLyBhbHNvIC0gcmV1c2luZyAnaW5kZXgnIGZyb20gYWJvdmUgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXG5cdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcblx0dmFyIHJlc3VsdCxcblx0XHRzdG9wcGVkLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBBbmltYXRpb24ucHJlZmlsdGVycy5sZW5ndGgsXG5cdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBkb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3Jcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XG5cdFx0fSApLFxuXHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdFx0cmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXG5cdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKCMxMjQ5Nylcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XG5cblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7XG5cdFx0XHRcdHNwZWNpYWxFYXNpbmc6IHt9LFxuXHRcdFx0XHRlYXNpbmc6IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHRcblx0XHRcdH0sIG9wdGlvbnMgKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXG5cdFx0XHRcdFx0Ly8gaWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gcmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZVxuXHRcdFx0XHQvLyBvdGhlcndpc2UsIHJlamVjdFxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdH0gKSxcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcblxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXN1bHQuc3RvcCApICkge1xuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIGFuaW1hdGlvbi5lbGVtLCBhbmltYXRpb24ub3B0cy5xdWV1ZSApLnN0b3AgPVxuXHRcdFx0XHRcdGpRdWVyeS5wcm94eSggcmVzdWx0LnN0b3AsIHJlc3VsdCApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkubWFwKCBwcm9wcywgY3JlYXRlVHdlZW4sIGFuaW1hdGlvbiApO1xuXG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGFuaW1hdGlvbi5vcHRzLnN0YXJ0ICkgKSB7XG5cdFx0YW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbCggZWxlbSwgYW5pbWF0aW9uICk7XG5cdH1cblxuXHRqUXVlcnkuZngudGltZXIoXG5cdFx0alF1ZXJ5LmV4dGVuZCggdGljaywge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdGFuaW06IGFuaW1hdGlvbixcblx0XHRcdHF1ZXVlOiBhbmltYXRpb24ub3B0cy5xdWV1ZVxuXHRcdH0gKVxuXHQpO1xuXG5cdC8vIGF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdHJldHVybiBhbmltYXRpb24ucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcblx0XHQuZG9uZSggYW5pbWF0aW9uLm9wdHMuZG9uZSwgYW5pbWF0aW9uLm9wdHMuY29tcGxldGUgKVxuXHRcdC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsIClcblx0XHQuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcbn1cblxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXG5cdHR3ZWVuZXJzOiB7XG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKTtcblx0XHRcdGFkanVzdENTUyggdHdlZW4uZWxlbSwgcHJvcCwgcmNzc051bS5leGVjKCB2YWx1ZSApLCB0d2VlbiApO1xuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9LFxuXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcblx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XG5cdFx0XHRwcm9wcyA9IFsgXCIqXCIgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cHJvcHMgPSBwcm9wcy5tYXRjaCggcm5vdHdoaXRlICk7XG5cdFx0fVxuXG5cdFx0dmFyIHByb3AsXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdID0gQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH1cblx0fSxcblxuXHRwcmVmaWx0ZXJzOiBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcblxuXHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcblx0XHRpZiAoIHByZXBlbmQgKSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcblx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxuXHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuXHR9O1xuXG5cdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5vZmYgPyAwIDogdHlwZW9mIG9wdC5kdXJhdGlvbiA9PT0gXCJudW1iZXJcIiA/IG9wdC5kdXJhdGlvbiA6XG5cdFx0b3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgP1xuXHRcdFx0alF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF0gOiBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXG5cdC8vIG5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdH1cblxuXHQvLyBRdWV1ZWluZ1xuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4gb3B0O1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBzaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxuXG5cdFx0XHQvLyBhbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKCB7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH0sXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxuXHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdGlmICggZW1wdHkgfHwgalF1ZXJ5Ll9kYXRhKCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcblxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcblx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGNsZWFyUXVldWUgJiYgdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRkYXRhID0galF1ZXJ5Ll9kYXRhKCB0aGlzICk7XG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJlxuXHRcdFx0XHRcdCggdHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApICkge1xuXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIHN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWRcblx0XHRcdC8vIHRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2ggd2lsbCBkZXF1ZXVlXG5cdFx0XHQvLyBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZFxuXHRcdFx0aWYgKCBkZXF1ZXVlIHx8ICFnb3RvRW5kICkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbmRleCxcblx0XHRcdFx0ZGF0YSA9IGpRdWVyeS5fZGF0YSggdGhpcyApLFxuXHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG5cdFx0XHQvLyBlbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXG5cdFx0XHRkYXRhLmZpbmlzaCA9IHRydWU7XG5cblx0XHRcdC8vIGVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0alF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xuXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XG5cdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBsb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gbG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gdHVybiBvZmYgZmluaXNoaW5nIGZsYWdcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXG5qUXVlcnkuZWFjaCgge1xuXHRzbGlkZURvd246IGdlbkZ4KCBcInNob3dcIiApLFxuXHRzbGlkZVVwOiBnZW5GeCggXCJoaWRlXCIgKSxcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KCBcInRvZ2dsZVwiICksXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXG5cdGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9XG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkudGltZXJzID0gW107XG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdGltZXIsXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRpID0gMDtcblxuXHRmeE5vdyA9IGpRdWVyeS5ub3coKTtcblxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblxuXHRcdC8vIENoZWNrcyB0aGUgdGltZXIgaGFzIG5vdCBhbHJlYWR5IGJlZW4gcmVtb3ZlZFxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGlmICggdGltZXIoKSApIHtcblx0XHRqUXVlcnkuZnguc3RhcnQoKTtcblx0fSBlbHNlIHtcblx0XHRqUXVlcnkudGltZXJzLnBvcCgpO1xuXHR9XG59O1xuXG5qUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcblxualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdGlmICggIXRpbWVySWQgKSB7XG5cdFx0dGltZXJJZCA9IHdpbmRvdy5zZXRJbnRlcnZhbCggalF1ZXJ5LmZ4LnRpY2ssIGpRdWVyeS5meC5pbnRlcnZhbCApO1xuXHR9XG59O1xuXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHR3aW5kb3cuY2xlYXJJbnRlcnZhbCggdGltZXJJZCApO1xuXHR0aW1lcklkID0gbnVsbDtcbn07XG5cbmpRdWVyeS5meC5zcGVlZHMgPSB7XG5cdHNsb3c6IDYwMCxcblx0ZmFzdDogMjAwLFxuXG5cdC8vIERlZmF1bHQgc3BlZWRcblx0X2RlZmF1bHQ6IDQwMFxufTtcblxuXG4vLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uXG4vLyBodHRwOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEwMDMyNDAxNDc0Ny9odHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblx0XHR9O1xuXHR9ICk7XG59O1xuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBhLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xuXG5cdC8vIFNldHVwXG5cdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblx0ZGl2LnNldEF0dHJpYnV0ZSggXCJjbGFzc05hbWVcIiwgXCJ0XCIgKTtcblx0ZGl2LmlubmVySFRNTCA9IFwiICA8bGluay8+PHRhYmxlPjwvdGFibGU+PGEgaHJlZj0nL2EnPmE8L2E+PGlucHV0IHR5cGU9J2NoZWNrYm94Jy8+XCI7XG5cdGEgPSBkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwiYVwiIClbIDAgXTtcblxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG5cdC8vIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJjaGVja2JveFwiICk7XG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHRhID0gZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcImFcIiApWyAwIF07XG5cblx0Ly8gRmlyc3QgYmF0Y2ggb2YgdGVzdHMuXG5cdGEuc3R5bGUuY3NzVGV4dCA9IFwidG9wOjFweFwiO1xuXG5cdC8vIFRlc3Qgc2V0QXR0cmlidXRlIG9uIGNhbWVsQ2FzZSBjbGFzcy5cblx0Ly8gSWYgaXQgd29ya3MsIHdlIG5lZWQgYXR0ckZpeGVzIHdoZW4gZG9pbmcgZ2V0L3NldEF0dHJpYnV0ZSAoaWU2LzcpXG5cdHN1cHBvcnQuZ2V0U2V0QXR0cmlidXRlID0gZGl2LmNsYXNzTmFtZSAhPT0gXCJ0XCI7XG5cblx0Ly8gR2V0IHRoZSBzdHlsZSBpbmZvcm1hdGlvbiBmcm9tIGdldEF0dHJpYnV0ZVxuXHQvLyAoSUUgdXNlcyAuY3NzVGV4dCBpbnN0ZWFkKVxuXHRzdXBwb3J0LnN0eWxlID0gL3RvcC8udGVzdCggYS5nZXRBdHRyaWJ1dGUoIFwic3R5bGVcIiApICk7XG5cblx0Ly8gTWFrZSBzdXJlIHRoYXQgVVJMcyBhcmVuJ3QgbWFuaXB1bGF0ZWRcblx0Ly8gKElFIG5vcm1hbGl6ZXMgaXQgYnkgZGVmYXVsdClcblx0c3VwcG9ydC5ocmVmTm9ybWFsaXplZCA9IGEuZ2V0QXR0cmlidXRlKCBcImhyZWZcIiApID09PSBcIi9hXCI7XG5cblx0Ly8gQ2hlY2sgdGhlIGRlZmF1bHQgY2hlY2tib3gvcmFkaW8gdmFsdWUgKFwiXCIgb24gV2ViS2l0OyBcIm9uXCIgZWxzZXdoZXJlKVxuXHRzdXBwb3J0LmNoZWNrT24gPSAhIWlucHV0LnZhbHVlO1xuXG5cdC8vIE1ha2Ugc3VyZSB0aGF0IGEgc2VsZWN0ZWQtYnktZGVmYXVsdCBvcHRpb24gaGFzIGEgd29ya2luZyBzZWxlY3RlZCBwcm9wZXJ0eS5cblx0Ly8gKFdlYktpdCBkZWZhdWx0cyB0byBmYWxzZSBpbnN0ZWFkIG9mIHRydWUsIElFIHRvbywgaWYgaXQncyBpbiBhbiBvcHRncm91cClcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHQvLyBUZXN0cyBmb3IgZW5jdHlwZSBzdXBwb3J0IG9uIGEgZm9ybSAoIzY3NDMpXG5cdHN1cHBvcnQuZW5jdHlwZSA9ICEhZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJmb3JtXCIgKS5lbmN0eXBlO1xuXG5cdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBvcHRpb25zIGluc2lkZSBkaXNhYmxlZCBzZWxlY3RzIGFyZW4ndCBtYXJrZWQgYXMgZGlzYWJsZWRcblx0Ly8gKFdlYktpdCBtYXJrcyB0aGVtIGFzIGRpc2FibGVkKVxuXHRzZWxlY3QuZGlzYWJsZWQgPSB0cnVlO1xuXHRzdXBwb3J0Lm9wdERpc2FibGVkID0gIW9wdC5kaXNhYmxlZDtcblxuXHQvLyBTdXBwb3J0OiBJRTggb25seVxuXHQvLyBDaGVjayBpZiB3ZSBjYW4gdHJ1c3QgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0c3VwcG9ydC5pbnB1dCA9IGlucHV0LmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IFwiXCI7XG5cblx0Ly8gQ2hlY2sgaWYgYW4gaW5wdXQgbWFpbnRhaW5zIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXG5cdGlucHV0LnZhbHVlID0gXCJ0XCI7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxuXG52YXIgcnJldHVybiA9IC9cXHIvZyxcblx0cnNwYWNlcyA9IC9bXFx4MjBcXHRcXHJcXG5cXGZdKy9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LCBpc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fFxuXHRcdFx0XHRcdGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdGhvb2tzICYmXG5cdFx0XHRcdFx0XCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSApICE9PSB1bmRlZmluZWRcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XG5cblx0XHRcdFx0cmV0dXJuIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgP1xuXG5cdFx0XHRcdFx0Ly8gaGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRcdHJldC5yZXBsYWNlKCBycmV0dXJuLCBcIlwiICkgOlxuXG5cdFx0XHRcdFx0Ly8gaGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdFx0cmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWwgKz0gXCJcIjtcblx0XHRcdH0gZWxzZSBpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XG5cdFx0XHRcdFx0dmFsIDpcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFMTAtMTErXG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxuXHRcdFx0XHRcdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0XHRcdFx0XHRqUXVlcnkudHJpbSggalF1ZXJ5LnRleHQoIGVsZW0gKSApLnJlcGxhY2UoIHJzcGFjZXMsIFwiIFwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZWxlY3Q6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIiB8fCBpbmRleCA8IDAsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoLFxuXHRcdFx0XHRcdGkgPSBpbmRleCA8IDAgP1xuXHRcdFx0XHRcdFx0bWF4IDpcblx0XHRcdFx0XHRcdG9uZSA/IGluZGV4IDogMDtcblxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIG9sZElFIGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0KCBzdXBwb3J0Lm9wdERpc2FibGVkID9cblx0XHRcdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkIDpcblx0XHRcdFx0XHRcdFx0XHRvcHRpb24uZ2V0QXR0cmlidXRlKCBcImRpc2FibGVkXCIgKSA9PT0gbnVsbCApICYmXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8XG5cdFx0XHRcdFx0XHRcdFx0IWpRdWVyeS5ub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUU2XG5cdFx0XHRcdFx0XHQvLyBXaGVuIG5ldyBvcHRpb24gZWxlbWVudCBpcyBhZGRlZCB0byBzZWxlY3QgYm94IHdlIG5lZWQgdG9cblx0XHRcdFx0XHRcdC8vIGZvcmNlIHJlZmxvdyBvZiBuZXdseSBhZGRlZCBub2RlIGluIG9yZGVyIHRvIHdvcmthcm91bmQgZGVsYXlcblx0XHRcdFx0XHRcdC8vIG9mIGluaXRpYWxpemF0aW9uIHByb3BlcnRpZXNcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdG9wdGlvbi5zZWxlY3RlZCA9IG9wdGlvblNldCA9IHRydWU7XG5cblx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBfICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFdpbGwgYmUgZXhlY3V0ZWQgb25seSBpbiBJRTZcblx0XHRcdFx0XHRcdFx0b3B0aW9uLnNjcm9sbEhlaWdodDtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRvcHRpb24uc2VsZWN0ZWQgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gb3B0aW9ucztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoIGVsZW0gKS52YWwoKSwgdmFsdWUgKSA+IC0xICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7XG5cdFx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0uZ2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBub2RlSG9vaywgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlLFxuXHRydXNlRGVmYXVsdCA9IC9eKD86Y2hlY2tlZHxzZWxlY3RlZCkkL2ksXG5cdGdldFNldEF0dHJpYnV0ZSA9IHN1cHBvcnQuZ2V0U2V0QXR0cmlidXRlLFxuXHRnZXRTZXRJbnB1dCA9IHN1cHBvcnQuaW5wdXQ7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgYXR0cmlidXRlcyBhcmUgbG93ZXJjYXNlXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcdFx0bmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IG5vZGVIb29rICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0alF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdC8vIFNldHRpbmcgdGhlIHR5cGUgb24gYSByYWRpbyBidXR0b24gYWZ0ZXIgdGhlIHZhbHVlIHJlc2V0cyB0aGUgdmFsdWUgaW4gSUU4LTlcblx0XHRcdFx0XHQvLyBSZXNldCB2YWx1ZSB0byBkZWZhdWx0IGluIGNhc2UgdHlwZSBpcyBzZXQgYWZ0ZXIgdmFsdWUgZHVyaW5nIGNyZWF0aW9uXG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHR2YXIgbmFtZSwgcHJvcE5hbWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90d2hpdGUgKTtcblxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0cHJvcE5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cblx0XHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGdldCBzcGVjaWFsIHRyZWF0bWVudCAoIzEwODcwKVxuXHRcdFx0XHRpZiAoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApICkge1xuXG5cdFx0XHRcdFx0Ly8gU2V0IGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdG8gZmFsc2Vcblx0XHRcdFx0XHRpZiAoIGdldFNldElucHV0ICYmIGdldFNldEF0dHJpYnV0ZSB8fCAhcnVzZURlZmF1bHQudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgcHJvcE5hbWUgXSA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdFx0XHRcdC8vIEFsc28gY2xlYXIgZGVmYXVsdENoZWNrZWQvZGVmYXVsdFNlbGVjdGVkIChpZiBhcHByb3ByaWF0ZSlcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZWxlbVsgalF1ZXJ5LmNhbWVsQ2FzZSggXCJkZWZhdWx0LVwiICsgbmFtZSApIF0gPVxuXHRcdFx0XHRcdFx0XHRlbGVtWyBwcm9wTmFtZSBdID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNlZSAjOTY5OSBmb3IgZXhwbGFuYXRpb24gb2YgdGhpcyBhcHByb2FjaCAoc2V0dGluZyBmaXJzdCwgdGhlbiByZW1vdmFsKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGpRdWVyeS5hdHRyKCBlbGVtLCBuYW1lLCBcIlwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggZ2V0U2V0QXR0cmlidXRlID8gbmFtZSA6IHByb3BOYW1lICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcbmJvb2xIb29rID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZVxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHR9IGVsc2UgaWYgKCBnZXRTZXRJbnB1dCAmJiBnZXRTZXRBdHRyaWJ1dGUgfHwgIXJ1c2VEZWZhdWx0LnRlc3QoIG5hbWUgKSApIHtcblxuXHRcdFx0Ly8gSUU8OCBuZWVkcyB0aGUgKnByb3BlcnR5KiBuYW1lXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggIWdldFNldEF0dHJpYnV0ZSAmJiBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUsIG5hbWUgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHRcdC8vIFVzZSBkZWZhdWx0Q2hlY2tlZCBhbmQgZGVmYXVsdFNlbGVjdGVkIGZvciBvbGRJRVxuXHRcdFx0ZWxlbVsgalF1ZXJ5LmNhbWVsQ2FzZSggXCJkZWZhdWx0LVwiICsgbmFtZSApIF0gPSBlbGVtWyBuYW1lIF0gPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcblxualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XG5cblx0aWYgKCBnZXRTZXRJbnB1dCAmJiBnZXRTZXRBdHRyaWJ1dGUgfHwgIXJ1c2VEZWZhdWx0LnRlc3QoIG5hbWUgKSApIHtcblx0XHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0XHR2YXIgcmV0LCBoYW5kbGU7XG5cdFx0XHRpZiAoICFpc1hNTCApIHtcblxuXHRcdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIG5hbWUgXTtcblx0XHRcdFx0YXR0ckhhbmRsZVsgbmFtZSBdID0gcmV0O1xuXHRcdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdFx0bmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0XHRudWxsO1xuXHRcdFx0XHRhdHRySGFuZGxlWyBuYW1lIF0gPSBoYW5kbGU7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtWyBqUXVlcnkuY2FtZWxDYXNlKCBcImRlZmF1bHQtXCIgKyBuYW1lICkgXSA/XG5cdFx0XHRcdFx0bmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0XHRudWxsO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuLy8gZml4IG9sZElFIGF0dHJvcGVydGllc1xuaWYgKCAhZ2V0U2V0SW5wdXQgfHwgIWdldFNldEF0dHJpYnV0ZSApIHtcblx0alF1ZXJ5LmF0dHJIb29rcy52YWx1ZSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRcdGlmICggalF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHQvLyBEb2VzIG5vdCByZXR1cm4gc28gdGhhdCBzZXRBdHRyaWJ1dGUgaXMgYWxzbyB1c2VkXG5cdFx0XHRcdGVsZW0uZGVmYXVsdFZhbHVlID0gdmFsdWU7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIFVzZSBub2RlSG9vayBpZiBkZWZpbmVkICgjMTk1NCk7IG90aGVyd2lzZSBzZXRBdHRyaWJ1dGUgaXMgZmluZVxuXHRcdFx0XHRyZXR1cm4gbm9kZUhvb2sgJiYgbm9kZUhvb2suc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gSUU2LzcgZG8gbm90IHN1cHBvcnQgZ2V0dGluZy9zZXR0aW5nIHNvbWUgYXR0cmlidXRlcyB3aXRoIGdldC9zZXRBdHRyaWJ1dGVcbmlmICggIWdldFNldEF0dHJpYnV0ZSApIHtcblxuXHQvLyBVc2UgdGhpcyBmb3IgYW55IGF0dHJpYnV0ZSBpbiBJRTYvN1xuXHQvLyBUaGlzIGZpeGVzIGFsbW9zdCBldmVyeSBJRTYvNyBpc3N1ZVxuXHRub2RlSG9vayA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblxuXHRcdFx0Ly8gU2V0IHRoZSBleGlzdGluZyBvciBjcmVhdGUgYSBuZXcgYXR0cmlidXRlIG5vZGVcblx0XHRcdHZhciByZXQgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKTtcblx0XHRcdGlmICggIXJldCApIHtcblx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGVOb2RlKFxuXHRcdFx0XHRcdCggcmV0ID0gZWxlbS5vd25lckRvY3VtZW50LmNyZWF0ZUF0dHJpYnV0ZSggbmFtZSApIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0cmV0LnZhbHVlID0gdmFsdWUgKz0gXCJcIjtcblxuXHRcdFx0Ly8gQnJlYWsgYXNzb2NpYXRpb24gd2l0aCBjbG9uZWQgZWxlbWVudHMgYnkgYWxzbyB1c2luZyBzZXRBdHRyaWJ1dGUgKCM5NjQ2KVxuXHRcdFx0aWYgKCBuYW1lID09PSBcInZhbHVlXCIgfHwgdmFsdWUgPT09IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgKSB7XG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0Ly8gU29tZSBhdHRyaWJ1dGVzIGFyZSBjb25zdHJ1Y3RlZCB3aXRoIGVtcHR5LXN0cmluZyB2YWx1ZXMgd2hlbiBub3QgZGVmaW5lZFxuXHRhdHRySGFuZGxlLmlkID0gYXR0ckhhbmRsZS5uYW1lID0gYXR0ckhhbmRsZS5jb29yZHMgPVxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRcdHZhciByZXQ7XG5cdFx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdFx0cmV0dXJuICggcmV0ID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkgKSAmJiByZXQudmFsdWUgIT09IFwiXCIgP1xuXHRcdFx0XHRcdHJldC52YWx1ZSA6XG5cdFx0XHRcdFx0bnVsbDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdC8vIEZpeGluZyB2YWx1ZSByZXRyaWV2YWwgb24gYSBidXR0b24gcmVxdWlyZXMgdGhpcyBtb2R1bGVcblx0alF1ZXJ5LnZhbEhvb2tzLmJ1dHRvbiA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdFx0dmFyIHJldCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApO1xuXHRcdFx0aWYgKCByZXQgJiYgcmV0LnNwZWNpZmllZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldC52YWx1ZTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHNldDogbm9kZUhvb2suc2V0XG5cdH07XG5cblx0Ly8gU2V0IGNvbnRlbnRlZGl0YWJsZSB0byBmYWxzZSBvbiByZW1vdmFscygjMTA0MjkpXG5cdC8vIFNldHRpbmcgdG8gZW1wdHkgc3RyaW5nIHRocm93cyBhbiBlcnJvciBhcyBhbiBpbnZhbGlkIHZhbHVlXG5cdGpRdWVyeS5hdHRySG9va3MuY29udGVudGVkaXRhYmxlID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdFx0bm9kZUhvb2suc2V0KCBlbGVtLCB2YWx1ZSA9PT0gXCJcIiA/IGZhbHNlIDogdmFsdWUsIG5hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0Ly8gU2V0IHdpZHRoIGFuZCBoZWlnaHQgdG8gYXV0byBpbnN0ZWFkIG9mIDAgb24gZW1wdHkgc3RyaW5nKCBCdWcgIzgxNTAgKVxuXHQvLyBUaGlzIGlzIGZvciByZW1vdmFsc1xuXHRqUXVlcnkuZWFjaCggWyBcIndpZHRoXCIsIFwiaGVpZ2h0XCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdFx0alF1ZXJ5LmF0dHJIb29rc1sgbmFtZSBdID0ge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwiXCIgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIFwiYXV0b1wiICk7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fSApO1xufVxuXG5pZiAoICFzdXBwb3J0LnN0eWxlICkge1xuXHRqUXVlcnkuYXR0ckhvb2tzLnN0eWxlID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIFJldHVybiB1bmRlZmluZWQgaW4gdGhlIGNhc2Ugb2YgZW1wdHkgc3RyaW5nXG5cdFx0XHQvLyBOb3RlOiBJRSB1cHBlcmNhc2VzIGNzcyBwcm9wZXJ0eSBuYW1lcywgYnV0IGlmIHdlIHdlcmUgdG8gLnRvTG93ZXJDYXNlKClcblx0XHRcdC8vIC5jc3NUZXh0LCB0aGF0IHdvdWxkIGRlc3Ryb3kgY2FzZSBzZW5zaXRpdml0eSBpbiBVUkwncywgbGlrZSBpbiBcImJhY2tncm91bmRcIlxuXHRcdFx0cmV0dXJuIGVsZW0uc3R5bGUuY3NzVGV4dCB8fCB1bmRlZmluZWQ7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0uc3R5bGUuY3NzVGV4dCA9IHZhbHVlICsgXCJcIiApO1xuXHRcdH1cblx0fTtcbn1cblxuXG5cblxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b258b2JqZWN0KSQvaSxcblx0cmNsaWNrYWJsZSA9IC9eKD86YXxhcmVhKSQvaTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIHRyeS9jYXRjaCBoYW5kbGVzIGNhc2VzIHdoZXJlIElFIGJhbGtzIChzdWNoIGFzIHJlbW92aW5nIGEgcHJvcGVydHkgb24gd2luZG93KVxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dGhpc1sgbmFtZSBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRkZWxldGUgdGhpc1sgbmFtZSBdO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzXG5cdFx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuICggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdO1xuXHR9LFxuXG5cdHByb3BIb29rczoge1xuXHRcdHRhYkluZGV4OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gaHR0cDovL2ZsdWlkcHJvamVjdC5vcmcvYmxvZy8yMDA4LzAxLzA5L2dldHRpbmctc2V0dGluZy1hbmQtcmVtb3ZpbmctdGFiaW5kZXgtdmFsdWVzLXdpdGgtamF2YXNjcmlwdC9cblx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsKCMxMjA3Milcblx0XHRcdFx0dmFyIHRhYmluZGV4ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ0YWJpbmRleFwiICk7XG5cblx0XHRcdFx0cmV0dXJuIHRhYmluZGV4ID9cblx0XHRcdFx0XHRwYXJzZUludCggdGFiaW5kZXgsIDEwICkgOlxuXHRcdFx0XHRcdHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8XG5cdFx0XHRcdFx0XHRyY2xpY2thYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJiBlbGVtLmhyZWYgP1xuXHRcdFx0XHRcdFx0XHQwIDpcblx0XHRcdFx0XHRcdFx0LTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHByb3BGaXg6IHtcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcblx0fVxufSApO1xuXG4vLyBTb21lIGF0dHJpYnV0ZXMgcmVxdWlyZSBhIHNwZWNpYWwgY2FsbCBvbiBJRVxuLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxuaWYgKCAhc3VwcG9ydC5ocmVmTm9ybWFsaXplZCApIHtcblxuXHQvLyBocmVmL3NyYyBwcm9wZXJ0eSBzaG91bGQgZ2V0IHRoZSBmdWxsIG5vcm1hbGl6ZWQgVVJMICgjMTAyOTkvIzEyOTE1KVxuXHRqUXVlcnkuZWFjaCggWyBcImhyZWZcIiwgXCJzcmNcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0XHRqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF0gPSB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIDQgKTtcblx0XHRcdH1cblx0XHR9O1xuXHR9ICk7XG59XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSwgSUU5K1xuLy8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XG4vLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcmVzcGVjdCBzZXR0aW5nIHNlbGVjdGVkXG4vLyBvbiB0aGUgb3B0aW9uXG4vLyBUaGUgZ2V0dGVyIGVuc3VyZXMgYSBkZWZhdWx0IG9wdGlvbiBpcyBzZWxlY3RlZFxuLy8gd2hlbiBpbiBhbiBvcHRncm91cFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IGl0IGFsc28gd29ya3Mgd2l0aCBvcHRncm91cHMsIHNlZSAjNTcwMVxuXHRcdFx0XHRpZiAoIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0cGFyZW50LnNlbGVjdGVkSW5kZXg7XG5cblx0XHRcdFx0aWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuZWFjaCggW1xuXHRcInRhYkluZGV4XCIsXG5cdFwicmVhZE9ubHlcIixcblx0XCJtYXhMZW5ndGhcIixcblx0XCJjZWxsU3BhY2luZ1wiLFxuXHRcImNlbGxQYWRkaW5nXCIsXG5cdFwicm93U3BhblwiLFxuXHRcImNvbFNwYW5cIixcblx0XCJ1c2VNYXBcIixcblx0XCJmcmFtZUJvcmRlclwiLFxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXG5dLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcbn0gKTtcblxuLy8gSUU2LzcgY2FsbCBlbmN0eXBlIGVuY29kaW5nXG5pZiAoICFzdXBwb3J0LmVuY3R5cGUgKSB7XG5cdGpRdWVyeS5wcm9wRml4LmVuY3R5cGUgPSBcImVuY29kaW5nXCI7XG59XG5cblxuXG5cbnZhciByY2xhc3MgPSAvW1xcdFxcclxcblxcZl0vZztcblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuYXR0ciggZWxlbSwgXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUgKSB7XG5cdFx0XHRjbGFzc2VzID0gdmFsdWUubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdCggXCIgXCIgKyBjdXJWYWx1ZSArIFwiIFwiICkucmVwbGFjZSggcmNsYXNzLCBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIG9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IGpRdWVyeS50cmltKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmF0dHIoIGVsZW0sIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYXR0ciggXCJjbGFzc1wiLCBcIlwiICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUgKSB7XG5cdFx0XHRjbGFzc2VzID0gdmFsdWUubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0KCBcIiBcIiArIGN1clZhbHVlICsgXCIgXCIgKS5yZXBsYWNlKCByY2xhc3MsIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhenogKyBcIiBcIiwgXCIgXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBqUXVlcnkudHJpbSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5hdHRyKCBlbGVtLCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHR2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiB0eXBlID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyhcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCB0aGlzLCBpLCBnZXRDbGFzcyggdGhpcyApLCBzdGF0ZVZhbCApLFxuXHRcdFx0XHRcdHN0YXRlVmFsXG5cdFx0XHRcdCk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY2xhc3NOYW1lLCBpLCBzZWxmLCBjbGFzc05hbWVzO1xuXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKTtcblx0XHRcdFx0Y2xhc3NOYW1lcyA9IHZhbHVlLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0XHR3aGlsZSAoICggY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIHN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRqUXVlcnkuX2RhdGEoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIFwiZmFsc2VcIixcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuXHRcdFx0XHRqUXVlcnkuYXR0ciggdGhpcywgXCJjbGFzc1wiLFxuXHRcdFx0XHRcdGNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0XHRcdFwiXCIgOlxuXHRcdFx0XHRcdGpRdWVyeS5fZGF0YSggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZSwgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Y2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiO1xuXHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIFwiIFwiICsgZ2V0Q2xhc3MoIGVsZW0gKSArIFwiIFwiICkucmVwbGFjZSggcmNsYXNzLCBcIiBcIiApXG5cdFx0XHRcdFx0LmluZGV4T2YoIGNsYXNzTmFtZSApID4gLTFcblx0XHRcdCkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbmpRdWVyeS5lYWNoKCAoIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IGxvYWQgcmVzaXplIHNjcm9sbCB1bmxvYWQgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGVycm9yIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cblx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9XG59ICk7XG5cblxudmFyIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuXG52YXIgbm9uY2UgPSBqUXVlcnkubm93KCk7XG5cbnZhciBycXVlcnkgPSAoIC9cXD8vICk7XG5cblxuXG52YXIgcnZhbGlkdG9rZW5zID0gLygsKXwoXFxbfHspfCh9fF0pfFwiKD86W15cIlxcXFxcXHJcXG5dfFxcXFxbXCJcXFxcXFwvYmZucnRdfFxcXFx1W1xcZGEtZkEtRl17NH0pKlwiXFxzKjo/fHRydWV8ZmFsc2V8bnVsbHwtPyg/ITBcXGQpXFxkKyg/OlxcLlxcZCt8KSg/OltlRV1bKy1dP1xcZCt8KS9nO1xuXG5qUXVlcnkucGFyc2VKU09OID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0Ly8gQXR0ZW1wdCB0byBwYXJzZSB1c2luZyB0aGUgbmF0aXZlIEpTT04gcGFyc2VyIGZpcnN0XG5cdGlmICggd2luZG93LkpTT04gJiYgd2luZG93LkpTT04ucGFyc2UgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xuXHRcdC8vIFdvcmthcm91bmQgZmFpbHVyZSB0byBzdHJpbmctY2FzdCBudWxsIGlucHV0XG5cdFx0cmV0dXJuIHdpbmRvdy5KU09OLnBhcnNlKCBkYXRhICsgXCJcIiApO1xuXHR9XG5cblx0dmFyIHJlcXVpcmVOb25Db21tYSxcblx0XHRkZXB0aCA9IG51bGwsXG5cdFx0c3RyID0galF1ZXJ5LnRyaW0oIGRhdGEgKyBcIlwiICk7XG5cblx0Ly8gR3VhcmQgYWdhaW5zdCBpbnZhbGlkIChhbmQgcG9zc2libHkgZGFuZ2Vyb3VzKSBpbnB1dCBieSBlbnN1cmluZyB0aGF0IG5vdGhpbmcgcmVtYWluc1xuXHQvLyBhZnRlciByZW1vdmluZyB2YWxpZCB0b2tlbnNcblx0cmV0dXJuIHN0ciAmJiAhalF1ZXJ5LnRyaW0oIHN0ci5yZXBsYWNlKCBydmFsaWR0b2tlbnMsIGZ1bmN0aW9uKCB0b2tlbiwgY29tbWEsIG9wZW4sIGNsb3NlICkge1xuXG5cdFx0Ly8gRm9yY2UgdGVybWluYXRpb24gaWYgd2Ugc2VlIGEgbWlzcGxhY2VkIGNvbW1hXG5cdFx0aWYgKCByZXF1aXJlTm9uQ29tbWEgJiYgY29tbWEgKSB7XG5cdFx0XHRkZXB0aCA9IDA7XG5cdFx0fVxuXG5cdFx0Ly8gUGVyZm9ybSBubyBtb3JlIHJlcGxhY2VtZW50cyBhZnRlciByZXR1cm5pbmcgdG8gb3V0ZXJtb3N0IGRlcHRoXG5cdFx0aWYgKCBkZXB0aCA9PT0gMCApIHtcblx0XHRcdHJldHVybiB0b2tlbjtcblx0XHR9XG5cblx0XHQvLyBDb21tYXMgbXVzdCBub3QgZm9sbG93IFwiW1wiLCBcIntcIiwgb3IgXCIsXCJcblx0XHRyZXF1aXJlTm9uQ29tbWEgPSBvcGVuIHx8IGNvbW1hO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIG5ldyBkZXB0aFxuXHRcdC8vIGFycmF5L29iamVjdCBvcGVuIChcIltcIiBvciBcIntcIik6IGRlcHRoICs9IHRydWUgLSBmYWxzZSAoaW5jcmVtZW50KVxuXHRcdC8vIGFycmF5L29iamVjdCBjbG9zZSAoXCJdXCIgb3IgXCJ9XCIpOiBkZXB0aCArPSBmYWxzZSAtIHRydWUgKGRlY3JlbWVudClcblx0XHQvLyBvdGhlciBjYXNlcyAoXCIsXCIgb3IgcHJpbWl0aXZlKTogZGVwdGggKz0gdHJ1ZSAtIHRydWUgKG51bWVyaWMgY2FzdClcblx0XHRkZXB0aCArPSAhY2xvc2UgLSAhb3BlbjtcblxuXHRcdC8vIFJlbW92ZSB0aGlzIHRva2VuXG5cdFx0cmV0dXJuIFwiXCI7XG5cdH0gKSApID9cblx0XHQoIEZ1bmN0aW9uKCBcInJldHVybiBcIiArIHN0ciApICkoKSA6XG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgSlNPTjogXCIgKyBkYXRhICk7XG59O1xuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sLCB0bXA7XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblx0dHJ5IHtcblx0XHRpZiAoIHdpbmRvdy5ET01QYXJzZXIgKSB7IC8vIFN0YW5kYXJkXG5cdFx0XHR0bXAgPSBuZXcgd2luZG93LkRPTVBhcnNlcigpO1xuXHRcdFx0eG1sID0gdG1wLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG5cdFx0fSBlbHNlIHsgLy8gSUVcblx0XHRcdHhtbCA9IG5ldyB3aW5kb3cuQWN0aXZlWE9iamVjdCggXCJNaWNyb3NvZnQuWE1MRE9NXCIgKTtcblx0XHRcdHhtbC5hc3luYyA9IFwiZmFsc2VcIjtcblx0XHRcdHhtbC5sb2FkWE1MKCBkYXRhICk7XG5cdFx0fVxuXHR9IGNhdGNoICggZSApIHtcblx0XHR4bWwgPSB1bmRlZmluZWQ7XG5cdH1cblx0aWYgKCAheG1sIHx8ICF4bWwuZG9jdW1lbnRFbGVtZW50IHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdHJoYXNoID0gLyMuKiQvLFxuXHRydHMgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cblx0Ly8gSUUgbGVhdmVzIGFuIFxcciBjaGFyYWN0ZXIgYXQgRU9MXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopXFxyPyQvbWcsXG5cblx0Ly8gIzc2NTMsICM4MTI1LCAjODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cdHJ1cmwgPSAvXihbXFx3ListXSs6KSg/OlxcL1xcLyg/OlteXFwvPyNdKkB8KShbXlxcLz8jOl0qKSg/OjooXFxkKyl8KXwpLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KCBcIipcIiApLFxuXG5cdC8vIERvY3VtZW50IGxvY2F0aW9uXG5cdGFqYXhMb2NhdGlvbiA9IGxvY2F0aW9uLmhyZWYsXG5cblx0Ly8gU2VnbWVudCBsb2NhdGlvbiBpbnRvIHBhcnRzXG5cdGFqYXhMb2NQYXJ0cyA9IHJ1cmwuZXhlYyggYWpheExvY2F0aW9uLnRvTG93ZXJDYXNlKCkgKSB8fCBbXTtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGUuY2hhckF0KCAwICkgPT09IFwiK1wiICkge1xuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnVuc2hpZnQoIGZ1bmMgKTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS5wdXNoKCBmdW5jICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcblxuXHR2YXIgaW5zcGVjdGVkID0ge30sXG5cdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XG5cblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XG5cdFx0dmFyIHNlbGVjdGVkO1xuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcblx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcblxuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdH1cblxuXHRyZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcbn1cblxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuLy8gRml4ZXMgIzk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIgZGVlcCwga2V5LFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKCBkZWVwID0ge30gKSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXHR2YXIgZmlyc3REYXRhVHlwZSwgY3QsIGZpbmFsRGF0YVR5cGUsIHR5cGUsXG5cdFx0Y29udGVudHMgPSBzLmNvbnRlbnRzLFxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzO1xuXG5cdC8vIFJlbW92ZSBhdXRvIGRhdGFUeXBlIGFuZCBnZXQgY29udGVudC10eXBlIGluIHRoZSBwcm9jZXNzXG5cdHdoaWxlICggZGF0YVR5cGVzWyAwIF0gPT09IFwiKlwiICkge1xuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xuXHRcdGlmICggY3QgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJDb250ZW50LVR5cGVcIiApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxuXHRpZiAoIGN0ICkge1xuXHRcdGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XG5cdFx0XHRpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGVcblx0aWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XG5cdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xuXHRcdGZvciAoIHR5cGUgaW4gcmVzcG9uc2VzICkge1xuXHRcdFx0aWYgKCAhZGF0YVR5cGVzWyAwIF0gfHwgcy5jb252ZXJ0ZXJzWyB0eXBlICsgXCIgXCIgKyBkYXRhVHlwZXNbIDAgXSBdICkge1xuXHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFmaXJzdERhdGFUeXBlICkge1xuXHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xuXHR9XG5cblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuXHQvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxuXHQvLyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcblx0XHRpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkge1xuXHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIGZpbmFsRGF0YVR5cGUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdO1xuXHR9XG59XG5cbi8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2VcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKSB7XG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxuXHRcdGNvbnZlcnRlcnMgPSB7fSxcblxuXHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcy5zbGljZSgpO1xuXG5cdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xuXHRpZiAoIGRhdGFUeXBlc1sgMSBdICkge1xuXHRcdGZvciAoIGNvbnYgaW4gcy5jb252ZXJ0ZXJzICkge1xuXHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcblx0XHR9XG5cdH1cblxuXHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcblx0d2hpbGUgKCBjdXJyZW50ICkge1xuXG5cdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XG5cdFx0XHRqcVhIUlsgcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdIF0gPSByZXNwb25zZTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSB0aGUgZGF0YUZpbHRlciBpZiBwcm92aWRlZFxuXHRcdGlmICggIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlciApIHtcblx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xuXHRcdH1cblxuXHRcdHByZXYgPSBjdXJyZW50O1xuXHRcdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHRcdGlmICggY3VycmVudCApIHtcblxuXHRcdFx0Ly8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0b1xuXHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcblxuXHRcdFx0XHRjdXJyZW50ID0gcHJldjtcblxuXHRcdFx0Ly8gQ29udmVydCByZXNwb25zZSBpZiBwcmV2IGRhdGFUeXBlIGlzIG5vbi1hdXRvIGFuZCBkaWZmZXJzIGZyb20gY3VycmVudFxuXHRcdFx0fSBlbHNlIGlmICggcHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCApIHtcblxuXHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxuXHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgY3VycmVudCBdIHx8IGNvbnZlcnRlcnNbIFwiKiBcIiArIGN1cnJlbnQgXTtcblxuXHRcdFx0XHQvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxuXHRcdFx0XHRpZiAoICFjb252ICkge1xuXHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIElmIGNvbnYyIG91dHB1dHMgY3VycmVudFxuXHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIHRtcFsgMSBdID09PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxuXHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgdG1wWyAwIF0gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdGNvbnZlcnRlcnNbIFwiKiBcIiArIHRtcFsgMCBdIF07XG5cdFx0XHRcdFx0XHRcdGlmICggY29udiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgY29udjIgXTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFsgMCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXG5cdFx0XHRcdGlmICggY29udiAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cblx0XHRcdFx0XHRpZiAoIGNvbnYgJiYgc1sgXCJ0aHJvd3NcIiBdICkgeyAvLyBqc2NzOmlnbm9yZSByZXF1aXJlRG90Tm90YXRpb25cblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBhamF4TG9jYXRpb24sXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBhamF4TG9jUGFydHNbIDEgXSApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL1xcYnhtbFxcYi8sXG5cdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogalF1ZXJ5LnBhcnNlSlNPTixcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXJcblxuXHRcdFx0Ly8gQ3Jvc3MtZG9tYWluIGRldGVjdGlvbiB2YXJzXG5cdFx0XHRwYXJ0cyxcblxuXHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxuXHRcdFx0aSxcblxuXHRcdFx0Ly8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxuXHRcdFx0Y2FjaGVVUkwsXG5cblx0XHRcdC8vIFJlc3BvbnNlIGhlYWRlcnMgYXMgc3RyaW5nXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdHRyYW5zcG9ydCxcblxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcblx0XHRcdFx0KCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQsXG5cblx0XHRcdC8vIERlZmVycmVkc1xuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXG5cdFx0XHQvLyBUaGUganFYSFIgc3RhdGVcblx0XHRcdHN0YXRlID0gMCxcblxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcblxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggc3RhdGUgPT09IDIgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpIF0gPSBtYXRjaFsgMiBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2g7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzdGF0ZSA9PT0gMiA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHRcdHZhciBsbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRpZiAoICFzdGF0ZSApIHtcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBsbmFtZSBdID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRpZiAoICFzdGF0ZSApIHtcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xuXHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdGlmICggbWFwICkge1xuXHRcdFx0XHRcdFx0aWYgKCBzdGF0ZSA8IDIgKSB7XG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFjayBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICkuY29tcGxldGUgPSBjb21wbGV0ZURlZmVycmVkLmFkZDtcblx0XHRqcVhIUi5zdWNjZXNzID0ganFYSFIuZG9uZTtcblx0XHRqcVhIUi5lcnJvciA9IGpxWEhSLmZhaWw7XG5cblx0XHQvLyBSZW1vdmUgaGFzaCBjaGFyYWN0ZXIgKCM3NTMxOiBhbmQgc3RyaW5nIHByb21vdGlvbilcblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkICgjNTg2NjogSUU3IGlzc3VlIHdpdGggcHJvdG9jb2wtbGVzcyB1cmxzKVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGFqYXhMb2NhdGlvbiApICsgXCJcIiApXG5cdFx0XHQucmVwbGFjZSggcmhhc2gsIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgYWpheExvY1BhcnRzWyAxIF0gKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSBqUXVlcnkudHJpbSggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHdlIGhhdmUgYSBwcm90b2NvbDpob3N0OnBvcnQgbWlzbWF0Y2hcblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHBhcnRzID0gcnVybC5leGVjKCBzLnVybC50b0xvd2VyQ2FzZSgpICk7XG5cdFx0XHRzLmNyb3NzRG9tYWluID0gISEoIHBhcnRzICYmXG5cdFx0XHRcdCggcGFydHNbIDEgXSAhPT0gYWpheExvY1BhcnRzWyAxIF0gfHwgcGFydHNbIDIgXSAhPT0gYWpheExvY1BhcnRzWyAyIF0gfHxcblx0XHRcdFx0XHQoIHBhcnRzWyAzIF0gfHwgKCBwYXJ0c1sgMSBdID09PSBcImh0dHA6XCIgPyBcIjgwXCIgOiBcIjQ0M1wiICkgKSAhPT1cblx0XHRcdFx0XHRcdCggYWpheExvY1BhcnRzWyAzIF0gfHwgKCBhamF4TG9jUGFydHNbIDEgXSA9PT0gXCJodHRwOlwiID8gXCI4MFwiIDogXCI0NDNcIiApICkgKVxuXHRcdFx0KTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXG5cdFx0aWYgKCBzdGF0ZSA9PT0gMiApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICgjMTUxMTgpXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RhcnRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcblxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdGNhY2hlVVJMID0gcy51cmw7XG5cblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcblxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUsIGFwcGVuZCBkYXRhIHRvIHVybFxuXHRcdFx0aWYgKCBzLmRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlVVJMID0gKCBzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhICk7XG5cblx0XHRcdFx0Ly8gIzk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgYW50aS1jYWNoZSBpbiB1cmwgaWYgbmVlZGVkXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRzLnVybCA9IHJ0cy50ZXN0KCBjYWNoZVVSTCApID9cblxuXHRcdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFscmVhZHkgYSAnXycgcGFyYW1ldGVyLCBzZXQgaXRzIHZhbHVlXG5cdFx0XHRcdFx0Y2FjaGVVUkwucmVwbGFjZSggcnRzLCBcIiQxXz1cIiArIG5vbmNlKysgKSA6XG5cblx0XHRcdFx0XHQvLyBPdGhlcndpc2UgYWRkIG9uZSB0byB0aGUgZW5kXG5cdFx0XHRcdFx0Y2FjaGVVUkwgKyAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgbm9uY2UrKztcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuXHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSArXG5cdFx0XHRcdFx0KCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0KTtcblxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiZcblx0XHRcdCggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgc3RhdGUgPT09IDIgKSApIHtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcblx0XHR9XG5cblx0XHQvLyBhYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xuXHRcdGZvciAoIGkgaW4geyBzdWNjZXNzOiAxLCBlcnJvcjogMSwgY29tcGxldGU6IDEgfSApIHtcblx0XHRcdGpxWEhSWyBpIF0oIHNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xuXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXG5cdFx0XHRpZiAoIHN0YXRlID09PSAyICkge1xuXHRcdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoIFwidGltZW91dFwiICk7XG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRzdGF0ZSA9IDE7XG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gUHJvcGFnYXRlIGV4Y2VwdGlvbiBhcyBlcnJvciBpZiBub3QgZG9uZVxuXHRcdFx0XHRpZiAoIHN0YXRlIDwgMiApIHtcblx0XHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXG5cdFx0XHRcdC8vIFNpbXBseSByZXRocm93IG90aGVyd2lzZVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXG5cdFx0XHRcdHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xuXG5cdFx0XHQvLyBDYWxsZWQgb25jZVxuXHRcdFx0aWYgKCBzdGF0ZSA9PT0gMiApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0ZSBpcyBcImRvbmVcIiBub3dcblx0XHRcdHN0YXRlID0gMjtcblxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJldGFnXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gV2UgZXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHRcblx0XHRcdFx0Ly8gdGhlbiBub3JtYWxpemUgc3RhdHVzVGV4dCBhbmQgc3RhdHVzIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0b3BcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBpLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblxuXHRcdC8vIHNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxuXHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xuXHR9O1xufSApO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCgge1xuXHRcdHVybDogdXJsLFxuXG5cdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICgjMTEyNjQpXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRjYWNoZTogdHJ1ZSxcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblx0XHRcInRocm93c1wiOiB0cnVlXG5cdH0gKTtcbn07XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR3cmFwQWxsOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcblx0XHRcdHZhciB3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RDaGlsZCAmJiBlbGVtLmZpcnN0Q2hpbGQubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0fSApLmFwcGVuZCggdGhpcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGlzRnVuY3Rpb24gPyBodG1sLmNhbGwoIHRoaXMsIGkgKSA6IGh0bWwgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wYXJlbnQoKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIWpRdWVyeS5ub2RlTmFtZSggdGhpcywgXCJib2R5XCIgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xuXHRcdFx0fVxuXHRcdH0gKS5lbmQoKTtcblx0fVxufSApO1xuXG5cbmZ1bmN0aW9uIGdldERpc3BsYXkoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLnN0eWxlICYmIGVsZW0uc3R5bGUuZGlzcGxheSB8fCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xufVxuXG5mdW5jdGlvbiBmaWx0ZXJIaWRkZW4oIGVsZW0gKSB7XG5cblx0Ly8gRGlzY29ubmVjdGVkIGVsZW1lbnRzIGFyZSBjb25zaWRlcmVkIGhpZGRlblxuXHRpZiAoICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCwgZWxlbSApICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdHdoaWxlICggZWxlbSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdGlmICggZ2V0RGlzcGxheSggZWxlbSApID09PSBcIm5vbmVcIiB8fCBlbGVtLnR5cGUgPT09IFwiaGlkZGVuXCIgKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0ZWxlbSA9IGVsZW0ucGFyZW50Tm9kZTtcblx0fVxuXHRyZXR1cm4gZmFsc2U7XG59XG5cbmpRdWVyeS5leHByLmZpbHRlcnMuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0Ly8gU3VwcG9ydDogT3BlcmEgPD0gMTIuMTJcblx0Ly8gT3BlcmEgcmVwb3J0cyBvZmZzZXRXaWR0aHMgYW5kIG9mZnNldEhlaWdodHMgbGVzcyB0aGFuIHplcm8gb24gc29tZSBlbGVtZW50c1xuXHRyZXR1cm4gc3VwcG9ydC5yZWxpYWJsZUhpZGRlbk9mZnNldHMoKSA/XG5cdFx0KCBlbGVtLm9mZnNldFdpZHRoIDw9IDAgJiYgZWxlbS5vZmZzZXRIZWlnaHQgPD0gMCAmJlxuXHRcdFx0IWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSA6XG5cdFx0XHRmaWx0ZXJIaWRkZW4oIGVsZW0gKTtcbn07XG5cbmpRdWVyeS5leHByLmZpbHRlcnMudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLmZpbHRlcnMuaGlkZGVuKCBlbGVtICk7XG59O1xuXG5cblxuXG52YXIgcjIwID0gLyUyMC9nLFxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxuXHRyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuZnVuY3Rpb24gYnVpbGRQYXJhbXMoIHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkICkge1xuXHR2YXIgbmFtZTtcblxuXHRpZiAoIGpRdWVyeS5pc0FycmF5KCBvYmogKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblxuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKFxuXHRcdFx0XHRcdHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9IG51bGwgPyBpIDogXCJcIiApICsgXCJdXCIsXG5cdFx0XHRcdFx0dixcblx0XHRcdFx0XHR0cmFkaXRpb25hbCxcblx0XHRcdFx0XHRhZGRcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIGpRdWVyeS50eXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XG5cdH1cbn1cblxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xuXHR2YXIgcHJlZml4LFxuXHRcdHMgPSBbXSxcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCByZXR1cm4gaXRzIHZhbHVlXG5cdFx0XHR2YWx1ZSA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApID8gdmFsdWUoKSA6ICggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgKTtcblx0XHR9O1xuXG5cdC8vIFNldCB0cmFkaXRpb25hbCB0byB0cnVlIGZvciBqUXVlcnkgPD0gMS4zLjIgYmVoYXZpb3IuXG5cdGlmICggdHJhZGl0aW9uYWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHR0cmFkaXRpb25hbCA9IGpRdWVyeS5hamF4U2V0dGluZ3MgJiYgalF1ZXJ5LmFqYXhTZXR0aW5ncy50cmFkaXRpb25hbDtcblx0fVxuXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdGlmICggalF1ZXJ5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcblx0fSxcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xuXHRcdH0gKVxuXHRcdC5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdC8vIFVzZSAuaXMoXCI6ZGlzYWJsZWRcIikgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSApXG5cdFx0Lm1hcCggZnVuY3Rpb24oIGksIGVsZW0gKSB7XG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cblx0XHRcdHJldHVybiB2YWwgPT0gbnVsbCA/XG5cdFx0XHRcdG51bGwgOlxuXHRcdFx0XHRqUXVlcnkuaXNBcnJheSggdmFsICkgP1xuXHRcdFx0XHRcdGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHR7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSApLmdldCgpO1xuXHR9XG59ICk7XG5cblxuLy8gQ3JlYXRlIHRoZSByZXF1ZXN0IG9iamVjdFxuLy8gKFRoaXMgaXMgc3RpbGwgYXR0YWNoZWQgdG8gYWpheFNldHRpbmdzIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5KVxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSB3aW5kb3cuQWN0aXZlWE9iamVjdCAhPT0gdW5kZWZpbmVkID9cblxuXHQvLyBTdXBwb3J0OiBJRTYtSUU4XG5cdGZ1bmN0aW9uKCkge1xuXG5cdFx0Ly8gWEhSIGNhbm5vdCBhY2Nlc3MgbG9jYWwgZmlsZXMsIGFsd2F5cyB1c2UgQWN0aXZlWCBmb3IgdGhhdCBjYXNlXG5cdFx0aWYgKCB0aGlzLmlzTG9jYWwgKSB7XG5cdFx0XHRyZXR1cm4gY3JlYXRlQWN0aXZlWEhSKCk7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOS0xMVxuXHRcdC8vIElFIHNlZW1zIHRvIGVycm9yIG9uIGNyb3NzLWRvbWFpbiBQQVRDSCByZXF1ZXN0cyB3aGVuIEFjdGl2ZVggWEhSXG5cdFx0Ly8gaXMgdXNlZC4gSW4gSUUgOSsgYWx3YXlzIHVzZSB0aGUgbmF0aXZlIFhIUi5cblx0XHQvLyBOb3RlOiB0aGlzIGNvbmRpdGlvbiB3b24ndCBjYXRjaCBFZGdlIGFzIGl0IGRvZXNuJ3QgZGVmaW5lXG5cdFx0Ly8gZG9jdW1lbnQuZG9jdW1lbnRNb2RlIGJ1dCBpdCBhbHNvIGRvZXNuJ3Qgc3VwcG9ydCBBY3RpdmVYIHNvIGl0IHdvbid0XG5cdFx0Ly8gcmVhY2ggdGhpcyBjb2RlLlxuXHRcdGlmICggZG9jdW1lbnQuZG9jdW1lbnRNb2RlID4gOCApIHtcblx0XHRcdHJldHVybiBjcmVhdGVTdGFuZGFyZFhIUigpO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBvbGRJRSBYSFIgZG9lcyBub3Qgc3VwcG9ydCBub24tUkZDMjYxNiBtZXRob2RzICgjMTMyNDApXG5cdFx0Ly8gU2VlIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9tczUzNjY0OCh2PXZzLjg1KS5hc3B4XG5cdFx0Ly8gYW5kIGh0dHA6Ly93d3cudzMub3JnL1Byb3RvY29scy9yZmMyNjE2L3JmYzI2MTYtc2VjOS5odG1sI3NlYzlcblx0XHQvLyBBbHRob3VnaCB0aGlzIGNoZWNrIGZvciBzaXggbWV0aG9kcyBpbnN0ZWFkIG9mIGVpZ2h0XG5cdFx0Ly8gc2luY2UgSUUgYWxzbyBkb2VzIG5vdCBzdXBwb3J0IFwidHJhY2VcIiBhbmQgXCJjb25uZWN0XCJcblx0XHRyZXR1cm4gL14oZ2V0fHBvc3R8aGVhZHxwdXR8ZGVsZXRlfG9wdGlvbnMpJC9pLnRlc3QoIHRoaXMudHlwZSApICYmXG5cdFx0XHRjcmVhdGVTdGFuZGFyZFhIUigpIHx8IGNyZWF0ZUFjdGl2ZVhIUigpO1xuXHR9IDpcblxuXHQvLyBGb3IgYWxsIG90aGVyIGJyb3dzZXJzLCB1c2UgdGhlIHN0YW5kYXJkIFhNTEh0dHBSZXF1ZXN0IG9iamVjdFxuXHRjcmVhdGVTdGFuZGFyZFhIUjtcblxudmFyIHhocklkID0gMCxcblx0eGhyQ2FsbGJhY2tzID0ge30sXG5cdHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cbi8vIFN1cHBvcnQ6IElFPDEwXG4vLyBPcGVuIHJlcXVlc3RzIG11c3QgYmUgbWFudWFsbHkgYWJvcnRlZCBvbiB1bmxvYWQgKCM1MjgwKVxuLy8gU2VlIGh0dHBzOi8vc3VwcG9ydC5taWNyb3NvZnQuY29tL2tiLzI4NTY3NDYgZm9yIG1vcmUgaW5mb1xuaWYgKCB3aW5kb3cuYXR0YWNoRXZlbnQgKSB7XG5cdHdpbmRvdy5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCBmdW5jdGlvbigpIHtcblx0XHRmb3IgKCB2YXIga2V5IGluIHhockNhbGxiYWNrcyApIHtcblx0XHRcdHhockNhbGxiYWNrc1sga2V5IF0oIHVuZGVmaW5lZCwgdHJ1ZSApO1xuXHRcdH1cblx0fSApO1xufVxuXG4vLyBEZXRlcm1pbmUgc3VwcG9ydCBwcm9wZXJ0aWVzXG5zdXBwb3J0LmNvcnMgPSAhIXhoclN1cHBvcnRlZCAmJiAoIFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyU3VwcG9ydGVkICk7XG54aHJTdXBwb3J0ZWQgPSBzdXBwb3J0LmFqYXggPSAhIXhoclN1cHBvcnRlZDtcblxuLy8gQ3JlYXRlIHRyYW5zcG9ydCBpZiB0aGUgYnJvd3NlciBjYW4gcHJvdmlkZSBhbiB4aHJcbmlmICggeGhyU3VwcG9ydGVkICkge1xuXG5cdGpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHRcdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluIHx8IHN1cHBvcnQuY29ycyApIHtcblxuXHRcdFx0dmFyIGNhbGxiYWNrO1xuXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdFx0dmFyIGksXG5cdFx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpLFxuXHRcdFx0XHRcdFx0aWQgPSArK3hocklkO1xuXG5cdFx0XHRcdFx0Ly8gT3BlbiB0aGUgc29ja2V0XG5cdFx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0XHRvcHRpb25zLnR5cGUsXG5cdFx0XHRcdFx0XHRvcHRpb25zLnVybCxcblx0XHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0XHRvcHRpb25zLnVzZXJuYW1lLFxuXHRcdFx0XHRcdFx0b3B0aW9ucy5wYXNzd29yZFxuXHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG5cdFx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXG5cdFx0XHRcdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkge1xuXHRcdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxuXHRcdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxuXHRcdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxuXHRcdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gKSB7XG5cdFx0XHRcdFx0XHRoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFNldCBoZWFkZXJzXG5cdFx0XHRcdFx0Zm9yICggaSBpbiBoZWFkZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0XHRcdFx0XHQvLyBJRSdzIEFjdGl2ZVhPYmplY3QgdGhyb3dzIGEgJ1R5cGUgTWlzbWF0Y2gnIGV4Y2VwdGlvbiB3aGVuIHNldHRpbmdcblx0XHRcdFx0XHRcdC8vIHJlcXVlc3QgaGVhZGVyIHRvIGEgbnVsbC12YWx1ZS5cblx0XHRcdFx0XHRcdC8vXG5cdFx0XHRcdFx0XHQvLyBUbyBrZWVwIGNvbnNpc3RlbnQgd2l0aCBvdGhlciBYSFIgaW1wbGVtZW50YXRpb25zLCBjYXN0IHRoZSB2YWx1ZVxuXHRcdFx0XHRcdFx0Ly8gdG8gc3RyaW5nIGFuZCBpZ25vcmUgYHVuZGVmaW5lZGAuXG5cdFx0XHRcdFx0XHRpZiAoIGhlYWRlcnNbIGkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICsgXCJcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3Rcblx0XHRcdFx0XHQvLyBUaGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24gd2hpY2ggaXMgYWN0dWFsbHlcblx0XHRcdFx0XHQvLyBoYW5kbGVkIGluIGpRdWVyeS5hamF4IChzbyBubyB0cnkvY2F0Y2ggaGVyZSlcblx0XHRcdFx0XHR4aHIuc2VuZCggKCBvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhICkgfHwgbnVsbCApO1xuXG5cdFx0XHRcdFx0Ly8gTGlzdGVuZXJcblx0XHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCBfLCBpc0Fib3J0ICkge1xuXHRcdFx0XHRcdFx0dmFyIHN0YXR1cywgc3RhdHVzVGV4dCwgcmVzcG9uc2VzO1xuXG5cdFx0XHRcdFx0XHQvLyBXYXMgbmV2ZXIgY2FsbGVkIGFuZCBpcyBhYm9ydGVkIG9yIGNvbXBsZXRlXG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICYmICggaXNBYm9ydCB8fCB4aHIucmVhZHlTdGF0ZSA9PT0gNCApICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIENsZWFuIHVwXG5cdFx0XHRcdFx0XHRcdGRlbGV0ZSB4aHJDYWxsYmFja3NbIGlkIF07XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0galF1ZXJ5Lm5vb3A7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQWJvcnQgbWFudWFsbHkgaWYgbmVlZGVkXG5cdFx0XHRcdFx0XHRcdGlmICggaXNBYm9ydCApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlICE9PSA0ICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlcyA9IHt9O1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1cyA9IHhoci5zdGF0dXM7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTwxMFxuXHRcdFx0XHRcdFx0XHRcdC8vIEFjY2Vzc2luZyBiaW5hcnktZGF0YSByZXNwb25zZVRleHQgdGhyb3dzIGFuIGV4Y2VwdGlvblxuXHRcdFx0XHRcdFx0XHRcdC8vICgjMTE0MjYpXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlcy50ZXh0ID0geGhyLnJlc3BvbnNlVGV4dDtcblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGaXJlZm94IHRocm93cyBhbiBleGNlcHRpb24gd2hlbiBhY2Nlc3Npbmdcblx0XHRcdFx0XHRcdFx0XHQvLyBzdGF0dXNUZXh0IGZvciBmYXVsdHkgY3Jvc3MtZG9tYWluIHJlcXVlc3RzXG5cdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdHN0YXR1c1RleHQgPSB4aHIuc3RhdHVzVGV4dDtcblx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gV2Ugbm9ybWFsaXplIHdpdGggV2Via2l0IGdpdmluZyBhbiBlbXB0eSBzdGF0dXNUZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJcIjtcblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGaWx0ZXIgc3RhdHVzIGZvciBub24gc3RhbmRhcmQgYmVoYXZpb3JzXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJZiB0aGUgcmVxdWVzdCBpcyBsb2NhbCBhbmQgd2UgaGF2ZSBkYXRhOiBhc3N1bWUgYSBzdWNjZXNzXG5cdFx0XHRcdFx0XHRcdFx0Ly8gKHN1Y2Nlc3Mgd2l0aCBubyBkYXRhIHdvbid0IGdldCBub3RpZmllZCwgdGhhdCdzIHRoZSBiZXN0IHdlXG5cdFx0XHRcdFx0XHRcdFx0Ly8gY2FuIGRvIGdpdmVuIGN1cnJlbnQgaW1wbGVtZW50YXRpb25zKVxuXHRcdFx0XHRcdFx0XHRcdGlmICggIXN0YXR1cyAmJiBvcHRpb25zLmlzTG9jYWwgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRzdGF0dXMgPSByZXNwb25zZXMudGV4dCA/IDIwMCA6IDQwNDtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIElFIC0gIzE0NTA6IHNvbWV0aW1lcyByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAxMjIzICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0c3RhdHVzID0gMjA0O1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBDYWxsIGNvbXBsZXRlIGlmIG5lZWRlZFxuXHRcdFx0XHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBzdGF0dXMsIHN0YXR1c1RleHQsIHJlc3BvbnNlcywgeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3Rcblx0XHRcdFx0XHQvLyBgeGhyLnNlbmRgIG1heSByYWlzZSBhbiBleGNlcHRpb24sIGJ1dCBpdCB3aWxsIGJlXG5cdFx0XHRcdFx0Ly8gaGFuZGxlZCBpbiBqUXVlcnkuYWpheCAoc28gbm8gdHJ5L2NhdGNoIGhlcmUpXG5cdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy5hc3luYyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgd2UncmUgaW4gc3luYyBtb2RlIHdlIGZpcmUgdGhlIGNhbGxiYWNrXG5cdFx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHQvLyAoSUU2ICYgSUU3KSBpZiBpdCdzIGluIGNhY2hlIGFuZCBoYXMgYmVlblxuXHRcdFx0XHRcdFx0Ly8gcmV0cmlldmVkIGRpcmVjdGx5IHdlIG5lZWQgdG8gZmlyZSB0aGUgY2FsbGJhY2tcblx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBjYWxsYmFjayApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIFJlZ2lzdGVyIHRoZSBjYWxsYmFjaywgYnV0IGRlbGF5IGl0IGluIGNhc2UgYHhoci5zZW5kYCB0aHJvd3Ncblx0XHRcdFx0XHRcdC8vIEFkZCB0byB0aGUgbGlzdCBvZiBhY3RpdmUgeGhyIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IHhockNhbGxiYWNrc1sgaWQgXSA9IGNhbGxiYWNrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdGNhbGxiYWNrKCB1bmRlZmluZWQsIHRydWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHR9ICk7XG59XG5cbi8vIEZ1bmN0aW9ucyB0byBjcmVhdGUgeGhyc1xuZnVuY3Rpb24gY3JlYXRlU3RhbmRhcmRYSFIoKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcblx0fSBjYXRjaCAoIGUgKSB7fVxufVxuXG5mdW5jdGlvbiBjcmVhdGVBY3RpdmVYSFIoKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIG5ldyB3aW5kb3cuQWN0aXZlWE9iamVjdCggXCJNaWNyb3NvZnQuWE1MSFRUUFwiICk7XG5cdH0gY2F0Y2ggKCBlICkge31cbn1cblxuXG5cblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBnbG9iYWxcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xuXHR9XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xuXHRcdHMuZ2xvYmFsID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiByZXF1ZXN0c1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cblx0XHR2YXIgc2NyaXB0LFxuXHRcdFx0aGVhZCA9IGRvY3VtZW50LmhlYWQgfHwgalF1ZXJ5KCBcImhlYWRcIiApWyAwIF0gfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0cmV0dXJuIHtcblxuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNhbGxiYWNrICkge1xuXG5cdFx0XHRcdHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2NyaXB0XCIgKTtcblxuXHRcdFx0XHRzY3JpcHQuYXN5bmMgPSB0cnVlO1xuXG5cdFx0XHRcdGlmICggcy5zY3JpcHRDaGFyc2V0ICkge1xuXHRcdFx0XHRcdHNjcmlwdC5jaGFyc2V0ID0gcy5zY3JpcHRDaGFyc2V0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0c2NyaXB0LnNyYyA9IHMudXJsO1xuXG5cdFx0XHRcdC8vIEF0dGFjaCBoYW5kbGVycyBmb3IgYWxsIGJyb3dzZXJzXG5cdFx0XHRcdHNjcmlwdC5vbmxvYWQgPSBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oIF8sIGlzQWJvcnQgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGlzQWJvcnQgfHwgIXNjcmlwdC5yZWFkeVN0YXRlIHx8IC9sb2FkZWR8Y29tcGxldGUvLnRlc3QoIHNjcmlwdC5yZWFkeVN0YXRlICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBtZW1vcnkgbGVhayBpbiBJRVxuXHRcdFx0XHRcdFx0c2NyaXB0Lm9ubG9hZCA9IHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgdGhlIHNjcmlwdFxuXHRcdFx0XHRcdFx0aWYgKCBzY3JpcHQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdFx0c2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBEZXJlZmVyZW5jZSB0aGUgc2NyaXB0XG5cdFx0XHRcdFx0XHRzY3JpcHQgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHQvLyBDYWxsYmFjayBpZiBub3QgYWJvcnRcblx0XHRcdFx0XHRcdGlmICggIWlzQWJvcnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrKCAyMDAsIFwic3VjY2Vzc1wiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIENpcmN1bXZlbnQgSUU2IGJ1Z3Mgd2l0aCBiYXNlIGVsZW1lbnRzICgjMjcwOSBhbmQgIzQzNzgpIGJ5IHByZXBlbmRpbmdcblx0XHRcdFx0Ly8gVXNlIG5hdGl2ZSBET00gbWFuaXB1bGF0aW9uIHRvIGF2b2lkIG91ciBkb21NYW5pcCBBSkFYIHRyaWNrZXJ5XG5cdFx0XHRcdGhlYWQuaW5zZXJ0QmVmb3JlKCBzY3JpcHQsIGhlYWQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fSxcblxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHNjcmlwdCApIHtcblx0XHRcdFx0XHRzY3JpcHQub25sb2FkKCB1bmRlZmluZWQsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBqUXVlcnkuaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxuXHRcdFx0cy5qc29ucENhbGxiYWNrO1xuXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxuXHRcdGlmICgganNvblByb3AgKSB7XG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xuXHRcdFx0cy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcblx0XHR9XG5cblx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG5cdFx0cy5jb252ZXJ0ZXJzWyBcInNjcmlwdCBqc29uXCIgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XG5cdFx0XHRcdGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgXCIgd2FzIG5vdCBjYWxsZWRcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XG5cdFx0fTtcblxuXHRcdC8vIGZvcmNlIGpzb24gZGF0YVR5cGVcblx0XHRzLmRhdGFUeXBlc1sgMCBdID0gXCJqc29uXCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXG5cdFx0b3ZlcndyaXR0ZW4gPSB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdO1xuXHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xuXHRcdH07XG5cblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcblx0XHRqcVhIUi5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyB2YWx1ZSBkaWRuJ3QgZXhpc3QgLSByZW1vdmUgaXRcblx0XHRcdGlmICggb3ZlcndyaXR0ZW4gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0alF1ZXJ5KCB3aW5kb3cgKS5yZW1vdmVQcm9wKCBjYWxsYmFja05hbWUgKTtcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHJlc3RvcmUgcHJlZXhpc3RpbmcgdmFsdWVcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2F2ZSBiYWNrIGFzIGZyZWVcblx0XHRcdGlmICggc1sgY2FsbGJhY2tOYW1lIF0gKSB7XG5cblx0XHRcdFx0Ly8gbWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHQvLyBzYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG5cdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0gKTtcblxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIGRhdGE6IHN0cmluZyBvZiBodG1sXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsXG4vLyBkZWZhdWx0cyB0byBkb2N1bWVudFxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdHZhciBwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKSxcblx0XHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vLyBLZWVwIGEgY29weSBvZiB0aGUgb2xkIGxvYWQgbWV0aG9kXG52YXIgX2xvYWQgPSBqUXVlcnkuZm4ubG9hZDtcblxuLyoqXG4gKiBMb2FkIGEgdXJsIGludG8gYSBwYWdlXG4gKi9cbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcblx0aWYgKCB0eXBlb2YgdXJsICE9PSBcInN0cmluZ1wiICYmIF9sb2FkICkge1xuXHRcdHJldHVybiBfbG9hZC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdH1cblxuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBqUXVlcnkudHJpbSggdXJsLnNsaWNlKCBvZmYsIHVybC5sZW5ndGggKSApO1xuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XG5cdH1cblxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXG5cdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9ICkuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoIFwiPGRpdj5cIiApLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdC8vIGJ1dCB0aGV5IGFyZSBpZ25vcmVkIGJlY2F1c2UgcmVzcG9uc2Ugd2FzIHNldCBhYm92ZS5cblx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjYWxsYmFjay5hcHBseSggdGhpcywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxuLy8gQXR0YWNoIGEgYnVuY2ggb2YgZnVuY3Rpb25zIGZvciBoYW5kbGluZyBjb21tb24gQUpBWCBldmVudHNcbmpRdWVyeS5lYWNoKCBbXG5cdFwiYWpheFN0YXJ0XCIsXG5cdFwiYWpheFN0b3BcIixcblx0XCJhamF4Q29tcGxldGVcIixcblx0XCJhamF4RXJyb3JcIixcblx0XCJhamF4U3VjY2Vzc1wiLFxuXHRcImFqYXhTZW5kXCJcbl0sIGZ1bmN0aW9uKCBpLCB0eXBlICkge1xuXHRqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcblx0fTtcbn0gKTtcblxuXG5cblxualF1ZXJ5LmV4cHIuZmlsdGVycy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSApLmxlbmd0aDtcbn07XG5cblxuXG5cblxuLyoqXG4gKiBHZXRzIGEgd2luZG93IGZyb20gYW4gZWxlbWVudFxuICovXG5mdW5jdGlvbiBnZXRXaW5kb3coIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSA/XG5cdFx0ZWxlbSA6XG5cdFx0ZWxlbS5ub2RlVHlwZSA9PT0gOSA/XG5cdFx0XHRlbGVtLmRlZmF1bHRWaWV3IHx8IGVsZW0ucGFyZW50V2luZG93IDpcblx0XHRcdGZhbHNlO1xufVxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIHNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdGpRdWVyeS5pbkFycmF5KCBcImF1dG9cIiwgWyBjdXJDU1NUb3AsIGN1ckNTU0xlZnQgXSApID4gLTE7XG5cblx0XHQvLyBuZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlciB0b3Agb3IgbGVmdFxuXHRcdC8vIGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XG5cdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblxuXHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMgOlxuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XG5cdFx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHR2YXIgZG9jRWxlbSwgd2luLFxuXHRcdFx0Ym94ID0geyB0b3A6IDAsIGxlZnQ6IDAgfSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRkb2MgPSBlbGVtICYmIGVsZW0ub3duZXJEb2N1bWVudDtcblxuXHRcdGlmICggIWRvYyApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRkb2NFbGVtID0gZG9jLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdC8vIE1ha2Ugc3VyZSBpdCdzIG5vdCBhIGRpc2Nvbm5lY3RlZCBET00gbm9kZVxuXHRcdGlmICggIWpRdWVyeS5jb250YWlucyggZG9jRWxlbSwgZWxlbSApICkge1xuXHRcdFx0cmV0dXJuIGJveDtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBkb24ndCBoYXZlIGdCQ1IsIGp1c3QgdXNlIDAsMCByYXRoZXIgdGhhbiBlcnJvclxuXHRcdC8vIEJsYWNrQmVycnkgNSwgaU9TIDMgKG9yaWdpbmFsIGlQaG9uZSlcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdGJveCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0fVxuXHRcdHdpbiA9IGdldFdpbmRvdyggZG9jICk7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogYm94LnRvcCAgKyAoIHdpbi5wYWdlWU9mZnNldCB8fCBkb2NFbGVtLnNjcm9sbFRvcCApICAtICggZG9jRWxlbS5jbGllbnRUb3AgIHx8IDAgKSxcblx0XHRcdGxlZnQ6IGJveC5sZWZ0ICsgKCB3aW4ucGFnZVhPZmZzZXQgfHwgZG9jRWxlbS5zY3JvbGxMZWZ0ICkgLSAoIGRvY0VsZW0uY2xpZW50TGVmdCB8fCAwIClcblx0XHR9O1xuXHR9LFxuXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHQvLyBGaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gd2luZG93IChwYXJlbnRPZmZzZXQgPSB7dG9wOjAsIGxlZnQ6IDB9LFxuXHRcdC8vIGJlY2F1c2UgaXQgaXMgaXRzIG9ubHkgb2Zmc2V0IHBhcmVudFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gd2UgYXNzdW1lIHRoYXQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGlzIGF2YWlsYWJsZSB3aGVuIGNvbXB1dGVkIHBvc2l0aW9uIGlzIGZpeGVkXG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEdldCAqcmVhbCogb2Zmc2V0UGFyZW50XG5cdFx0XHRvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudCgpO1xuXG5cdFx0XHQvLyBHZXQgY29ycmVjdCBvZmZzZXRzXG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXHRcdFx0aWYgKCAhalF1ZXJ5Lm5vZGVOYW1lKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJodG1sXCIgKSApIHtcblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0gb2Zmc2V0UGFyZW50Lm9mZnNldCgpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb2Zmc2V0UGFyZW50IGJvcmRlcnNcblx0XHRcdHBhcmVudE9mZnNldC50b3AgICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudFsgMCBdLCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdHBhcmVudE9mZnNldC5sZWZ0ICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudFsgMCBdLCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdC8vIG5vdGU6IHdoZW4gYW4gZWxlbWVudCBoYXMgbWFyZ2luOiBhdXRvIHRoZSBvZmZzZXRMZWZ0IGFuZCBtYXJnaW5MZWZ0XG5cdFx0Ly8gYXJlIHRoZSBzYW1lIGluIFNhZmFyaSBjYXVzaW5nIG9mZnNldC5sZWZ0IHRvIGluY29ycmVjdGx5IGJlIDBcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiAgb2Zmc2V0LnRvcCAgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcblxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgKCAhalF1ZXJ5Lm5vZGVOYW1lKCBvZmZzZXRQYXJlbnQsIFwiaHRtbFwiICkgJiZcblx0XHRcdFx0alF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApICkge1xuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gL1kvLnRlc3QoIHByb3AgKTtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cdFx0XHR2YXIgd2luID0gZ2V0V2luZG93KCBlbGVtICk7XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyAoIHByb3AgaW4gd2luICkgPyB3aW5bIHByb3AgXSA6XG5cdFx0XHRcdFx0d2luLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgbWV0aG9kIF0gOlxuXHRcdFx0XHRcdGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiBqUXVlcnkoIHdpbiApLnNjcm9sbExlZnQoKSxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiBqUXVlcnkoIHdpbiApLnNjcm9sbFRvcCgpXG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoLCBudWxsICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaTw3LTgrLCBDaHJvbWU8MzctNDQrXG4vLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxuLy8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0XG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwgd2UganVzdCBjaGVjayBmb3IgaXQgaGVyZVxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIGksIHByb3AgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdFx0Y29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTtcblxuXHRcdFx0XHQvLyBpZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxuXHRcdFx0XHRcdGNvbXB1dGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcbn0gKTtcblxuXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHtcblx0alF1ZXJ5LmVhY2goIHsgcGFkZGluZzogXCJpbm5lclwiICsgbmFtZSwgY29udGVudDogdHlwZSwgXCJcIjogXCJvdXRlclwiICsgbmFtZSB9LFxuXHRmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIG1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIEFzIG9mIDUvOC8yMDEyIHRoaXMgd2lsbCB5aWVsZCBpbmNvcnJlY3QgcmVzdWx0cyBmb3IgTW9iaWxlIFNhZmFyaSwgYnV0IHRoZXJlXG5cdFx0XHRcdFx0Ly8gaXNuJ3QgYSB3aG9sZSBsb3Qgd2UgY2FuIGRvLiBTZWUgcHVsbCByZXF1ZXN0IGF0IHRoaXMgVVJMIGZvciBkaXNjdXNzaW9uOlxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNzY0XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0Ly8gdW5mb3J0dW5hdGVseSwgdGhpcyBjYXVzZXMgYnVnICMzODM4IGluIElFNi84IG9ubHksXG5cdFx0XHRcdFx0Ly8gYnV0IHRoZXJlIGlzIGN1cnJlbnRseSBubyBnb29kLCBzbWFsbCB3YXkgdG8gZml4IGl0LlxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSwgbnVsbCApO1xuXHRcdH07XG5cdH0gKTtcbn0gKTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG5cdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcblx0XHRcdHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9XG59ICk7XG5cbi8vIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgY29udGFpbmVkIGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5qUXVlcnkuZm4uc2l6ZSA9IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcy5sZW5ndGg7XG59O1xuXG5qUXVlcnkuZm4uYW5kU2VsZiA9IGpRdWVyeS5mbi5hZGRCYWNrO1xuXG5cblxuXG4vLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcbi8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcbi8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxuLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxuLy8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXG4vLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcbi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cblxuLy8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcbi8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cbi8vIEFNRCBsb2FkZXIgaXMgcHJlc2VudC4galF1ZXJ5IGlzIGEgc3BlY2lhbCBjYXNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXG5cbmlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cdGRlZmluZSggXCJqcXVlcnlcIiwgW10sIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnk7XG5cdH0gKTtcbn1cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpblxuLy8gQU1EICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggIW5vR2xvYmFsICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cbnJldHVybiBqUXVlcnk7XG59KSk7XG4iLCIvLyBTVkdQYXRoU2VnIEFQSSBwb2x5ZmlsbFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3Byb2dlcnMvcGF0aHNlZ1xuLy9cbi8vIFRoaXMgaXMgYSBkcm9wLWluIHJlcGxhY2VtZW50IGZvciB0aGUgU1ZHUGF0aFNlZyBhbmQgU1ZHUGF0aFNlZ0xpc3QgQVBJcyB0aGF0IHdlcmUgcmVtb3ZlZCBmcm9tXG4vLyBTVkcyIChodHRwczovL2xpc3RzLnczLm9yZy9BcmNoaXZlcy9QdWJsaWMvd3d3LXN2Zy8yMDE1SnVuLzAwNDQuaHRtbCksIGluY2x1ZGluZyB0aGUgbGF0ZXN0IHNwZWNcbi8vIGNoYW5nZXMgd2hpY2ggd2VyZSBpbXBsZW1lbnRlZCBpbiBGaXJlZm94IDQzIGFuZCBDaHJvbWUgNDYuXG5cbihmdW5jdGlvbigpIHsgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgaWYgKCEoXCJTVkdQYXRoU2VnXCIgaW4gd2luZG93KSkge1xuICAgICAgICAvLyBTcGVjOiBodHRwOi8vd3d3LnczLm9yZy9UUi9TVkcxMS9zaW5nbGUtcGFnZS5odG1sI3BhdGhzLUludGVyZmFjZVNWR1BhdGhTZWdcbiAgICAgICAgd2luZG93LlNWR1BhdGhTZWcgPSBmdW5jdGlvbih0eXBlLCB0eXBlQXNMZXR0ZXIsIG93bmluZ1BhdGhTZWdMaXN0KSB7XG4gICAgICAgICAgICB0aGlzLnBhdGhTZWdUeXBlID0gdHlwZTtcbiAgICAgICAgICAgIHRoaXMucGF0aFNlZ1R5cGVBc0xldHRlciA9IHR5cGVBc0xldHRlcjtcbiAgICAgICAgICAgIHRoaXMuX293bmluZ1BhdGhTZWdMaXN0ID0gb3duaW5nUGF0aFNlZ0xpc3Q7XG4gICAgICAgIH1cblxuICAgICAgICBTVkdQYXRoU2VnLnByb3RvdHlwZS5jbGFzc25hbWUgPSBcIlNWR1BhdGhTZWdcIjtcblxuICAgICAgICBTVkdQYXRoU2VnLlBBVEhTRUdfVU5LTk9XTiA9IDA7XG4gICAgICAgIFNWR1BhdGhTZWcuUEFUSFNFR19DTE9TRVBBVEggPSAxO1xuICAgICAgICBTVkdQYXRoU2VnLlBBVEhTRUdfTU9WRVRPX0FCUyA9IDI7XG4gICAgICAgIFNWR1BhdGhTZWcuUEFUSFNFR19NT1ZFVE9fUkVMID0gMztcbiAgICAgICAgU1ZHUGF0aFNlZy5QQVRIU0VHX0xJTkVUT19BQlMgPSA0O1xuICAgICAgICBTVkdQYXRoU2VnLlBBVEhTRUdfTElORVRPX1JFTCA9IDU7XG4gICAgICAgIFNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX0NVQklDX0FCUyA9IDY7XG4gICAgICAgIFNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX0NVQklDX1JFTCA9IDc7XG4gICAgICAgIFNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX1FVQURSQVRJQ19BQlMgPSA4O1xuICAgICAgICBTVkdQYXRoU2VnLlBBVEhTRUdfQ1VSVkVUT19RVUFEUkFUSUNfUkVMID0gOTtcbiAgICAgICAgU1ZHUGF0aFNlZy5QQVRIU0VHX0FSQ19BQlMgPSAxMDtcbiAgICAgICAgU1ZHUGF0aFNlZy5QQVRIU0VHX0FSQ19SRUwgPSAxMTtcbiAgICAgICAgU1ZHUGF0aFNlZy5QQVRIU0VHX0xJTkVUT19IT1JJWk9OVEFMX0FCUyA9IDEyO1xuICAgICAgICBTVkdQYXRoU2VnLlBBVEhTRUdfTElORVRPX0hPUklaT05UQUxfUkVMID0gMTM7XG4gICAgICAgIFNWR1BhdGhTZWcuUEFUSFNFR19MSU5FVE9fVkVSVElDQUxfQUJTID0gMTQ7XG4gICAgICAgIFNWR1BhdGhTZWcuUEFUSFNFR19MSU5FVE9fVkVSVElDQUxfUkVMID0gMTU7XG4gICAgICAgIFNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX0NVQklDX1NNT09USF9BQlMgPSAxNjtcbiAgICAgICAgU1ZHUGF0aFNlZy5QQVRIU0VHX0NVUlZFVE9fQ1VCSUNfU01PT1RIX1JFTCA9IDE3O1xuICAgICAgICBTVkdQYXRoU2VnLlBBVEhTRUdfQ1VSVkVUT19RVUFEUkFUSUNfU01PT1RIX0FCUyA9IDE4O1xuICAgICAgICBTVkdQYXRoU2VnLlBBVEhTRUdfQ1VSVkVUT19RVUFEUkFUSUNfU01PT1RIX1JFTCA9IDE5O1xuXG4gICAgICAgIC8vIE5vdGlmeSBvd25pbmcgUGF0aFNlZ0xpc3Qgb24gYW55IGNoYW5nZXMgc28gdGhleSBjYW4gYmUgc3luY2hyb25pemVkIGJhY2sgdG8gdGhlIHBhdGggZWxlbWVudC5cbiAgICAgICAgU1ZHUGF0aFNlZy5wcm90b3R5cGUuX3NlZ21lbnRDaGFuZ2VkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fb3duaW5nUGF0aFNlZ0xpc3QpXG4gICAgICAgICAgICAgICAgdGhpcy5fb3duaW5nUGF0aFNlZ0xpc3Quc2VnbWVudENoYW5nZWQodGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0Nsb3NlUGF0aCA9IGZ1bmN0aW9uKG93bmluZ1BhdGhTZWdMaXN0KSB7XG4gICAgICAgICAgICBTVkdQYXRoU2VnLmNhbGwodGhpcywgU1ZHUGF0aFNlZy5QQVRIU0VHX0NMT1NFUEFUSCwgXCJ6XCIsIG93bmluZ1BhdGhTZWdMaXN0KTtcbiAgICAgICAgfVxuICAgICAgICBTVkdQYXRoU2VnQ2xvc2VQYXRoLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU1ZHUGF0aFNlZy5wcm90b3R5cGUpO1xuICAgICAgICBTVkdQYXRoU2VnQ2xvc2VQYXRoLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gXCJbb2JqZWN0IFNWR1BhdGhTZWdDbG9zZVBhdGhdXCI7IH1cbiAgICAgICAgU1ZHUGF0aFNlZ0Nsb3NlUGF0aC5wcm90b3R5cGUuX2FzUGF0aFN0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5wYXRoU2VnVHlwZUFzTGV0dGVyOyB9XG4gICAgICAgIFNWR1BhdGhTZWdDbG9zZVBhdGgucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7IHJldHVybiBuZXcgU1ZHUGF0aFNlZ0Nsb3NlUGF0aCh1bmRlZmluZWQpOyB9XG5cbiAgICAgICAgd2luZG93LlNWR1BhdGhTZWdNb3ZldG9BYnMgPSBmdW5jdGlvbihvd25pbmdQYXRoU2VnTGlzdCwgeCwgeSkge1xuICAgICAgICAgICAgU1ZHUGF0aFNlZy5jYWxsKHRoaXMsIFNWR1BhdGhTZWcuUEFUSFNFR19NT1ZFVE9fQUJTLCBcIk1cIiwgb3duaW5nUGF0aFNlZ0xpc3QpO1xuICAgICAgICAgICAgdGhpcy5feCA9IHg7XG4gICAgICAgICAgICB0aGlzLl95ID0geTtcbiAgICAgICAgfVxuICAgICAgICBTVkdQYXRoU2VnTW92ZXRvQWJzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU1ZHUGF0aFNlZy5wcm90b3R5cGUpO1xuICAgICAgICBTVkdQYXRoU2VnTW92ZXRvQWJzLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gXCJbb2JqZWN0IFNWR1BhdGhTZWdNb3ZldG9BYnNdXCI7IH1cbiAgICAgICAgU1ZHUGF0aFNlZ01vdmV0b0Ficy5wcm90b3R5cGUuX2FzUGF0aFN0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5wYXRoU2VnVHlwZUFzTGV0dGVyICsgXCIgXCIgKyB0aGlzLl94ICsgXCIgXCIgKyB0aGlzLl95OyB9XG4gICAgICAgIFNWR1BhdGhTZWdNb3ZldG9BYnMucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7IHJldHVybiBuZXcgU1ZHUGF0aFNlZ01vdmV0b0Ficyh1bmRlZmluZWQsIHRoaXMuX3gsIHRoaXMuX3kpOyB9XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTVkdQYXRoU2VnTW92ZXRvQWJzLnByb3RvdHlwZSwgXCJ4XCIsIHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuX3g7IH0sIHNldDogZnVuY3Rpb24oeCkgeyB0aGlzLl94ID0geDsgdGhpcy5fc2VnbWVudENoYW5nZWQoKTsgfSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNWR1BhdGhTZWdNb3ZldG9BYnMucHJvdG90eXBlLCBcInlcIiwgeyBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5feTsgfSwgc2V0OiBmdW5jdGlvbih5KSB7IHRoaXMuX3kgPSB5OyB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpOyB9LCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuXG4gICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTW92ZXRvUmVsID0gZnVuY3Rpb24ob3duaW5nUGF0aFNlZ0xpc3QsIHgsIHkpIHtcbiAgICAgICAgICAgIFNWR1BhdGhTZWcuY2FsbCh0aGlzLCBTVkdQYXRoU2VnLlBBVEhTRUdfTU9WRVRPX1JFTCwgXCJtXCIsIG93bmluZ1BhdGhTZWdMaXN0KTtcbiAgICAgICAgICAgIHRoaXMuX3ggPSB4O1xuICAgICAgICAgICAgdGhpcy5feSA9IHk7XG4gICAgICAgIH1cbiAgICAgICAgU1ZHUGF0aFNlZ01vdmV0b1JlbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFNWR1BhdGhTZWcucHJvdG90eXBlKTtcbiAgICAgICAgU1ZHUGF0aFNlZ01vdmV0b1JlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIFwiW29iamVjdCBTVkdQYXRoU2VnTW92ZXRvUmVsXVwiOyB9XG4gICAgICAgIFNWR1BhdGhTZWdNb3ZldG9SZWwucHJvdG90eXBlLl9hc1BhdGhTdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMucGF0aFNlZ1R5cGVBc0xldHRlciArIFwiIFwiICsgdGhpcy5feCArIFwiIFwiICsgdGhpcy5feTsgfVxuICAgICAgICBTVkdQYXRoU2VnTW92ZXRvUmVsLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gbmV3IFNWR1BhdGhTZWdNb3ZldG9SZWwodW5kZWZpbmVkLCB0aGlzLl94LCB0aGlzLl95KTsgfVxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU1ZHUGF0aFNlZ01vdmV0b1JlbC5wcm90b3R5cGUsIFwieFwiLCB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLl94OyB9LCBzZXQ6IGZ1bmN0aW9uKHgpIHsgdGhpcy5feCA9IHg7IHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7IH0sIGVudW1lcmFibGU6IHRydWUgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTVkdQYXRoU2VnTW92ZXRvUmVsLnByb3RvdHlwZSwgXCJ5XCIsIHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuX3k7IH0sIHNldDogZnVuY3Rpb24oeSkgeyB0aGlzLl95ID0geTsgdGhpcy5fc2VnbWVudENoYW5nZWQoKTsgfSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcblxuICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b0FicyA9IGZ1bmN0aW9uKG93bmluZ1BhdGhTZWdMaXN0LCB4LCB5KSB7XG4gICAgICAgICAgICBTVkdQYXRoU2VnLmNhbGwodGhpcywgU1ZHUGF0aFNlZy5QQVRIU0VHX0xJTkVUT19BQlMsIFwiTFwiLCBvd25pbmdQYXRoU2VnTGlzdCk7XG4gICAgICAgICAgICB0aGlzLl94ID0geDtcbiAgICAgICAgICAgIHRoaXMuX3kgPSB5O1xuICAgICAgICB9XG4gICAgICAgIFNWR1BhdGhTZWdMaW5ldG9BYnMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTVkdQYXRoU2VnLnByb3RvdHlwZSk7XG4gICAgICAgIFNWR1BhdGhTZWdMaW5ldG9BYnMucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBcIltvYmplY3QgU1ZHUGF0aFNlZ0xpbmV0b0Fic11cIjsgfVxuICAgICAgICBTVkdQYXRoU2VnTGluZXRvQWJzLnByb3RvdHlwZS5fYXNQYXRoU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLnBhdGhTZWdUeXBlQXNMZXR0ZXIgKyBcIiBcIiArIHRoaXMuX3ggKyBcIiBcIiArIHRoaXMuX3k7IH1cbiAgICAgICAgU1ZHUGF0aFNlZ0xpbmV0b0Ficy5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIG5ldyBTVkdQYXRoU2VnTGluZXRvQWJzKHVuZGVmaW5lZCwgdGhpcy5feCwgdGhpcy5feSk7IH1cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNWR1BhdGhTZWdMaW5ldG9BYnMucHJvdG90eXBlLCBcInhcIiwgeyBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5feDsgfSwgc2V0OiBmdW5jdGlvbih4KSB7IHRoaXMuX3ggPSB4OyB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpOyB9LCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU1ZHUGF0aFNlZ0xpbmV0b0Ficy5wcm90b3R5cGUsIFwieVwiLCB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLl95OyB9LCBzZXQ6IGZ1bmN0aW9uKHkpIHsgdGhpcy5feSA9IHk7IHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7IH0sIGVudW1lcmFibGU6IHRydWUgfSk7XG5cbiAgICAgICAgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9SZWwgPSBmdW5jdGlvbihvd25pbmdQYXRoU2VnTGlzdCwgeCwgeSkge1xuICAgICAgICAgICAgU1ZHUGF0aFNlZy5jYWxsKHRoaXMsIFNWR1BhdGhTZWcuUEFUSFNFR19MSU5FVE9fUkVMLCBcImxcIiwgb3duaW5nUGF0aFNlZ0xpc3QpO1xuICAgICAgICAgICAgdGhpcy5feCA9IHg7XG4gICAgICAgICAgICB0aGlzLl95ID0geTtcbiAgICAgICAgfVxuICAgICAgICBTVkdQYXRoU2VnTGluZXRvUmVsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU1ZHUGF0aFNlZy5wcm90b3R5cGUpO1xuICAgICAgICBTVkdQYXRoU2VnTGluZXRvUmVsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gXCJbb2JqZWN0IFNWR1BhdGhTZWdMaW5ldG9SZWxdXCI7IH1cbiAgICAgICAgU1ZHUGF0aFNlZ0xpbmV0b1JlbC5wcm90b3R5cGUuX2FzUGF0aFN0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5wYXRoU2VnVHlwZUFzTGV0dGVyICsgXCIgXCIgKyB0aGlzLl94ICsgXCIgXCIgKyB0aGlzLl95OyB9XG4gICAgICAgIFNWR1BhdGhTZWdMaW5ldG9SZWwucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7IHJldHVybiBuZXcgU1ZHUGF0aFNlZ0xpbmV0b1JlbCh1bmRlZmluZWQsIHRoaXMuX3gsIHRoaXMuX3kpOyB9XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTVkdQYXRoU2VnTGluZXRvUmVsLnByb3RvdHlwZSwgXCJ4XCIsIHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuX3g7IH0sIHNldDogZnVuY3Rpb24oeCkgeyB0aGlzLl94ID0geDsgdGhpcy5fc2VnbWVudENoYW5nZWQoKTsgfSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNWR1BhdGhTZWdMaW5ldG9SZWwucHJvdG90eXBlLCBcInlcIiwgeyBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5feTsgfSwgc2V0OiBmdW5jdGlvbih5KSB7IHRoaXMuX3kgPSB5OyB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpOyB9LCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuXG4gICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b0N1YmljQWJzID0gZnVuY3Rpb24ob3duaW5nUGF0aFNlZ0xpc3QsIHgsIHksIHgxLCB5MSwgeDIsIHkyKSB7XG4gICAgICAgICAgICBTVkdQYXRoU2VnLmNhbGwodGhpcywgU1ZHUGF0aFNlZy5QQVRIU0VHX0NVUlZFVE9fQ1VCSUNfQUJTLCBcIkNcIiwgb3duaW5nUGF0aFNlZ0xpc3QpO1xuICAgICAgICAgICAgdGhpcy5feCA9IHg7XG4gICAgICAgICAgICB0aGlzLl95ID0geTtcbiAgICAgICAgICAgIHRoaXMuX3gxID0geDE7XG4gICAgICAgICAgICB0aGlzLl95MSA9IHkxO1xuICAgICAgICAgICAgdGhpcy5feDIgPSB4MjtcbiAgICAgICAgICAgIHRoaXMuX3kyID0geTI7XG4gICAgICAgIH1cbiAgICAgICAgU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY0Ficy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFNWR1BhdGhTZWcucHJvdG90eXBlKTtcbiAgICAgICAgU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY0Ficy5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIFwiW29iamVjdCBTVkdQYXRoU2VnQ3VydmV0b0N1YmljQWJzXVwiOyB9XG4gICAgICAgIFNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNBYnMucHJvdG90eXBlLl9hc1BhdGhTdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMucGF0aFNlZ1R5cGVBc0xldHRlciArIFwiIFwiICsgdGhpcy5feDEgKyBcIiBcIiArIHRoaXMuX3kxICsgXCIgXCIgKyB0aGlzLl94MiArIFwiIFwiICsgdGhpcy5feTIgKyBcIiBcIiArIHRoaXMuX3ggKyBcIiBcIiArIHRoaXMuX3k7IH1cbiAgICAgICAgU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY0Ficy5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIG5ldyBTVkdQYXRoU2VnQ3VydmV0b0N1YmljQWJzKHVuZGVmaW5lZCwgdGhpcy5feCwgdGhpcy5feSwgdGhpcy5feDEsIHRoaXMuX3kxLCB0aGlzLl94MiwgdGhpcy5feTIpOyB9XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTVkdQYXRoU2VnQ3VydmV0b0N1YmljQWJzLnByb3RvdHlwZSwgXCJ4XCIsIHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuX3g7IH0sIHNldDogZnVuY3Rpb24oeCkgeyB0aGlzLl94ID0geDsgdGhpcy5fc2VnbWVudENoYW5nZWQoKTsgfSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNBYnMucHJvdG90eXBlLCBcInlcIiwgeyBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5feTsgfSwgc2V0OiBmdW5jdGlvbih5KSB7IHRoaXMuX3kgPSB5OyB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpOyB9LCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY0Ficy5wcm90b3R5cGUsIFwieDFcIiwgeyBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5feDE7IH0sIHNldDogZnVuY3Rpb24oeDEpIHsgdGhpcy5feDEgPSB4MTsgdGhpcy5fc2VnbWVudENoYW5nZWQoKTsgfSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNBYnMucHJvdG90eXBlLCBcInkxXCIsIHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuX3kxOyB9LCBzZXQ6IGZ1bmN0aW9uKHkxKSB7IHRoaXMuX3kxID0geTE7IHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7IH0sIGVudW1lcmFibGU6IHRydWUgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTVkdQYXRoU2VnQ3VydmV0b0N1YmljQWJzLnByb3RvdHlwZSwgXCJ4MlwiLCB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLl94MjsgfSwgc2V0OiBmdW5jdGlvbih4MikgeyB0aGlzLl94MiA9IHgyOyB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpOyB9LCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY0Ficy5wcm90b3R5cGUsIFwieTJcIiwgeyBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5feTI7IH0sIHNldDogZnVuY3Rpb24oeTIpIHsgdGhpcy5feTIgPSB5MjsgdGhpcy5fc2VnbWVudENoYW5nZWQoKTsgfSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcblxuICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1JlbCA9IGZ1bmN0aW9uKG93bmluZ1BhdGhTZWdMaXN0LCB4LCB5LCB4MSwgeTEsIHgyLCB5Mikge1xuICAgICAgICAgICAgU1ZHUGF0aFNlZy5jYWxsKHRoaXMsIFNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX0NVQklDX1JFTCwgXCJjXCIsIG93bmluZ1BhdGhTZWdMaXN0KTtcbiAgICAgICAgICAgIHRoaXMuX3ggPSB4O1xuICAgICAgICAgICAgdGhpcy5feSA9IHk7XG4gICAgICAgICAgICB0aGlzLl94MSA9IHgxO1xuICAgICAgICAgICAgdGhpcy5feTEgPSB5MTtcbiAgICAgICAgICAgIHRoaXMuX3gyID0geDI7XG4gICAgICAgICAgICB0aGlzLl95MiA9IHkyO1xuICAgICAgICB9XG4gICAgICAgIFNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNSZWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTVkdQYXRoU2VnLnByb3RvdHlwZSk7XG4gICAgICAgIFNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNSZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBcIltvYmplY3QgU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1JlbF1cIjsgfVxuICAgICAgICBTVkdQYXRoU2VnQ3VydmV0b0N1YmljUmVsLnByb3RvdHlwZS5fYXNQYXRoU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLnBhdGhTZWdUeXBlQXNMZXR0ZXIgKyBcIiBcIiArIHRoaXMuX3gxICsgXCIgXCIgKyB0aGlzLl95MSArIFwiIFwiICsgdGhpcy5feDIgKyBcIiBcIiArIHRoaXMuX3kyICsgXCIgXCIgKyB0aGlzLl94ICsgXCIgXCIgKyB0aGlzLl95OyB9XG4gICAgICAgIFNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNSZWwucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7IHJldHVybiBuZXcgU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1JlbCh1bmRlZmluZWQsIHRoaXMuX3gsIHRoaXMuX3ksIHRoaXMuX3gxLCB0aGlzLl95MSwgdGhpcy5feDIsIHRoaXMuX3kyKTsgfVxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1JlbC5wcm90b3R5cGUsIFwieFwiLCB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLl94OyB9LCBzZXQ6IGZ1bmN0aW9uKHgpIHsgdGhpcy5feCA9IHg7IHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7IH0sIGVudW1lcmFibGU6IHRydWUgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTVkdQYXRoU2VnQ3VydmV0b0N1YmljUmVsLnByb3RvdHlwZSwgXCJ5XCIsIHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuX3k7IH0sIHNldDogZnVuY3Rpb24oeSkgeyB0aGlzLl95ID0geTsgdGhpcy5fc2VnbWVudENoYW5nZWQoKTsgfSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNSZWwucHJvdG90eXBlLCBcIngxXCIsIHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuX3gxOyB9LCBzZXQ6IGZ1bmN0aW9uKHgxKSB7IHRoaXMuX3gxID0geDE7IHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7IH0sIGVudW1lcmFibGU6IHRydWUgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTVkdQYXRoU2VnQ3VydmV0b0N1YmljUmVsLnByb3RvdHlwZSwgXCJ5MVwiLCB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLl95MTsgfSwgc2V0OiBmdW5jdGlvbih5MSkgeyB0aGlzLl95MSA9IHkxOyB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpOyB9LCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1JlbC5wcm90b3R5cGUsIFwieDJcIiwgeyBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5feDI7IH0sIHNldDogZnVuY3Rpb24oeDIpIHsgdGhpcy5feDIgPSB4MjsgdGhpcy5fc2VnbWVudENoYW5nZWQoKTsgfSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNSZWwucHJvdG90eXBlLCBcInkyXCIsIHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuX3kyOyB9LCBzZXQ6IGZ1bmN0aW9uKHkyKSB7IHRoaXMuX3kyID0geTI7IHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7IH0sIGVudW1lcmFibGU6IHRydWUgfSk7XG5cbiAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljQWJzID0gZnVuY3Rpb24ob3duaW5nUGF0aFNlZ0xpc3QsIHgsIHksIHgxLCB5MSkge1xuICAgICAgICAgICAgU1ZHUGF0aFNlZy5jYWxsKHRoaXMsIFNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX1FVQURSQVRJQ19BQlMsIFwiUVwiLCBvd25pbmdQYXRoU2VnTGlzdCk7XG4gICAgICAgICAgICB0aGlzLl94ID0geDtcbiAgICAgICAgICAgIHRoaXMuX3kgPSB5O1xuICAgICAgICAgICAgdGhpcy5feDEgPSB4MTtcbiAgICAgICAgICAgIHRoaXMuX3kxID0geTE7XG4gICAgICAgIH1cbiAgICAgICAgU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNBYnMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTVkdQYXRoU2VnLnByb3RvdHlwZSk7XG4gICAgICAgIFNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljQWJzLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gXCJbb2JqZWN0IFNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljQWJzXVwiOyB9XG4gICAgICAgIFNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljQWJzLnByb3RvdHlwZS5fYXNQYXRoU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLnBhdGhTZWdUeXBlQXNMZXR0ZXIgKyBcIiBcIiArIHRoaXMuX3gxICsgXCIgXCIgKyB0aGlzLl95MSArIFwiIFwiICsgdGhpcy5feCArIFwiIFwiICsgdGhpcy5feTsgfVxuICAgICAgICBTVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY0Ficy5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIG5ldyBTVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY0Ficyh1bmRlZmluZWQsIHRoaXMuX3gsIHRoaXMuX3ksIHRoaXMuX3gxLCB0aGlzLl95MSk7IH1cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljQWJzLnByb3RvdHlwZSwgXCJ4XCIsIHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuX3g7IH0sIHNldDogZnVuY3Rpb24oeCkgeyB0aGlzLl94ID0geDsgdGhpcy5fc2VnbWVudENoYW5nZWQoKTsgfSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljQWJzLnByb3RvdHlwZSwgXCJ5XCIsIHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuX3k7IH0sIHNldDogZnVuY3Rpb24oeSkgeyB0aGlzLl95ID0geTsgdGhpcy5fc2VnbWVudENoYW5nZWQoKTsgfSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljQWJzLnByb3RvdHlwZSwgXCJ4MVwiLCB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLl94MTsgfSwgc2V0OiBmdW5jdGlvbih4MSkgeyB0aGlzLl94MSA9IHgxOyB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpOyB9LCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNBYnMucHJvdG90eXBlLCBcInkxXCIsIHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuX3kxOyB9LCBzZXQ6IGZ1bmN0aW9uKHkxKSB7IHRoaXMuX3kxID0geTE7IHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7IH0sIGVudW1lcmFibGU6IHRydWUgfSk7XG5cbiAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljUmVsID0gZnVuY3Rpb24ob3duaW5nUGF0aFNlZ0xpc3QsIHgsIHksIHgxLCB5MSkge1xuICAgICAgICAgICAgU1ZHUGF0aFNlZy5jYWxsKHRoaXMsIFNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX1FVQURSQVRJQ19SRUwsIFwicVwiLCBvd25pbmdQYXRoU2VnTGlzdCk7XG4gICAgICAgICAgICB0aGlzLl94ID0geDtcbiAgICAgICAgICAgIHRoaXMuX3kgPSB5O1xuICAgICAgICAgICAgdGhpcy5feDEgPSB4MTtcbiAgICAgICAgICAgIHRoaXMuX3kxID0geTE7XG4gICAgICAgIH1cbiAgICAgICAgU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNSZWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTVkdQYXRoU2VnLnByb3RvdHlwZSk7XG4gICAgICAgIFNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljUmVsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gXCJbb2JqZWN0IFNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljUmVsXVwiOyB9XG4gICAgICAgIFNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljUmVsLnByb3RvdHlwZS5fYXNQYXRoU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLnBhdGhTZWdUeXBlQXNMZXR0ZXIgKyBcIiBcIiArIHRoaXMuX3gxICsgXCIgXCIgKyB0aGlzLl95MSArIFwiIFwiICsgdGhpcy5feCArIFwiIFwiICsgdGhpcy5feTsgfVxuICAgICAgICBTVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1JlbC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIG5ldyBTVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1JlbCh1bmRlZmluZWQsIHRoaXMuX3gsIHRoaXMuX3ksIHRoaXMuX3gxLCB0aGlzLl95MSk7IH1cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljUmVsLnByb3RvdHlwZSwgXCJ4XCIsIHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuX3g7IH0sIHNldDogZnVuY3Rpb24oeCkgeyB0aGlzLl94ID0geDsgdGhpcy5fc2VnbWVudENoYW5nZWQoKTsgfSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljUmVsLnByb3RvdHlwZSwgXCJ5XCIsIHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuX3k7IH0sIHNldDogZnVuY3Rpb24oeSkgeyB0aGlzLl95ID0geTsgdGhpcy5fc2VnbWVudENoYW5nZWQoKTsgfSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljUmVsLnByb3RvdHlwZSwgXCJ4MVwiLCB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLl94MTsgfSwgc2V0OiBmdW5jdGlvbih4MSkgeyB0aGlzLl94MSA9IHgxOyB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpOyB9LCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNSZWwucHJvdG90eXBlLCBcInkxXCIsIHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuX3kxOyB9LCBzZXQ6IGZ1bmN0aW9uKHkxKSB7IHRoaXMuX3kxID0geTE7IHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7IH0sIGVudW1lcmFibGU6IHRydWUgfSk7XG5cbiAgICAgICAgd2luZG93LlNWR1BhdGhTZWdBcmNBYnMgPSBmdW5jdGlvbihvd25pbmdQYXRoU2VnTGlzdCwgeCwgeSwgcjEsIHIyLCBhbmdsZSwgbGFyZ2VBcmNGbGFnLCBzd2VlcEZsYWcpIHtcbiAgICAgICAgICAgIFNWR1BhdGhTZWcuY2FsbCh0aGlzLCBTVkdQYXRoU2VnLlBBVEhTRUdfQVJDX0FCUywgXCJBXCIsIG93bmluZ1BhdGhTZWdMaXN0KTtcbiAgICAgICAgICAgIHRoaXMuX3ggPSB4O1xuICAgICAgICAgICAgdGhpcy5feSA9IHk7XG4gICAgICAgICAgICB0aGlzLl9yMSA9IHIxO1xuICAgICAgICAgICAgdGhpcy5fcjIgPSByMjtcbiAgICAgICAgICAgIHRoaXMuX2FuZ2xlID0gYW5nbGU7XG4gICAgICAgICAgICB0aGlzLl9sYXJnZUFyY0ZsYWcgPSBsYXJnZUFyY0ZsYWc7XG4gICAgICAgICAgICB0aGlzLl9zd2VlcEZsYWcgPSBzd2VlcEZsYWc7XG4gICAgICAgIH1cbiAgICAgICAgU1ZHUGF0aFNlZ0FyY0Ficy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFNWR1BhdGhTZWcucHJvdG90eXBlKTtcbiAgICAgICAgU1ZHUGF0aFNlZ0FyY0Ficy5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIFwiW29iamVjdCBTVkdQYXRoU2VnQXJjQWJzXVwiOyB9XG4gICAgICAgIFNWR1BhdGhTZWdBcmNBYnMucHJvdG90eXBlLl9hc1BhdGhTdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMucGF0aFNlZ1R5cGVBc0xldHRlciArIFwiIFwiICsgdGhpcy5fcjEgKyBcIiBcIiArIHRoaXMuX3IyICsgXCIgXCIgKyB0aGlzLl9hbmdsZSArIFwiIFwiICsgKHRoaXMuX2xhcmdlQXJjRmxhZyA/IFwiMVwiIDogXCIwXCIpICsgXCIgXCIgKyAodGhpcy5fc3dlZXBGbGFnID8gXCIxXCIgOiBcIjBcIikgKyBcIiBcIiArIHRoaXMuX3ggKyBcIiBcIiArIHRoaXMuX3k7IH1cbiAgICAgICAgU1ZHUGF0aFNlZ0FyY0Ficy5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIG5ldyBTVkdQYXRoU2VnQXJjQWJzKHVuZGVmaW5lZCwgdGhpcy5feCwgdGhpcy5feSwgdGhpcy5fcjEsIHRoaXMuX3IyLCB0aGlzLl9hbmdsZSwgdGhpcy5fbGFyZ2VBcmNGbGFnLCB0aGlzLl9zd2VlcEZsYWcpOyB9XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTVkdQYXRoU2VnQXJjQWJzLnByb3RvdHlwZSwgXCJ4XCIsIHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuX3g7IH0sIHNldDogZnVuY3Rpb24oeCkgeyB0aGlzLl94ID0geDsgdGhpcy5fc2VnbWVudENoYW5nZWQoKTsgfSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNWR1BhdGhTZWdBcmNBYnMucHJvdG90eXBlLCBcInlcIiwgeyBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5feTsgfSwgc2V0OiBmdW5jdGlvbih5KSB7IHRoaXMuX3kgPSB5OyB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpOyB9LCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU1ZHUGF0aFNlZ0FyY0Ficy5wcm90b3R5cGUsIFwicjFcIiwgeyBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5fcjE7IH0sIHNldDogZnVuY3Rpb24ocjEpIHsgdGhpcy5fcjEgPSByMTsgdGhpcy5fc2VnbWVudENoYW5nZWQoKTsgfSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNWR1BhdGhTZWdBcmNBYnMucHJvdG90eXBlLCBcInIyXCIsIHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuX3IyOyB9LCBzZXQ6IGZ1bmN0aW9uKHIyKSB7IHRoaXMuX3IyID0gcjI7IHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7IH0sIGVudW1lcmFibGU6IHRydWUgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTVkdQYXRoU2VnQXJjQWJzLnByb3RvdHlwZSwgXCJhbmdsZVwiLCB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLl9hbmdsZTsgfSwgc2V0OiBmdW5jdGlvbihhbmdsZSkgeyB0aGlzLl9hbmdsZSA9IGFuZ2xlOyB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpOyB9LCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU1ZHUGF0aFNlZ0FyY0Ficy5wcm90b3R5cGUsIFwibGFyZ2VBcmNGbGFnXCIsIHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuX2xhcmdlQXJjRmxhZzsgfSwgc2V0OiBmdW5jdGlvbihsYXJnZUFyY0ZsYWcpIHsgdGhpcy5fbGFyZ2VBcmNGbGFnID0gbGFyZ2VBcmNGbGFnOyB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpOyB9LCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU1ZHUGF0aFNlZ0FyY0Ficy5wcm90b3R5cGUsIFwic3dlZXBGbGFnXCIsIHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuX3N3ZWVwRmxhZzsgfSwgc2V0OiBmdW5jdGlvbihzd2VlcEZsYWcpIHsgdGhpcy5fc3dlZXBGbGFnID0gc3dlZXBGbGFnOyB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpOyB9LCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuXG4gICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQXJjUmVsID0gZnVuY3Rpb24ob3duaW5nUGF0aFNlZ0xpc3QsIHgsIHksIHIxLCByMiwgYW5nbGUsIGxhcmdlQXJjRmxhZywgc3dlZXBGbGFnKSB7XG4gICAgICAgICAgICBTVkdQYXRoU2VnLmNhbGwodGhpcywgU1ZHUGF0aFNlZy5QQVRIU0VHX0FSQ19SRUwsIFwiYVwiLCBvd25pbmdQYXRoU2VnTGlzdCk7XG4gICAgICAgICAgICB0aGlzLl94ID0geDtcbiAgICAgICAgICAgIHRoaXMuX3kgPSB5O1xuICAgICAgICAgICAgdGhpcy5fcjEgPSByMTtcbiAgICAgICAgICAgIHRoaXMuX3IyID0gcjI7XG4gICAgICAgICAgICB0aGlzLl9hbmdsZSA9IGFuZ2xlO1xuICAgICAgICAgICAgdGhpcy5fbGFyZ2VBcmNGbGFnID0gbGFyZ2VBcmNGbGFnO1xuICAgICAgICAgICAgdGhpcy5fc3dlZXBGbGFnID0gc3dlZXBGbGFnO1xuICAgICAgICB9XG4gICAgICAgIFNWR1BhdGhTZWdBcmNSZWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTVkdQYXRoU2VnLnByb3RvdHlwZSk7XG4gICAgICAgIFNWR1BhdGhTZWdBcmNSZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBcIltvYmplY3QgU1ZHUGF0aFNlZ0FyY1JlbF1cIjsgfVxuICAgICAgICBTVkdQYXRoU2VnQXJjUmVsLnByb3RvdHlwZS5fYXNQYXRoU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLnBhdGhTZWdUeXBlQXNMZXR0ZXIgKyBcIiBcIiArIHRoaXMuX3IxICsgXCIgXCIgKyB0aGlzLl9yMiArIFwiIFwiICsgdGhpcy5fYW5nbGUgKyBcIiBcIiArICh0aGlzLl9sYXJnZUFyY0ZsYWcgPyBcIjFcIiA6IFwiMFwiKSArIFwiIFwiICsgKHRoaXMuX3N3ZWVwRmxhZyA/IFwiMVwiIDogXCIwXCIpICsgXCIgXCIgKyB0aGlzLl94ICsgXCIgXCIgKyB0aGlzLl95OyB9XG4gICAgICAgIFNWR1BhdGhTZWdBcmNSZWwucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7IHJldHVybiBuZXcgU1ZHUGF0aFNlZ0FyY1JlbCh1bmRlZmluZWQsIHRoaXMuX3gsIHRoaXMuX3ksIHRoaXMuX3IxLCB0aGlzLl9yMiwgdGhpcy5fYW5nbGUsIHRoaXMuX2xhcmdlQXJjRmxhZywgdGhpcy5fc3dlZXBGbGFnKTsgfVxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU1ZHUGF0aFNlZ0FyY1JlbC5wcm90b3R5cGUsIFwieFwiLCB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLl94OyB9LCBzZXQ6IGZ1bmN0aW9uKHgpIHsgdGhpcy5feCA9IHg7IHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7IH0sIGVudW1lcmFibGU6IHRydWUgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTVkdQYXRoU2VnQXJjUmVsLnByb3RvdHlwZSwgXCJ5XCIsIHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuX3k7IH0sIHNldDogZnVuY3Rpb24oeSkgeyB0aGlzLl95ID0geTsgdGhpcy5fc2VnbWVudENoYW5nZWQoKTsgfSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNWR1BhdGhTZWdBcmNSZWwucHJvdG90eXBlLCBcInIxXCIsIHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuX3IxOyB9LCBzZXQ6IGZ1bmN0aW9uKHIxKSB7IHRoaXMuX3IxID0gcjE7IHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7IH0sIGVudW1lcmFibGU6IHRydWUgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTVkdQYXRoU2VnQXJjUmVsLnByb3RvdHlwZSwgXCJyMlwiLCB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLl9yMjsgfSwgc2V0OiBmdW5jdGlvbihyMikgeyB0aGlzLl9yMiA9IHIyOyB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpOyB9LCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU1ZHUGF0aFNlZ0FyY1JlbC5wcm90b3R5cGUsIFwiYW5nbGVcIiwgeyBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5fYW5nbGU7IH0sIHNldDogZnVuY3Rpb24oYW5nbGUpIHsgdGhpcy5fYW5nbGUgPSBhbmdsZTsgdGhpcy5fc2VnbWVudENoYW5nZWQoKTsgfSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNWR1BhdGhTZWdBcmNSZWwucHJvdG90eXBlLCBcImxhcmdlQXJjRmxhZ1wiLCB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLl9sYXJnZUFyY0ZsYWc7IH0sIHNldDogZnVuY3Rpb24obGFyZ2VBcmNGbGFnKSB7IHRoaXMuX2xhcmdlQXJjRmxhZyA9IGxhcmdlQXJjRmxhZzsgdGhpcy5fc2VnbWVudENoYW5nZWQoKTsgfSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNWR1BhdGhTZWdBcmNSZWwucHJvdG90eXBlLCBcInN3ZWVwRmxhZ1wiLCB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLl9zd2VlcEZsYWc7IH0sIHNldDogZnVuY3Rpb24oc3dlZXBGbGFnKSB7IHRoaXMuX3N3ZWVwRmxhZyA9IHN3ZWVwRmxhZzsgdGhpcy5fc2VnbWVudENoYW5nZWQoKTsgfSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcblxuICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b0hvcml6b250YWxBYnMgPSBmdW5jdGlvbihvd25pbmdQYXRoU2VnTGlzdCwgeCkge1xuICAgICAgICAgICAgU1ZHUGF0aFNlZy5jYWxsKHRoaXMsIFNWR1BhdGhTZWcuUEFUSFNFR19MSU5FVE9fSE9SSVpPTlRBTF9BQlMsIFwiSFwiLCBvd25pbmdQYXRoU2VnTGlzdCk7XG4gICAgICAgICAgICB0aGlzLl94ID0geDtcbiAgICAgICAgfVxuICAgICAgICBTVkdQYXRoU2VnTGluZXRvSG9yaXpvbnRhbEFicy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFNWR1BhdGhTZWcucHJvdG90eXBlKTtcbiAgICAgICAgU1ZHUGF0aFNlZ0xpbmV0b0hvcml6b250YWxBYnMucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBcIltvYmplY3QgU1ZHUGF0aFNlZ0xpbmV0b0hvcml6b250YWxBYnNdXCI7IH1cbiAgICAgICAgU1ZHUGF0aFNlZ0xpbmV0b0hvcml6b250YWxBYnMucHJvdG90eXBlLl9hc1BhdGhTdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMucGF0aFNlZ1R5cGVBc0xldHRlciArIFwiIFwiICsgdGhpcy5feDsgfVxuICAgICAgICBTVkdQYXRoU2VnTGluZXRvSG9yaXpvbnRhbEFicy5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIG5ldyBTVkdQYXRoU2VnTGluZXRvSG9yaXpvbnRhbEFicyh1bmRlZmluZWQsIHRoaXMuX3gpOyB9XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTVkdQYXRoU2VnTGluZXRvSG9yaXpvbnRhbEFicy5wcm90b3R5cGUsIFwieFwiLCB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLl94OyB9LCBzZXQ6IGZ1bmN0aW9uKHgpIHsgdGhpcy5feCA9IHg7IHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7IH0sIGVudW1lcmFibGU6IHRydWUgfSk7XG5cbiAgICAgICAgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9Ib3Jpem9udGFsUmVsID0gZnVuY3Rpb24ob3duaW5nUGF0aFNlZ0xpc3QsIHgpIHtcbiAgICAgICAgICAgIFNWR1BhdGhTZWcuY2FsbCh0aGlzLCBTVkdQYXRoU2VnLlBBVEhTRUdfTElORVRPX0hPUklaT05UQUxfUkVMLCBcImhcIiwgb3duaW5nUGF0aFNlZ0xpc3QpO1xuICAgICAgICAgICAgdGhpcy5feCA9IHg7XG4gICAgICAgIH1cbiAgICAgICAgU1ZHUGF0aFNlZ0xpbmV0b0hvcml6b250YWxSZWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTVkdQYXRoU2VnLnByb3RvdHlwZSk7XG4gICAgICAgIFNWR1BhdGhTZWdMaW5ldG9Ib3Jpem9udGFsUmVsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gXCJbb2JqZWN0IFNWR1BhdGhTZWdMaW5ldG9Ib3Jpem9udGFsUmVsXVwiOyB9XG4gICAgICAgIFNWR1BhdGhTZWdMaW5ldG9Ib3Jpem9udGFsUmVsLnByb3RvdHlwZS5fYXNQYXRoU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLnBhdGhTZWdUeXBlQXNMZXR0ZXIgKyBcIiBcIiArIHRoaXMuX3g7IH1cbiAgICAgICAgU1ZHUGF0aFNlZ0xpbmV0b0hvcml6b250YWxSZWwucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7IHJldHVybiBuZXcgU1ZHUGF0aFNlZ0xpbmV0b0hvcml6b250YWxSZWwodW5kZWZpbmVkLCB0aGlzLl94KTsgfVxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU1ZHUGF0aFNlZ0xpbmV0b0hvcml6b250YWxSZWwucHJvdG90eXBlLCBcInhcIiwgeyBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5feDsgfSwgc2V0OiBmdW5jdGlvbih4KSB7IHRoaXMuX3ggPSB4OyB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpOyB9LCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuXG4gICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTGluZXRvVmVydGljYWxBYnMgPSBmdW5jdGlvbihvd25pbmdQYXRoU2VnTGlzdCwgeSkge1xuICAgICAgICAgICAgU1ZHUGF0aFNlZy5jYWxsKHRoaXMsIFNWR1BhdGhTZWcuUEFUSFNFR19MSU5FVE9fVkVSVElDQUxfQUJTLCBcIlZcIiwgb3duaW5nUGF0aFNlZ0xpc3QpO1xuICAgICAgICAgICAgdGhpcy5feSA9IHk7XG4gICAgICAgIH1cbiAgICAgICAgU1ZHUGF0aFNlZ0xpbmV0b1ZlcnRpY2FsQWJzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU1ZHUGF0aFNlZy5wcm90b3R5cGUpO1xuICAgICAgICBTVkdQYXRoU2VnTGluZXRvVmVydGljYWxBYnMucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBcIltvYmplY3QgU1ZHUGF0aFNlZ0xpbmV0b1ZlcnRpY2FsQWJzXVwiOyB9XG4gICAgICAgIFNWR1BhdGhTZWdMaW5ldG9WZXJ0aWNhbEFicy5wcm90b3R5cGUuX2FzUGF0aFN0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5wYXRoU2VnVHlwZUFzTGV0dGVyICsgXCIgXCIgKyB0aGlzLl95OyB9XG4gICAgICAgIFNWR1BhdGhTZWdMaW5ldG9WZXJ0aWNhbEFicy5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIG5ldyBTVkdQYXRoU2VnTGluZXRvVmVydGljYWxBYnModW5kZWZpbmVkLCB0aGlzLl95KTsgfVxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU1ZHUGF0aFNlZ0xpbmV0b1ZlcnRpY2FsQWJzLnByb3RvdHlwZSwgXCJ5XCIsIHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuX3k7IH0sIHNldDogZnVuY3Rpb24oeSkgeyB0aGlzLl95ID0geTsgdGhpcy5fc2VnbWVudENoYW5nZWQoKTsgfSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcblxuICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b1ZlcnRpY2FsUmVsID0gZnVuY3Rpb24ob3duaW5nUGF0aFNlZ0xpc3QsIHkpIHtcbiAgICAgICAgICAgIFNWR1BhdGhTZWcuY2FsbCh0aGlzLCBTVkdQYXRoU2VnLlBBVEhTRUdfTElORVRPX1ZFUlRJQ0FMX1JFTCwgXCJ2XCIsIG93bmluZ1BhdGhTZWdMaXN0KTtcbiAgICAgICAgICAgIHRoaXMuX3kgPSB5O1xuICAgICAgICB9XG4gICAgICAgIFNWR1BhdGhTZWdMaW5ldG9WZXJ0aWNhbFJlbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFNWR1BhdGhTZWcucHJvdG90eXBlKTtcbiAgICAgICAgU1ZHUGF0aFNlZ0xpbmV0b1ZlcnRpY2FsUmVsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gXCJbb2JqZWN0IFNWR1BhdGhTZWdMaW5ldG9WZXJ0aWNhbFJlbF1cIjsgfVxuICAgICAgICBTVkdQYXRoU2VnTGluZXRvVmVydGljYWxSZWwucHJvdG90eXBlLl9hc1BhdGhTdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMucGF0aFNlZ1R5cGVBc0xldHRlciArIFwiIFwiICsgdGhpcy5feTsgfVxuICAgICAgICBTVkdQYXRoU2VnTGluZXRvVmVydGljYWxSZWwucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7IHJldHVybiBuZXcgU1ZHUGF0aFNlZ0xpbmV0b1ZlcnRpY2FsUmVsKHVuZGVmaW5lZCwgdGhpcy5feSk7IH1cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNWR1BhdGhTZWdMaW5ldG9WZXJ0aWNhbFJlbC5wcm90b3R5cGUsIFwieVwiLCB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLl95OyB9LCBzZXQ6IGZ1bmN0aW9uKHkpIHsgdGhpcy5feSA9IHk7IHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7IH0sIGVudW1lcmFibGU6IHRydWUgfSk7XG5cbiAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNTbW9vdGhBYnMgPSBmdW5jdGlvbihvd25pbmdQYXRoU2VnTGlzdCwgeCwgeSwgeDIsIHkyKSB7XG4gICAgICAgICAgICBTVkdQYXRoU2VnLmNhbGwodGhpcywgU1ZHUGF0aFNlZy5QQVRIU0VHX0NVUlZFVE9fQ1VCSUNfU01PT1RIX0FCUywgXCJTXCIsIG93bmluZ1BhdGhTZWdMaXN0KTtcbiAgICAgICAgICAgIHRoaXMuX3ggPSB4O1xuICAgICAgICAgICAgdGhpcy5feSA9IHk7XG4gICAgICAgICAgICB0aGlzLl94MiA9IHgyO1xuICAgICAgICAgICAgdGhpcy5feTIgPSB5MjtcbiAgICAgICAgfVxuICAgICAgICBTVkdQYXRoU2VnQ3VydmV0b0N1YmljU21vb3RoQWJzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU1ZHUGF0aFNlZy5wcm90b3R5cGUpO1xuICAgICAgICBTVkdQYXRoU2VnQ3VydmV0b0N1YmljU21vb3RoQWJzLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gXCJbb2JqZWN0IFNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNTbW9vdGhBYnNdXCI7IH1cbiAgICAgICAgU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1Ntb290aEFicy5wcm90b3R5cGUuX2FzUGF0aFN0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5wYXRoU2VnVHlwZUFzTGV0dGVyICsgXCIgXCIgKyB0aGlzLl94MiArIFwiIFwiICsgdGhpcy5feTIgKyBcIiBcIiArIHRoaXMuX3ggKyBcIiBcIiArIHRoaXMuX3k7IH1cbiAgICAgICAgU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1Ntb290aEFicy5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIG5ldyBTVkdQYXRoU2VnQ3VydmV0b0N1YmljU21vb3RoQWJzKHVuZGVmaW5lZCwgdGhpcy5feCwgdGhpcy5feSwgdGhpcy5feDIsIHRoaXMuX3kyKTsgfVxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1Ntb290aEFicy5wcm90b3R5cGUsIFwieFwiLCB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLl94OyB9LCBzZXQ6IGZ1bmN0aW9uKHgpIHsgdGhpcy5feCA9IHg7IHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7IH0sIGVudW1lcmFibGU6IHRydWUgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTVkdQYXRoU2VnQ3VydmV0b0N1YmljU21vb3RoQWJzLnByb3RvdHlwZSwgXCJ5XCIsIHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuX3k7IH0sIHNldDogZnVuY3Rpb24oeSkgeyB0aGlzLl95ID0geTsgdGhpcy5fc2VnbWVudENoYW5nZWQoKTsgfSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNTbW9vdGhBYnMucHJvdG90eXBlLCBcIngyXCIsIHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuX3gyOyB9LCBzZXQ6IGZ1bmN0aW9uKHgyKSB7IHRoaXMuX3gyID0geDI7IHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7IH0sIGVudW1lcmFibGU6IHRydWUgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTVkdQYXRoU2VnQ3VydmV0b0N1YmljU21vb3RoQWJzLnByb3RvdHlwZSwgXCJ5MlwiLCB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLl95MjsgfSwgc2V0OiBmdW5jdGlvbih5MikgeyB0aGlzLl95MiA9IHkyOyB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpOyB9LCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuXG4gICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b0N1YmljU21vb3RoUmVsID0gZnVuY3Rpb24ob3duaW5nUGF0aFNlZ0xpc3QsIHgsIHksIHgyLCB5Mikge1xuICAgICAgICAgICAgU1ZHUGF0aFNlZy5jYWxsKHRoaXMsIFNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX0NVQklDX1NNT09USF9SRUwsIFwic1wiLCBvd25pbmdQYXRoU2VnTGlzdCk7XG4gICAgICAgICAgICB0aGlzLl94ID0geDtcbiAgICAgICAgICAgIHRoaXMuX3kgPSB5O1xuICAgICAgICAgICAgdGhpcy5feDIgPSB4MjtcbiAgICAgICAgICAgIHRoaXMuX3kyID0geTI7XG4gICAgICAgIH1cbiAgICAgICAgU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1Ntb290aFJlbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFNWR1BhdGhTZWcucHJvdG90eXBlKTtcbiAgICAgICAgU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1Ntb290aFJlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIFwiW29iamVjdCBTVkdQYXRoU2VnQ3VydmV0b0N1YmljU21vb3RoUmVsXVwiOyB9XG4gICAgICAgIFNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNTbW9vdGhSZWwucHJvdG90eXBlLl9hc1BhdGhTdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMucGF0aFNlZ1R5cGVBc0xldHRlciArIFwiIFwiICsgdGhpcy5feDIgKyBcIiBcIiArIHRoaXMuX3kyICsgXCIgXCIgKyB0aGlzLl94ICsgXCIgXCIgKyB0aGlzLl95OyB9XG4gICAgICAgIFNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNTbW9vdGhSZWwucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7IHJldHVybiBuZXcgU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1Ntb290aFJlbCh1bmRlZmluZWQsIHRoaXMuX3gsIHRoaXMuX3ksIHRoaXMuX3gyLCB0aGlzLl95Mik7IH1cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNTbW9vdGhSZWwucHJvdG90eXBlLCBcInhcIiwgeyBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5feDsgfSwgc2V0OiBmdW5jdGlvbih4KSB7IHRoaXMuX3ggPSB4OyB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpOyB9LCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1Ntb290aFJlbC5wcm90b3R5cGUsIFwieVwiLCB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLl95OyB9LCBzZXQ6IGZ1bmN0aW9uKHkpIHsgdGhpcy5feSA9IHk7IHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7IH0sIGVudW1lcmFibGU6IHRydWUgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTVkdQYXRoU2VnQ3VydmV0b0N1YmljU21vb3RoUmVsLnByb3RvdHlwZSwgXCJ4MlwiLCB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLl94MjsgfSwgc2V0OiBmdW5jdGlvbih4MikgeyB0aGlzLl94MiA9IHgyOyB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpOyB9LCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1Ntb290aFJlbC5wcm90b3R5cGUsIFwieTJcIiwgeyBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5feTI7IH0sIHNldDogZnVuY3Rpb24oeTIpIHsgdGhpcy5feTIgPSB5MjsgdGhpcy5fc2VnbWVudENoYW5nZWQoKTsgfSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcblxuICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNTbW9vdGhBYnMgPSBmdW5jdGlvbihvd25pbmdQYXRoU2VnTGlzdCwgeCwgeSkge1xuICAgICAgICAgICAgU1ZHUGF0aFNlZy5jYWxsKHRoaXMsIFNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX1FVQURSQVRJQ19TTU9PVEhfQUJTLCBcIlRcIiwgb3duaW5nUGF0aFNlZ0xpc3QpO1xuICAgICAgICAgICAgdGhpcy5feCA9IHg7XG4gICAgICAgICAgICB0aGlzLl95ID0geTtcbiAgICAgICAgfVxuICAgICAgICBTVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1Ntb290aEFicy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFNWR1BhdGhTZWcucHJvdG90eXBlKTtcbiAgICAgICAgU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNTbW9vdGhBYnMucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBcIltvYmplY3QgU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNTbW9vdGhBYnNdXCI7IH1cbiAgICAgICAgU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNTbW9vdGhBYnMucHJvdG90eXBlLl9hc1BhdGhTdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMucGF0aFNlZ1R5cGVBc0xldHRlciArIFwiIFwiICsgdGhpcy5feCArIFwiIFwiICsgdGhpcy5feTsgfVxuICAgICAgICBTVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1Ntb290aEFicy5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIG5ldyBTVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1Ntb290aEFicyh1bmRlZmluZWQsIHRoaXMuX3gsIHRoaXMuX3kpOyB9XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1Ntb290aEFicy5wcm90b3R5cGUsIFwieFwiLCB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLl94OyB9LCBzZXQ6IGZ1bmN0aW9uKHgpIHsgdGhpcy5feCA9IHg7IHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7IH0sIGVudW1lcmFibGU6IHRydWUgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1Ntb290aEFicy5wcm90b3R5cGUsIFwieVwiLCB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLl95OyB9LCBzZXQ6IGZ1bmN0aW9uKHkpIHsgdGhpcy5feSA9IHk7IHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7IH0sIGVudW1lcmFibGU6IHRydWUgfSk7XG5cbiAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljU21vb3RoUmVsID0gZnVuY3Rpb24ob3duaW5nUGF0aFNlZ0xpc3QsIHgsIHkpIHtcbiAgICAgICAgICAgIFNWR1BhdGhTZWcuY2FsbCh0aGlzLCBTVkdQYXRoU2VnLlBBVEhTRUdfQ1VSVkVUT19RVUFEUkFUSUNfU01PT1RIX1JFTCwgXCJ0XCIsIG93bmluZ1BhdGhTZWdMaXN0KTtcbiAgICAgICAgICAgIHRoaXMuX3ggPSB4O1xuICAgICAgICAgICAgdGhpcy5feSA9IHk7XG4gICAgICAgIH1cbiAgICAgICAgU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNTbW9vdGhSZWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTVkdQYXRoU2VnLnByb3RvdHlwZSk7XG4gICAgICAgIFNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljU21vb3RoUmVsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gXCJbb2JqZWN0IFNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljU21vb3RoUmVsXVwiOyB9XG4gICAgICAgIFNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljU21vb3RoUmVsLnByb3RvdHlwZS5fYXNQYXRoU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLnBhdGhTZWdUeXBlQXNMZXR0ZXIgKyBcIiBcIiArIHRoaXMuX3ggKyBcIiBcIiArIHRoaXMuX3k7IH1cbiAgICAgICAgU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNTbW9vdGhSZWwucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7IHJldHVybiBuZXcgU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNTbW9vdGhSZWwodW5kZWZpbmVkLCB0aGlzLl94LCB0aGlzLl95KTsgfVxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNTbW9vdGhSZWwucHJvdG90eXBlLCBcInhcIiwgeyBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5feDsgfSwgc2V0OiBmdW5jdGlvbih4KSB7IHRoaXMuX3ggPSB4OyB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpOyB9LCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNTbW9vdGhSZWwucHJvdG90eXBlLCBcInlcIiwgeyBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5feTsgfSwgc2V0OiBmdW5jdGlvbih5KSB7IHRoaXMuX3kgPSB5OyB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpOyB9LCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuXG4gICAgICAgIC8vIEFkZCBjcmVhdGVTVkdQYXRoU2VnKiBmdW5jdGlvbnMgdG8gU1ZHUGF0aEVsZW1lbnQuXG4gICAgICAgIC8vIFNwZWM6IGh0dHA6Ly93d3cudzMub3JnL1RSL1NWRzExL3NpbmdsZS1wYWdlLmh0bWwjcGF0aHMtSW50ZXJmYWNlU1ZHUGF0aEVsZW1lbnQuXG4gICAgICAgIFNWR1BhdGhFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVTVkdQYXRoU2VnQ2xvc2VQYXRoID0gZnVuY3Rpb24oKSB7IHJldHVybiBuZXcgU1ZHUGF0aFNlZ0Nsb3NlUGF0aCh1bmRlZmluZWQpOyB9XG4gICAgICAgIFNWR1BhdGhFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVTVkdQYXRoU2VnTW92ZXRvQWJzID0gZnVuY3Rpb24oeCwgeSkgeyByZXR1cm4gbmV3IFNWR1BhdGhTZWdNb3ZldG9BYnModW5kZWZpbmVkLCB4LCB5KTsgfVxuICAgICAgICBTVkdQYXRoRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlU1ZHUGF0aFNlZ01vdmV0b1JlbCA9IGZ1bmN0aW9uKHgsIHkpIHsgcmV0dXJuIG5ldyBTVkdQYXRoU2VnTW92ZXRvUmVsKHVuZGVmaW5lZCwgeCwgeSk7IH1cbiAgICAgICAgU1ZHUGF0aEVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZVNWR1BhdGhTZWdMaW5ldG9BYnMgPSBmdW5jdGlvbih4LCB5KSB7IHJldHVybiBuZXcgU1ZHUGF0aFNlZ0xpbmV0b0Ficyh1bmRlZmluZWQsIHgsIHkpOyB9XG4gICAgICAgIFNWR1BhdGhFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVTVkdQYXRoU2VnTGluZXRvUmVsID0gZnVuY3Rpb24oeCwgeSkgeyByZXR1cm4gbmV3IFNWR1BhdGhTZWdMaW5ldG9SZWwodW5kZWZpbmVkLCB4LCB5KTsgfVxuICAgICAgICBTVkdQYXRoRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY0FicyA9IGZ1bmN0aW9uKHgsIHksIHgxLCB5MSwgeDIsIHkyKSB7IHJldHVybiBuZXcgU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY0Ficyh1bmRlZmluZWQsIHgsIHksIHgxLCB5MSwgeDIsIHkyKTsgfVxuICAgICAgICBTVkdQYXRoRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1JlbCA9IGZ1bmN0aW9uKHgsIHksIHgxLCB5MSwgeDIsIHkyKSB7IHJldHVybiBuZXcgU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1JlbCh1bmRlZmluZWQsIHgsIHksIHgxLCB5MSwgeDIsIHkyKTsgfVxuICAgICAgICBTVkdQYXRoRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNBYnMgPSBmdW5jdGlvbih4LCB5LCB4MSwgeTEpIHsgcmV0dXJuIG5ldyBTVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY0Ficyh1bmRlZmluZWQsIHgsIHksIHgxLCB5MSk7IH1cbiAgICAgICAgU1ZHUGF0aEVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZVNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljUmVsID0gZnVuY3Rpb24oeCwgeSwgeDEsIHkxKSB7IHJldHVybiBuZXcgU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNSZWwodW5kZWZpbmVkLCB4LCB5LCB4MSwgeTEpOyB9XG4gICAgICAgIFNWR1BhdGhFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVTVkdQYXRoU2VnQXJjQWJzID0gZnVuY3Rpb24oeCwgeSwgcjEsIHIyLCBhbmdsZSwgbGFyZ2VBcmNGbGFnLCBzd2VlcEZsYWcpIHsgcmV0dXJuIG5ldyBTVkdQYXRoU2VnQXJjQWJzKHVuZGVmaW5lZCwgeCwgeSwgcjEsIHIyLCBhbmdsZSwgbGFyZ2VBcmNGbGFnLCBzd2VlcEZsYWcpOyB9XG4gICAgICAgIFNWR1BhdGhFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVTVkdQYXRoU2VnQXJjUmVsID0gZnVuY3Rpb24oeCwgeSwgcjEsIHIyLCBhbmdsZSwgbGFyZ2VBcmNGbGFnLCBzd2VlcEZsYWcpIHsgcmV0dXJuIG5ldyBTVkdQYXRoU2VnQXJjUmVsKHVuZGVmaW5lZCwgeCwgeSwgcjEsIHIyLCBhbmdsZSwgbGFyZ2VBcmNGbGFnLCBzd2VlcEZsYWcpOyB9XG4gICAgICAgIFNWR1BhdGhFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVTVkdQYXRoU2VnTGluZXRvSG9yaXpvbnRhbEFicyA9IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIG5ldyBTVkdQYXRoU2VnTGluZXRvSG9yaXpvbnRhbEFicyh1bmRlZmluZWQsIHgpOyB9XG4gICAgICAgIFNWR1BhdGhFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVTVkdQYXRoU2VnTGluZXRvSG9yaXpvbnRhbFJlbCA9IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIG5ldyBTVkdQYXRoU2VnTGluZXRvSG9yaXpvbnRhbFJlbCh1bmRlZmluZWQsIHgpOyB9XG4gICAgICAgIFNWR1BhdGhFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVTVkdQYXRoU2VnTGluZXRvVmVydGljYWxBYnMgPSBmdW5jdGlvbih5KSB7IHJldHVybiBuZXcgU1ZHUGF0aFNlZ0xpbmV0b1ZlcnRpY2FsQWJzKHVuZGVmaW5lZCwgeSk7IH1cbiAgICAgICAgU1ZHUGF0aEVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZVNWR1BhdGhTZWdMaW5ldG9WZXJ0aWNhbFJlbCA9IGZ1bmN0aW9uKHkpIHsgcmV0dXJuIG5ldyBTVkdQYXRoU2VnTGluZXRvVmVydGljYWxSZWwodW5kZWZpbmVkLCB5KTsgfVxuICAgICAgICBTVkdQYXRoRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1Ntb290aEFicyA9IGZ1bmN0aW9uKHgsIHksIHgyLCB5MikgeyByZXR1cm4gbmV3IFNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNTbW9vdGhBYnModW5kZWZpbmVkLCB4LCB5LCB4MiwgeTIpOyB9XG4gICAgICAgIFNWR1BhdGhFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVTVkdQYXRoU2VnQ3VydmV0b0N1YmljU21vb3RoUmVsID0gZnVuY3Rpb24oeCwgeSwgeDIsIHkyKSB7IHJldHVybiBuZXcgU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1Ntb290aFJlbCh1bmRlZmluZWQsIHgsIHksIHgyLCB5Mik7IH1cbiAgICAgICAgU1ZHUGF0aEVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZVNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljU21vb3RoQWJzID0gZnVuY3Rpb24oeCwgeSkgeyByZXR1cm4gbmV3IFNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljU21vb3RoQWJzKHVuZGVmaW5lZCwgeCwgeSk7IH1cbiAgICAgICAgU1ZHUGF0aEVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZVNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljU21vb3RoUmVsID0gZnVuY3Rpb24oeCwgeSkgeyByZXR1cm4gbmV3IFNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljU21vb3RoUmVsKHVuZGVmaW5lZCwgeCwgeSk7IH1cbiAgICB9XG5cbiAgICBpZiAoIShcIlNWR1BhdGhTZWdMaXN0XCIgaW4gd2luZG93KSkge1xuICAgICAgICAvLyBTcGVjOiBodHRwOi8vd3d3LnczLm9yZy9UUi9TVkcxMS9zaW5nbGUtcGFnZS5odG1sI3BhdGhzLUludGVyZmFjZVNWR1BhdGhTZWdMaXN0XG4gICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTGlzdCA9IGZ1bmN0aW9uKHBhdGhFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9wYXRoRWxlbWVudCA9IHBhdGhFbGVtZW50O1xuICAgICAgICAgICAgdGhpcy5fbGlzdCA9IHRoaXMuX3BhcnNlUGF0aCh0aGlzLl9wYXRoRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkXCIpKTtcblxuICAgICAgICAgICAgLy8gVXNlIGEgTXV0YXRpb25PYnNlcnZlciB0byBjYXRjaCBjaGFuZ2VzIHRvIHRoZSBwYXRoJ3MgXCJkXCIgYXR0cmlidXRlLlxuICAgICAgICAgICAgdGhpcy5fbXV0YXRpb25PYnNlcnZlckNvbmZpZyA9IHsgXCJhdHRyaWJ1dGVzXCI6IHRydWUsIFwiYXR0cmlidXRlRmlsdGVyXCI6IFtcImRcIl0gfTtcbiAgICAgICAgICAgIHRoaXMuX3BhdGhFbGVtZW50TXV0YXRpb25PYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKHRoaXMuX3VwZGF0ZUxpc3RGcm9tUGF0aE11dGF0aW9ucy5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgIHRoaXMuX3BhdGhFbGVtZW50TXV0YXRpb25PYnNlcnZlci5vYnNlcnZlKHRoaXMuX3BhdGhFbGVtZW50LCB0aGlzLl9tdXRhdGlvbk9ic2VydmVyQ29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIFNWR1BhdGhTZWdMaXN0LnByb3RvdHlwZS5jbGFzc25hbWUgPSBcIlNWR1BhdGhTZWdMaXN0XCI7XG5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNWR1BhdGhTZWdMaXN0LnByb3RvdHlwZSwgXCJudW1iZXJPZkl0ZW1zXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tQYXRoU3luY2hyb25pemVkVG9MaXN0KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xpc3QubGVuZ3RoO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQWRkIHRoZSBwYXRoU2VnTGlzdCBhY2Nlc3NvcnMgdG8gU1ZHUGF0aEVsZW1lbnQuXG4gICAgICAgIC8vIFNwZWM6IGh0dHA6Ly93d3cudzMub3JnL1RSL1NWRzExL3NpbmdsZS1wYWdlLmh0bWwjcGF0aHMtSW50ZXJmYWNlU1ZHQW5pbWF0ZWRQYXRoRGF0YVxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU1ZHUGF0aEVsZW1lbnQucHJvdG90eXBlLCBcInBhdGhTZWdMaXN0XCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9wYXRoU2VnTGlzdClcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGF0aFNlZ0xpc3QgPSBuZXcgU1ZHUGF0aFNlZ0xpc3QodGhpcyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BhdGhTZWdMaXN0O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIEZJWE1FOiBUaGUgZm9sbG93aW5nIGFyZSBub3QgaW1wbGVtZW50ZWQgYW5kIHNpbXBseSByZXR1cm4gU1ZHUGF0aEVsZW1lbnQucGF0aFNlZ0xpc3QuXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTVkdQYXRoRWxlbWVudC5wcm90b3R5cGUsIFwibm9ybWFsaXplZFBhdGhTZWdMaXN0XCIsIHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMucGF0aFNlZ0xpc3Q7IH0sIGVudW1lcmFibGU6IHRydWUgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTVkdQYXRoRWxlbWVudC5wcm90b3R5cGUsIFwiYW5pbWF0ZWRQYXRoU2VnTGlzdFwiLCB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLnBhdGhTZWdMaXN0OyB9LCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU1ZHUGF0aEVsZW1lbnQucHJvdG90eXBlLCBcImFuaW1hdGVkTm9ybWFsaXplZFBhdGhTZWdMaXN0XCIsIHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMucGF0aFNlZ0xpc3Q7IH0sIGVudW1lcmFibGU6IHRydWUgfSk7XG5cbiAgICAgICAgLy8gUHJvY2VzcyBhbnkgcGVuZGluZyBtdXRhdGlvbnMgdG8gdGhlIHBhdGggZWxlbWVudCBhbmQgdXBkYXRlIHRoZSBsaXN0IGFzIG5lZWRlZC5cbiAgICAgICAgLy8gVGhpcyBzaG91bGQgYmUgdGhlIGZpcnN0IGNhbGwgb2YgYWxsIHB1YmxpYyBmdW5jdGlvbnMgYW5kIGlzIG5lZWRlZCBiZWNhdXNlXG4gICAgICAgIC8vIE11dGF0aW9uT2JzZXJ2ZXJzIGFyZSBub3Qgc3luY2hyb25vdXMgc28gd2UgY2FuIGhhdmUgcGVuZGluZyBhc3luY2hyb25vdXMgbXV0YXRpb25zLlxuICAgICAgICBTVkdQYXRoU2VnTGlzdC5wcm90b3R5cGUuX2NoZWNrUGF0aFN5bmNocm9uaXplZFRvTGlzdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlTGlzdEZyb21QYXRoTXV0YXRpb25zKHRoaXMuX3BhdGhFbGVtZW50TXV0YXRpb25PYnNlcnZlci50YWtlUmVjb3JkcygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIFNWR1BhdGhTZWdMaXN0LnByb3RvdHlwZS5fdXBkYXRlTGlzdEZyb21QYXRoTXV0YXRpb25zID0gZnVuY3Rpb24obXV0YXRpb25SZWNvcmRzKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3BhdGhFbGVtZW50KVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHZhciBoYXNQYXRoTXV0YXRpb25zID0gZmFsc2U7XG4gICAgICAgICAgICBtdXRhdGlvblJlY29yZHMuZm9yRWFjaChmdW5jdGlvbihyZWNvcmQpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVjb3JkLmF0dHJpYnV0ZU5hbWUgPT0gXCJkXCIpXG4gICAgICAgICAgICAgICAgICAgIGhhc1BhdGhNdXRhdGlvbnMgPSB0cnVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoaGFzUGF0aE11dGF0aW9ucylcbiAgICAgICAgICAgICAgICB0aGlzLl9saXN0ID0gdGhpcy5fcGFyc2VQYXRoKHRoaXMuX3BhdGhFbGVtZW50LmdldEF0dHJpYnV0ZShcImRcIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2VyaWFsaXplIHRoZSBsaXN0IGFuZCB1cGRhdGUgdGhlIHBhdGgncyAnZCcgYXR0cmlidXRlLlxuICAgICAgICBTVkdQYXRoU2VnTGlzdC5wcm90b3R5cGUuX3dyaXRlTGlzdFRvUGF0aCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5fcGF0aEVsZW1lbnRNdXRhdGlvbk9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgIHRoaXMuX3BhdGhFbGVtZW50LnNldEF0dHJpYnV0ZShcImRcIiwgU1ZHUGF0aFNlZ0xpc3QuX3BhdGhTZWdBcnJheUFzU3RyaW5nKHRoaXMuX2xpc3QpKTtcbiAgICAgICAgICAgIHRoaXMuX3BhdGhFbGVtZW50TXV0YXRpb25PYnNlcnZlci5vYnNlcnZlKHRoaXMuX3BhdGhFbGVtZW50LCB0aGlzLl9tdXRhdGlvbk9ic2VydmVyQ29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdoZW4gYSBwYXRoIHNlZ21lbnQgY2hhbmdlcyB0aGUgbGlzdCBuZWVkcyB0byBiZSBzeW5jaHJvbml6ZWQgYmFjayB0byB0aGUgcGF0aCBlbGVtZW50LlxuICAgICAgICBTVkdQYXRoU2VnTGlzdC5wcm90b3R5cGUuc2VnbWVudENoYW5nZWQgPSBmdW5jdGlvbihwYXRoU2VnKSB7XG4gICAgICAgICAgICB0aGlzLl93cml0ZUxpc3RUb1BhdGgoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIFNWR1BhdGhTZWdMaXN0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5fY2hlY2tQYXRoU3luY2hyb25pemVkVG9MaXN0KCk7XG5cbiAgICAgICAgICAgIHRoaXMuX2xpc3QuZm9yRWFjaChmdW5jdGlvbihwYXRoU2VnKSB7XG4gICAgICAgICAgICAgICAgcGF0aFNlZy5fb3duaW5nUGF0aFNlZ0xpc3QgPSBudWxsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLl9saXN0ID0gW107XG4gICAgICAgICAgICB0aGlzLl93cml0ZUxpc3RUb1BhdGgoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIFNWR1BhdGhTZWdMaXN0LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24obmV3SXRlbSkge1xuICAgICAgICAgICAgdGhpcy5fY2hlY2tQYXRoU3luY2hyb25pemVkVG9MaXN0KCk7XG5cbiAgICAgICAgICAgIHRoaXMuX2xpc3QgPSBbbmV3SXRlbV07XG4gICAgICAgICAgICBuZXdJdGVtLl9vd25pbmdQYXRoU2VnTGlzdCA9IHRoaXM7XG4gICAgICAgICAgICB0aGlzLl93cml0ZUxpc3RUb1BhdGgoKTtcbiAgICAgICAgICAgIHJldHVybiBuZXdJdGVtO1xuICAgICAgICB9XG5cbiAgICAgICAgU1ZHUGF0aFNlZ0xpc3QucHJvdG90eXBlLl9jaGVja1ZhbGlkSW5kZXggPSBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICAgICAgaWYgKGlzTmFOKGluZGV4KSB8fCBpbmRleCA8IDAgfHwgaW5kZXggPj0gdGhpcy5udW1iZXJPZkl0ZW1zKVxuICAgICAgICAgICAgICAgIHRocm93IFwiSU5ERVhfU0laRV9FUlJcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIFNWR1BhdGhTZWdMaXN0LnByb3RvdHlwZS5nZXRJdGVtID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrUGF0aFN5bmNocm9uaXplZFRvTGlzdCgpO1xuXG4gICAgICAgICAgICB0aGlzLl9jaGVja1ZhbGlkSW5kZXgoaW5kZXgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xpc3RbaW5kZXhdO1xuICAgICAgICB9XG5cbiAgICAgICAgU1ZHUGF0aFNlZ0xpc3QucHJvdG90eXBlLmluc2VydEl0ZW1CZWZvcmUgPSBmdW5jdGlvbihuZXdJdGVtLCBpbmRleCkge1xuICAgICAgICAgICAgdGhpcy5fY2hlY2tQYXRoU3luY2hyb25pemVkVG9MaXN0KCk7XG5cbiAgICAgICAgICAgIC8vIFNwZWM6IElmIHRoZSBpbmRleCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gbnVtYmVyT2ZJdGVtcywgdGhlbiB0aGUgbmV3IGl0ZW0gaXMgYXBwZW5kZWQgdG8gdGhlIGVuZCBvZiB0aGUgbGlzdC5cbiAgICAgICAgICAgIGlmIChpbmRleCA+IHRoaXMubnVtYmVyT2ZJdGVtcylcbiAgICAgICAgICAgICAgICBpbmRleCA9IHRoaXMubnVtYmVyT2ZJdGVtcztcbiAgICAgICAgICAgIGlmIChuZXdJdGVtLl9vd25pbmdQYXRoU2VnTGlzdCkge1xuICAgICAgICAgICAgICAgIC8vIFNWRzIgc3BlYyBzYXlzIHRvIG1ha2UgYSBjb3B5LlxuICAgICAgICAgICAgICAgIG5ld0l0ZW0gPSBuZXdJdGVtLmNsb25lKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9saXN0LnNwbGljZShpbmRleCwgMCwgbmV3SXRlbSk7XG4gICAgICAgICAgICBuZXdJdGVtLl9vd25pbmdQYXRoU2VnTGlzdCA9IHRoaXM7XG4gICAgICAgICAgICB0aGlzLl93cml0ZUxpc3RUb1BhdGgoKTtcbiAgICAgICAgICAgIHJldHVybiBuZXdJdGVtO1xuICAgICAgICB9XG5cbiAgICAgICAgU1ZHUGF0aFNlZ0xpc3QucHJvdG90eXBlLnJlcGxhY2VJdGVtID0gZnVuY3Rpb24obmV3SXRlbSwgaW5kZXgpIHtcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrUGF0aFN5bmNocm9uaXplZFRvTGlzdCgpO1xuXG4gICAgICAgICAgICBpZiAobmV3SXRlbS5fb3duaW5nUGF0aFNlZ0xpc3QpIHtcbiAgICAgICAgICAgICAgICAvLyBTVkcyIHNwZWMgc2F5cyB0byBtYWtlIGEgY29weS5cbiAgICAgICAgICAgICAgICBuZXdJdGVtID0gbmV3SXRlbS5jbG9uZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fY2hlY2tWYWxpZEluZGV4KGluZGV4KTtcbiAgICAgICAgICAgIHRoaXMuX2xpc3RbaW5kZXhdID0gbmV3SXRlbTtcbiAgICAgICAgICAgIG5ld0l0ZW0uX293bmluZ1BhdGhTZWdMaXN0ID0gdGhpcztcbiAgICAgICAgICAgIHRoaXMuX3dyaXRlTGlzdFRvUGF0aCgpO1xuICAgICAgICAgICAgcmV0dXJuIG5ld0l0ZW07XG4gICAgICAgIH1cblxuICAgICAgICBTVkdQYXRoU2VnTGlzdC5wcm90b3R5cGUucmVtb3ZlSXRlbSA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgICAgICB0aGlzLl9jaGVja1BhdGhTeW5jaHJvbml6ZWRUb0xpc3QoKTtcblxuICAgICAgICAgICAgdGhpcy5fY2hlY2tWYWxpZEluZGV4KGluZGV4KTtcbiAgICAgICAgICAgIHZhciBpdGVtID0gdGhpcy5fbGlzdFtpbmRleF07XG4gICAgICAgICAgICB0aGlzLl9saXN0LnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB0aGlzLl93cml0ZUxpc3RUb1BhdGgoKTtcbiAgICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICB9XG5cbiAgICAgICAgU1ZHUGF0aFNlZ0xpc3QucHJvdG90eXBlLmFwcGVuZEl0ZW0gPSBmdW5jdGlvbihuZXdJdGVtKSB7XG4gICAgICAgICAgICB0aGlzLl9jaGVja1BhdGhTeW5jaHJvbml6ZWRUb0xpc3QoKTtcblxuICAgICAgICAgICAgaWYgKG5ld0l0ZW0uX293bmluZ1BhdGhTZWdMaXN0KSB7XG4gICAgICAgICAgICAgICAgLy8gU1ZHMiBzcGVjIHNheXMgdG8gbWFrZSBhIGNvcHkuXG4gICAgICAgICAgICAgICAgbmV3SXRlbSA9IG5ld0l0ZW0uY2xvbmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2xpc3QucHVzaChuZXdJdGVtKTtcbiAgICAgICAgICAgIG5ld0l0ZW0uX293bmluZ1BhdGhTZWdMaXN0ID0gdGhpcztcbiAgICAgICAgICAgIC8vIFRPRE86IE9wdGltaXplIHRoaXMgdG8ganVzdCBhcHBlbmQgdG8gdGhlIGV4aXN0aW5nIGF0dHJpYnV0ZS5cbiAgICAgICAgICAgIHRoaXMuX3dyaXRlTGlzdFRvUGF0aCgpO1xuICAgICAgICAgICAgcmV0dXJuIG5ld0l0ZW07XG4gICAgICAgIH1cblxuICAgICAgICBTVkdQYXRoU2VnTGlzdC5fcGF0aFNlZ0FycmF5QXNTdHJpbmcgPSBmdW5jdGlvbihwYXRoU2VnQXJyYXkpIHtcbiAgICAgICAgICAgIHZhciBzdHJpbmcgPSBcIlwiO1xuICAgICAgICAgICAgdmFyIGZpcnN0ID0gdHJ1ZTtcbiAgICAgICAgICAgIHBhdGhTZWdBcnJheS5mb3JFYWNoKGZ1bmN0aW9uKHBhdGhTZWcpIHtcbiAgICAgICAgICAgICAgICBpZiAoZmlyc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlyc3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nICs9IHBhdGhTZWcuX2FzUGF0aFN0cmluZygpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN0cmluZyArPSBcIiBcIiArIHBhdGhTZWcuX2FzUGF0aFN0cmluZygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoaXMgY2xvc2VseSBmb2xsb3dzIFNWR1BhdGhQYXJzZXI6OnBhcnNlUGF0aCBmcm9tIFNvdXJjZS9jb3JlL3N2Zy9TVkdQYXRoUGFyc2VyLmNwcC5cbiAgICAgICAgU1ZHUGF0aFNlZ0xpc3QucHJvdG90eXBlLl9wYXJzZVBhdGggPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgICAgIGlmICghc3RyaW5nIHx8IHN0cmluZy5sZW5ndGggPT0gMClcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG5cbiAgICAgICAgICAgIHZhciBvd25pbmdQYXRoU2VnTGlzdCA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZhciBCdWlsZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXRoU2VnTGlzdCA9IFtdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBCdWlsZGVyLnByb3RvdHlwZS5hcHBlbmRTZWdtZW50ID0gZnVuY3Rpb24ocGF0aFNlZykge1xuICAgICAgICAgICAgICAgIHRoaXMucGF0aFNlZ0xpc3QucHVzaChwYXRoU2VnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIFNvdXJjZSA9IGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0cmluZyA9IHN0cmluZztcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50SW5kZXggPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMuX2VuZEluZGV4ID0gdGhpcy5fc3RyaW5nLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcmV2aW91c0NvbW1hbmQgPSBTVkdQYXRoU2VnLlBBVEhTRUdfVU5LTk9XTjtcblxuICAgICAgICAgICAgICAgIHRoaXMuX3NraXBPcHRpb25hbFNwYWNlcygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBTb3VyY2UucHJvdG90eXBlLl9pc0N1cnJlbnRTcGFjZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBjaGFyYWN0ZXIgPSB0aGlzLl9zdHJpbmdbdGhpcy5fY3VycmVudEluZGV4XTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hhcmFjdGVyIDw9IFwiIFwiICYmIChjaGFyYWN0ZXIgPT0gXCIgXCIgfHwgY2hhcmFjdGVyID09IFwiXFxuXCIgfHwgY2hhcmFjdGVyID09IFwiXFx0XCIgfHwgY2hhcmFjdGVyID09IFwiXFxyXCIgfHwgY2hhcmFjdGVyID09IFwiXFxmXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBTb3VyY2UucHJvdG90eXBlLl9za2lwT3B0aW9uYWxTcGFjZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB3aGlsZSAodGhpcy5fY3VycmVudEluZGV4IDwgdGhpcy5fZW5kSW5kZXggJiYgdGhpcy5faXNDdXJyZW50U3BhY2UoKSlcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudEluZGV4Kys7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2N1cnJlbnRJbmRleCA8IHRoaXMuX2VuZEluZGV4O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBTb3VyY2UucHJvdG90eXBlLl9za2lwT3B0aW9uYWxTcGFjZXNPckRlbGltaXRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jdXJyZW50SW5kZXggPCB0aGlzLl9lbmRJbmRleCAmJiAhdGhpcy5faXNDdXJyZW50U3BhY2UoKSAmJiB0aGlzLl9zdHJpbmcuY2hhckF0KHRoaXMuX2N1cnJlbnRJbmRleCkgIT0gXCIsXCIpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fc2tpcE9wdGlvbmFsU3BhY2VzKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRJbmRleCA8IHRoaXMuX2VuZEluZGV4ICYmIHRoaXMuX3N0cmluZy5jaGFyQXQodGhpcy5fY3VycmVudEluZGV4KSA9PSBcIixcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudEluZGV4Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9za2lwT3B0aW9uYWxTcGFjZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY3VycmVudEluZGV4IDwgdGhpcy5fZW5kSW5kZXg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFNvdXJjZS5wcm90b3R5cGUuaGFzTW9yZURhdGEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY3VycmVudEluZGV4IDwgdGhpcy5fZW5kSW5kZXg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFNvdXJjZS5wcm90b3R5cGUucGVla1NlZ21lbnRUeXBlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxvb2thaGVhZCA9IHRoaXMuX3N0cmluZ1t0aGlzLl9jdXJyZW50SW5kZXhdO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9wYXRoU2VnVHlwZUZyb21DaGFyKGxvb2thaGVhZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFNvdXJjZS5wcm90b3R5cGUuX3BhdGhTZWdUeXBlRnJvbUNoYXIgPSBmdW5jdGlvbihsb29rYWhlYWQpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGxvb2thaGVhZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJaXCI6XG4gICAgICAgICAgICAgICAgY2FzZSBcInpcIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNWR1BhdGhTZWcuUEFUSFNFR19DTE9TRVBBVEg7XG4gICAgICAgICAgICAgICAgY2FzZSBcIk1cIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNWR1BhdGhTZWcuUEFUSFNFR19NT1ZFVE9fQUJTO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJtXCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBTVkdQYXRoU2VnLlBBVEhTRUdfTU9WRVRPX1JFTDtcbiAgICAgICAgICAgICAgICBjYXNlIFwiTFwiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gU1ZHUGF0aFNlZy5QQVRIU0VHX0xJTkVUT19BQlM7XG4gICAgICAgICAgICAgICAgY2FzZSBcImxcIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNWR1BhdGhTZWcuUEFUSFNFR19MSU5FVE9fUkVMO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJDXCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBTVkdQYXRoU2VnLlBBVEhTRUdfQ1VSVkVUT19DVUJJQ19BQlM7XG4gICAgICAgICAgICAgICAgY2FzZSBcImNcIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX0NVQklDX1JFTDtcbiAgICAgICAgICAgICAgICBjYXNlIFwiUVwiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gU1ZHUGF0aFNlZy5QQVRIU0VHX0NVUlZFVE9fUVVBRFJBVElDX0FCUztcbiAgICAgICAgICAgICAgICBjYXNlIFwicVwiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gU1ZHUGF0aFNlZy5QQVRIU0VHX0NVUlZFVE9fUVVBRFJBVElDX1JFTDtcbiAgICAgICAgICAgICAgICBjYXNlIFwiQVwiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gU1ZHUGF0aFNlZy5QQVRIU0VHX0FSQ19BQlM7XG4gICAgICAgICAgICAgICAgY2FzZSBcImFcIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNWR1BhdGhTZWcuUEFUSFNFR19BUkNfUkVMO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJIXCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBTVkdQYXRoU2VnLlBBVEhTRUdfTElORVRPX0hPUklaT05UQUxfQUJTO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJoXCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBTVkdQYXRoU2VnLlBBVEhTRUdfTElORVRPX0hPUklaT05UQUxfUkVMO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJWXCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBTVkdQYXRoU2VnLlBBVEhTRUdfTElORVRPX1ZFUlRJQ0FMX0FCUztcbiAgICAgICAgICAgICAgICBjYXNlIFwidlwiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gU1ZHUGF0aFNlZy5QQVRIU0VHX0xJTkVUT19WRVJUSUNBTF9SRUw7XG4gICAgICAgICAgICAgICAgY2FzZSBcIlNcIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX0NVQklDX1NNT09USF9BQlM7XG4gICAgICAgICAgICAgICAgY2FzZSBcInNcIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX0NVQklDX1NNT09USF9SRUw7XG4gICAgICAgICAgICAgICAgY2FzZSBcIlRcIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX1FVQURSQVRJQ19TTU9PVEhfQUJTO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJ0XCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBTVkdQYXRoU2VnLlBBVEhTRUdfQ1VSVkVUT19RVUFEUkFUSUNfU01PT1RIX1JFTDtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gU1ZHUGF0aFNlZy5QQVRIU0VHX1VOS05PV047XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBTb3VyY2UucHJvdG90eXBlLl9uZXh0Q29tbWFuZEhlbHBlciA9IGZ1bmN0aW9uKGxvb2thaGVhZCwgcHJldmlvdXNDb21tYW5kKSB7XG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIHJlbWFpbmluZyBjb29yZGluYXRlcyBpbiB0aGUgY3VycmVudCBjb21tYW5kLlxuICAgICAgICAgICAgICAgIGlmICgobG9va2FoZWFkID09IFwiK1wiIHx8IGxvb2thaGVhZCA9PSBcIi1cIiB8fCBsb29rYWhlYWQgPT0gXCIuXCIgfHwgKGxvb2thaGVhZCA+PSBcIjBcIiAmJiBsb29rYWhlYWQgPD0gXCI5XCIpKSAmJiBwcmV2aW91c0NvbW1hbmQgIT0gU1ZHUGF0aFNlZy5QQVRIU0VHX0NMT1NFUEFUSCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocHJldmlvdXNDb21tYW5kID09IFNWR1BhdGhTZWcuUEFUSFNFR19NT1ZFVE9fQUJTKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNWR1BhdGhTZWcuUEFUSFNFR19MSU5FVE9fQUJTO1xuICAgICAgICAgICAgICAgICAgICBpZiAocHJldmlvdXNDb21tYW5kID09IFNWR1BhdGhTZWcuUEFUSFNFR19NT1ZFVE9fUkVMKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNWR1BhdGhTZWcuUEFUSFNFR19MSU5FVE9fUkVMO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJldmlvdXNDb21tYW5kO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gU1ZHUGF0aFNlZy5QQVRIU0VHX1VOS05PV047XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFNvdXJjZS5wcm90b3R5cGUuaW5pdGlhbENvbW1hbmRJc01vdmVUbyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBwYXRoIGlzIGVtcHR5IGl0IGlzIHN0aWxsIHZhbGlkLCBzbyByZXR1cm4gdHJ1ZS5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaGFzTW9yZURhdGEoKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgdmFyIGNvbW1hbmQgPSB0aGlzLnBlZWtTZWdtZW50VHlwZSgpO1xuICAgICAgICAgICAgICAgIC8vIFBhdGggbXVzdCBzdGFydCB3aXRoIG1vdmVUby5cbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWFuZCA9PSBTVkdQYXRoU2VnLlBBVEhTRUdfTU9WRVRPX0FCUyB8fCBjb21tYW5kID09IFNWR1BhdGhTZWcuUEFUSFNFR19NT1ZFVE9fUkVMO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBQYXJzZSBhIG51bWJlciBmcm9tIGFuIFNWRyBwYXRoLiBUaGlzIHZlcnkgY2xvc2VseSBmb2xsb3dzIGdlbmVyaWNQYXJzZU51bWJlciguLi4pIGZyb20gU291cmNlL2NvcmUvc3ZnL1NWR1BhcnNlclV0aWxpdGllcy5jcHAuXG4gICAgICAgICAgICAvLyBTcGVjOiBodHRwOi8vd3d3LnczLm9yZy9UUi9TVkcxMS9zaW5nbGUtcGFnZS5odG1sI3BhdGhzLVBhdGhEYXRhQk5GXG4gICAgICAgICAgICBTb3VyY2UucHJvdG90eXBlLl9wYXJzZU51bWJlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBleHBvbmVudCA9IDA7XG4gICAgICAgICAgICAgICAgdmFyIGludGVnZXIgPSAwO1xuICAgICAgICAgICAgICAgIHZhciBmcmFjID0gMTtcbiAgICAgICAgICAgICAgICB2YXIgZGVjaW1hbCA9IDA7XG4gICAgICAgICAgICAgICAgdmFyIHNpZ24gPSAxO1xuICAgICAgICAgICAgICAgIHZhciBleHBzaWduID0gMTtcblxuICAgICAgICAgICAgICAgIHZhciBzdGFydEluZGV4ID0gdGhpcy5fY3VycmVudEluZGV4O1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fc2tpcE9wdGlvbmFsU3BhY2VzKCk7XG5cbiAgICAgICAgICAgICAgICAvLyBSZWFkIHRoZSBzaWduLlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jdXJyZW50SW5kZXggPCB0aGlzLl9lbmRJbmRleCAmJiB0aGlzLl9zdHJpbmcuY2hhckF0KHRoaXMuX2N1cnJlbnRJbmRleCkgPT0gXCIrXCIpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRJbmRleCsrO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX2N1cnJlbnRJbmRleCA8IHRoaXMuX2VuZEluZGV4ICYmIHRoaXMuX3N0cmluZy5jaGFyQXQodGhpcy5fY3VycmVudEluZGV4KSA9PSBcIi1cIikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50SW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgc2lnbiA9IC0xO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jdXJyZW50SW5kZXggPT0gdGhpcy5fZW5kSW5kZXggfHwgKCh0aGlzLl9zdHJpbmcuY2hhckF0KHRoaXMuX2N1cnJlbnRJbmRleCkgPCBcIjBcIiB8fCB0aGlzLl9zdHJpbmcuY2hhckF0KHRoaXMuX2N1cnJlbnRJbmRleCkgPiBcIjlcIikgJiYgdGhpcy5fc3RyaW5nLmNoYXJBdCh0aGlzLl9jdXJyZW50SW5kZXgpICE9IFwiLlwiKSlcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGZpcnN0IGNoYXJhY3RlciBvZiBhIG51bWJlciBtdXN0IGJlIG9uZSBvZiBbMC05Ky0uXS5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgICAgIC8vIFJlYWQgdGhlIGludGVnZXIgcGFydCwgYnVpbGQgcmlnaHQtdG8tbGVmdC5cbiAgICAgICAgICAgICAgICB2YXIgc3RhcnRJbnRQYXJ0SW5kZXggPSB0aGlzLl9jdXJyZW50SW5kZXg7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHRoaXMuX2N1cnJlbnRJbmRleCA8IHRoaXMuX2VuZEluZGV4ICYmIHRoaXMuX3N0cmluZy5jaGFyQXQodGhpcy5fY3VycmVudEluZGV4KSA+PSBcIjBcIiAmJiB0aGlzLl9zdHJpbmcuY2hhckF0KHRoaXMuX2N1cnJlbnRJbmRleCkgPD0gXCI5XCIpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRJbmRleCsrOyAvLyBBZHZhbmNlIHRvIGZpcnN0IG5vbi1kaWdpdC5cblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jdXJyZW50SW5kZXggIT0gc3RhcnRJbnRQYXJ0SW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjYW5JbnRQYXJ0SW5kZXggPSB0aGlzLl9jdXJyZW50SW5kZXggLSAxO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbXVsdGlwbGllciA9IDE7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChzY2FuSW50UGFydEluZGV4ID49IHN0YXJ0SW50UGFydEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlZ2VyICs9IG11bHRpcGxpZXIgKiAodGhpcy5fc3RyaW5nLmNoYXJBdChzY2FuSW50UGFydEluZGV4LS0pIC0gXCIwXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGllciAqPSAxMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFJlYWQgdGhlIGRlY2ltYWxzLlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jdXJyZW50SW5kZXggPCB0aGlzLl9lbmRJbmRleCAmJiB0aGlzLl9zdHJpbmcuY2hhckF0KHRoaXMuX2N1cnJlbnRJbmRleCkgPT0gXCIuXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudEluZGV4Kys7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlcmUgbXVzdCBiZSBhIGxlYXN0IG9uZSBkaWdpdCBmb2xsb3dpbmcgdGhlIC5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRJbmRleCA+PSB0aGlzLl9lbmRJbmRleCB8fCB0aGlzLl9zdHJpbmcuY2hhckF0KHRoaXMuX2N1cnJlbnRJbmRleCkgPCBcIjBcIiB8fCB0aGlzLl9zdHJpbmcuY2hhckF0KHRoaXMuX2N1cnJlbnRJbmRleCkgPiBcIjlcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlICh0aGlzLl9jdXJyZW50SW5kZXggPCB0aGlzLl9lbmRJbmRleCAmJiB0aGlzLl9zdHJpbmcuY2hhckF0KHRoaXMuX2N1cnJlbnRJbmRleCkgPj0gXCIwXCIgJiYgdGhpcy5fc3RyaW5nLmNoYXJBdCh0aGlzLl9jdXJyZW50SW5kZXgpIDw9IFwiOVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgZGVjaW1hbCArPSAodGhpcy5fc3RyaW5nLmNoYXJBdCh0aGlzLl9jdXJyZW50SW5kZXgrKykgLSBcIjBcIikgKiAoZnJhYyAqPSAwLjEpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFJlYWQgdGhlIGV4cG9uZW50IHBhcnQuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRJbmRleCAhPSBzdGFydEluZGV4ICYmIHRoaXMuX2N1cnJlbnRJbmRleCArIDEgPCB0aGlzLl9lbmRJbmRleCAmJiAodGhpcy5fc3RyaW5nLmNoYXJBdCh0aGlzLl9jdXJyZW50SW5kZXgpID09IFwiZVwiIHx8IHRoaXMuX3N0cmluZy5jaGFyQXQodGhpcy5fY3VycmVudEluZGV4KSA9PSBcIkVcIikgJiYgKHRoaXMuX3N0cmluZy5jaGFyQXQodGhpcy5fY3VycmVudEluZGV4ICsgMSkgIT0gXCJ4XCIgJiYgdGhpcy5fc3RyaW5nLmNoYXJBdCh0aGlzLl9jdXJyZW50SW5kZXggKyAxKSAhPSBcIm1cIikpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudEluZGV4Kys7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gUmVhZCB0aGUgc2lnbiBvZiB0aGUgZXhwb25lbnQuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zdHJpbmcuY2hhckF0KHRoaXMuX2N1cnJlbnRJbmRleCkgPT0gXCIrXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRJbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0cmluZy5jaGFyQXQodGhpcy5fY3VycmVudEluZGV4KSA9PSBcIi1cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudEluZGV4Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICBleHBzaWduID0gLTE7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBUaGVyZSBtdXN0IGJlIGFuIGV4cG9uZW50LlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fY3VycmVudEluZGV4ID49IHRoaXMuX2VuZEluZGV4IHx8IHRoaXMuX3N0cmluZy5jaGFyQXQodGhpcy5fY3VycmVudEluZGV4KSA8IFwiMFwiIHx8IHRoaXMuX3N0cmluZy5jaGFyQXQodGhpcy5fY3VycmVudEluZGV4KSA+IFwiOVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAodGhpcy5fY3VycmVudEluZGV4IDwgdGhpcy5fZW5kSW5kZXggJiYgdGhpcy5fc3RyaW5nLmNoYXJBdCh0aGlzLl9jdXJyZW50SW5kZXgpID49IFwiMFwiICYmIHRoaXMuX3N0cmluZy5jaGFyQXQodGhpcy5fY3VycmVudEluZGV4KSA8PSBcIjlcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhwb25lbnQgKj0gMTA7XG4gICAgICAgICAgICAgICAgICAgICAgICBleHBvbmVudCArPSAodGhpcy5fc3RyaW5nLmNoYXJBdCh0aGlzLl9jdXJyZW50SW5kZXgpIC0gXCIwXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudEluZGV4Kys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgbnVtYmVyID0gaW50ZWdlciArIGRlY2ltYWw7XG4gICAgICAgICAgICAgICAgbnVtYmVyICo9IHNpZ247XG5cbiAgICAgICAgICAgICAgICBpZiAoZXhwb25lbnQpXG4gICAgICAgICAgICAgICAgICAgIG51bWJlciAqPSBNYXRoLnBvdygxMCwgZXhwc2lnbiAqIGV4cG9uZW50KTtcblxuICAgICAgICAgICAgICAgIGlmIChzdGFydEluZGV4ID09IHRoaXMuX2N1cnJlbnRJbmRleClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgICAgIHRoaXMuX3NraXBPcHRpb25hbFNwYWNlc09yRGVsaW1pdGVyKCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBTb3VyY2UucHJvdG90eXBlLl9wYXJzZUFyY0ZsYWcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fY3VycmVudEluZGV4ID49IHRoaXMuX2VuZEluZGV4KVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHZhciBmbGFnID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdmFyIGZsYWdDaGFyID0gdGhpcy5fc3RyaW5nLmNoYXJBdCh0aGlzLl9jdXJyZW50SW5kZXgrKyk7XG4gICAgICAgICAgICAgICAgaWYgKGZsYWdDaGFyID09IFwiMFwiKVxuICAgICAgICAgICAgICAgICAgICBmbGFnID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZmxhZ0NoYXIgPT0gXCIxXCIpXG4gICAgICAgICAgICAgICAgICAgIGZsYWcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgICAgIHRoaXMuX3NraXBPcHRpb25hbFNwYWNlc09yRGVsaW1pdGVyKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZsYWc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFNvdXJjZS5wcm90b3R5cGUucGFyc2VTZWdtZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxvb2thaGVhZCA9IHRoaXMuX3N0cmluZ1t0aGlzLl9jdXJyZW50SW5kZXhdO1xuICAgICAgICAgICAgICAgIHZhciBjb21tYW5kID0gdGhpcy5fcGF0aFNlZ1R5cGVGcm9tQ2hhcihsb29rYWhlYWQpO1xuICAgICAgICAgICAgICAgIGlmIChjb21tYW5kID09IFNWR1BhdGhTZWcuUEFUSFNFR19VTktOT1dOKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFBvc3NpYmx5IGFuIGltcGxpY2l0IGNvbW1hbmQuIE5vdCBhbGxvd2VkIGlmIHRoaXMgaXMgdGhlIGZpcnN0IGNvbW1hbmQuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9wcmV2aW91c0NvbW1hbmQgPT0gU1ZHUGF0aFNlZy5QQVRIU0VHX1VOS05PV04pXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZCA9IHRoaXMuX25leHRDb21tYW5kSGVscGVyKGxvb2thaGVhZCwgdGhpcy5fcHJldmlvdXNDb21tYW5kKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbW1hbmQgPT0gU1ZHUGF0aFNlZy5QQVRIU0VHX1VOS05PV04pXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50SW5kZXgrKztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9wcmV2aW91c0NvbW1hbmQgPSBjb21tYW5kO1xuXG4gICAgICAgICAgICAgICAgc3dpdGNoIChjb21tYW5kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBTVkdQYXRoU2VnLlBBVEhTRUdfTU9WRVRPX1JFTDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTVkdQYXRoU2VnTW92ZXRvUmVsKG93bmluZ1BhdGhTZWdMaXN0LCB0aGlzLl9wYXJzZU51bWJlcigpLCB0aGlzLl9wYXJzZU51bWJlcigpKTtcbiAgICAgICAgICAgICAgICBjYXNlIFNWR1BhdGhTZWcuUEFUSFNFR19NT1ZFVE9fQUJTOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFNWR1BhdGhTZWdNb3ZldG9BYnMob3duaW5nUGF0aFNlZ0xpc3QsIHRoaXMuX3BhcnNlTnVtYmVyKCksIHRoaXMuX3BhcnNlTnVtYmVyKCkpO1xuICAgICAgICAgICAgICAgIGNhc2UgU1ZHUGF0aFNlZy5QQVRIU0VHX0xJTkVUT19SRUw6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU1ZHUGF0aFNlZ0xpbmV0b1JlbChvd25pbmdQYXRoU2VnTGlzdCwgdGhpcy5fcGFyc2VOdW1iZXIoKSwgdGhpcy5fcGFyc2VOdW1iZXIoKSk7XG4gICAgICAgICAgICAgICAgY2FzZSBTVkdQYXRoU2VnLlBBVEhTRUdfTElORVRPX0FCUzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTVkdQYXRoU2VnTGluZXRvQWJzKG93bmluZ1BhdGhTZWdMaXN0LCB0aGlzLl9wYXJzZU51bWJlcigpLCB0aGlzLl9wYXJzZU51bWJlcigpKTtcbiAgICAgICAgICAgICAgICBjYXNlIFNWR1BhdGhTZWcuUEFUSFNFR19MSU5FVE9fSE9SSVpPTlRBTF9SRUw6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU1ZHUGF0aFNlZ0xpbmV0b0hvcml6b250YWxSZWwob3duaW5nUGF0aFNlZ0xpc3QsIHRoaXMuX3BhcnNlTnVtYmVyKCkpO1xuICAgICAgICAgICAgICAgIGNhc2UgU1ZHUGF0aFNlZy5QQVRIU0VHX0xJTkVUT19IT1JJWk9OVEFMX0FCUzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTVkdQYXRoU2VnTGluZXRvSG9yaXpvbnRhbEFicyhvd25pbmdQYXRoU2VnTGlzdCwgdGhpcy5fcGFyc2VOdW1iZXIoKSk7XG4gICAgICAgICAgICAgICAgY2FzZSBTVkdQYXRoU2VnLlBBVEhTRUdfTElORVRPX1ZFUlRJQ0FMX1JFTDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTVkdQYXRoU2VnTGluZXRvVmVydGljYWxSZWwob3duaW5nUGF0aFNlZ0xpc3QsIHRoaXMuX3BhcnNlTnVtYmVyKCkpO1xuICAgICAgICAgICAgICAgIGNhc2UgU1ZHUGF0aFNlZy5QQVRIU0VHX0xJTkVUT19WRVJUSUNBTF9BQlM6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU1ZHUGF0aFNlZ0xpbmV0b1ZlcnRpY2FsQWJzKG93bmluZ1BhdGhTZWdMaXN0LCB0aGlzLl9wYXJzZU51bWJlcigpKTtcbiAgICAgICAgICAgICAgICBjYXNlIFNWR1BhdGhTZWcuUEFUSFNFR19DTE9TRVBBVEg6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NraXBPcHRpb25hbFNwYWNlcygpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFNWR1BhdGhTZWdDbG9zZVBhdGgob3duaW5nUGF0aFNlZ0xpc3QpO1xuICAgICAgICAgICAgICAgIGNhc2UgU1ZHUGF0aFNlZy5QQVRIU0VHX0NVUlZFVE9fQ1VCSUNfUkVMOlxuICAgICAgICAgICAgICAgICAgICB2YXIgcG9pbnRzID0ge3gxOiB0aGlzLl9wYXJzZU51bWJlcigpLCB5MTogdGhpcy5fcGFyc2VOdW1iZXIoKSwgeDI6IHRoaXMuX3BhcnNlTnVtYmVyKCksIHkyOiB0aGlzLl9wYXJzZU51bWJlcigpLCB4OiB0aGlzLl9wYXJzZU51bWJlcigpLCB5OiB0aGlzLl9wYXJzZU51bWJlcigpfTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTVkdQYXRoU2VnQ3VydmV0b0N1YmljUmVsKG93bmluZ1BhdGhTZWdMaXN0LCBwb2ludHMueCwgcG9pbnRzLnksIHBvaW50cy54MSwgcG9pbnRzLnkxLCBwb2ludHMueDIsIHBvaW50cy55Mik7XG4gICAgICAgICAgICAgICAgY2FzZSBTVkdQYXRoU2VnLlBBVEhTRUdfQ1VSVkVUT19DVUJJQ19BQlM6XG4gICAgICAgICAgICAgICAgICAgIHZhciBwb2ludHMgPSB7eDE6IHRoaXMuX3BhcnNlTnVtYmVyKCksIHkxOiB0aGlzLl9wYXJzZU51bWJlcigpLCB4MjogdGhpcy5fcGFyc2VOdW1iZXIoKSwgeTI6IHRoaXMuX3BhcnNlTnVtYmVyKCksIHg6IHRoaXMuX3BhcnNlTnVtYmVyKCksIHk6IHRoaXMuX3BhcnNlTnVtYmVyKCl9O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNBYnMob3duaW5nUGF0aFNlZ0xpc3QsIHBvaW50cy54LCBwb2ludHMueSwgcG9pbnRzLngxLCBwb2ludHMueTEsIHBvaW50cy54MiwgcG9pbnRzLnkyKTtcbiAgICAgICAgICAgICAgICBjYXNlIFNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX0NVQklDX1NNT09USF9SRUw6XG4gICAgICAgICAgICAgICAgICAgIHZhciBwb2ludHMgPSB7eDI6IHRoaXMuX3BhcnNlTnVtYmVyKCksIHkyOiB0aGlzLl9wYXJzZU51bWJlcigpLCB4OiB0aGlzLl9wYXJzZU51bWJlcigpLCB5OiB0aGlzLl9wYXJzZU51bWJlcigpfTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTVkdQYXRoU2VnQ3VydmV0b0N1YmljU21vb3RoUmVsKG93bmluZ1BhdGhTZWdMaXN0LCBwb2ludHMueCwgcG9pbnRzLnksIHBvaW50cy54MiwgcG9pbnRzLnkyKTtcbiAgICAgICAgICAgICAgICBjYXNlIFNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX0NVQklDX1NNT09USF9BQlM6XG4gICAgICAgICAgICAgICAgICAgIHZhciBwb2ludHMgPSB7eDI6IHRoaXMuX3BhcnNlTnVtYmVyKCksIHkyOiB0aGlzLl9wYXJzZU51bWJlcigpLCB4OiB0aGlzLl9wYXJzZU51bWJlcigpLCB5OiB0aGlzLl9wYXJzZU51bWJlcigpfTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTVkdQYXRoU2VnQ3VydmV0b0N1YmljU21vb3RoQWJzKG93bmluZ1BhdGhTZWdMaXN0LCBwb2ludHMueCwgcG9pbnRzLnksIHBvaW50cy54MiwgcG9pbnRzLnkyKTtcbiAgICAgICAgICAgICAgICBjYXNlIFNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX1FVQURSQVRJQ19SRUw6XG4gICAgICAgICAgICAgICAgICAgIHZhciBwb2ludHMgPSB7eDE6IHRoaXMuX3BhcnNlTnVtYmVyKCksIHkxOiB0aGlzLl9wYXJzZU51bWJlcigpLCB4OiB0aGlzLl9wYXJzZU51bWJlcigpLCB5OiB0aGlzLl9wYXJzZU51bWJlcigpfTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1JlbChvd25pbmdQYXRoU2VnTGlzdCwgcG9pbnRzLngsIHBvaW50cy55LCBwb2ludHMueDEsIHBvaW50cy55MSk7XG4gICAgICAgICAgICAgICAgY2FzZSBTVkdQYXRoU2VnLlBBVEhTRUdfQ1VSVkVUT19RVUFEUkFUSUNfQUJTOlxuICAgICAgICAgICAgICAgICAgICB2YXIgcG9pbnRzID0ge3gxOiB0aGlzLl9wYXJzZU51bWJlcigpLCB5MTogdGhpcy5fcGFyc2VOdW1iZXIoKSwgeDogdGhpcy5fcGFyc2VOdW1iZXIoKSwgeTogdGhpcy5fcGFyc2VOdW1iZXIoKX07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNBYnMob3duaW5nUGF0aFNlZ0xpc3QsIHBvaW50cy54LCBwb2ludHMueSwgcG9pbnRzLngxLCBwb2ludHMueTEpO1xuICAgICAgICAgICAgICAgIGNhc2UgU1ZHUGF0aFNlZy5QQVRIU0VHX0NVUlZFVE9fUVVBRFJBVElDX1NNT09USF9SRUw6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNTbW9vdGhSZWwob3duaW5nUGF0aFNlZ0xpc3QsIHRoaXMuX3BhcnNlTnVtYmVyKCksIHRoaXMuX3BhcnNlTnVtYmVyKCkpO1xuICAgICAgICAgICAgICAgIGNhc2UgU1ZHUGF0aFNlZy5QQVRIU0VHX0NVUlZFVE9fUVVBRFJBVElDX1NNT09USF9BQlM6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNTbW9vdGhBYnMob3duaW5nUGF0aFNlZ0xpc3QsIHRoaXMuX3BhcnNlTnVtYmVyKCksIHRoaXMuX3BhcnNlTnVtYmVyKCkpO1xuICAgICAgICAgICAgICAgIGNhc2UgU1ZHUGF0aFNlZy5QQVRIU0VHX0FSQ19SRUw6XG4gICAgICAgICAgICAgICAgICAgIHZhciBwb2ludHMgPSB7eDE6IHRoaXMuX3BhcnNlTnVtYmVyKCksIHkxOiB0aGlzLl9wYXJzZU51bWJlcigpLCBhcmNBbmdsZTogdGhpcy5fcGFyc2VOdW1iZXIoKSwgYXJjTGFyZ2U6IHRoaXMuX3BhcnNlQXJjRmxhZygpLCBhcmNTd2VlcDogdGhpcy5fcGFyc2VBcmNGbGFnKCksIHg6IHRoaXMuX3BhcnNlTnVtYmVyKCksIHk6IHRoaXMuX3BhcnNlTnVtYmVyKCl9O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFNWR1BhdGhTZWdBcmNSZWwob3duaW5nUGF0aFNlZ0xpc3QsIHBvaW50cy54LCBwb2ludHMueSwgcG9pbnRzLngxLCBwb2ludHMueTEsIHBvaW50cy5hcmNBbmdsZSwgcG9pbnRzLmFyY0xhcmdlLCBwb2ludHMuYXJjU3dlZXApO1xuICAgICAgICAgICAgICAgIGNhc2UgU1ZHUGF0aFNlZy5QQVRIU0VHX0FSQ19BQlM6XG4gICAgICAgICAgICAgICAgICAgIHZhciBwb2ludHMgPSB7eDE6IHRoaXMuX3BhcnNlTnVtYmVyKCksIHkxOiB0aGlzLl9wYXJzZU51bWJlcigpLCBhcmNBbmdsZTogdGhpcy5fcGFyc2VOdW1iZXIoKSwgYXJjTGFyZ2U6IHRoaXMuX3BhcnNlQXJjRmxhZygpLCBhcmNTd2VlcDogdGhpcy5fcGFyc2VBcmNGbGFnKCksIHg6IHRoaXMuX3BhcnNlTnVtYmVyKCksIHk6IHRoaXMuX3BhcnNlTnVtYmVyKCl9O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFNWR1BhdGhTZWdBcmNBYnMob3duaW5nUGF0aFNlZ0xpc3QsIHBvaW50cy54LCBwb2ludHMueSwgcG9pbnRzLngxLCBwb2ludHMueTEsIHBvaW50cy5hcmNBbmdsZSwgcG9pbnRzLmFyY0xhcmdlLCBwb2ludHMuYXJjU3dlZXApO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRocm93IFwiVW5rbm93biBwYXRoIHNlZyB0eXBlLlwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgYnVpbGRlciA9IG5ldyBCdWlsZGVyKCk7XG4gICAgICAgICAgICB2YXIgc291cmNlID0gbmV3IFNvdXJjZShzdHJpbmcpO1xuXG4gICAgICAgICAgICBpZiAoIXNvdXJjZS5pbml0aWFsQ29tbWFuZElzTW92ZVRvKCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgd2hpbGUgKHNvdXJjZS5oYXNNb3JlRGF0YSgpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhdGhTZWcgPSBzb3VyY2UucGFyc2VTZWdtZW50KCk7XG4gICAgICAgICAgICAgICAgaWYgKCFwYXRoU2VnKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICAgICAgYnVpbGRlci5hcHBlbmRTZWdtZW50KHBhdGhTZWcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gYnVpbGRlci5wYXRoU2VnTGlzdDtcbiAgICAgICAgfVxuICAgIH1cbn0oKSk7XG4iLCIvKipcbiogbWF0dGVyLWpzIDAuMTAuMCBieSBAbGlhYnJ1IDIwMTYtMDUtMDFcbiogaHR0cDovL2JybS5pby9tYXR0ZXItanMvXG4qIExpY2Vuc2UgTUlUXG4qL1xuXG4vKipcbiAqIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICogXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQgTGlhbSBCcnVtbWl0dFxuICogXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKiBcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqIFxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cblxuKGZ1bmN0aW9uKGYpe2lmKHR5cGVvZiBleHBvcnRzPT09XCJvYmplY3RcIiYmdHlwZW9mIG1vZHVsZSE9PVwidW5kZWZpbmVkXCIpe21vZHVsZS5leHBvcnRzPWYoKX1lbHNlIGlmKHR5cGVvZiBkZWZpbmU9PT1cImZ1bmN0aW9uXCImJmRlZmluZS5hbWQpe2RlZmluZShbXSxmKX1lbHNle3ZhciBnO2lmKHR5cGVvZiB3aW5kb3chPT1cInVuZGVmaW5lZFwiKXtnPXdpbmRvd31lbHNlIGlmKHR5cGVvZiBnbG9iYWwhPT1cInVuZGVmaW5lZFwiKXtnPWdsb2JhbH1lbHNlIGlmKHR5cGVvZiBzZWxmIT09XCJ1bmRlZmluZWRcIil7Zz1zZWxmfWVsc2V7Zz10aGlzfWcuTWF0dGVyID0gZigpfX0pKGZ1bmN0aW9uKCl7dmFyIGRlZmluZSxtb2R1bGUsZXhwb3J0cztyZXR1cm4gKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkoezE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLkJvZHlgIG1vZHVsZSBjb250YWlucyBtZXRob2RzIGZvciBjcmVhdGluZyBhbmQgbWFuaXB1bGF0aW5nIGJvZHkgbW9kZWxzLlxuKiBBIGBNYXR0ZXIuQm9keWAgaXMgYSByaWdpZCBib2R5IHRoYXQgY2FuIGJlIHNpbXVsYXRlZCBieSBhIGBNYXR0ZXIuRW5naW5lYC5cbiogRmFjdG9yaWVzIGZvciBjb21tb25seSB1c2VkIGJvZHkgY29uZmlndXJhdGlvbnMgKHN1Y2ggYXMgcmVjdGFuZ2xlcywgY2lyY2xlcyBhbmQgb3RoZXIgcG9seWdvbnMpIGNhbiBiZSBmb3VuZCBpbiB0aGUgbW9kdWxlIGBNYXR0ZXIuQm9kaWVzYC5cbipcbiogU2VlIHRoZSBpbmNsdWRlZCB1c2FnZSBbZXhhbXBsZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9saWFicnUvbWF0dGVyLWpzL3RyZWUvbWFzdGVyL2V4YW1wbGVzKS5cblxuKiBAY2xhc3MgQm9keVxuKi9cblxudmFyIEJvZHkgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBCb2R5O1xuXG52YXIgVmVydGljZXMgPSByZXF1aXJlKCcuLi9nZW9tZXRyeS9WZXJ0aWNlcycpO1xudmFyIFZlY3RvciA9IHJlcXVpcmUoJy4uL2dlb21ldHJ5L1ZlY3RvcicpO1xudmFyIFNsZWVwaW5nID0gcmVxdWlyZSgnLi4vY29yZS9TbGVlcGluZycpO1xudmFyIFJlbmRlciA9IHJlcXVpcmUoJy4uL3JlbmRlci9SZW5kZXInKTtcbnZhciBDb21tb24gPSByZXF1aXJlKCcuLi9jb3JlL0NvbW1vbicpO1xudmFyIEJvdW5kcyA9IHJlcXVpcmUoJy4uL2dlb21ldHJ5L0JvdW5kcycpO1xudmFyIEF4ZXMgPSByZXF1aXJlKCcuLi9nZW9tZXRyeS9BeGVzJyk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIEJvZHkuX2luZXJ0aWFTY2FsZSA9IDQ7XG4gICAgQm9keS5fbmV4dENvbGxpZGluZ0dyb3VwSWQgPSAxO1xuICAgIEJvZHkuX25leHROb25Db2xsaWRpbmdHcm91cElkID0gLTE7XG4gICAgQm9keS5fbmV4dENhdGVnb3J5ID0gMHgwMDAxO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyByaWdpZCBib2R5IG1vZGVsLiBUaGUgb3B0aW9ucyBwYXJhbWV0ZXIgaXMgYW4gb2JqZWN0IHRoYXQgc3BlY2lmaWVzIGFueSBwcm9wZXJ0aWVzIHlvdSB3aXNoIHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0cy5cbiAgICAgKiBBbGwgcHJvcGVydGllcyBoYXZlIGRlZmF1bHQgdmFsdWVzLCBhbmQgbWFueSBhcmUgcHJlLWNhbGN1bGF0ZWQgYXV0b21hdGljYWxseSBiYXNlZCBvbiBvdGhlciBwcm9wZXJ0aWVzLlxuICAgICAqIFNlZSB0aGUgcHJvcGVydGllcyBzZWN0aW9uIGJlbG93IGZvciBkZXRhaWxlZCBpbmZvcm1hdGlvbiBvbiB3aGF0IHlvdSBjYW4gcGFzcyB2aWEgdGhlIGBvcHRpb25zYCBvYmplY3QuXG4gICAgICogQG1ldGhvZCBjcmVhdGVcbiAgICAgKiBAcGFyYW0ge30gb3B0aW9uc1xuICAgICAqIEByZXR1cm4ge2JvZHl9IGJvZHlcbiAgICAgKi9cbiAgICBCb2R5LmNyZWF0ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGRlZmF1bHRzID0ge1xuICAgICAgICAgICAgaWQ6IENvbW1vbi5uZXh0SWQoKSxcbiAgICAgICAgICAgIHR5cGU6ICdib2R5JyxcbiAgICAgICAgICAgIGxhYmVsOiAnQm9keScsXG4gICAgICAgICAgICBwYXJ0czogW10sXG4gICAgICAgICAgICBhbmdsZTogMCxcbiAgICAgICAgICAgIHZlcnRpY2VzOiBWZXJ0aWNlcy5mcm9tUGF0aCgnTCAwIDAgTCA0MCAwIEwgNDAgNDAgTCAwIDQwJyksXG4gICAgICAgICAgICBwb3NpdGlvbjogeyB4OiAwLCB5OiAwIH0sXG4gICAgICAgICAgICBmb3JjZTogeyB4OiAwLCB5OiAwIH0sXG4gICAgICAgICAgICB0b3JxdWU6IDAsXG4gICAgICAgICAgICBwb3NpdGlvbkltcHVsc2U6IHsgeDogMCwgeTogMCB9LFxuICAgICAgICAgICAgY29uc3RyYWludEltcHVsc2U6IHsgeDogMCwgeTogMCwgYW5nbGU6IDAgfSxcbiAgICAgICAgICAgIHRvdGFsQ29udGFjdHM6IDAsXG4gICAgICAgICAgICBzcGVlZDogMCxcbiAgICAgICAgICAgIGFuZ3VsYXJTcGVlZDogMCxcbiAgICAgICAgICAgIHZlbG9jaXR5OiB7IHg6IDAsIHk6IDAgfSxcbiAgICAgICAgICAgIGFuZ3VsYXJWZWxvY2l0eTogMCxcbiAgICAgICAgICAgIGlzU2Vuc29yOiBmYWxzZSxcbiAgICAgICAgICAgIGlzU3RhdGljOiBmYWxzZSxcbiAgICAgICAgICAgIGlzU2xlZXBpbmc6IGZhbHNlLFxuICAgICAgICAgICAgbW90aW9uOiAwLFxuICAgICAgICAgICAgc2xlZXBUaHJlc2hvbGQ6IDYwLFxuICAgICAgICAgICAgZGVuc2l0eTogMC4wMDEsXG4gICAgICAgICAgICByZXN0aXR1dGlvbjogMCxcbiAgICAgICAgICAgIGZyaWN0aW9uOiAwLjEsXG4gICAgICAgICAgICBmcmljdGlvblN0YXRpYzogMC41LFxuICAgICAgICAgICAgZnJpY3Rpb25BaXI6IDAuMDEsXG4gICAgICAgICAgICBjb2xsaXNpb25GaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogMHgwMDAxLFxuICAgICAgICAgICAgICAgIG1hc2s6IDB4RkZGRkZGRkYsXG4gICAgICAgICAgICAgICAgZ3JvdXA6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzbG9wOiAwLjA1LFxuICAgICAgICAgICAgdGltZVNjYWxlOiAxLFxuICAgICAgICAgICAgcmVuZGVyOiB7XG4gICAgICAgICAgICAgICAgdmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgICAgICAgIHNwcml0ZToge1xuICAgICAgICAgICAgICAgICAgICB4U2NhbGU6IDEsXG4gICAgICAgICAgICAgICAgICAgIHlTY2FsZTogMSxcbiAgICAgICAgICAgICAgICAgICAgeE9mZnNldDogMCxcbiAgICAgICAgICAgICAgICAgICAgeU9mZnNldDogMFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGluZVdpZHRoOiAxLjVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgYm9keSA9IENvbW1vbi5leHRlbmQoZGVmYXVsdHMsIG9wdGlvbnMpO1xuXG4gICAgICAgIF9pbml0UHJvcGVydGllcyhib2R5LCBvcHRpb25zKTtcblxuICAgICAgICByZXR1cm4gYm9keTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbmV4dCB1bmlxdWUgZ3JvdXAgaW5kZXggZm9yIHdoaWNoIGJvZGllcyB3aWxsIGNvbGxpZGUuXG4gICAgICogSWYgYGlzTm9uQ29sbGlkaW5nYCBpcyBgdHJ1ZWAsIHJldHVybnMgdGhlIG5leHQgdW5pcXVlIGdyb3VwIGluZGV4IGZvciB3aGljaCBib2RpZXMgd2lsbCBfbm90XyBjb2xsaWRlLlxuICAgICAqIFNlZSBgYm9keS5jb2xsaXNpb25GaWx0ZXJgIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAqIEBtZXRob2QgbmV4dEdyb3VwXG4gICAgICogQHBhcmFtIHtib29sfSBbaXNOb25Db2xsaWRpbmc9ZmFsc2VdXG4gICAgICogQHJldHVybiB7TnVtYmVyfSBVbmlxdWUgZ3JvdXAgaW5kZXhcbiAgICAgKi9cbiAgICBCb2R5Lm5leHRHcm91cCA9IGZ1bmN0aW9uKGlzTm9uQ29sbGlkaW5nKSB7XG4gICAgICAgIGlmIChpc05vbkNvbGxpZGluZylcbiAgICAgICAgICAgIHJldHVybiBCb2R5Ll9uZXh0Tm9uQ29sbGlkaW5nR3JvdXBJZC0tO1xuXG4gICAgICAgIHJldHVybiBCb2R5Ll9uZXh0Q29sbGlkaW5nR3JvdXBJZCsrO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBuZXh0IHVuaXF1ZSBjYXRlZ29yeSBiaXRmaWVsZCAoc3RhcnRpbmcgYWZ0ZXIgdGhlIGluaXRpYWwgZGVmYXVsdCBjYXRlZ29yeSBgMHgwMDAxYCkuXG4gICAgICogVGhlcmUgYXJlIDMyIGF2YWlsYWJsZS4gU2VlIGBib2R5LmNvbGxpc2lvbkZpbHRlcmAgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICogQG1ldGhvZCBuZXh0Q2F0ZWdvcnlcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IFVuaXF1ZSBjYXRlZ29yeSBiaXRmaWVsZFxuICAgICAqL1xuICAgIEJvZHkubmV4dENhdGVnb3J5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIEJvZHkuX25leHRDYXRlZ29yeSA9IEJvZHkuX25leHRDYXRlZ29yeSA8PCAxO1xuICAgICAgICByZXR1cm4gQm9keS5fbmV4dENhdGVnb3J5O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXNlcyBib2R5IHByb3BlcnRpZXMuXG4gICAgICogQG1ldGhvZCBfaW5pdFByb3BlcnRpZXNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqIEBwYXJhbSB7fSBvcHRpb25zXG4gICAgICovXG4gICAgdmFyIF9pbml0UHJvcGVydGllcyA9IGZ1bmN0aW9uKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgLy8gaW5pdCByZXF1aXJlZCBwcm9wZXJ0aWVzIChvcmRlciBpcyBpbXBvcnRhbnQpXG4gICAgICAgIEJvZHkuc2V0KGJvZHksIHtcbiAgICAgICAgICAgIGJvdW5kczogYm9keS5ib3VuZHMgfHwgQm91bmRzLmNyZWF0ZShib2R5LnZlcnRpY2VzKSxcbiAgICAgICAgICAgIHBvc2l0aW9uUHJldjogYm9keS5wb3NpdGlvblByZXYgfHwgVmVjdG9yLmNsb25lKGJvZHkucG9zaXRpb24pLFxuICAgICAgICAgICAgYW5nbGVQcmV2OiBib2R5LmFuZ2xlUHJldiB8fCBib2R5LmFuZ2xlLFxuICAgICAgICAgICAgdmVydGljZXM6IGJvZHkudmVydGljZXMsXG4gICAgICAgICAgICBwYXJ0czogYm9keS5wYXJ0cyB8fCBbYm9keV0sXG4gICAgICAgICAgICBpc1N0YXRpYzogYm9keS5pc1N0YXRpYyxcbiAgICAgICAgICAgIGlzU2xlZXBpbmc6IGJvZHkuaXNTbGVlcGluZyxcbiAgICAgICAgICAgIHBhcmVudDogYm9keS5wYXJlbnQgfHwgYm9keVxuICAgICAgICB9KTtcblxuICAgICAgICBWZXJ0aWNlcy5yb3RhdGUoYm9keS52ZXJ0aWNlcywgYm9keS5hbmdsZSwgYm9keS5wb3NpdGlvbik7XG4gICAgICAgIEF4ZXMucm90YXRlKGJvZHkuYXhlcywgYm9keS5hbmdsZSk7XG4gICAgICAgIEJvdW5kcy51cGRhdGUoYm9keS5ib3VuZHMsIGJvZHkudmVydGljZXMsIGJvZHkudmVsb2NpdHkpO1xuXG4gICAgICAgIC8vIGFsbG93IG9wdGlvbnMgdG8gb3ZlcnJpZGUgdGhlIGF1dG9tYXRpY2FsbHkgY2FsY3VsYXRlZCBwcm9wZXJ0aWVzXG4gICAgICAgIEJvZHkuc2V0KGJvZHksIHtcbiAgICAgICAgICAgIGF4ZXM6IG9wdGlvbnMuYXhlcyB8fCBib2R5LmF4ZXMsXG4gICAgICAgICAgICBhcmVhOiBvcHRpb25zLmFyZWEgfHwgYm9keS5hcmVhLFxuICAgICAgICAgICAgbWFzczogb3B0aW9ucy5tYXNzIHx8IGJvZHkubWFzcyxcbiAgICAgICAgICAgIGluZXJ0aWE6IG9wdGlvbnMuaW5lcnRpYSB8fCBib2R5LmluZXJ0aWFcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gcmVuZGVyIHByb3BlcnRpZXNcbiAgICAgICAgdmFyIGRlZmF1bHRGaWxsU3R5bGUgPSAoYm9keS5pc1N0YXRpYyA/ICcjZWVlZWVlJyA6IENvbW1vbi5jaG9vc2UoWycjNTU2MjcwJywgJyM0RUNEQzQnLCAnI0M3RjQ2NCcsICcjRkY2QjZCJywgJyNDNDRENTgnXSkpLFxuICAgICAgICAgICAgZGVmYXVsdFN0cm9rZVN0eWxlID0gQ29tbW9uLnNoYWRlQ29sb3IoZGVmYXVsdEZpbGxTdHlsZSwgLTIwKTtcbiAgICAgICAgYm9keS5yZW5kZXIuZmlsbFN0eWxlID0gYm9keS5yZW5kZXIuZmlsbFN0eWxlIHx8IGRlZmF1bHRGaWxsU3R5bGU7XG4gICAgICAgIGJvZHkucmVuZGVyLnN0cm9rZVN0eWxlID0gYm9keS5yZW5kZXIuc3Ryb2tlU3R5bGUgfHwgZGVmYXVsdFN0cm9rZVN0eWxlO1xuICAgICAgICBib2R5LnJlbmRlci5zcHJpdGUueE9mZnNldCArPSAtKGJvZHkuYm91bmRzLm1pbi54IC0gYm9keS5wb3NpdGlvbi54KSAvIChib2R5LmJvdW5kcy5tYXgueCAtIGJvZHkuYm91bmRzLm1pbi54KTtcbiAgICAgICAgYm9keS5yZW5kZXIuc3ByaXRlLnlPZmZzZXQgKz0gLShib2R5LmJvdW5kcy5taW4ueSAtIGJvZHkucG9zaXRpb24ueSkgLyAoYm9keS5ib3VuZHMubWF4LnkgLSBib2R5LmJvdW5kcy5taW4ueSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdpdmVuIGEgcHJvcGVydHkgYW5kIGEgdmFsdWUgKG9yIG1hcCBvZiksIHNldHMgdGhlIHByb3BlcnR5KHMpIG9uIHRoZSBib2R5LCB1c2luZyB0aGUgYXBwcm9wcmlhdGUgc2V0dGVyIGZ1bmN0aW9ucyBpZiB0aGV5IGV4aXN0LlxuICAgICAqIFByZWZlciB0byB1c2UgdGhlIGFjdHVhbCBzZXR0ZXIgZnVuY3Rpb25zIGluIHBlcmZvcm1hbmNlIGNyaXRpY2FsIHNpdHVhdGlvbnMuXG4gICAgICogQG1ldGhvZCBzZXRcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlcbiAgICAgKiBAcGFyYW0ge30gc2V0dGluZ3MgQSBwcm9wZXJ0eSBuYW1lIChvciBtYXAgb2YgcHJvcGVydGllcyBhbmQgdmFsdWVzKSB0byBzZXQgb24gdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHt9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQgaWYgYHNldHRpbmdzYCBpcyBhIHNpbmdsZSBwcm9wZXJ0eSBuYW1lLlxuICAgICAqL1xuICAgIEJvZHkuc2V0ID0gZnVuY3Rpb24oYm9keSwgc2V0dGluZ3MsIHZhbHVlKSB7XG4gICAgICAgIHZhciBwcm9wZXJ0eTtcblxuICAgICAgICBpZiAodHlwZW9mIHNldHRpbmdzID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcHJvcGVydHkgPSBzZXR0aW5ncztcbiAgICAgICAgICAgIHNldHRpbmdzID0ge307XG4gICAgICAgICAgICBzZXR0aW5nc1twcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAocHJvcGVydHkgaW4gc2V0dGluZ3MpIHtcbiAgICAgICAgICAgIHZhbHVlID0gc2V0dGluZ3NbcHJvcGVydHldO1xuXG4gICAgICAgICAgICBpZiAoIXNldHRpbmdzLmhhc093blByb3BlcnR5KHByb3BlcnR5KSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgc3dpdGNoIChwcm9wZXJ0eSkge1xuXG4gICAgICAgICAgICBjYXNlICdpc1N0YXRpYyc6XG4gICAgICAgICAgICAgICAgQm9keS5zZXRTdGF0aWMoYm9keSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaXNTbGVlcGluZyc6XG4gICAgICAgICAgICAgICAgU2xlZXBpbmcuc2V0KGJvZHksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21hc3MnOlxuICAgICAgICAgICAgICAgIEJvZHkuc2V0TWFzcyhib2R5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkZW5zaXR5JzpcbiAgICAgICAgICAgICAgICBCb2R5LnNldERlbnNpdHkoYm9keSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaW5lcnRpYSc6XG4gICAgICAgICAgICAgICAgQm9keS5zZXRJbmVydGlhKGJvZHksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3ZlcnRpY2VzJzpcbiAgICAgICAgICAgICAgICBCb2R5LnNldFZlcnRpY2VzKGJvZHksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3Bvc2l0aW9uJzpcbiAgICAgICAgICAgICAgICBCb2R5LnNldFBvc2l0aW9uKGJvZHksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2FuZ2xlJzpcbiAgICAgICAgICAgICAgICBCb2R5LnNldEFuZ2xlKGJvZHksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3ZlbG9jaXR5JzpcbiAgICAgICAgICAgICAgICBCb2R5LnNldFZlbG9jaXR5KGJvZHksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2FuZ3VsYXJWZWxvY2l0eSc6XG4gICAgICAgICAgICAgICAgQm9keS5zZXRBbmd1bGFyVmVsb2NpdHkoYm9keSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncGFydHMnOlxuICAgICAgICAgICAgICAgIEJvZHkuc2V0UGFydHMoYm9keSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBib2R5W3Byb3BlcnR5XSA9IHZhbHVlO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYm9keSBhcyBzdGF0aWMsIGluY2x1ZGluZyBpc1N0YXRpYyBmbGFnIGFuZCBzZXR0aW5nIG1hc3MgYW5kIGluZXJ0aWEgdG8gSW5maW5pdHkuXG4gICAgICogQG1ldGhvZCBzZXRTdGF0aWNcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlcbiAgICAgKiBAcGFyYW0ge2Jvb2x9IGlzU3RhdGljXG4gICAgICovXG4gICAgQm9keS5zZXRTdGF0aWMgPSBmdW5jdGlvbihib2R5LCBpc1N0YXRpYykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvZHkucGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBwYXJ0ID0gYm9keS5wYXJ0c1tpXTtcbiAgICAgICAgICAgIHBhcnQuaXNTdGF0aWMgPSBpc1N0YXRpYztcblxuICAgICAgICAgICAgaWYgKGlzU3RhdGljKSB7XG4gICAgICAgICAgICAgICAgcGFydC5yZXN0aXR1dGlvbiA9IDA7XG4gICAgICAgICAgICAgICAgcGFydC5mcmljdGlvbiA9IDE7XG4gICAgICAgICAgICAgICAgcGFydC5tYXNzID0gcGFydC5pbmVydGlhID0gcGFydC5kZW5zaXR5ID0gSW5maW5pdHk7XG4gICAgICAgICAgICAgICAgcGFydC5pbnZlcnNlTWFzcyA9IHBhcnQuaW52ZXJzZUluZXJ0aWEgPSAwO1xuXG4gICAgICAgICAgICAgICAgcGFydC5wb3NpdGlvblByZXYueCA9IHBhcnQucG9zaXRpb24ueDtcbiAgICAgICAgICAgICAgICBwYXJ0LnBvc2l0aW9uUHJldi55ID0gcGFydC5wb3NpdGlvbi55O1xuICAgICAgICAgICAgICAgIHBhcnQuYW5nbGVQcmV2ID0gcGFydC5hbmdsZTtcbiAgICAgICAgICAgICAgICBwYXJ0LmFuZ3VsYXJWZWxvY2l0eSA9IDA7XG4gICAgICAgICAgICAgICAgcGFydC5zcGVlZCA9IDA7XG4gICAgICAgICAgICAgICAgcGFydC5hbmd1bGFyU3BlZWQgPSAwO1xuICAgICAgICAgICAgICAgIHBhcnQubW90aW9uID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBtYXNzIG9mIHRoZSBib2R5LiBJbnZlcnNlIG1hc3MgYW5kIGRlbnNpdHkgYXJlIGF1dG9tYXRpY2FsbHkgdXBkYXRlZCB0byByZWZsZWN0IHRoZSBjaGFuZ2UuXG4gICAgICogQG1ldGhvZCBzZXRNYXNzXG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1hc3NcbiAgICAgKi9cbiAgICBCb2R5LnNldE1hc3MgPSBmdW5jdGlvbihib2R5LCBtYXNzKSB7XG4gICAgICAgIGJvZHkubWFzcyA9IG1hc3M7XG4gICAgICAgIGJvZHkuaW52ZXJzZU1hc3MgPSAxIC8gYm9keS5tYXNzO1xuICAgICAgICBib2R5LmRlbnNpdHkgPSBib2R5Lm1hc3MgLyBib2R5LmFyZWE7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGRlbnNpdHkgb2YgdGhlIGJvZHkuIE1hc3MgaXMgYXV0b21hdGljYWxseSB1cGRhdGVkIHRvIHJlZmxlY3QgdGhlIGNoYW5nZS5cbiAgICAgKiBAbWV0aG9kIHNldERlbnNpdHlcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGVuc2l0eVxuICAgICAqL1xuICAgIEJvZHkuc2V0RGVuc2l0eSA9IGZ1bmN0aW9uKGJvZHksIGRlbnNpdHkpIHtcbiAgICAgICAgQm9keS5zZXRNYXNzKGJvZHksIGRlbnNpdHkgKiBib2R5LmFyZWEpO1xuICAgICAgICBib2R5LmRlbnNpdHkgPSBkZW5zaXR5O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBtb21lbnQgb2YgaW5lcnRpYSAoaS5lLiBzZWNvbmQgbW9tZW50IG9mIGFyZWEpIG9mIHRoZSBib2R5IG9mIHRoZSBib2R5LiBcbiAgICAgKiBJbnZlcnNlIGluZXJ0aWEgaXMgYXV0b21hdGljYWxseSB1cGRhdGVkIHRvIHJlZmxlY3QgdGhlIGNoYW5nZS4gTWFzcyBpcyBub3QgY2hhbmdlZC5cbiAgICAgKiBAbWV0aG9kIHNldEluZXJ0aWFcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5lcnRpYVxuICAgICAqL1xuICAgIEJvZHkuc2V0SW5lcnRpYSA9IGZ1bmN0aW9uKGJvZHksIGluZXJ0aWEpIHtcbiAgICAgICAgYm9keS5pbmVydGlhID0gaW5lcnRpYTtcbiAgICAgICAgYm9keS5pbnZlcnNlSW5lcnRpYSA9IDEgLyBib2R5LmluZXJ0aWE7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGJvZHkncyB2ZXJ0aWNlcyBhbmQgdXBkYXRlcyBib2R5IHByb3BlcnRpZXMgYWNjb3JkaW5nbHksIGluY2x1ZGluZyBpbmVydGlhLCBhcmVhIGFuZCBtYXNzICh3aXRoIHJlc3BlY3QgdG8gYGJvZHkuZGVuc2l0eWApLlxuICAgICAqIFZlcnRpY2VzIHdpbGwgYmUgYXV0b21hdGljYWxseSB0cmFuc2Zvcm1lZCB0byBiZSBvcmllbnRhdGVkIGFyb3VuZCB0aGVpciBjZW50cmUgb2YgbWFzcyBhcyB0aGUgb3JpZ2luLlxuICAgICAqIFRoZXkgYXJlIHRoZW4gYXV0b21hdGljYWxseSB0cmFuc2xhdGVkIHRvIHdvcmxkIHNwYWNlIGJhc2VkIG9uIGBib2R5LnBvc2l0aW9uYC5cbiAgICAgKlxuICAgICAqIFRoZSBgdmVydGljZXNgIGFyZ3VtZW50IHNob3VsZCBiZSBwYXNzZWQgYXMgYW4gYXJyYXkgb2YgYE1hdHRlci5WZWN0b3JgIHBvaW50cyAob3IgYSBgTWF0dGVyLlZlcnRpY2VzYCBhcnJheSkuXG4gICAgICogVmVydGljZXMgbXVzdCBmb3JtIGEgY29udmV4IGh1bGwsIGNvbmNhdmUgaHVsbHMgYXJlIG5vdCBzdXBwb3J0ZWQuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIHNldFZlcnRpY2VzXG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5XG4gICAgICogQHBhcmFtIHt2ZWN0b3JbXX0gdmVydGljZXNcbiAgICAgKi9cbiAgICBCb2R5LnNldFZlcnRpY2VzID0gZnVuY3Rpb24oYm9keSwgdmVydGljZXMpIHtcbiAgICAgICAgLy8gY2hhbmdlIHZlcnRpY2VzXG4gICAgICAgIGlmICh2ZXJ0aWNlc1swXS5ib2R5ID09PSBib2R5KSB7XG4gICAgICAgICAgICBib2R5LnZlcnRpY2VzID0gdmVydGljZXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBib2R5LnZlcnRpY2VzID0gVmVydGljZXMuY3JlYXRlKHZlcnRpY2VzLCBib2R5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHVwZGF0ZSBwcm9wZXJ0aWVzXG4gICAgICAgIGJvZHkuYXhlcyA9IEF4ZXMuZnJvbVZlcnRpY2VzKGJvZHkudmVydGljZXMpO1xuICAgICAgICBib2R5LmFyZWEgPSBWZXJ0aWNlcy5hcmVhKGJvZHkudmVydGljZXMpO1xuICAgICAgICBCb2R5LnNldE1hc3MoYm9keSwgYm9keS5kZW5zaXR5ICogYm9keS5hcmVhKTtcblxuICAgICAgICAvLyBvcmllbnQgdmVydGljZXMgYXJvdW5kIHRoZSBjZW50cmUgb2YgbWFzcyBhdCBvcmlnaW4gKDAsIDApXG4gICAgICAgIHZhciBjZW50cmUgPSBWZXJ0aWNlcy5jZW50cmUoYm9keS52ZXJ0aWNlcyk7XG4gICAgICAgIFZlcnRpY2VzLnRyYW5zbGF0ZShib2R5LnZlcnRpY2VzLCBjZW50cmUsIC0xKTtcblxuICAgICAgICAvLyB1cGRhdGUgaW5lcnRpYSB3aGlsZSB2ZXJ0aWNlcyBhcmUgYXQgb3JpZ2luICgwLCAwKVxuICAgICAgICBCb2R5LnNldEluZXJ0aWEoYm9keSwgQm9keS5faW5lcnRpYVNjYWxlICogVmVydGljZXMuaW5lcnRpYShib2R5LnZlcnRpY2VzLCBib2R5Lm1hc3MpKTtcblxuICAgICAgICAvLyB1cGRhdGUgZ2VvbWV0cnlcbiAgICAgICAgVmVydGljZXMudHJhbnNsYXRlKGJvZHkudmVydGljZXMsIGJvZHkucG9zaXRpb24pO1xuICAgICAgICBCb3VuZHMudXBkYXRlKGJvZHkuYm91bmRzLCBib2R5LnZlcnRpY2VzLCBib2R5LnZlbG9jaXR5KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgcGFydHMgb2YgdGhlIGBib2R5YCBhbmQgdXBkYXRlcyBtYXNzLCBpbmVydGlhIGFuZCBjZW50cm9pZC5cbiAgICAgKiBFYWNoIHBhcnQgd2lsbCBoYXZlIGl0cyBwYXJlbnQgc2V0IHRvIGBib2R5YC5cbiAgICAgKiBCeSBkZWZhdWx0IHRoZSBjb252ZXggaHVsbCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgY29tcHV0ZWQgYW5kIHNldCBvbiBgYm9keWAsIHVubGVzcyBgYXV0b0h1bGxgIGlzIHNldCB0byBgZmFsc2UuYFxuICAgICAqIE5vdGUgdGhhdCB0aGlzIG1ldGhvZCB3aWxsIGVuc3VyZSB0aGF0IHRoZSBmaXJzdCBwYXJ0IGluIGBib2R5LnBhcnRzYCB3aWxsIGFsd2F5cyBiZSB0aGUgYGJvZHlgLlxuICAgICAqIEBtZXRob2Qgc2V0UGFydHNcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlcbiAgICAgKiBAcGFyYW0gW2JvZHldIHBhcnRzXG4gICAgICogQHBhcmFtIHtib29sfSBbYXV0b0h1bGw9dHJ1ZV1cbiAgICAgKi9cbiAgICBCb2R5LnNldFBhcnRzID0gZnVuY3Rpb24oYm9keSwgcGFydHMsIGF1dG9IdWxsKSB7XG4gICAgICAgIHZhciBpO1xuXG4gICAgICAgIC8vIGFkZCBhbGwgdGhlIHBhcnRzLCBlbnN1cmluZyB0aGF0IHRoZSBmaXJzdCBwYXJ0IGlzIGFsd2F5cyB0aGUgcGFyZW50IGJvZHlcbiAgICAgICAgcGFydHMgPSBwYXJ0cy5zbGljZSgwKTtcbiAgICAgICAgYm9keS5wYXJ0cy5sZW5ndGggPSAwO1xuICAgICAgICBib2R5LnBhcnRzLnB1c2goYm9keSk7XG4gICAgICAgIGJvZHkucGFyZW50ID0gYm9keTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBwYXJ0ID0gcGFydHNbaV07XG4gICAgICAgICAgICBpZiAocGFydCAhPT0gYm9keSkge1xuICAgICAgICAgICAgICAgIHBhcnQucGFyZW50ID0gYm9keTtcbiAgICAgICAgICAgICAgICBib2R5LnBhcnRzLnB1c2gocGFydCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYm9keS5wYXJ0cy5sZW5ndGggPT09IDEpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgYXV0b0h1bGwgPSB0eXBlb2YgYXV0b0h1bGwgIT09ICd1bmRlZmluZWQnID8gYXV0b0h1bGwgOiB0cnVlO1xuXG4gICAgICAgIC8vIGZpbmQgdGhlIGNvbnZleCBodWxsIG9mIGFsbCBwYXJ0cyB0byBzZXQgb24gdGhlIHBhcmVudCBib2R5XG4gICAgICAgIGlmIChhdXRvSHVsbCkge1xuICAgICAgICAgICAgdmFyIHZlcnRpY2VzID0gW107XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2ZXJ0aWNlcyA9IHZlcnRpY2VzLmNvbmNhdChwYXJ0c1tpXS52ZXJ0aWNlcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFZlcnRpY2VzLmNsb2Nrd2lzZVNvcnQodmVydGljZXMpO1xuXG4gICAgICAgICAgICB2YXIgaHVsbCA9IFZlcnRpY2VzLmh1bGwodmVydGljZXMpLFxuICAgICAgICAgICAgICAgIGh1bGxDZW50cmUgPSBWZXJ0aWNlcy5jZW50cmUoaHVsbCk7XG5cbiAgICAgICAgICAgIEJvZHkuc2V0VmVydGljZXMoYm9keSwgaHVsbCk7XG4gICAgICAgICAgICBWZXJ0aWNlcy50cmFuc2xhdGUoYm9keS52ZXJ0aWNlcywgaHVsbENlbnRyZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzdW0gdGhlIHByb3BlcnRpZXMgb2YgYWxsIGNvbXBvdW5kIHBhcnRzIG9mIHRoZSBwYXJlbnQgYm9keVxuICAgICAgICB2YXIgdG90YWwgPSBfdG90YWxQcm9wZXJ0aWVzKGJvZHkpO1xuXG4gICAgICAgIGJvZHkuYXJlYSA9IHRvdGFsLmFyZWE7XG4gICAgICAgIGJvZHkucGFyZW50ID0gYm9keTtcbiAgICAgICAgYm9keS5wb3NpdGlvbi54ID0gdG90YWwuY2VudHJlLng7XG4gICAgICAgIGJvZHkucG9zaXRpb24ueSA9IHRvdGFsLmNlbnRyZS55O1xuICAgICAgICBib2R5LnBvc2l0aW9uUHJldi54ID0gdG90YWwuY2VudHJlLng7XG4gICAgICAgIGJvZHkucG9zaXRpb25QcmV2LnkgPSB0b3RhbC5jZW50cmUueTtcblxuICAgICAgICBCb2R5LnNldE1hc3MoYm9keSwgdG90YWwubWFzcyk7XG4gICAgICAgIEJvZHkuc2V0SW5lcnRpYShib2R5LCB0b3RhbC5pbmVydGlhKTtcbiAgICAgICAgQm9keS5zZXRQb3NpdGlvbihib2R5LCB0b3RhbC5jZW50cmUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBwb3NpdGlvbiBvZiB0aGUgYm9keSBpbnN0YW50bHkuIFZlbG9jaXR5LCBhbmdsZSwgZm9yY2UgZXRjLiBhcmUgdW5jaGFuZ2VkLlxuICAgICAqIEBtZXRob2Qgc2V0UG9zaXRpb25cbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gcG9zaXRpb25cbiAgICAgKi9cbiAgICBCb2R5LnNldFBvc2l0aW9uID0gZnVuY3Rpb24oYm9keSwgcG9zaXRpb24pIHtcbiAgICAgICAgdmFyIGRlbHRhID0gVmVjdG9yLnN1Yihwb3NpdGlvbiwgYm9keS5wb3NpdGlvbik7XG4gICAgICAgIGJvZHkucG9zaXRpb25QcmV2LnggKz0gZGVsdGEueDtcbiAgICAgICAgYm9keS5wb3NpdGlvblByZXYueSArPSBkZWx0YS55O1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9keS5wYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHBhcnQgPSBib2R5LnBhcnRzW2ldO1xuICAgICAgICAgICAgcGFydC5wb3NpdGlvbi54ICs9IGRlbHRhLng7XG4gICAgICAgICAgICBwYXJ0LnBvc2l0aW9uLnkgKz0gZGVsdGEueTtcbiAgICAgICAgICAgIFZlcnRpY2VzLnRyYW5zbGF0ZShwYXJ0LnZlcnRpY2VzLCBkZWx0YSk7XG4gICAgICAgICAgICBCb3VuZHMudXBkYXRlKHBhcnQuYm91bmRzLCBwYXJ0LnZlcnRpY2VzLCBib2R5LnZlbG9jaXR5KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBhbmdsZSBvZiB0aGUgYm9keSBpbnN0YW50bHkuIEFuZ3VsYXIgdmVsb2NpdHksIHBvc2l0aW9uLCBmb3JjZSBldGMuIGFyZSB1bmNoYW5nZWQuXG4gICAgICogQG1ldGhvZCBzZXRBbmdsZVxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhbmdsZVxuICAgICAqL1xuICAgIEJvZHkuc2V0QW5nbGUgPSBmdW5jdGlvbihib2R5LCBhbmdsZSkge1xuICAgICAgICB2YXIgZGVsdGEgPSBhbmdsZSAtIGJvZHkuYW5nbGU7XG4gICAgICAgIGJvZHkuYW5nbGVQcmV2ICs9IGRlbHRhO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9keS5wYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHBhcnQgPSBib2R5LnBhcnRzW2ldO1xuICAgICAgICAgICAgcGFydC5hbmdsZSArPSBkZWx0YTtcbiAgICAgICAgICAgIFZlcnRpY2VzLnJvdGF0ZShwYXJ0LnZlcnRpY2VzLCBkZWx0YSwgYm9keS5wb3NpdGlvbik7XG4gICAgICAgICAgICBBeGVzLnJvdGF0ZShwYXJ0LmF4ZXMsIGRlbHRhKTtcbiAgICAgICAgICAgIEJvdW5kcy51cGRhdGUocGFydC5ib3VuZHMsIHBhcnQudmVydGljZXMsIGJvZHkudmVsb2NpdHkpO1xuICAgICAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgICAgICAgVmVjdG9yLnJvdGF0ZUFib3V0KHBhcnQucG9zaXRpb24sIGRlbHRhLCBib2R5LnBvc2l0aW9uLCBwYXJ0LnBvc2l0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBsaW5lYXIgdmVsb2NpdHkgb2YgdGhlIGJvZHkgaW5zdGFudGx5LiBQb3NpdGlvbiwgYW5nbGUsIGZvcmNlIGV0Yy4gYXJlIHVuY2hhbmdlZC4gU2VlIGFsc28gYEJvZHkuYXBwbHlGb3JjZWAuXG4gICAgICogQG1ldGhvZCBzZXRWZWxvY2l0eVxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWxvY2l0eVxuICAgICAqL1xuICAgIEJvZHkuc2V0VmVsb2NpdHkgPSBmdW5jdGlvbihib2R5LCB2ZWxvY2l0eSkge1xuICAgICAgICBib2R5LnBvc2l0aW9uUHJldi54ID0gYm9keS5wb3NpdGlvbi54IC0gdmVsb2NpdHkueDtcbiAgICAgICAgYm9keS5wb3NpdGlvblByZXYueSA9IGJvZHkucG9zaXRpb24ueSAtIHZlbG9jaXR5Lnk7XG4gICAgICAgIGJvZHkudmVsb2NpdHkueCA9IHZlbG9jaXR5Lng7XG4gICAgICAgIGJvZHkudmVsb2NpdHkueSA9IHZlbG9jaXR5Lnk7XG4gICAgICAgIGJvZHkuc3BlZWQgPSBWZWN0b3IubWFnbml0dWRlKGJvZHkudmVsb2NpdHkpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBhbmd1bGFyIHZlbG9jaXR5IG9mIHRoZSBib2R5IGluc3RhbnRseS4gUG9zaXRpb24sIGFuZ2xlLCBmb3JjZSBldGMuIGFyZSB1bmNoYW5nZWQuIFNlZSBhbHNvIGBCb2R5LmFwcGx5Rm9yY2VgLlxuICAgICAqIEBtZXRob2Qgc2V0QW5ndWxhclZlbG9jaXR5XG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZlbG9jaXR5XG4gICAgICovXG4gICAgQm9keS5zZXRBbmd1bGFyVmVsb2NpdHkgPSBmdW5jdGlvbihib2R5LCB2ZWxvY2l0eSkge1xuICAgICAgICBib2R5LmFuZ2xlUHJldiA9IGJvZHkuYW5nbGUgLSB2ZWxvY2l0eTtcbiAgICAgICAgYm9keS5hbmd1bGFyVmVsb2NpdHkgPSB2ZWxvY2l0eTtcbiAgICAgICAgYm9keS5hbmd1bGFyU3BlZWQgPSBNYXRoLmFicyhib2R5LmFuZ3VsYXJWZWxvY2l0eSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIE1vdmVzIGEgYm9keSBieSBhIGdpdmVuIHZlY3RvciByZWxhdGl2ZSB0byBpdHMgY3VycmVudCBwb3NpdGlvbiwgd2l0aG91dCBpbXBhcnRpbmcgYW55IHZlbG9jaXR5LlxuICAgICAqIEBtZXRob2QgdHJhbnNsYXRlXG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5XG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHRyYW5zbGF0aW9uXG4gICAgICovXG4gICAgQm9keS50cmFuc2xhdGUgPSBmdW5jdGlvbihib2R5LCB0cmFuc2xhdGlvbikge1xuICAgICAgICBCb2R5LnNldFBvc2l0aW9uKGJvZHksIFZlY3Rvci5hZGQoYm9keS5wb3NpdGlvbiwgdHJhbnNsYXRpb24pKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUm90YXRlcyBhIGJvZHkgYnkgYSBnaXZlbiBhbmdsZSByZWxhdGl2ZSB0byBpdHMgY3VycmVudCBhbmdsZSwgd2l0aG91dCBpbXBhcnRpbmcgYW55IGFuZ3VsYXIgdmVsb2NpdHkuXG4gICAgICogQG1ldGhvZCByb3RhdGVcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcm90YXRpb25cbiAgICAgKi9cbiAgICBCb2R5LnJvdGF0ZSA9IGZ1bmN0aW9uKGJvZHksIHJvdGF0aW9uKSB7XG4gICAgICAgIEJvZHkuc2V0QW5nbGUoYm9keSwgYm9keS5hbmdsZSArIHJvdGF0aW9uKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2NhbGVzIHRoZSBib2R5LCBpbmNsdWRpbmcgdXBkYXRpbmcgcGh5c2ljYWwgcHJvcGVydGllcyAobWFzcywgYXJlYSwgYXhlcywgaW5lcnRpYSksIGZyb20gYSB3b3JsZC1zcGFjZSBwb2ludCAoZGVmYXVsdCBpcyBib2R5IGNlbnRyZSkuXG4gICAgICogQG1ldGhvZCBzY2FsZVxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzY2FsZVhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2NhbGVZXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IFtwb2ludF1cbiAgICAgKi9cbiAgICBCb2R5LnNjYWxlID0gZnVuY3Rpb24oYm9keSwgc2NhbGVYLCBzY2FsZVksIHBvaW50KSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9keS5wYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHBhcnQgPSBib2R5LnBhcnRzW2ldO1xuXG4gICAgICAgICAgICAvLyBzY2FsZSB2ZXJ0aWNlc1xuICAgICAgICAgICAgVmVydGljZXMuc2NhbGUocGFydC52ZXJ0aWNlcywgc2NhbGVYLCBzY2FsZVksIGJvZHkucG9zaXRpb24pO1xuXG4gICAgICAgICAgICAvLyB1cGRhdGUgcHJvcGVydGllc1xuICAgICAgICAgICAgcGFydC5heGVzID0gQXhlcy5mcm9tVmVydGljZXMocGFydC52ZXJ0aWNlcyk7XG5cbiAgICAgICAgICAgIGlmICghYm9keS5pc1N0YXRpYykge1xuICAgICAgICAgICAgICAgIHBhcnQuYXJlYSA9IFZlcnRpY2VzLmFyZWEocGFydC52ZXJ0aWNlcyk7XG4gICAgICAgICAgICAgICAgQm9keS5zZXRNYXNzKHBhcnQsIGJvZHkuZGVuc2l0eSAqIHBhcnQuYXJlYSk7XG5cbiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgaW5lcnRpYSAocmVxdWlyZXMgdmVydGljZXMgdG8gYmUgYXQgb3JpZ2luKVxuICAgICAgICAgICAgICAgIFZlcnRpY2VzLnRyYW5zbGF0ZShwYXJ0LnZlcnRpY2VzLCB7IHg6IC1wYXJ0LnBvc2l0aW9uLngsIHk6IC1wYXJ0LnBvc2l0aW9uLnkgfSk7XG4gICAgICAgICAgICAgICAgQm9keS5zZXRJbmVydGlhKHBhcnQsIFZlcnRpY2VzLmluZXJ0aWEocGFydC52ZXJ0aWNlcywgcGFydC5tYXNzKSk7XG4gICAgICAgICAgICAgICAgVmVydGljZXMudHJhbnNsYXRlKHBhcnQudmVydGljZXMsIHsgeDogcGFydC5wb3NpdGlvbi54LCB5OiBwYXJ0LnBvc2l0aW9uLnkgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHVwZGF0ZSBib3VuZHNcbiAgICAgICAgICAgIEJvdW5kcy51cGRhdGUocGFydC5ib3VuZHMsIHBhcnQudmVydGljZXMsIGJvZHkudmVsb2NpdHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaGFuZGxlIGNpcmNsZXNcbiAgICAgICAgaWYgKGJvZHkuY2lyY2xlUmFkaXVzKSB7IFxuICAgICAgICAgICAgaWYgKHNjYWxlWCA9PT0gc2NhbGVZKSB7XG4gICAgICAgICAgICAgICAgYm9keS5jaXJjbGVSYWRpdXMgKj0gc2NhbGVYO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBib2R5IGlzIG5vIGxvbmdlciBhIGNpcmNsZVxuICAgICAgICAgICAgICAgIGJvZHkuY2lyY2xlUmFkaXVzID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghYm9keS5pc1N0YXRpYykge1xuICAgICAgICAgICAgdmFyIHRvdGFsID0gX3RvdGFsUHJvcGVydGllcyhib2R5KTtcbiAgICAgICAgICAgIGJvZHkuYXJlYSA9IHRvdGFsLmFyZWE7XG4gICAgICAgICAgICBCb2R5LnNldE1hc3MoYm9keSwgdG90YWwubWFzcyk7XG4gICAgICAgICAgICBCb2R5LnNldEluZXJ0aWEoYm9keSwgdG90YWwuaW5lcnRpYSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBzaW11bGF0aW9uIHN0ZXAgZm9yIHRoZSBnaXZlbiBgYm9keWAsIGluY2x1ZGluZyB1cGRhdGluZyBwb3NpdGlvbiBhbmQgYW5nbGUgdXNpbmcgVmVybGV0IGludGVncmF0aW9uLlxuICAgICAqIEBtZXRob2QgdXBkYXRlXG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRlbHRhVGltZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lU2NhbGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gY29ycmVjdGlvblxuICAgICAqL1xuICAgIEJvZHkudXBkYXRlID0gZnVuY3Rpb24oYm9keSwgZGVsdGFUaW1lLCB0aW1lU2NhbGUsIGNvcnJlY3Rpb24pIHtcbiAgICAgICAgdmFyIGRlbHRhVGltZVNxdWFyZWQgPSBNYXRoLnBvdyhkZWx0YVRpbWUgKiB0aW1lU2NhbGUgKiBib2R5LnRpbWVTY2FsZSwgMik7XG5cbiAgICAgICAgLy8gZnJvbSB0aGUgcHJldmlvdXMgc3RlcFxuICAgICAgICB2YXIgZnJpY3Rpb25BaXIgPSAxIC0gYm9keS5mcmljdGlvbkFpciAqIHRpbWVTY2FsZSAqIGJvZHkudGltZVNjYWxlLFxuICAgICAgICAgICAgdmVsb2NpdHlQcmV2WCA9IGJvZHkucG9zaXRpb24ueCAtIGJvZHkucG9zaXRpb25QcmV2LngsXG4gICAgICAgICAgICB2ZWxvY2l0eVByZXZZID0gYm9keS5wb3NpdGlvbi55IC0gYm9keS5wb3NpdGlvblByZXYueTtcblxuICAgICAgICAvLyB1cGRhdGUgdmVsb2NpdHkgd2l0aCBWZXJsZXQgaW50ZWdyYXRpb25cbiAgICAgICAgYm9keS52ZWxvY2l0eS54ID0gKHZlbG9jaXR5UHJldlggKiBmcmljdGlvbkFpciAqIGNvcnJlY3Rpb24pICsgKGJvZHkuZm9yY2UueCAvIGJvZHkubWFzcykgKiBkZWx0YVRpbWVTcXVhcmVkO1xuICAgICAgICBib2R5LnZlbG9jaXR5LnkgPSAodmVsb2NpdHlQcmV2WSAqIGZyaWN0aW9uQWlyICogY29ycmVjdGlvbikgKyAoYm9keS5mb3JjZS55IC8gYm9keS5tYXNzKSAqIGRlbHRhVGltZVNxdWFyZWQ7XG5cbiAgICAgICAgYm9keS5wb3NpdGlvblByZXYueCA9IGJvZHkucG9zaXRpb24ueDtcbiAgICAgICAgYm9keS5wb3NpdGlvblByZXYueSA9IGJvZHkucG9zaXRpb24ueTtcbiAgICAgICAgYm9keS5wb3NpdGlvbi54ICs9IGJvZHkudmVsb2NpdHkueDtcbiAgICAgICAgYm9keS5wb3NpdGlvbi55ICs9IGJvZHkudmVsb2NpdHkueTtcblxuICAgICAgICAvLyB1cGRhdGUgYW5ndWxhciB2ZWxvY2l0eSB3aXRoIFZlcmxldCBpbnRlZ3JhdGlvblxuICAgICAgICBib2R5LmFuZ3VsYXJWZWxvY2l0eSA9ICgoYm9keS5hbmdsZSAtIGJvZHkuYW5nbGVQcmV2KSAqIGZyaWN0aW9uQWlyICogY29ycmVjdGlvbikgKyAoYm9keS50b3JxdWUgLyBib2R5LmluZXJ0aWEpICogZGVsdGFUaW1lU3F1YXJlZDtcbiAgICAgICAgYm9keS5hbmdsZVByZXYgPSBib2R5LmFuZ2xlO1xuICAgICAgICBib2R5LmFuZ2xlICs9IGJvZHkuYW5ndWxhclZlbG9jaXR5O1xuXG4gICAgICAgIC8vIHRyYWNrIHNwZWVkIGFuZCBhY2NlbGVyYXRpb25cbiAgICAgICAgYm9keS5zcGVlZCA9IFZlY3Rvci5tYWduaXR1ZGUoYm9keS52ZWxvY2l0eSk7XG4gICAgICAgIGJvZHkuYW5ndWxhclNwZWVkID0gTWF0aC5hYnMoYm9keS5hbmd1bGFyVmVsb2NpdHkpO1xuXG4gICAgICAgIC8vIHRyYW5zZm9ybSB0aGUgYm9keSBnZW9tZXRyeVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvZHkucGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBwYXJ0ID0gYm9keS5wYXJ0c1tpXTtcblxuICAgICAgICAgICAgVmVydGljZXMudHJhbnNsYXRlKHBhcnQudmVydGljZXMsIGJvZHkudmVsb2NpdHkpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgICAgICAgICBwYXJ0LnBvc2l0aW9uLnggKz0gYm9keS52ZWxvY2l0eS54O1xuICAgICAgICAgICAgICAgIHBhcnQucG9zaXRpb24ueSArPSBib2R5LnZlbG9jaXR5Lnk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChib2R5LmFuZ3VsYXJWZWxvY2l0eSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIFZlcnRpY2VzLnJvdGF0ZShwYXJ0LnZlcnRpY2VzLCBib2R5LmFuZ3VsYXJWZWxvY2l0eSwgYm9keS5wb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgQXhlcy5yb3RhdGUocGFydC5heGVzLCBib2R5LmFuZ3VsYXJWZWxvY2l0eSk7XG4gICAgICAgICAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIFZlY3Rvci5yb3RhdGVBYm91dChwYXJ0LnBvc2l0aW9uLCBib2R5LmFuZ3VsYXJWZWxvY2l0eSwgYm9keS5wb3NpdGlvbiwgcGFydC5wb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBCb3VuZHMudXBkYXRlKHBhcnQuYm91bmRzLCBwYXJ0LnZlcnRpY2VzLCBib2R5LnZlbG9jaXR5KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIGEgZm9yY2UgdG8gYSBib2R5IGZyb20gYSBnaXZlbiB3b3JsZC1zcGFjZSBwb3NpdGlvbiwgaW5jbHVkaW5nIHJlc3VsdGluZyB0b3JxdWUuXG4gICAgICogQG1ldGhvZCBhcHBseUZvcmNlXG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5XG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHBvc2l0aW9uXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IGZvcmNlXG4gICAgICovXG4gICAgQm9keS5hcHBseUZvcmNlID0gZnVuY3Rpb24oYm9keSwgcG9zaXRpb24sIGZvcmNlKSB7XG4gICAgICAgIGJvZHkuZm9yY2UueCArPSBmb3JjZS54O1xuICAgICAgICBib2R5LmZvcmNlLnkgKz0gZm9yY2UueTtcbiAgICAgICAgdmFyIG9mZnNldCA9IHsgeDogcG9zaXRpb24ueCAtIGJvZHkucG9zaXRpb24ueCwgeTogcG9zaXRpb24ueSAtIGJvZHkucG9zaXRpb24ueSB9O1xuICAgICAgICBib2R5LnRvcnF1ZSArPSBvZmZzZXQueCAqIGZvcmNlLnkgLSBvZmZzZXQueSAqIGZvcmNlLng7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHN1bXMgb2YgdGhlIHByb3BlcnRpZXMgb2YgYWxsIGNvbXBvdW5kIHBhcnRzIG9mIHRoZSBwYXJlbnQgYm9keS5cbiAgICAgKiBAbWV0aG9kIF90b3RhbFByb3BlcnRpZXNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqIEByZXR1cm4ge31cbiAgICAgKi9cbiAgICB2YXIgX3RvdGFsUHJvcGVydGllcyA9IGZ1bmN0aW9uKGJvZHkpIHtcbiAgICAgICAgLy8gaHR0cHM6Ly9lY291cnNlcy5vdS5lZHUvY2dpLWJpbi9lYm9vay5jZ2k/ZG9jPSZ0b3BpYz1zdCZjaGFwX3NlYz0wNy4yJnBhZ2U9dGhlb3J5XG4gICAgICAgIC8vIGh0dHA6Ly9vdXRwdXQudG8vc2lkZXdheS9kZWZhdWx0LmFzcD9xbm89MTIxMTAwMDg3XG5cbiAgICAgICAgdmFyIHByb3BlcnRpZXMgPSB7XG4gICAgICAgICAgICBtYXNzOiAwLFxuICAgICAgICAgICAgYXJlYTogMCxcbiAgICAgICAgICAgIGluZXJ0aWE6IDAsXG4gICAgICAgICAgICBjZW50cmU6IHsgeDogMCwgeTogMCB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gc3VtIHRoZSBwcm9wZXJ0aWVzIG9mIGFsbCBjb21wb3VuZCBwYXJ0cyBvZiB0aGUgcGFyZW50IGJvZHlcbiAgICAgICAgZm9yICh2YXIgaSA9IGJvZHkucGFydHMubGVuZ3RoID09PSAxID8gMCA6IDE7IGkgPCBib2R5LnBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgcGFydCA9IGJvZHkucGFydHNbaV07XG4gICAgICAgICAgICBwcm9wZXJ0aWVzLm1hc3MgKz0gcGFydC5tYXNzO1xuICAgICAgICAgICAgcHJvcGVydGllcy5hcmVhICs9IHBhcnQuYXJlYTtcbiAgICAgICAgICAgIHByb3BlcnRpZXMuaW5lcnRpYSArPSBwYXJ0LmluZXJ0aWE7XG4gICAgICAgICAgICBwcm9wZXJ0aWVzLmNlbnRyZSA9IFZlY3Rvci5hZGQocHJvcGVydGllcy5jZW50cmUsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZlY3Rvci5tdWx0KHBhcnQucG9zaXRpb24sIHBhcnQubWFzcyAhPT0gSW5maW5pdHkgPyBwYXJ0Lm1hc3MgOiAxKSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcm9wZXJ0aWVzLmNlbnRyZSA9IFZlY3Rvci5kaXYocHJvcGVydGllcy5jZW50cmUsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllcy5tYXNzICE9PSBJbmZpbml0eSA/IHByb3BlcnRpZXMubWFzcyA6IGJvZHkucGFydHMubGVuZ3RoKTtcblxuICAgICAgICByZXR1cm4gcHJvcGVydGllcztcbiAgICB9O1xuXG4gICAgLypcbiAgICAqXG4gICAgKiAgRXZlbnRzIERvY3VtZW50YXRpb25cbiAgICAqXG4gICAgKi9cblxuICAgIC8qKlxuICAgICogRmlyZWQgd2hlbiBhIGJvZHkgc3RhcnRzIHNsZWVwaW5nICh3aGVyZSBgdGhpc2AgaXMgdGhlIGJvZHkpLlxuICAgICpcbiAgICAqIEBldmVudCBzbGVlcFN0YXJ0XG4gICAgKiBAdGhpcyB7Ym9keX0gVGhlIGJvZHkgdGhhdCBoYXMgc3RhcnRlZCBzbGVlcGluZ1xuICAgICogQHBhcmFtIHt9IGV2ZW50IEFuIGV2ZW50IG9iamVjdFxuICAgICogQHBhcmFtIHt9IGV2ZW50LnNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5uYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgICovXG5cbiAgICAvKipcbiAgICAqIEZpcmVkIHdoZW4gYSBib2R5IGVuZHMgc2xlZXBpbmcgKHdoZXJlIGB0aGlzYCBpcyB0aGUgYm9keSkuXG4gICAgKlxuICAgICogQGV2ZW50IHNsZWVwRW5kXG4gICAgKiBAdGhpcyB7Ym9keX0gVGhlIGJvZHkgdGhhdCBoYXMgZW5kZWQgc2xlZXBpbmdcbiAgICAqIEBwYXJhbSB7fSBldmVudCBBbiBldmVudCBvYmplY3RcbiAgICAqIEBwYXJhbSB7fSBldmVudC5zb3VyY2UgVGhlIHNvdXJjZSBvYmplY3Qgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQubmFtZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcbiAgICAqL1xuXG4gICAgLypcbiAgICAqXG4gICAgKiAgUHJvcGVydGllcyBEb2N1bWVudGF0aW9uXG4gICAgKlxuICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBbiBpbnRlZ2VyIGBOdW1iZXJgIHVuaXF1ZWx5IGlkZW50aWZ5aW5nIG51bWJlciBnZW5lcmF0ZWQgaW4gYEJvZHkuY3JlYXRlYCBieSBgQ29tbW9uLm5leHRJZGAuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgaWRcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYFN0cmluZ2AgZGVub3RpbmcgdGhlIHR5cGUgb2Ygb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHR5cGVcbiAgICAgKiBAdHlwZSBzdHJpbmdcbiAgICAgKiBAZGVmYXVsdCBcImJvZHlcIlxuICAgICAqIEByZWFkT25seVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gYXJiaXRyYXJ5IGBTdHJpbmdgIG5hbWUgdG8gaGVscCB0aGUgdXNlciBpZGVudGlmeSBhbmQgbWFuYWdlIGJvZGllcy5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBsYWJlbFxuICAgICAqIEB0eXBlIHN0cmluZ1xuICAgICAqIEBkZWZhdWx0IFwiQm9keVwiXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBbiBhcnJheSBvZiBib2RpZXMgdGhhdCBtYWtlIHVwIHRoaXMgYm9keS4gXG4gICAgICogVGhlIGZpcnN0IGJvZHkgaW4gdGhlIGFycmF5IG11c3QgYWx3YXlzIGJlIGEgc2VsZiByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgYm9keSBpbnN0YW5jZS5cbiAgICAgKiBBbGwgYm9kaWVzIGluIHRoZSBgcGFydHNgIGFycmF5IHRvZ2V0aGVyIGZvcm0gYSBzaW5nbGUgcmlnaWQgY29tcG91bmQgYm9keS5cbiAgICAgKiBQYXJ0cyBhcmUgYWxsb3dlZCB0byBvdmVybGFwLCBoYXZlIGdhcHMgb3IgaG9sZXMgb3IgZXZlbiBmb3JtIGNvbmNhdmUgYm9kaWVzLlxuICAgICAqIFBhcnRzIHRoZW1zZWx2ZXMgc2hvdWxkIG5ldmVyIGJlIGFkZGVkIHRvIGEgYFdvcmxkYCwgb25seSB0aGUgcGFyZW50IGJvZHkgc2hvdWxkIGJlLlxuICAgICAqIFVzZSBgQm9keS5zZXRQYXJ0c2Agd2hlbiBzZXR0aW5nIHBhcnRzIHRvIGVuc3VyZSBjb3JyZWN0IHVwZGF0ZXMgb2YgYWxsIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgcGFydHNcbiAgICAgKiBAdHlwZSBib2R5W11cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgc2VsZiByZWZlcmVuY2UgaWYgdGhlIGJvZHkgaXMgX25vdF8gYSBwYXJ0IG9mIGFub3RoZXIgYm9keS5cbiAgICAgKiBPdGhlcndpc2UgdGhpcyBpcyBhIHJlZmVyZW5jZSB0byB0aGUgYm9keSB0aGF0IHRoaXMgaXMgYSBwYXJ0IG9mLlxuICAgICAqIFNlZSBgYm9keS5wYXJ0c2AuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgcGFyZW50XG4gICAgICogQHR5cGUgYm9keVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCBzcGVjaWZ5aW5nIHRoZSBhbmdsZSBvZiB0aGUgYm9keSwgaW4gcmFkaWFucy5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBhbmdsZVxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFuIGFycmF5IG9mIGBWZWN0b3JgIG9iamVjdHMgdGhhdCBzcGVjaWZ5IHRoZSBjb252ZXggaHVsbCBvZiB0aGUgcmlnaWQgYm9keS5cbiAgICAgKiBUaGVzZSBzaG91bGQgYmUgcHJvdmlkZWQgYWJvdXQgdGhlIG9yaWdpbiBgKDAsIDApYC4gRS5nLlxuICAgICAqXG4gICAgICogICAgIFt7IHg6IDAsIHk6IDAgfSwgeyB4OiAyNSwgeTogNTAgfSwgeyB4OiA1MCwgeTogMCB9XVxuICAgICAqXG4gICAgICogV2hlbiBwYXNzZWQgdmlhIGBCb2R5LmNyZWF0ZWAsIHRoZSB2ZXJ0aWNlcyBhcmUgdHJhbnNsYXRlZCByZWxhdGl2ZSB0byBgYm9keS5wb3NpdGlvbmAgKGkuZS4gd29ybGQtc3BhY2UsIGFuZCBjb25zdGFudGx5IHVwZGF0ZWQgYnkgYEJvZHkudXBkYXRlYCBkdXJpbmcgc2ltdWxhdGlvbikuXG4gICAgICogVGhlIGBWZWN0b3JgIG9iamVjdHMgYXJlIGFsc28gYXVnbWVudGVkIHdpdGggYWRkaXRpb25hbCBwcm9wZXJ0aWVzIHJlcXVpcmVkIGZvciBlZmZpY2llbnQgY29sbGlzaW9uIGRldGVjdGlvbi4gXG4gICAgICpcbiAgICAgKiBPdGhlciBwcm9wZXJ0aWVzIHN1Y2ggYXMgYGluZXJ0aWFgIGFuZCBgYm91bmRzYCBhcmUgYXV0b21hdGljYWxseSBjYWxjdWxhdGVkIGZyb20gdGhlIHBhc3NlZCB2ZXJ0aWNlcyAodW5sZXNzIHByb3ZpZGVkIHZpYSBgb3B0aW9uc2ApLlxuICAgICAqIENvbmNhdmUgaHVsbHMgYXJlIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkLiBUaGUgbW9kdWxlIGBNYXR0ZXIuVmVydGljZXNgIGNvbnRhaW5zIHVzZWZ1bCBtZXRob2RzIGZvciB3b3JraW5nIHdpdGggdmVydGljZXMuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgdmVydGljZXNcbiAgICAgKiBAdHlwZSB2ZWN0b3JbXVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgVmVjdG9yYCB0aGF0IHNwZWNpZmllcyB0aGUgY3VycmVudCB3b3JsZC1zcGFjZSBwb3NpdGlvbiBvZiB0aGUgYm9keS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBwb3NpdGlvblxuICAgICAqIEB0eXBlIHZlY3RvclxuICAgICAqIEBkZWZhdWx0IHsgeDogMCwgeTogMCB9XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBWZWN0b3JgIHRoYXQgc3BlY2lmaWVzIHRoZSBmb3JjZSB0byBhcHBseSBpbiB0aGUgY3VycmVudCBzdGVwLiBJdCBpcyB6ZXJvZWQgYWZ0ZXIgZXZlcnkgYEJvZHkudXBkYXRlYC4gU2VlIGFsc28gYEJvZHkuYXBwbHlGb3JjZWAuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgZm9yY2VcbiAgICAgKiBAdHlwZSB2ZWN0b3JcbiAgICAgKiBAZGVmYXVsdCB7IHg6IDAsIHk6IDAgfVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IHNwZWNpZmllcyB0aGUgdG9ycXVlICh0dXJuaW5nIGZvcmNlKSB0byBhcHBseSBpbiB0aGUgY3VycmVudCBzdGVwLiBJdCBpcyB6ZXJvZWQgYWZ0ZXIgZXZlcnkgYEJvZHkudXBkYXRlYC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB0b3JxdWVcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBOdW1iZXJgIHRoYXQgX21lYXN1cmVzXyB0aGUgY3VycmVudCBzcGVlZCBvZiB0aGUgYm9keSBhZnRlciB0aGUgbGFzdCBgQm9keS51cGRhdGVgLiBJdCBpcyByZWFkLW9ubHkgYW5kIGFsd2F5cyBwb3NpdGl2ZSAoaXQncyB0aGUgbWFnbml0dWRlIG9mIGBib2R5LnZlbG9jaXR5YCkuXG4gICAgICpcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAcHJvcGVydHkgc3BlZWRcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBOdW1iZXJgIHRoYXQgX21lYXN1cmVzXyB0aGUgY3VycmVudCBhbmd1bGFyIHNwZWVkIG9mIHRoZSBib2R5IGFmdGVyIHRoZSBsYXN0IGBCb2R5LnVwZGF0ZWAuIEl0IGlzIHJlYWQtb25seSBhbmQgYWx3YXlzIHBvc2l0aXZlIChpdCdzIHRoZSBtYWduaXR1ZGUgb2YgYGJvZHkuYW5ndWxhclZlbG9jaXR5YCkuXG4gICAgICpcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAcHJvcGVydHkgYW5ndWxhclNwZWVkXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgVmVjdG9yYCB0aGF0IF9tZWFzdXJlc18gdGhlIGN1cnJlbnQgdmVsb2NpdHkgb2YgdGhlIGJvZHkgYWZ0ZXIgdGhlIGxhc3QgYEJvZHkudXBkYXRlYC4gSXQgaXMgcmVhZC1vbmx5LiBcbiAgICAgKiBJZiB5b3UgbmVlZCB0byBtb2RpZnkgYSBib2R5J3MgdmVsb2NpdHkgZGlyZWN0bHksIHlvdSBzaG91bGQgZWl0aGVyIGFwcGx5IGEgZm9yY2Ugb3Igc2ltcGx5IGNoYW5nZSB0aGUgYm9keSdzIGBwb3NpdGlvbmAgKGFzIHRoZSBlbmdpbmUgdXNlcyBwb3NpdGlvbi1WZXJsZXQgaW50ZWdyYXRpb24pLlxuICAgICAqXG4gICAgICogQHJlYWRPbmx5XG4gICAgICogQHByb3BlcnR5IHZlbG9jaXR5XG4gICAgICogQHR5cGUgdmVjdG9yXG4gICAgICogQGRlZmF1bHQgeyB4OiAwLCB5OiAwIH1cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBfbWVhc3VyZXNfIHRoZSBjdXJyZW50IGFuZ3VsYXIgdmVsb2NpdHkgb2YgdGhlIGJvZHkgYWZ0ZXIgdGhlIGxhc3QgYEJvZHkudXBkYXRlYC4gSXQgaXMgcmVhZC1vbmx5LiBcbiAgICAgKiBJZiB5b3UgbmVlZCB0byBtb2RpZnkgYSBib2R5J3MgYW5ndWxhciB2ZWxvY2l0eSBkaXJlY3RseSwgeW91IHNob3VsZCBhcHBseSBhIHRvcnF1ZSBvciBzaW1wbHkgY2hhbmdlIHRoZSBib2R5J3MgYGFuZ2xlYCAoYXMgdGhlIGVuZ2luZSB1c2VzIHBvc2l0aW9uLVZlcmxldCBpbnRlZ3JhdGlvbikuXG4gICAgICpcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAcHJvcGVydHkgYW5ndWxhclZlbG9jaXR5XG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBmbGFnIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgYSBib2R5IGlzIGNvbnNpZGVyZWQgc3RhdGljLiBBIHN0YXRpYyBib2R5IGNhbiBuZXZlciBjaGFuZ2UgcG9zaXRpb24gb3IgYW5nbGUgYW5kIGlzIGNvbXBsZXRlbHkgZml4ZWQuXG4gICAgICogSWYgeW91IG5lZWQgdG8gc2V0IGEgYm9keSBhcyBzdGF0aWMgYWZ0ZXIgaXRzIGNyZWF0aW9uLCB5b3Ugc2hvdWxkIHVzZSBgQm9keS5zZXRTdGF0aWNgIGFzIHRoaXMgcmVxdWlyZXMgbW9yZSB0aGFuIGp1c3Qgc2V0dGluZyB0aGlzIGZsYWcuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgaXNTdGF0aWNcbiAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgZmxhZyB0aGF0IGluZGljYXRlcyB3aGV0aGVyIGEgYm9keSBpcyBhIHNlbnNvci4gU2Vuc29yIHRyaWdnZXJzIGNvbGxpc2lvbiBldmVudHMsIGJ1dCBkb2Vzbid0IHJlYWN0IHdpdGggY29sbGlkaW5nIGJvZHkgcGh5c2ljYWxseS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBpc1NlbnNvclxuICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBmbGFnIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIGJvZHkgaXMgY29uc2lkZXJlZCBzbGVlcGluZy4gQSBzbGVlcGluZyBib2R5IGFjdHMgc2ltaWxhciB0byBhIHN0YXRpYyBib2R5LCBleGNlcHQgaXQgaXMgb25seSB0ZW1wb3JhcnkgYW5kIGNhbiBiZSBhd29rZW4uXG4gICAgICogSWYgeW91IG5lZWQgdG8gc2V0IGEgYm9keSBhcyBzbGVlcGluZywgeW91IHNob3VsZCB1c2UgYFNsZWVwaW5nLnNldGAgYXMgdGhpcyByZXF1aXJlcyBtb3JlIHRoYW4ganVzdCBzZXR0aW5nIHRoaXMgZmxhZy5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBpc1NsZWVwaW5nXG4gICAgICogQHR5cGUgYm9vbGVhblxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBOdW1iZXJgIHRoYXQgX21lYXN1cmVzXyB0aGUgYW1vdW50IG9mIG1vdmVtZW50IGEgYm9keSBjdXJyZW50bHkgaGFzIChhIGNvbWJpbmF0aW9uIG9mIGBzcGVlZGAgYW5kIGBhbmd1bGFyU3BlZWRgKS4gSXQgaXMgcmVhZC1vbmx5IGFuZCBhbHdheXMgcG9zaXRpdmUuXG4gICAgICogSXQgaXMgdXNlZCBhbmQgdXBkYXRlZCBieSB0aGUgYE1hdHRlci5TbGVlcGluZ2AgbW9kdWxlIGR1cmluZyBzaW11bGF0aW9uIHRvIGRlY2lkZSBpZiBhIGJvZHkgaGFzIGNvbWUgdG8gcmVzdC5cbiAgICAgKlxuICAgICAqIEByZWFkT25seVxuICAgICAqIEBwcm9wZXJ0eSBtb3Rpb25cbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBOdW1iZXJgIHRoYXQgZGVmaW5lcyB0aGUgbnVtYmVyIG9mIHVwZGF0ZXMgaW4gd2hpY2ggdGhpcyBib2R5IG11c3QgaGF2ZSBuZWFyLXplcm8gdmVsb2NpdHkgYmVmb3JlIGl0IGlzIHNldCBhcyBzbGVlcGluZyBieSB0aGUgYE1hdHRlci5TbGVlcGluZ2AgbW9kdWxlIChpZiBzbGVlcGluZyBpcyBlbmFibGVkIGJ5IHRoZSBlbmdpbmUpLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHNsZWVwVGhyZXNob2xkXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgNjBcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBkZWZpbmVzIHRoZSBkZW5zaXR5IG9mIHRoZSBib2R5LCB0aGF0IGlzIGl0cyBtYXNzIHBlciB1bml0IGFyZWEuXG4gICAgICogSWYgeW91IHBhc3MgdGhlIGRlbnNpdHkgdmlhIGBCb2R5LmNyZWF0ZWAgdGhlIGBtYXNzYCBwcm9wZXJ0eSBpcyBhdXRvbWF0aWNhbGx5IGNhbGN1bGF0ZWQgZm9yIHlvdSBiYXNlZCBvbiB0aGUgc2l6ZSAoYXJlYSkgb2YgdGhlIG9iamVjdC5cbiAgICAgKiBUaGlzIGlzIGdlbmVyYWxseSBwcmVmZXJhYmxlIHRvIHNpbXBseSBzZXR0aW5nIG1hc3MgYW5kIGFsbG93cyBmb3IgbW9yZSBpbnR1aXRpdmUgZGVmaW5pdGlvbiBvZiBtYXRlcmlhbHMgKGUuZy4gcm9jayBoYXMgYSBoaWdoZXIgZGVuc2l0eSB0aGFuIHdvb2QpLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGRlbnNpdHlcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKiBAZGVmYXVsdCAwLjAwMVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IGRlZmluZXMgdGhlIG1hc3Mgb2YgdGhlIGJvZHksIGFsdGhvdWdoIGl0IG1heSBiZSBtb3JlIGFwcHJvcHJpYXRlIHRvIHNwZWNpZnkgdGhlIGBkZW5zaXR5YCBwcm9wZXJ0eSBpbnN0ZWFkLlxuICAgICAqIElmIHlvdSBtb2RpZnkgdGhpcyB2YWx1ZSwgeW91IG11c3QgYWxzbyBtb2RpZnkgdGhlIGBib2R5LmludmVyc2VNYXNzYCBwcm9wZXJ0eSAoYDEgLyBtYXNzYCkuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgbWFzc1xuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IGRlZmluZXMgdGhlIGludmVyc2UgbWFzcyBvZiB0aGUgYm9keSAoYDEgLyBtYXNzYCkuXG4gICAgICogSWYgeW91IG1vZGlmeSB0aGlzIHZhbHVlLCB5b3UgbXVzdCBhbHNvIG1vZGlmeSB0aGUgYGJvZHkubWFzc2AgcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgaW52ZXJzZU1hc3NcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBkZWZpbmVzIHRoZSBtb21lbnQgb2YgaW5lcnRpYSAoaS5lLiBzZWNvbmQgbW9tZW50IG9mIGFyZWEpIG9mIHRoZSBib2R5LlxuICAgICAqIEl0IGlzIGF1dG9tYXRpY2FsbHkgY2FsY3VsYXRlZCBmcm9tIHRoZSBnaXZlbiBjb252ZXggaHVsbCAoYHZlcnRpY2VzYCBhcnJheSkgYW5kIGRlbnNpdHkgaW4gYEJvZHkuY3JlYXRlYC5cbiAgICAgKiBJZiB5b3UgbW9kaWZ5IHRoaXMgdmFsdWUsIHlvdSBtdXN0IGFsc28gbW9kaWZ5IHRoZSBgYm9keS5pbnZlcnNlSW5lcnRpYWAgcHJvcGVydHkgKGAxIC8gaW5lcnRpYWApLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGluZXJ0aWFcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBkZWZpbmVzIHRoZSBpbnZlcnNlIG1vbWVudCBvZiBpbmVydGlhIG9mIHRoZSBib2R5IChgMSAvIGluZXJ0aWFgKS5cbiAgICAgKiBJZiB5b3UgbW9kaWZ5IHRoaXMgdmFsdWUsIHlvdSBtdXN0IGFsc28gbW9kaWZ5IHRoZSBgYm9keS5pbmVydGlhYCBwcm9wZXJ0eS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBpbnZlcnNlSW5lcnRpYVxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IGRlZmluZXMgdGhlIHJlc3RpdHV0aW9uIChlbGFzdGljaXR5KSBvZiB0aGUgYm9keS4gVGhlIHZhbHVlIGlzIGFsd2F5cyBwb3NpdGl2ZSBhbmQgaXMgaW4gdGhlIHJhbmdlIGAoMCwgMSlgLlxuICAgICAqIEEgdmFsdWUgb2YgYDBgIG1lYW5zIGNvbGxpc2lvbnMgbWF5IGJlIHBlcmZlY3RseSBpbmVsYXN0aWMgYW5kIG5vIGJvdW5jaW5nIG1heSBvY2N1ci4gXG4gICAgICogQSB2YWx1ZSBvZiBgMC44YCBtZWFucyB0aGUgYm9keSBtYXkgYm91bmNlIGJhY2sgd2l0aCBhcHByb3hpbWF0ZWx5IDgwJSBvZiBpdHMga2luZXRpYyBlbmVyZ3kuXG4gICAgICogTm90ZSB0aGF0IGNvbGxpc2lvbiByZXNwb25zZSBpcyBiYXNlZCBvbiBfcGFpcnNfIG9mIGJvZGllcywgYW5kIHRoYXQgYHJlc3RpdHV0aW9uYCB2YWx1ZXMgYXJlIF9jb21iaW5lZF8gd2l0aCB0aGUgZm9sbG93aW5nIGZvcm11bGE6XG4gICAgICpcbiAgICAgKiAgICAgTWF0aC5tYXgoYm9keUEucmVzdGl0dXRpb24sIGJvZHlCLnJlc3RpdHV0aW9uKVxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHJlc3RpdHV0aW9uXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IGRlZmluZXMgdGhlIGZyaWN0aW9uIG9mIHRoZSBib2R5LiBUaGUgdmFsdWUgaXMgYWx3YXlzIHBvc2l0aXZlIGFuZCBpcyBpbiB0aGUgcmFuZ2UgYCgwLCAxKWAuXG4gICAgICogQSB2YWx1ZSBvZiBgMGAgbWVhbnMgdGhhdCB0aGUgYm9keSBtYXkgc2xpZGUgaW5kZWZpbml0ZWx5LlxuICAgICAqIEEgdmFsdWUgb2YgYDFgIG1lYW5zIHRoZSBib2R5IG1heSBjb21lIHRvIGEgc3RvcCBhbG1vc3QgaW5zdGFudGx5IGFmdGVyIGEgZm9yY2UgaXMgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIFRoZSBlZmZlY3RzIG9mIHRoZSB2YWx1ZSBtYXkgYmUgbm9uLWxpbmVhci4gXG4gICAgICogSGlnaCB2YWx1ZXMgbWF5IGJlIHVuc3RhYmxlIGRlcGVuZGluZyBvbiB0aGUgYm9keS5cbiAgICAgKiBUaGUgZW5naW5lIHVzZXMgYSBDb3Vsb21iIGZyaWN0aW9uIG1vZGVsIGluY2x1ZGluZyBzdGF0aWMgYW5kIGtpbmV0aWMgZnJpY3Rpb24uXG4gICAgICogTm90ZSB0aGF0IGNvbGxpc2lvbiByZXNwb25zZSBpcyBiYXNlZCBvbiBfcGFpcnNfIG9mIGJvZGllcywgYW5kIHRoYXQgYGZyaWN0aW9uYCB2YWx1ZXMgYXJlIF9jb21iaW5lZF8gd2l0aCB0aGUgZm9sbG93aW5nIGZvcm11bGE6XG4gICAgICpcbiAgICAgKiAgICAgTWF0aC5taW4oYm9keUEuZnJpY3Rpb24sIGJvZHlCLmZyaWN0aW9uKVxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGZyaWN0aW9uXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMC4xXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBOdW1iZXJgIHRoYXQgZGVmaW5lcyB0aGUgc3RhdGljIGZyaWN0aW9uIG9mIHRoZSBib2R5IChpbiB0aGUgQ291bG9tYiBmcmljdGlvbiBtb2RlbCkuIFxuICAgICAqIEEgdmFsdWUgb2YgYDBgIG1lYW5zIHRoZSBib2R5IHdpbGwgbmV2ZXIgJ3N0aWNrJyB3aGVuIGl0IGlzIG5lYXJseSBzdGF0aW9uYXJ5IGFuZCBvbmx5IGR5bmFtaWMgYGZyaWN0aW9uYCBpcyB1c2VkLlxuICAgICAqIFRoZSBoaWdoZXIgdGhlIHZhbHVlIChlLmcuIGAxMGApLCB0aGUgbW9yZSBmb3JjZSBpdCB3aWxsIHRha2UgdG8gaW5pdGlhbGx5IGdldCB0aGUgYm9keSBtb3Zpbmcgd2hlbiBuZWFybHkgc3RhdGlvbmFyeS5cbiAgICAgKiBUaGlzIHZhbHVlIGlzIG11bHRpcGxpZWQgd2l0aCB0aGUgYGZyaWN0aW9uYCBwcm9wZXJ0eSB0byBtYWtlIGl0IGVhc2llciB0byBjaGFuZ2UgYGZyaWN0aW9uYCBhbmQgbWFpbnRhaW4gYW4gYXBwcm9wcmlhdGUgYW1vdW50IG9mIHN0YXRpYyBmcmljdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBmcmljdGlvblN0YXRpY1xuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDAuNVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IGRlZmluZXMgdGhlIGFpciBmcmljdGlvbiBvZiB0aGUgYm9keSAoYWlyIHJlc2lzdGFuY2UpLiBcbiAgICAgKiBBIHZhbHVlIG9mIGAwYCBtZWFucyB0aGUgYm9keSB3aWxsIG5ldmVyIHNsb3cgYXMgaXQgbW92ZXMgdGhyb3VnaCBzcGFjZS5cbiAgICAgKiBUaGUgaGlnaGVyIHRoZSB2YWx1ZSwgdGhlIGZhc3RlciBhIGJvZHkgc2xvd3Mgd2hlbiBtb3ZpbmcgdGhyb3VnaCBzcGFjZS5cbiAgICAgKiBUaGUgZWZmZWN0cyBvZiB0aGUgdmFsdWUgYXJlIG5vbi1saW5lYXIuIFxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGZyaWN0aW9uQWlyXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMC4wMVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gYE9iamVjdGAgdGhhdCBzcGVjaWZpZXMgdGhlIGNvbGxpc2lvbiBmaWx0ZXJpbmcgcHJvcGVydGllcyBvZiB0aGlzIGJvZHkuXG4gICAgICpcbiAgICAgKiBDb2xsaXNpb25zIGJldHdlZW4gdHdvIGJvZGllcyB3aWxsIG9iZXkgdGhlIGZvbGxvd2luZyBydWxlczpcbiAgICAgKiAtIElmIHRoZSB0d28gYm9kaWVzIGhhdmUgdGhlIHNhbWUgbm9uLXplcm8gdmFsdWUgb2YgYGNvbGxpc2lvbkZpbHRlci5ncm91cGAsXG4gICAgICogICB0aGV5IHdpbGwgYWx3YXlzIGNvbGxpZGUgaWYgdGhlIHZhbHVlIGlzIHBvc2l0aXZlLCBhbmQgdGhleSB3aWxsIG5ldmVyIGNvbGxpZGVcbiAgICAgKiAgIGlmIHRoZSB2YWx1ZSBpcyBuZWdhdGl2ZS5cbiAgICAgKiAtIElmIHRoZSB0d28gYm9kaWVzIGhhdmUgZGlmZmVyZW50IHZhbHVlcyBvZiBgY29sbGlzaW9uRmlsdGVyLmdyb3VwYCBvciBpZiBvbmVcbiAgICAgKiAgIChvciBib3RoKSBvZiB0aGUgYm9kaWVzIGhhcyBhIHZhbHVlIG9mIDAsIHRoZW4gdGhlIGNhdGVnb3J5L21hc2sgcnVsZXMgYXBwbHkgYXMgZm9sbG93czpcbiAgICAgKlxuICAgICAqIEVhY2ggYm9keSBiZWxvbmdzIHRvIGEgY29sbGlzaW9uIGNhdGVnb3J5LCBnaXZlbiBieSBgY29sbGlzaW9uRmlsdGVyLmNhdGVnb3J5YC4gVGhpc1xuICAgICAqIHZhbHVlIGlzIHVzZWQgYXMgYSBiaXQgZmllbGQgYW5kIHRoZSBjYXRlZ29yeSBzaG91bGQgaGF2ZSBvbmx5IG9uZSBiaXQgc2V0LCBtZWFuaW5nIHRoYXRcbiAgICAgKiB0aGUgdmFsdWUgb2YgdGhpcyBwcm9wZXJ0eSBpcyBhIHBvd2VyIG9mIHR3byBpbiB0aGUgcmFuZ2UgWzEsIDJeMzFdLiBUaHVzLCB0aGVyZSBhcmUgMzJcbiAgICAgKiBkaWZmZXJlbnQgY29sbGlzaW9uIGNhdGVnb3JpZXMgYXZhaWxhYmxlLlxuICAgICAqXG4gICAgICogRWFjaCBib2R5IGFsc28gZGVmaW5lcyBhIGNvbGxpc2lvbiBiaXRtYXNrLCBnaXZlbiBieSBgY29sbGlzaW9uRmlsdGVyLm1hc2tgIHdoaWNoIHNwZWNpZmllc1xuICAgICAqIHRoZSBjYXRlZ29yaWVzIGl0IGNvbGxpZGVzIHdpdGggKHRoZSB2YWx1ZSBpcyB0aGUgYml0d2lzZSBBTkQgdmFsdWUgb2YgYWxsIHRoZXNlIGNhdGVnb3JpZXMpLlxuICAgICAqXG4gICAgICogVXNpbmcgdGhlIGNhdGVnb3J5L21hc2sgcnVsZXMsIHR3byBib2RpZXMgYEFgIGFuZCBgQmAgY29sbGlkZSBpZiBlYWNoIGluY2x1ZGVzIHRoZSBvdGhlcidzXG4gICAgICogY2F0ZWdvcnkgaW4gaXRzIG1hc2ssIGkuZS4gYChjYXRlZ29yeUEgJiBtYXNrQikgIT09IDBgIGFuZCBgKGNhdGVnb3J5QiAmIG1hc2tBKSAhPT0gMGBcbiAgICAgKiBhcmUgYm90aCB0cnVlLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGNvbGxpc2lvbkZpbHRlclxuICAgICAqIEB0eXBlIG9iamVjdFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gSW50ZWdlciBgTnVtYmVyYCwgdGhhdCBzcGVjaWZpZXMgdGhlIGNvbGxpc2lvbiBncm91cCB0aGlzIGJvZHkgYmVsb25ncyB0by5cbiAgICAgKiBTZWUgYGJvZHkuY29sbGlzaW9uRmlsdGVyYCBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBjb2xsaXNpb25GaWx0ZXIuZ3JvdXBcbiAgICAgKiBAdHlwZSBvYmplY3RcbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGJpdCBmaWVsZCB0aGF0IHNwZWNpZmllcyB0aGUgY29sbGlzaW9uIGNhdGVnb3J5IHRoaXMgYm9keSBiZWxvbmdzIHRvLlxuICAgICAqIFRoZSBjYXRlZ29yeSB2YWx1ZSBzaG91bGQgaGF2ZSBvbmx5IG9uZSBiaXQgc2V0LCBmb3IgZXhhbXBsZSBgMHgwMDAxYC5cbiAgICAgKiBUaGlzIG1lYW5zIHRoZXJlIGFyZSB1cCB0byAzMiB1bmlxdWUgY29sbGlzaW9uIGNhdGVnb3JpZXMgYXZhaWxhYmxlLlxuICAgICAqIFNlZSBgYm9keS5jb2xsaXNpb25GaWx0ZXJgIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGNvbGxpc2lvbkZpbHRlci5jYXRlZ29yeVxuICAgICAqIEB0eXBlIG9iamVjdFxuICAgICAqIEBkZWZhdWx0IDFcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYml0IG1hc2sgdGhhdCBzcGVjaWZpZXMgdGhlIGNvbGxpc2lvbiBjYXRlZ29yaWVzIHRoaXMgYm9keSBtYXkgY29sbGlkZSB3aXRoLlxuICAgICAqIFNlZSBgYm9keS5jb2xsaXNpb25GaWx0ZXJgIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGNvbGxpc2lvbkZpbHRlci5tYXNrXG4gICAgICogQHR5cGUgb2JqZWN0XG4gICAgICogQGRlZmF1bHQgLTFcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBzcGVjaWZpZXMgYSB0b2xlcmFuY2Ugb24gaG93IGZhciBhIGJvZHkgaXMgYWxsb3dlZCB0byAnc2luaycgb3Igcm90YXRlIGludG8gb3RoZXIgYm9kaWVzLlxuICAgICAqIEF2b2lkIGNoYW5naW5nIHRoaXMgdmFsdWUgdW5sZXNzIHlvdSB1bmRlcnN0YW5kIHRoZSBwdXJwb3NlIG9mIGBzbG9wYCBpbiBwaHlzaWNzIGVuZ2luZXMuXG4gICAgICogVGhlIGRlZmF1bHQgc2hvdWxkIGdlbmVyYWxseSBzdWZmaWNlLCBhbHRob3VnaCB2ZXJ5IGxhcmdlIGJvZGllcyBtYXkgcmVxdWlyZSBsYXJnZXIgdmFsdWVzIGZvciBzdGFibGUgc3RhY2tpbmcuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgc2xvcFxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDAuMDVcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBhbGxvd3MgcGVyLWJvZHkgdGltZSBzY2FsaW5nLCBlLmcuIGEgZm9yY2UtZmllbGQgd2hlcmUgYm9kaWVzIGluc2lkZSBhcmUgaW4gc2xvdy1tb3Rpb24sIHdoaWxlIG90aGVycyBhcmUgYXQgZnVsbCBzcGVlZC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB0aW1lU2NhbGVcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKiBAZGVmYXVsdCAxXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBbiBgT2JqZWN0YCB0aGF0IGRlZmluZXMgdGhlIHJlbmRlcmluZyBwcm9wZXJ0aWVzIHRvIGJlIGNvbnN1bWVkIGJ5IHRoZSBtb2R1bGUgYE1hdHRlci5SZW5kZXJgLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHJlbmRlclxuICAgICAqIEB0eXBlIG9iamVjdFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBmbGFnIHRoYXQgaW5kaWNhdGVzIGlmIHRoZSBib2R5IHNob3VsZCBiZSByZW5kZXJlZC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSByZW5kZXIudmlzaWJsZVxuICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBvcGFjaXR5IHRvIHVzZSB3aGVuIHJlbmRlcmluZy5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSByZW5kZXIub3BhY2l0eVxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDFcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gYE9iamVjdGAgdGhhdCBkZWZpbmVzIHRoZSBzcHJpdGUgcHJvcGVydGllcyB0byB1c2Ugd2hlbiByZW5kZXJpbmcsIGlmIGFueS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSByZW5kZXIuc3ByaXRlXG4gICAgICogQHR5cGUgb2JqZWN0XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBbiBgU3RyaW5nYCB0aGF0IGRlZmluZXMgdGhlIHBhdGggdG8gdGhlIGltYWdlIHRvIHVzZSBhcyB0aGUgc3ByaXRlIHRleHR1cmUsIGlmIGFueS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSByZW5kZXIuc3ByaXRlLnRleHR1cmVcbiAgICAgKiBAdHlwZSBzdHJpbmdcbiAgICAgKi9cbiAgICAgXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IGRlZmluZXMgdGhlIHNjYWxpbmcgaW4gdGhlIHgtYXhpcyBmb3IgdGhlIHNwcml0ZSwgaWYgYW55LlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHJlbmRlci5zcHJpdGUueFNjYWxlXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IGRlZmluZXMgdGhlIHNjYWxpbmcgaW4gdGhlIHktYXhpcyBmb3IgdGhlIHNwcml0ZSwgaWYgYW55LlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHJlbmRlci5zcHJpdGUueVNjYWxlXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMVxuICAgICAqL1xuXG4gICAgIC8qKlxuICAgICAgKiBBIGBOdW1iZXJgIHRoYXQgZGVmaW5lcyB0aGUgb2Zmc2V0IGluIHRoZSB4LWF4aXMgZm9yIHRoZSBzcHJpdGUgKG5vcm1hbGlzZWQgYnkgdGV4dHVyZSB3aWR0aCkuXG4gICAgICAqXG4gICAgICAqIEBwcm9wZXJ0eSByZW5kZXIuc3ByaXRlLnhPZmZzZXRcbiAgICAgICogQHR5cGUgbnVtYmVyXG4gICAgICAqIEBkZWZhdWx0IDBcbiAgICAgICovXG5cbiAgICAgLyoqXG4gICAgICAqIEEgYE51bWJlcmAgdGhhdCBkZWZpbmVzIHRoZSBvZmZzZXQgaW4gdGhlIHktYXhpcyBmb3IgdGhlIHNwcml0ZSAobm9ybWFsaXNlZCBieSB0ZXh0dXJlIGhlaWdodCkuXG4gICAgICAqXG4gICAgICAqIEBwcm9wZXJ0eSByZW5kZXIuc3ByaXRlLnlPZmZzZXRcbiAgICAgICogQHR5cGUgbnVtYmVyXG4gICAgICAqIEBkZWZhdWx0IDBcbiAgICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBOdW1iZXJgIHRoYXQgZGVmaW5lcyB0aGUgbGluZSB3aWR0aCB0byB1c2Ugd2hlbiByZW5kZXJpbmcgdGhlIGJvZHkgb3V0bGluZSAoaWYgYSBzcHJpdGUgaXMgbm90IGRlZmluZWQpLlxuICAgICAqIEEgdmFsdWUgb2YgYDBgIG1lYW5zIG5vIG91dGxpbmUgd2lsbCBiZSByZW5kZXJlZC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSByZW5kZXIubGluZVdpZHRoXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMS41XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBTdHJpbmdgIHRoYXQgZGVmaW5lcyB0aGUgZmlsbCBzdHlsZSB0byB1c2Ugd2hlbiByZW5kZXJpbmcgdGhlIGJvZHkgKGlmIGEgc3ByaXRlIGlzIG5vdCBkZWZpbmVkKS5cbiAgICAgKiBJdCBpcyB0aGUgc2FtZSBhcyB3aGVuIHVzaW5nIGEgY2FudmFzLCBzbyBpdCBhY2NlcHRzIENTUyBzdHlsZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgcmVuZGVyLmZpbGxTdHlsZVxuICAgICAqIEB0eXBlIHN0cmluZ1xuICAgICAqIEBkZWZhdWx0IGEgcmFuZG9tIGNvbG91clxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgU3RyaW5nYCB0aGF0IGRlZmluZXMgdGhlIHN0cm9rZSBzdHlsZSB0byB1c2Ugd2hlbiByZW5kZXJpbmcgdGhlIGJvZHkgb3V0bGluZSAoaWYgYSBzcHJpdGUgaXMgbm90IGRlZmluZWQpLlxuICAgICAqIEl0IGlzIHRoZSBzYW1lIGFzIHdoZW4gdXNpbmcgYSBjYW52YXMsIHNvIGl0IGFjY2VwdHMgQ1NTIHN0eWxlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSByZW5kZXIuc3Ryb2tlU3R5bGVcbiAgICAgKiBAdHlwZSBzdHJpbmdcbiAgICAgKiBAZGVmYXVsdCBhIHJhbmRvbSBjb2xvdXJcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFuIGFycmF5IG9mIHVuaXF1ZSBheGlzIHZlY3RvcnMgKGVkZ2Ugbm9ybWFscykgdXNlZCBmb3IgY29sbGlzaW9uIGRldGVjdGlvbi5cbiAgICAgKiBUaGVzZSBhcmUgYXV0b21hdGljYWxseSBjYWxjdWxhdGVkIGZyb20gdGhlIGdpdmVuIGNvbnZleCBodWxsIChgdmVydGljZXNgIGFycmF5KSBpbiBgQm9keS5jcmVhdGVgLlxuICAgICAqIFRoZXkgYXJlIGNvbnN0YW50bHkgdXBkYXRlZCBieSBgQm9keS51cGRhdGVgIGR1cmluZyB0aGUgc2ltdWxhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBheGVzXG4gICAgICogQHR5cGUgdmVjdG9yW11cbiAgICAgKi9cbiAgICAgXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IF9tZWFzdXJlc18gdGhlIGFyZWEgb2YgdGhlIGJvZHkncyBjb252ZXggaHVsbCwgY2FsY3VsYXRlZCBhdCBjcmVhdGlvbiBieSBgQm9keS5jcmVhdGVgLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGFyZWFcbiAgICAgKiBAdHlwZSBzdHJpbmdcbiAgICAgKiBAZGVmYXVsdCBcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYEJvdW5kc2Agb2JqZWN0IHRoYXQgZGVmaW5lcyB0aGUgQUFCQiByZWdpb24gZm9yIHRoZSBib2R5LlxuICAgICAqIEl0IGlzIGF1dG9tYXRpY2FsbHkgY2FsY3VsYXRlZCBmcm9tIHRoZSBnaXZlbiBjb252ZXggaHVsbCAoYHZlcnRpY2VzYCBhcnJheSkgaW4gYEJvZHkuY3JlYXRlYCBhbmQgY29uc3RhbnRseSB1cGRhdGVkIGJ5IGBCb2R5LnVwZGF0ZWAgZHVyaW5nIHNpbXVsYXRpb24uXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgYm91bmRzXG4gICAgICogQHR5cGUgYm91bmRzXG4gICAgICovXG5cbn0pKCk7XG5cbn0se1wiLi4vY29yZS9Db21tb25cIjoxNCxcIi4uL2NvcmUvU2xlZXBpbmdcIjoyMCxcIi4uL2dlb21ldHJ5L0F4ZXNcIjoyMyxcIi4uL2dlb21ldHJ5L0JvdW5kc1wiOjI0LFwiLi4vZ2VvbWV0cnkvVmVjdG9yXCI6MjYsXCIuLi9nZW9tZXRyeS9WZXJ0aWNlc1wiOjI3LFwiLi4vcmVuZGVyL1JlbmRlclwiOjI5fV0sMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiogVGhlIGBNYXR0ZXIuQ29tcG9zaXRlYCBtb2R1bGUgY29udGFpbnMgbWV0aG9kcyBmb3IgY3JlYXRpbmcgYW5kIG1hbmlwdWxhdGluZyBjb21wb3NpdGUgYm9kaWVzLlxuKiBBIGNvbXBvc2l0ZSBib2R5IGlzIGEgY29sbGVjdGlvbiBvZiBgTWF0dGVyLkJvZHlgLCBgTWF0dGVyLkNvbnN0cmFpbnRgIGFuZCBvdGhlciBgTWF0dGVyLkNvbXBvc2l0ZWAsIHRoZXJlZm9yZSBjb21wb3NpdGVzIGZvcm0gYSB0cmVlIHN0cnVjdHVyZS5cbiogSXQgaXMgaW1wb3J0YW50IHRvIHVzZSB0aGUgZnVuY3Rpb25zIGluIHRoaXMgbW9kdWxlIHRvIG1vZGlmeSBjb21wb3NpdGVzLCByYXRoZXIgdGhhbiBkaXJlY3RseSBtb2RpZnlpbmcgdGhlaXIgcHJvcGVydGllcy5cbiogTm90ZSB0aGF0IHRoZSBgTWF0dGVyLldvcmxkYCBvYmplY3QgaXMgYWxzbyBhIHR5cGUgb2YgYE1hdHRlci5Db21wb3NpdGVgIGFuZCBhcyBzdWNoIGFsbCBjb21wb3NpdGUgbWV0aG9kcyBoZXJlIGNhbiBhbHNvIG9wZXJhdGUgb24gYSBgTWF0dGVyLldvcmxkYC5cbipcbiogU2VlIHRoZSBpbmNsdWRlZCB1c2FnZSBbZXhhbXBsZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9saWFicnUvbWF0dGVyLWpzL3RyZWUvbWFzdGVyL2V4YW1wbGVzKS5cbipcbiogQGNsYXNzIENvbXBvc2l0ZVxuKi9cblxudmFyIENvbXBvc2l0ZSA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvc2l0ZTtcblxudmFyIEV2ZW50cyA9IHJlcXVpcmUoJy4uL2NvcmUvRXZlbnRzJyk7XG52YXIgQ29tbW9uID0gcmVxdWlyZSgnLi4vY29yZS9Db21tb24nKTtcbnZhciBCb2R5ID0gcmVxdWlyZSgnLi9Cb2R5Jyk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgY29tcG9zaXRlLiBUaGUgb3B0aW9ucyBwYXJhbWV0ZXIgaXMgYW4gb2JqZWN0IHRoYXQgc3BlY2lmaWVzIGFueSBwcm9wZXJ0aWVzIHlvdSB3aXNoIHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0cy5cbiAgICAgKiBTZWUgdGhlIHByb3Blcml0ZXMgc2VjdGlvbiBiZWxvdyBmb3IgZGV0YWlsZWQgaW5mb3JtYXRpb24gb24gd2hhdCB5b3UgY2FuIHBhc3MgdmlhIHRoZSBgb3B0aW9uc2Agb2JqZWN0LlxuICAgICAqIEBtZXRob2QgY3JlYXRlXG4gICAgICogQHBhcmFtIHt9IFtvcHRpb25zXVxuICAgICAqIEByZXR1cm4ge2NvbXBvc2l0ZX0gQSBuZXcgY29tcG9zaXRlXG4gICAgICovXG4gICAgQ29tcG9zaXRlLmNyZWF0ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIENvbW1vbi5leHRlbmQoeyBcbiAgICAgICAgICAgIGlkOiBDb21tb24ubmV4dElkKCksXG4gICAgICAgICAgICB0eXBlOiAnY29tcG9zaXRlJyxcbiAgICAgICAgICAgIHBhcmVudDogbnVsbCxcbiAgICAgICAgICAgIGlzTW9kaWZpZWQ6IGZhbHNlLFxuICAgICAgICAgICAgYm9kaWVzOiBbXSwgXG4gICAgICAgICAgICBjb25zdHJhaW50czogW10sIFxuICAgICAgICAgICAgY29tcG9zaXRlczogW10sXG4gICAgICAgICAgICBsYWJlbDogJ0NvbXBvc2l0ZSdcbiAgICAgICAgfSwgb3B0aW9ucyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGNvbXBvc2l0ZSdzIGBpc01vZGlmaWVkYCBmbGFnLiBcbiAgICAgKiBJZiBgdXBkYXRlUGFyZW50c2AgaXMgdHJ1ZSwgYWxsIHBhcmVudHMgd2lsbCBiZSBzZXQgKGRlZmF1bHQ6IGZhbHNlKS5cbiAgICAgKiBJZiBgdXBkYXRlQ2hpbGRyZW5gIGlzIHRydWUsIGFsbCBjaGlsZHJlbiB3aWxsIGJlIHNldCAoZGVmYXVsdDogZmFsc2UpLlxuICAgICAqIEBtZXRob2Qgc2V0TW9kaWZpZWRcbiAgICAgKiBAcGFyYW0ge2NvbXBvc2l0ZX0gY29tcG9zaXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpc01vZGlmaWVkXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbdXBkYXRlUGFyZW50cz1mYWxzZV1cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFt1cGRhdGVDaGlsZHJlbj1mYWxzZV1cbiAgICAgKi9cbiAgICBDb21wb3NpdGUuc2V0TW9kaWZpZWQgPSBmdW5jdGlvbihjb21wb3NpdGUsIGlzTW9kaWZpZWQsIHVwZGF0ZVBhcmVudHMsIHVwZGF0ZUNoaWxkcmVuKSB7XG4gICAgICAgIGNvbXBvc2l0ZS5pc01vZGlmaWVkID0gaXNNb2RpZmllZDtcblxuICAgICAgICBpZiAodXBkYXRlUGFyZW50cyAmJiBjb21wb3NpdGUucGFyZW50KSB7XG4gICAgICAgICAgICBDb21wb3NpdGUuc2V0TW9kaWZpZWQoY29tcG9zaXRlLnBhcmVudCwgaXNNb2RpZmllZCwgdXBkYXRlUGFyZW50cywgdXBkYXRlQ2hpbGRyZW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVwZGF0ZUNoaWxkcmVuKSB7XG4gICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgY29tcG9zaXRlLmNvbXBvc2l0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGRDb21wb3NpdGUgPSBjb21wb3NpdGUuY29tcG9zaXRlc1tpXTtcbiAgICAgICAgICAgICAgICBDb21wb3NpdGUuc2V0TW9kaWZpZWQoY2hpbGRDb21wb3NpdGUsIGlzTW9kaWZpZWQsIHVwZGF0ZVBhcmVudHMsIHVwZGF0ZUNoaWxkcmVuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmljIGFkZCBmdW5jdGlvbi4gQWRkcyBvbmUgb3IgbWFueSBib2R5KHMpLCBjb25zdHJhaW50KHMpIG9yIGEgY29tcG9zaXRlKHMpIHRvIHRoZSBnaXZlbiBjb21wb3NpdGUuXG4gICAgICogVHJpZ2dlcnMgYGJlZm9yZUFkZGAgYW5kIGBhZnRlckFkZGAgZXZlbnRzIG9uIHRoZSBgY29tcG9zaXRlYC5cbiAgICAgKiBAbWV0aG9kIGFkZFxuICAgICAqIEBwYXJhbSB7Y29tcG9zaXRlfSBjb21wb3NpdGVcbiAgICAgKiBAcGFyYW0ge30gb2JqZWN0XG4gICAgICogQHJldHVybiB7Y29tcG9zaXRlfSBUaGUgb3JpZ2luYWwgY29tcG9zaXRlIHdpdGggdGhlIG9iamVjdHMgYWRkZWRcbiAgICAgKi9cbiAgICBDb21wb3NpdGUuYWRkID0gZnVuY3Rpb24oY29tcG9zaXRlLCBvYmplY3QpIHtcbiAgICAgICAgdmFyIG9iamVjdHMgPSBbXS5jb25jYXQob2JqZWN0KTtcblxuICAgICAgICBFdmVudHMudHJpZ2dlcihjb21wb3NpdGUsICdiZWZvcmVBZGQnLCB7IG9iamVjdDogb2JqZWN0IH0pO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqZWN0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG9iamVjdHNbaV07XG5cbiAgICAgICAgICAgIHN3aXRjaCAob2JqLnR5cGUpIHtcblxuICAgICAgICAgICAgY2FzZSAnYm9keSc6XG4gICAgICAgICAgICAgICAgLy8gc2tpcCBhZGRpbmcgY29tcG91bmQgcGFydHNcbiAgICAgICAgICAgICAgICBpZiAob2JqLnBhcmVudCAhPT0gb2JqKSB7XG4gICAgICAgICAgICAgICAgICAgIENvbW1vbi5sb2coJ0NvbXBvc2l0ZS5hZGQ6IHNraXBwZWQgYWRkaW5nIGEgY29tcG91bmQgYm9keSBwYXJ0ICh5b3UgbXVzdCBhZGQgaXRzIHBhcmVudCBpbnN0ZWFkKScsICd3YXJuJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIENvbXBvc2l0ZS5hZGRCb2R5KGNvbXBvc2l0ZSwgb2JqKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2NvbnN0cmFpbnQnOlxuICAgICAgICAgICAgICAgIENvbXBvc2l0ZS5hZGRDb25zdHJhaW50KGNvbXBvc2l0ZSwgb2JqKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2NvbXBvc2l0ZSc6XG4gICAgICAgICAgICAgICAgQ29tcG9zaXRlLmFkZENvbXBvc2l0ZShjb21wb3NpdGUsIG9iaik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtb3VzZUNvbnN0cmFpbnQnOlxuICAgICAgICAgICAgICAgIENvbXBvc2l0ZS5hZGRDb25zdHJhaW50KGNvbXBvc2l0ZSwgb2JqLmNvbnN0cmFpbnQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBFdmVudHMudHJpZ2dlcihjb21wb3NpdGUsICdhZnRlckFkZCcsIHsgb2JqZWN0OiBvYmplY3QgfSk7XG5cbiAgICAgICAgcmV0dXJuIGNvbXBvc2l0ZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2VuZXJpYyByZW1vdmUgZnVuY3Rpb24uIFJlbW92ZXMgb25lIG9yIG1hbnkgYm9keShzKSwgY29uc3RyYWludChzKSBvciBhIGNvbXBvc2l0ZShzKSB0byB0aGUgZ2l2ZW4gY29tcG9zaXRlLlxuICAgICAqIE9wdGlvbmFsbHkgc2VhcmNoaW5nIGl0cyBjaGlsZHJlbiByZWN1cnNpdmVseS5cbiAgICAgKiBUcmlnZ2VycyBgYmVmb3JlUmVtb3ZlYCBhbmQgYGFmdGVyUmVtb3ZlYCBldmVudHMgb24gdGhlIGBjb21wb3NpdGVgLlxuICAgICAqIEBtZXRob2QgcmVtb3ZlXG4gICAgICogQHBhcmFtIHtjb21wb3NpdGV9IGNvbXBvc2l0ZVxuICAgICAqIEBwYXJhbSB7fSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtkZWVwPWZhbHNlXVxuICAgICAqIEByZXR1cm4ge2NvbXBvc2l0ZX0gVGhlIG9yaWdpbmFsIGNvbXBvc2l0ZSB3aXRoIHRoZSBvYmplY3RzIHJlbW92ZWRcbiAgICAgKi9cbiAgICBDb21wb3NpdGUucmVtb3ZlID0gZnVuY3Rpb24oY29tcG9zaXRlLCBvYmplY3QsIGRlZXApIHtcbiAgICAgICAgdmFyIG9iamVjdHMgPSBbXS5jb25jYXQob2JqZWN0KTtcblxuICAgICAgICBFdmVudHMudHJpZ2dlcihjb21wb3NpdGUsICdiZWZvcmVSZW1vdmUnLCB7IG9iamVjdDogb2JqZWN0IH0pO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqZWN0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG9iamVjdHNbaV07XG5cbiAgICAgICAgICAgIHN3aXRjaCAob2JqLnR5cGUpIHtcblxuICAgICAgICAgICAgY2FzZSAnYm9keSc6XG4gICAgICAgICAgICAgICAgQ29tcG9zaXRlLnJlbW92ZUJvZHkoY29tcG9zaXRlLCBvYmosIGRlZXApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnY29uc3RyYWludCc6XG4gICAgICAgICAgICAgICAgQ29tcG9zaXRlLnJlbW92ZUNvbnN0cmFpbnQoY29tcG9zaXRlLCBvYmosIGRlZXApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnY29tcG9zaXRlJzpcbiAgICAgICAgICAgICAgICBDb21wb3NpdGUucmVtb3ZlQ29tcG9zaXRlKGNvbXBvc2l0ZSwgb2JqLCBkZWVwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21vdXNlQ29uc3RyYWludCc6XG4gICAgICAgICAgICAgICAgQ29tcG9zaXRlLnJlbW92ZUNvbnN0cmFpbnQoY29tcG9zaXRlLCBvYmouY29uc3RyYWludCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIEV2ZW50cy50cmlnZ2VyKGNvbXBvc2l0ZSwgJ2FmdGVyUmVtb3ZlJywgeyBvYmplY3Q6IG9iamVjdCB9KTtcblxuICAgICAgICByZXR1cm4gY29tcG9zaXRlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgY29tcG9zaXRlIHRvIHRoZSBnaXZlbiBjb21wb3NpdGUuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIGFkZENvbXBvc2l0ZVxuICAgICAqIEBwYXJhbSB7Y29tcG9zaXRlfSBjb21wb3NpdGVBXG4gICAgICogQHBhcmFtIHtjb21wb3NpdGV9IGNvbXBvc2l0ZUJcbiAgICAgKiBAcmV0dXJuIHtjb21wb3NpdGV9IFRoZSBvcmlnaW5hbCBjb21wb3NpdGVBIHdpdGggdGhlIG9iamVjdHMgZnJvbSBjb21wb3NpdGVCIGFkZGVkXG4gICAgICovXG4gICAgQ29tcG9zaXRlLmFkZENvbXBvc2l0ZSA9IGZ1bmN0aW9uKGNvbXBvc2l0ZUEsIGNvbXBvc2l0ZUIpIHtcbiAgICAgICAgY29tcG9zaXRlQS5jb21wb3NpdGVzLnB1c2goY29tcG9zaXRlQik7XG4gICAgICAgIGNvbXBvc2l0ZUIucGFyZW50ID0gY29tcG9zaXRlQTtcbiAgICAgICAgQ29tcG9zaXRlLnNldE1vZGlmaWVkKGNvbXBvc2l0ZUEsIHRydWUsIHRydWUsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIGNvbXBvc2l0ZUE7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSBjb21wb3NpdGUgZnJvbSB0aGUgZ2l2ZW4gY29tcG9zaXRlLCBhbmQgb3B0aW9uYWxseSBzZWFyY2hpbmcgaXRzIGNoaWxkcmVuIHJlY3Vyc2l2ZWx5LlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCByZW1vdmVDb21wb3NpdGVcbiAgICAgKiBAcGFyYW0ge2NvbXBvc2l0ZX0gY29tcG9zaXRlQVxuICAgICAqIEBwYXJhbSB7Y29tcG9zaXRlfSBjb21wb3NpdGVCXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZGVlcD1mYWxzZV1cbiAgICAgKiBAcmV0dXJuIHtjb21wb3NpdGV9IFRoZSBvcmlnaW5hbCBjb21wb3NpdGVBIHdpdGggdGhlIGNvbXBvc2l0ZSByZW1vdmVkXG4gICAgICovXG4gICAgQ29tcG9zaXRlLnJlbW92ZUNvbXBvc2l0ZSA9IGZ1bmN0aW9uKGNvbXBvc2l0ZUEsIGNvbXBvc2l0ZUIsIGRlZXApIHtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gQ29tbW9uLmluZGV4T2YoY29tcG9zaXRlQS5jb21wb3NpdGVzLCBjb21wb3NpdGVCKTtcbiAgICAgICAgaWYgKHBvc2l0aW9uICE9PSAtMSkge1xuICAgICAgICAgICAgQ29tcG9zaXRlLnJlbW92ZUNvbXBvc2l0ZUF0KGNvbXBvc2l0ZUEsIHBvc2l0aW9uKTtcbiAgICAgICAgICAgIENvbXBvc2l0ZS5zZXRNb2RpZmllZChjb21wb3NpdGVBLCB0cnVlLCB0cnVlLCBmYWxzZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGVlcCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb21wb3NpdGVBLmNvbXBvc2l0ZXMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgIENvbXBvc2l0ZS5yZW1vdmVDb21wb3NpdGUoY29tcG9zaXRlQS5jb21wb3NpdGVzW2ldLCBjb21wb3NpdGVCLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb21wb3NpdGVBO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgY29tcG9zaXRlIGZyb20gdGhlIGdpdmVuIGNvbXBvc2l0ZS5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2QgcmVtb3ZlQ29tcG9zaXRlQXRcbiAgICAgKiBAcGFyYW0ge2NvbXBvc2l0ZX0gY29tcG9zaXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHBvc2l0aW9uXG4gICAgICogQHJldHVybiB7Y29tcG9zaXRlfSBUaGUgb3JpZ2luYWwgY29tcG9zaXRlIHdpdGggdGhlIGNvbXBvc2l0ZSByZW1vdmVkXG4gICAgICovXG4gICAgQ29tcG9zaXRlLnJlbW92ZUNvbXBvc2l0ZUF0ID0gZnVuY3Rpb24oY29tcG9zaXRlLCBwb3NpdGlvbikge1xuICAgICAgICBjb21wb3NpdGUuY29tcG9zaXRlcy5zcGxpY2UocG9zaXRpb24sIDEpO1xuICAgICAgICBDb21wb3NpdGUuc2V0TW9kaWZpZWQoY29tcG9zaXRlLCB0cnVlLCB0cnVlLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiBjb21wb3NpdGU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBib2R5IHRvIHRoZSBnaXZlbiBjb21wb3NpdGUuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIGFkZEJvZHlcbiAgICAgKiBAcGFyYW0ge2NvbXBvc2l0ZX0gY29tcG9zaXRlXG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5XG4gICAgICogQHJldHVybiB7Y29tcG9zaXRlfSBUaGUgb3JpZ2luYWwgY29tcG9zaXRlIHdpdGggdGhlIGJvZHkgYWRkZWRcbiAgICAgKi9cbiAgICBDb21wb3NpdGUuYWRkQm9keSA9IGZ1bmN0aW9uKGNvbXBvc2l0ZSwgYm9keSkge1xuICAgICAgICBjb21wb3NpdGUuYm9kaWVzLnB1c2goYm9keSk7XG4gICAgICAgIENvbXBvc2l0ZS5zZXRNb2RpZmllZChjb21wb3NpdGUsIHRydWUsIHRydWUsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIGNvbXBvc2l0ZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIGJvZHkgZnJvbSB0aGUgZ2l2ZW4gY29tcG9zaXRlLCBhbmQgb3B0aW9uYWxseSBzZWFyY2hpbmcgaXRzIGNoaWxkcmVuIHJlY3Vyc2l2ZWx5LlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCByZW1vdmVCb2R5XG4gICAgICogQHBhcmFtIHtjb21wb3NpdGV9IGNvbXBvc2l0ZVxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2RlZXA9ZmFsc2VdXG4gICAgICogQHJldHVybiB7Y29tcG9zaXRlfSBUaGUgb3JpZ2luYWwgY29tcG9zaXRlIHdpdGggdGhlIGJvZHkgcmVtb3ZlZFxuICAgICAqL1xuICAgIENvbXBvc2l0ZS5yZW1vdmVCb2R5ID0gZnVuY3Rpb24oY29tcG9zaXRlLCBib2R5LCBkZWVwKSB7XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IENvbW1vbi5pbmRleE9mKGNvbXBvc2l0ZS5ib2RpZXMsIGJvZHkpO1xuICAgICAgICBpZiAocG9zaXRpb24gIT09IC0xKSB7XG4gICAgICAgICAgICBDb21wb3NpdGUucmVtb3ZlQm9keUF0KGNvbXBvc2l0ZSwgcG9zaXRpb24pO1xuICAgICAgICAgICAgQ29tcG9zaXRlLnNldE1vZGlmaWVkKGNvbXBvc2l0ZSwgdHJ1ZSwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRlZXApIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29tcG9zaXRlLmNvbXBvc2l0ZXMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgIENvbXBvc2l0ZS5yZW1vdmVCb2R5KGNvbXBvc2l0ZS5jb21wb3NpdGVzW2ldLCBib2R5LCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb21wb3NpdGU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSBib2R5IGZyb20gdGhlIGdpdmVuIGNvbXBvc2l0ZS5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2QgcmVtb3ZlQm9keUF0XG4gICAgICogQHBhcmFtIHtjb21wb3NpdGV9IGNvbXBvc2l0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBwb3NpdGlvblxuICAgICAqIEByZXR1cm4ge2NvbXBvc2l0ZX0gVGhlIG9yaWdpbmFsIGNvbXBvc2l0ZSB3aXRoIHRoZSBib2R5IHJlbW92ZWRcbiAgICAgKi9cbiAgICBDb21wb3NpdGUucmVtb3ZlQm9keUF0ID0gZnVuY3Rpb24oY29tcG9zaXRlLCBwb3NpdGlvbikge1xuICAgICAgICBjb21wb3NpdGUuYm9kaWVzLnNwbGljZShwb3NpdGlvbiwgMSk7XG4gICAgICAgIENvbXBvc2l0ZS5zZXRNb2RpZmllZChjb21wb3NpdGUsIHRydWUsIHRydWUsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIGNvbXBvc2l0ZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWRkcyBhIGNvbnN0cmFpbnQgdG8gdGhlIGdpdmVuIGNvbXBvc2l0ZS5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2QgYWRkQ29uc3RyYWludFxuICAgICAqIEBwYXJhbSB7Y29tcG9zaXRlfSBjb21wb3NpdGVcbiAgICAgKiBAcGFyYW0ge2NvbnN0cmFpbnR9IGNvbnN0cmFpbnRcbiAgICAgKiBAcmV0dXJuIHtjb21wb3NpdGV9IFRoZSBvcmlnaW5hbCBjb21wb3NpdGUgd2l0aCB0aGUgY29uc3RyYWludCBhZGRlZFxuICAgICAqL1xuICAgIENvbXBvc2l0ZS5hZGRDb25zdHJhaW50ID0gZnVuY3Rpb24oY29tcG9zaXRlLCBjb25zdHJhaW50KSB7XG4gICAgICAgIGNvbXBvc2l0ZS5jb25zdHJhaW50cy5wdXNoKGNvbnN0cmFpbnQpO1xuICAgICAgICBDb21wb3NpdGUuc2V0TW9kaWZpZWQoY29tcG9zaXRlLCB0cnVlLCB0cnVlLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiBjb21wb3NpdGU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSBjb25zdHJhaW50IGZyb20gdGhlIGdpdmVuIGNvbXBvc2l0ZSwgYW5kIG9wdGlvbmFsbHkgc2VhcmNoaW5nIGl0cyBjaGlsZHJlbiByZWN1cnNpdmVseS5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2QgcmVtb3ZlQ29uc3RyYWludFxuICAgICAqIEBwYXJhbSB7Y29tcG9zaXRlfSBjb21wb3NpdGVcbiAgICAgKiBAcGFyYW0ge2NvbnN0cmFpbnR9IGNvbnN0cmFpbnRcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtkZWVwPWZhbHNlXVxuICAgICAqIEByZXR1cm4ge2NvbXBvc2l0ZX0gVGhlIG9yaWdpbmFsIGNvbXBvc2l0ZSB3aXRoIHRoZSBjb25zdHJhaW50IHJlbW92ZWRcbiAgICAgKi9cbiAgICBDb21wb3NpdGUucmVtb3ZlQ29uc3RyYWludCA9IGZ1bmN0aW9uKGNvbXBvc2l0ZSwgY29uc3RyYWludCwgZGVlcCkge1xuICAgICAgICB2YXIgcG9zaXRpb24gPSBDb21tb24uaW5kZXhPZihjb21wb3NpdGUuY29uc3RyYWludHMsIGNvbnN0cmFpbnQpO1xuICAgICAgICBpZiAocG9zaXRpb24gIT09IC0xKSB7XG4gICAgICAgICAgICBDb21wb3NpdGUucmVtb3ZlQ29uc3RyYWludEF0KGNvbXBvc2l0ZSwgcG9zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRlZXApIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29tcG9zaXRlLmNvbXBvc2l0ZXMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgIENvbXBvc2l0ZS5yZW1vdmVDb25zdHJhaW50KGNvbXBvc2l0ZS5jb21wb3NpdGVzW2ldLCBjb25zdHJhaW50LCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb21wb3NpdGU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSBib2R5IGZyb20gdGhlIGdpdmVuIGNvbXBvc2l0ZS5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2QgcmVtb3ZlQ29uc3RyYWludEF0XG4gICAgICogQHBhcmFtIHtjb21wb3NpdGV9IGNvbXBvc2l0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBwb3NpdGlvblxuICAgICAqIEByZXR1cm4ge2NvbXBvc2l0ZX0gVGhlIG9yaWdpbmFsIGNvbXBvc2l0ZSB3aXRoIHRoZSBjb25zdHJhaW50IHJlbW92ZWRcbiAgICAgKi9cbiAgICBDb21wb3NpdGUucmVtb3ZlQ29uc3RyYWludEF0ID0gZnVuY3Rpb24oY29tcG9zaXRlLCBwb3NpdGlvbikge1xuICAgICAgICBjb21wb3NpdGUuY29uc3RyYWludHMuc3BsaWNlKHBvc2l0aW9uLCAxKTtcbiAgICAgICAgQ29tcG9zaXRlLnNldE1vZGlmaWVkKGNvbXBvc2l0ZSwgdHJ1ZSwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gY29tcG9zaXRlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBib2RpZXMsIGNvbnN0cmFpbnRzIGFuZCBjb21wb3NpdGVzIGZyb20gdGhlIGdpdmVuIGNvbXBvc2l0ZS5cbiAgICAgKiBPcHRpb25hbGx5IGNsZWFyaW5nIGl0cyBjaGlsZHJlbiByZWN1cnNpdmVseS5cbiAgICAgKiBAbWV0aG9kIGNsZWFyXG4gICAgICogQHBhcmFtIHtjb21wb3NpdGV9IGNvbXBvc2l0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0ga2VlcFN0YXRpY1xuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2RlZXA9ZmFsc2VdXG4gICAgICovXG4gICAgQ29tcG9zaXRlLmNsZWFyID0gZnVuY3Rpb24oY29tcG9zaXRlLCBrZWVwU3RhdGljLCBkZWVwKSB7XG4gICAgICAgIGlmIChkZWVwKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbXBvc2l0ZS5jb21wb3NpdGVzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICBDb21wb3NpdGUuY2xlYXIoY29tcG9zaXRlLmNvbXBvc2l0ZXNbaV0sIGtlZXBTdGF0aWMsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoa2VlcFN0YXRpYykge1xuICAgICAgICAgICAgY29tcG9zaXRlLmJvZGllcyA9IGNvbXBvc2l0ZS5ib2RpZXMuZmlsdGVyKGZ1bmN0aW9uKGJvZHkpIHsgcmV0dXJuIGJvZHkuaXNTdGF0aWM7IH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29tcG9zaXRlLmJvZGllcy5sZW5ndGggPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgY29tcG9zaXRlLmNvbnN0cmFpbnRzLmxlbmd0aCA9IDA7XG4gICAgICAgIGNvbXBvc2l0ZS5jb21wb3NpdGVzLmxlbmd0aCA9IDA7XG4gICAgICAgIENvbXBvc2l0ZS5zZXRNb2RpZmllZChjb21wb3NpdGUsIHRydWUsIHRydWUsIGZhbHNlKTtcblxuICAgICAgICByZXR1cm4gY29tcG9zaXRlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFsbCBib2RpZXMgaW4gdGhlIGdpdmVuIGNvbXBvc2l0ZSwgaW5jbHVkaW5nIGFsbCBib2RpZXMgaW4gaXRzIGNoaWxkcmVuLCByZWN1cnNpdmVseS5cbiAgICAgKiBAbWV0aG9kIGFsbEJvZGllc1xuICAgICAqIEBwYXJhbSB7Y29tcG9zaXRlfSBjb21wb3NpdGVcbiAgICAgKiBAcmV0dXJuIHtib2R5W119IEFsbCB0aGUgYm9kaWVzXG4gICAgICovXG4gICAgQ29tcG9zaXRlLmFsbEJvZGllcyA9IGZ1bmN0aW9uKGNvbXBvc2l0ZSkge1xuICAgICAgICB2YXIgYm9kaWVzID0gW10uY29uY2F0KGNvbXBvc2l0ZS5ib2RpZXMpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29tcG9zaXRlLmNvbXBvc2l0ZXMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBib2RpZXMgPSBib2RpZXMuY29uY2F0KENvbXBvc2l0ZS5hbGxCb2RpZXMoY29tcG9zaXRlLmNvbXBvc2l0ZXNbaV0pKTtcblxuICAgICAgICByZXR1cm4gYm9kaWVzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFsbCBjb25zdHJhaW50cyBpbiB0aGUgZ2l2ZW4gY29tcG9zaXRlLCBpbmNsdWRpbmcgYWxsIGNvbnN0cmFpbnRzIGluIGl0cyBjaGlsZHJlbiwgcmVjdXJzaXZlbHkuXG4gICAgICogQG1ldGhvZCBhbGxDb25zdHJhaW50c1xuICAgICAqIEBwYXJhbSB7Y29tcG9zaXRlfSBjb21wb3NpdGVcbiAgICAgKiBAcmV0dXJuIHtjb25zdHJhaW50W119IEFsbCB0aGUgY29uc3RyYWludHNcbiAgICAgKi9cbiAgICBDb21wb3NpdGUuYWxsQ29uc3RyYWludHMgPSBmdW5jdGlvbihjb21wb3NpdGUpIHtcbiAgICAgICAgdmFyIGNvbnN0cmFpbnRzID0gW10uY29uY2F0KGNvbXBvc2l0ZS5jb25zdHJhaW50cyk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb21wb3NpdGUuY29tcG9zaXRlcy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIGNvbnN0cmFpbnRzID0gY29uc3RyYWludHMuY29uY2F0KENvbXBvc2l0ZS5hbGxDb25zdHJhaW50cyhjb21wb3NpdGUuY29tcG9zaXRlc1tpXSkpO1xuXG4gICAgICAgIHJldHVybiBjb25zdHJhaW50cztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbGwgY29tcG9zaXRlcyBpbiB0aGUgZ2l2ZW4gY29tcG9zaXRlLCBpbmNsdWRpbmcgYWxsIGNvbXBvc2l0ZXMgaW4gaXRzIGNoaWxkcmVuLCByZWN1cnNpdmVseS5cbiAgICAgKiBAbWV0aG9kIGFsbENvbXBvc2l0ZXNcbiAgICAgKiBAcGFyYW0ge2NvbXBvc2l0ZX0gY29tcG9zaXRlXG4gICAgICogQHJldHVybiB7Y29tcG9zaXRlW119IEFsbCB0aGUgY29tcG9zaXRlc1xuICAgICAqL1xuICAgIENvbXBvc2l0ZS5hbGxDb21wb3NpdGVzID0gZnVuY3Rpb24oY29tcG9zaXRlKSB7XG4gICAgICAgIHZhciBjb21wb3NpdGVzID0gW10uY29uY2F0KGNvbXBvc2l0ZS5jb21wb3NpdGVzKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbXBvc2l0ZS5jb21wb3NpdGVzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgY29tcG9zaXRlcyA9IGNvbXBvc2l0ZXMuY29uY2F0KENvbXBvc2l0ZS5hbGxDb21wb3NpdGVzKGNvbXBvc2l0ZS5jb21wb3NpdGVzW2ldKSk7XG5cbiAgICAgICAgcmV0dXJuIGNvbXBvc2l0ZXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNlYXJjaGVzIHRoZSBjb21wb3NpdGUgcmVjdXJzaXZlbHkgZm9yIGFuIG9iamVjdCBtYXRjaGluZyB0aGUgdHlwZSBhbmQgaWQgc3VwcGxpZWQsIG51bGwgaWYgbm90IGZvdW5kLlxuICAgICAqIEBtZXRob2QgZ2V0XG4gICAgICogQHBhcmFtIHtjb21wb3NpdGV9IGNvbXBvc2l0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpZFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gICAgICogQHJldHVybiB7b2JqZWN0fSBUaGUgcmVxdWVzdGVkIG9iamVjdCwgaWYgZm91bmRcbiAgICAgKi9cbiAgICBDb21wb3NpdGUuZ2V0ID0gZnVuY3Rpb24oY29tcG9zaXRlLCBpZCwgdHlwZSkge1xuICAgICAgICB2YXIgb2JqZWN0cyxcbiAgICAgICAgICAgIG9iamVjdDtcblxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAnYm9keSc6XG4gICAgICAgICAgICBvYmplY3RzID0gQ29tcG9zaXRlLmFsbEJvZGllcyhjb21wb3NpdGUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2NvbnN0cmFpbnQnOlxuICAgICAgICAgICAgb2JqZWN0cyA9IENvbXBvc2l0ZS5hbGxDb25zdHJhaW50cyhjb21wb3NpdGUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2NvbXBvc2l0ZSc6XG4gICAgICAgICAgICBvYmplY3RzID0gQ29tcG9zaXRlLmFsbENvbXBvc2l0ZXMoY29tcG9zaXRlKS5jb25jYXQoY29tcG9zaXRlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFvYmplY3RzKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgb2JqZWN0ID0gb2JqZWN0cy5maWx0ZXIoZnVuY3Rpb24ob2JqZWN0KSB7IFxuICAgICAgICAgICAgcmV0dXJuIG9iamVjdC5pZC50b1N0cmluZygpID09PSBpZC50b1N0cmluZygpOyBcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIG9iamVjdC5sZW5ndGggPT09IDAgPyBudWxsIDogb2JqZWN0WzBdO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBNb3ZlcyB0aGUgZ2l2ZW4gb2JqZWN0KHMpIGZyb20gY29tcG9zaXRlQSB0byBjb21wb3NpdGVCIChlcXVhbCB0byBhIHJlbW92ZSBmb2xsb3dlZCBieSBhbiBhZGQpLlxuICAgICAqIEBtZXRob2QgbW92ZVxuICAgICAqIEBwYXJhbSB7Y29tcG9zaXRlQX0gY29tcG9zaXRlQVxuICAgICAqIEBwYXJhbSB7b2JqZWN0W119IG9iamVjdHNcbiAgICAgKiBAcGFyYW0ge2NvbXBvc2l0ZUJ9IGNvbXBvc2l0ZUJcbiAgICAgKiBAcmV0dXJuIHtjb21wb3NpdGV9IFJldHVybnMgY29tcG9zaXRlQVxuICAgICAqL1xuICAgIENvbXBvc2l0ZS5tb3ZlID0gZnVuY3Rpb24oY29tcG9zaXRlQSwgb2JqZWN0cywgY29tcG9zaXRlQikge1xuICAgICAgICBDb21wb3NpdGUucmVtb3ZlKGNvbXBvc2l0ZUEsIG9iamVjdHMpO1xuICAgICAgICBDb21wb3NpdGUuYWRkKGNvbXBvc2l0ZUIsIG9iamVjdHMpO1xuICAgICAgICByZXR1cm4gY29tcG9zaXRlQTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBuZXcgaWRzIGZvciBhbGwgb2JqZWN0cyBpbiB0aGUgY29tcG9zaXRlLCByZWN1cnNpdmVseS5cbiAgICAgKiBAbWV0aG9kIHJlYmFzZVxuICAgICAqIEBwYXJhbSB7Y29tcG9zaXRlfSBjb21wb3NpdGVcbiAgICAgKiBAcmV0dXJuIHtjb21wb3NpdGV9IFJldHVybnMgY29tcG9zaXRlXG4gICAgICovXG4gICAgQ29tcG9zaXRlLnJlYmFzZSA9IGZ1bmN0aW9uKGNvbXBvc2l0ZSkge1xuICAgICAgICB2YXIgb2JqZWN0cyA9IENvbXBvc2l0ZS5hbGxCb2RpZXMoY29tcG9zaXRlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNvbmNhdChDb21wb3NpdGUuYWxsQ29uc3RyYWludHMoY29tcG9zaXRlKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jb25jYXQoQ29tcG9zaXRlLmFsbENvbXBvc2l0ZXMoY29tcG9zaXRlKSk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmplY3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBvYmplY3RzW2ldLmlkID0gQ29tbW9uLm5leHRJZCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgQ29tcG9zaXRlLnNldE1vZGlmaWVkKGNvbXBvc2l0ZSwgdHJ1ZSwgdHJ1ZSwgZmFsc2UpO1xuXG4gICAgICAgIHJldHVybiBjb21wb3NpdGU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRyYW5zbGF0ZXMgYWxsIGNoaWxkcmVuIGluIHRoZSBjb21wb3NpdGUgYnkgYSBnaXZlbiB2ZWN0b3IgcmVsYXRpdmUgdG8gdGhlaXIgY3VycmVudCBwb3NpdGlvbnMsIFxuICAgICAqIHdpdGhvdXQgaW1wYXJ0aW5nIGFueSB2ZWxvY2l0eS5cbiAgICAgKiBAbWV0aG9kIHRyYW5zbGF0ZVxuICAgICAqIEBwYXJhbSB7Y29tcG9zaXRlfSBjb21wb3NpdGVcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdHJhbnNsYXRpb25cbiAgICAgKiBAcGFyYW0ge2Jvb2x9IFtyZWN1cnNpdmU9dHJ1ZV1cbiAgICAgKi9cbiAgICBDb21wb3NpdGUudHJhbnNsYXRlID0gZnVuY3Rpb24oY29tcG9zaXRlLCB0cmFuc2xhdGlvbiwgcmVjdXJzaXZlKSB7XG4gICAgICAgIHZhciBib2RpZXMgPSByZWN1cnNpdmUgPyBDb21wb3NpdGUuYWxsQm9kaWVzKGNvbXBvc2l0ZSkgOiBjb21wb3NpdGUuYm9kaWVzO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBCb2R5LnRyYW5zbGF0ZShib2RpZXNbaV0sIHRyYW5zbGF0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIENvbXBvc2l0ZS5zZXRNb2RpZmllZChjb21wb3NpdGUsIHRydWUsIHRydWUsIGZhbHNlKTtcblxuICAgICAgICByZXR1cm4gY29tcG9zaXRlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSb3RhdGVzIGFsbCBjaGlsZHJlbiBpbiB0aGUgY29tcG9zaXRlIGJ5IGEgZ2l2ZW4gYW5nbGUgYWJvdXQgdGhlIGdpdmVuIHBvaW50LCB3aXRob3V0IGltcGFydGluZyBhbnkgYW5ndWxhciB2ZWxvY2l0eS5cbiAgICAgKiBAbWV0aG9kIHJvdGF0ZVxuICAgICAqIEBwYXJhbSB7Y29tcG9zaXRlfSBjb21wb3NpdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcm90YXRpb25cbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gcG9pbnRcbiAgICAgKiBAcGFyYW0ge2Jvb2x9IFtyZWN1cnNpdmU9dHJ1ZV1cbiAgICAgKi9cbiAgICBDb21wb3NpdGUucm90YXRlID0gZnVuY3Rpb24oY29tcG9zaXRlLCByb3RhdGlvbiwgcG9pbnQsIHJlY3Vyc2l2ZSkge1xuICAgICAgICB2YXIgY29zID0gTWF0aC5jb3Mocm90YXRpb24pLFxuICAgICAgICAgICAgc2luID0gTWF0aC5zaW4ocm90YXRpb24pLFxuICAgICAgICAgICAgYm9kaWVzID0gcmVjdXJzaXZlID8gQ29tcG9zaXRlLmFsbEJvZGllcyhjb21wb3NpdGUpIDogY29tcG9zaXRlLmJvZGllcztcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGJvZHkgPSBib2RpZXNbaV0sXG4gICAgICAgICAgICAgICAgZHggPSBib2R5LnBvc2l0aW9uLnggLSBwb2ludC54LFxuICAgICAgICAgICAgICAgIGR5ID0gYm9keS5wb3NpdGlvbi55IC0gcG9pbnQueTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIEJvZHkuc2V0UG9zaXRpb24oYm9keSwge1xuICAgICAgICAgICAgICAgIHg6IHBvaW50LnggKyAoZHggKiBjb3MgLSBkeSAqIHNpbiksXG4gICAgICAgICAgICAgICAgeTogcG9pbnQueSArIChkeCAqIHNpbiArIGR5ICogY29zKVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIEJvZHkucm90YXRlKGJvZHksIHJvdGF0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIENvbXBvc2l0ZS5zZXRNb2RpZmllZChjb21wb3NpdGUsIHRydWUsIHRydWUsIGZhbHNlKTtcblxuICAgICAgICByZXR1cm4gY29tcG9zaXRlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTY2FsZXMgYWxsIGNoaWxkcmVuIGluIHRoZSBjb21wb3NpdGUsIGluY2x1ZGluZyB1cGRhdGluZyBwaHlzaWNhbCBwcm9wZXJ0aWVzIChtYXNzLCBhcmVhLCBheGVzLCBpbmVydGlhKSwgZnJvbSBhIHdvcmxkLXNwYWNlIHBvaW50LlxuICAgICAqIEBtZXRob2Qgc2NhbGVcbiAgICAgKiBAcGFyYW0ge2NvbXBvc2l0ZX0gY29tcG9zaXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNjYWxlWFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzY2FsZVlcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gcG9pbnRcbiAgICAgKiBAcGFyYW0ge2Jvb2x9IFtyZWN1cnNpdmU9dHJ1ZV1cbiAgICAgKi9cbiAgICBDb21wb3NpdGUuc2NhbGUgPSBmdW5jdGlvbihjb21wb3NpdGUsIHNjYWxlWCwgc2NhbGVZLCBwb2ludCwgcmVjdXJzaXZlKSB7XG4gICAgICAgIHZhciBib2RpZXMgPSByZWN1cnNpdmUgPyBDb21wb3NpdGUuYWxsQm9kaWVzKGNvbXBvc2l0ZSkgOiBjb21wb3NpdGUuYm9kaWVzO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYm9keSA9IGJvZGllc1tpXSxcbiAgICAgICAgICAgICAgICBkeCA9IGJvZHkucG9zaXRpb24ueCAtIHBvaW50LngsXG4gICAgICAgICAgICAgICAgZHkgPSBib2R5LnBvc2l0aW9uLnkgLSBwb2ludC55O1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgQm9keS5zZXRQb3NpdGlvbihib2R5LCB7XG4gICAgICAgICAgICAgICAgeDogcG9pbnQueCArIGR4ICogc2NhbGVYLFxuICAgICAgICAgICAgICAgIHk6IHBvaW50LnkgKyBkeSAqIHNjYWxlWVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIEJvZHkuc2NhbGUoYm9keSwgc2NhbGVYLCBzY2FsZVkpO1xuICAgICAgICB9XG5cbiAgICAgICAgQ29tcG9zaXRlLnNldE1vZGlmaWVkKGNvbXBvc2l0ZSwgdHJ1ZSwgdHJ1ZSwgZmFsc2UpO1xuXG4gICAgICAgIHJldHVybiBjb21wb3NpdGU7XG4gICAgfTtcblxuICAgIC8qXG4gICAgKlxuICAgICogIEV2ZW50cyBEb2N1bWVudGF0aW9uXG4gICAgKlxuICAgICovXG5cbiAgICAvKipcbiAgICAqIEZpcmVkIHdoZW4gYSBjYWxsIHRvIGBDb21wb3NpdGUuYWRkYCBpcyBtYWRlLCBiZWZvcmUgb2JqZWN0cyBoYXZlIGJlZW4gYWRkZWQuXG4gICAgKlxuICAgICogQGV2ZW50IGJlZm9yZUFkZFxuICAgICogQHBhcmFtIHt9IGV2ZW50IEFuIGV2ZW50IG9iamVjdFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm9iamVjdCBUaGUgb2JqZWN0KHMpIHRvIGJlIGFkZGVkIChtYXkgYmUgYSBzaW5nbGUgYm9keSwgY29uc3RyYWludCwgY29tcG9zaXRlIG9yIGEgbWl4ZWQgYXJyYXkgb2YgdGhlc2UpXG4gICAgKiBAcGFyYW0ge30gZXZlbnQuc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgKi9cblxuICAgIC8qKlxuICAgICogRmlyZWQgd2hlbiBhIGNhbGwgdG8gYENvbXBvc2l0ZS5hZGRgIGlzIG1hZGUsIGFmdGVyIG9iamVjdHMgaGF2ZSBiZWVuIGFkZGVkLlxuICAgICpcbiAgICAqIEBldmVudCBhZnRlckFkZFxuICAgICogQHBhcmFtIHt9IGV2ZW50IEFuIGV2ZW50IG9iamVjdFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm9iamVjdCBUaGUgb2JqZWN0KHMpIHRoYXQgaGF2ZSBiZWVuIGFkZGVkIChtYXkgYmUgYSBzaW5nbGUgYm9keSwgY29uc3RyYWludCwgY29tcG9zaXRlIG9yIGEgbWl4ZWQgYXJyYXkgb2YgdGhlc2UpXG4gICAgKiBAcGFyYW0ge30gZXZlbnQuc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgKi9cblxuICAgIC8qKlxuICAgICogRmlyZWQgd2hlbiBhIGNhbGwgdG8gYENvbXBvc2l0ZS5yZW1vdmVgIGlzIG1hZGUsIGJlZm9yZSBvYmplY3RzIGhhdmUgYmVlbiByZW1vdmVkLlxuICAgICpcbiAgICAqIEBldmVudCBiZWZvcmVSZW1vdmVcbiAgICAqIEBwYXJhbSB7fSBldmVudCBBbiBldmVudCBvYmplY3RcbiAgICAqIEBwYXJhbSB7fSBldmVudC5vYmplY3QgVGhlIG9iamVjdChzKSB0byBiZSByZW1vdmVkIChtYXkgYmUgYSBzaW5nbGUgYm9keSwgY29uc3RyYWludCwgY29tcG9zaXRlIG9yIGEgbWl4ZWQgYXJyYXkgb2YgdGhlc2UpXG4gICAgKiBAcGFyYW0ge30gZXZlbnQuc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgKi9cblxuICAgIC8qKlxuICAgICogRmlyZWQgd2hlbiBhIGNhbGwgdG8gYENvbXBvc2l0ZS5yZW1vdmVgIGlzIG1hZGUsIGFmdGVyIG9iamVjdHMgaGF2ZSBiZWVuIHJlbW92ZWQuXG4gICAgKlxuICAgICogQGV2ZW50IGFmdGVyUmVtb3ZlXG4gICAgKiBAcGFyYW0ge30gZXZlbnQgQW4gZXZlbnQgb2JqZWN0XG4gICAgKiBAcGFyYW0ge30gZXZlbnQub2JqZWN0IFRoZSBvYmplY3QocykgdGhhdCBoYXZlIGJlZW4gcmVtb3ZlZCAobWF5IGJlIGEgc2luZ2xlIGJvZHksIGNvbnN0cmFpbnQsIGNvbXBvc2l0ZSBvciBhIG1peGVkIGFycmF5IG9mIHRoZXNlKVxuICAgICogQHBhcmFtIHt9IGV2ZW50LnNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5uYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgICovXG5cbiAgICAvKlxuICAgICpcbiAgICAqICBQcm9wZXJ0aWVzIERvY3VtZW50YXRpb25cbiAgICAqXG4gICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFuIGludGVnZXIgYE51bWJlcmAgdW5pcXVlbHkgaWRlbnRpZnlpbmcgbnVtYmVyIGdlbmVyYXRlZCBpbiBgQ29tcG9zaXRlLmNyZWF0ZWAgYnkgYENvbW1vbi5uZXh0SWRgLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGlkXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBTdHJpbmdgIGRlbm90aW5nIHRoZSB0eXBlIG9mIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB0eXBlXG4gICAgICogQHR5cGUgc3RyaW5nXG4gICAgICogQGRlZmF1bHQgXCJjb21wb3NpdGVcIlxuICAgICAqIEByZWFkT25seVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gYXJiaXRyYXJ5IGBTdHJpbmdgIG5hbWUgdG8gaGVscCB0aGUgdXNlciBpZGVudGlmeSBhbmQgbWFuYWdlIGNvbXBvc2l0ZXMuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgbGFiZWxcbiAgICAgKiBAdHlwZSBzdHJpbmdcbiAgICAgKiBAZGVmYXVsdCBcIkNvbXBvc2l0ZVwiXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGZsYWcgdGhhdCBzcGVjaWZpZXMgd2hldGhlciB0aGUgY29tcG9zaXRlIGhhcyBiZWVuIG1vZGlmaWVkIGR1cmluZyB0aGUgY3VycmVudCBzdGVwLlxuICAgICAqIE1vc3QgYE1hdHRlci5Db21wb3NpdGVgIG1ldGhvZHMgd2lsbCBhdXRvbWF0aWNhbGx5IHNldCB0aGlzIGZsYWcgdG8gYHRydWVgIHRvIGluZm9ybSB0aGUgZW5naW5lIG9mIGNoYW5nZXMgdG8gYmUgaGFuZGxlZC5cbiAgICAgKiBJZiB5b3UgbmVlZCB0byBjaGFuZ2UgaXQgbWFudWFsbHksIHlvdSBzaG91bGQgdXNlIHRoZSBgQ29tcG9zaXRlLnNldE1vZGlmaWVkYCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgaXNNb2RpZmllZFxuICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogVGhlIGBDb21wb3NpdGVgIHRoYXQgaXMgdGhlIHBhcmVudCBvZiB0aGlzIGNvbXBvc2l0ZS4gSXQgaXMgYXV0b21hdGljYWxseSBtYW5hZ2VkIGJ5IHRoZSBgTWF0dGVyLkNvbXBvc2l0ZWAgbWV0aG9kcy5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBwYXJlbnRcbiAgICAgKiBAdHlwZSBjb21wb3NpdGVcbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBbiBhcnJheSBvZiBgQm9keWAgdGhhdCBhcmUgX2RpcmVjdF8gY2hpbGRyZW4gb2YgdGhpcyBjb21wb3NpdGUuXG4gICAgICogVG8gYWRkIG9yIHJlbW92ZSBib2RpZXMgeW91IHNob3VsZCB1c2UgYENvbXBvc2l0ZS5hZGRgIGFuZCBgQ29tcG9zaXRlLnJlbW92ZWAgbWV0aG9kcyByYXRoZXIgdGhhbiBkaXJlY3RseSBtb2RpZnlpbmcgdGhpcyBwcm9wZXJ0eS5cbiAgICAgKiBJZiB5b3Ugd2lzaCB0byByZWN1cnNpdmVseSBmaW5kIGFsbCBkZXNjZW5kYW50cywgeW91IHNob3VsZCB1c2UgdGhlIGBDb21wb3NpdGUuYWxsQm9kaWVzYCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgYm9kaWVzXG4gICAgICogQHR5cGUgYm9keVtdXG4gICAgICogQGRlZmF1bHQgW11cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFuIGFycmF5IG9mIGBDb25zdHJhaW50YCB0aGF0IGFyZSBfZGlyZWN0XyBjaGlsZHJlbiBvZiB0aGlzIGNvbXBvc2l0ZS5cbiAgICAgKiBUbyBhZGQgb3IgcmVtb3ZlIGNvbnN0cmFpbnRzIHlvdSBzaG91bGQgdXNlIGBDb21wb3NpdGUuYWRkYCBhbmQgYENvbXBvc2l0ZS5yZW1vdmVgIG1ldGhvZHMgcmF0aGVyIHRoYW4gZGlyZWN0bHkgbW9kaWZ5aW5nIHRoaXMgcHJvcGVydHkuXG4gICAgICogSWYgeW91IHdpc2ggdG8gcmVjdXJzaXZlbHkgZmluZCBhbGwgZGVzY2VuZGFudHMsIHlvdSBzaG91bGQgdXNlIHRoZSBgQ29tcG9zaXRlLmFsbENvbnN0cmFpbnRzYCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgY29uc3RyYWludHNcbiAgICAgKiBAdHlwZSBjb25zdHJhaW50W11cbiAgICAgKiBAZGVmYXVsdCBbXVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gYXJyYXkgb2YgYENvbXBvc2l0ZWAgdGhhdCBhcmUgX2RpcmVjdF8gY2hpbGRyZW4gb2YgdGhpcyBjb21wb3NpdGUuXG4gICAgICogVG8gYWRkIG9yIHJlbW92ZSBjb21wb3NpdGVzIHlvdSBzaG91bGQgdXNlIGBDb21wb3NpdGUuYWRkYCBhbmQgYENvbXBvc2l0ZS5yZW1vdmVgIG1ldGhvZHMgcmF0aGVyIHRoYW4gZGlyZWN0bHkgbW9kaWZ5aW5nIHRoaXMgcHJvcGVydHkuXG4gICAgICogSWYgeW91IHdpc2ggdG8gcmVjdXJzaXZlbHkgZmluZCBhbGwgZGVzY2VuZGFudHMsIHlvdSBzaG91bGQgdXNlIHRoZSBgQ29tcG9zaXRlLmFsbENvbXBvc2l0ZXNgIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBjb21wb3NpdGVzXG4gICAgICogQHR5cGUgY29tcG9zaXRlW11cbiAgICAgKiBAZGVmYXVsdCBbXVxuICAgICAqL1xuXG59KSgpO1xuXG59LHtcIi4uL2NvcmUvQ29tbW9uXCI6MTQsXCIuLi9jb3JlL0V2ZW50c1wiOjE2LFwiLi9Cb2R5XCI6MX1dLDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLldvcmxkYCBtb2R1bGUgY29udGFpbnMgbWV0aG9kcyBmb3IgY3JlYXRpbmcgYW5kIG1hbmlwdWxhdGluZyB0aGUgd29ybGQgY29tcG9zaXRlLlxuKiBBIGBNYXR0ZXIuV29ybGRgIGlzIGEgYE1hdHRlci5Db21wb3NpdGVgIGJvZHksIHdoaWNoIGlzIGEgY29sbGVjdGlvbiBvZiBgTWF0dGVyLkJvZHlgLCBgTWF0dGVyLkNvbnN0cmFpbnRgIGFuZCBvdGhlciBgTWF0dGVyLkNvbXBvc2l0ZWAuXG4qIEEgYE1hdHRlci5Xb3JsZGAgaGFzIGEgZmV3IGFkZGl0aW9uYWwgcHJvcGVydGllcyBpbmNsdWRpbmcgYGdyYXZpdHlgIGFuZCBgYm91bmRzYC5cbiogSXQgaXMgaW1wb3J0YW50IHRvIHVzZSB0aGUgZnVuY3Rpb25zIGluIHRoZSBgTWF0dGVyLkNvbXBvc2l0ZWAgbW9kdWxlIHRvIG1vZGlmeSB0aGUgd29ybGQgY29tcG9zaXRlLCByYXRoZXIgdGhhbiBkaXJlY3RseSBtb2RpZnlpbmcgaXRzIHByb3BlcnRpZXMuXG4qIFRoZXJlIGFyZSBhbHNvIGEgZmV3IG1ldGhvZHMgaGVyZSB0aGF0IGFsaWFzIHRob3NlIGluIGBNYXR0ZXIuQ29tcG9zaXRlYCBmb3IgZWFzaWVyIHJlYWRhYmlsaXR5LlxuKlxuKiBTZWUgdGhlIGluY2x1ZGVkIHVzYWdlIFtleGFtcGxlc10oaHR0cHM6Ly9naXRodWIuY29tL2xpYWJydS9tYXR0ZXItanMvdHJlZS9tYXN0ZXIvZXhhbXBsZXMpLlxuKlxuKiBAY2xhc3MgV29ybGRcbiogQGV4dGVuZHMgQ29tcG9zaXRlXG4qL1xuXG52YXIgV29ybGQgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBXb3JsZDtcblxudmFyIENvbXBvc2l0ZSA9IHJlcXVpcmUoJy4vQ29tcG9zaXRlJyk7XG52YXIgQ29uc3RyYWludCA9IHJlcXVpcmUoJy4uL2NvbnN0cmFpbnQvQ29uc3RyYWludCcpO1xudmFyIENvbW1vbiA9IHJlcXVpcmUoJy4uL2NvcmUvQ29tbW9uJyk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgd29ybGQgY29tcG9zaXRlLiBUaGUgb3B0aW9ucyBwYXJhbWV0ZXIgaXMgYW4gb2JqZWN0IHRoYXQgc3BlY2lmaWVzIGFueSBwcm9wZXJ0aWVzIHlvdSB3aXNoIHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0cy5cbiAgICAgKiBTZWUgdGhlIHByb3BlcnRpZXMgc2VjdGlvbiBiZWxvdyBmb3IgZGV0YWlsZWQgaW5mb3JtYXRpb24gb24gd2hhdCB5b3UgY2FuIHBhc3MgdmlhIHRoZSBgb3B0aW9uc2Agb2JqZWN0LlxuICAgICAqIEBtZXRob2QgY3JlYXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHt9IG9wdGlvbnNcbiAgICAgKiBAcmV0dXJuIHt3b3JsZH0gQSBuZXcgd29ybGRcbiAgICAgKi9cbiAgICBXb3JsZC5jcmVhdGUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIHZhciBjb21wb3NpdGUgPSBDb21wb3NpdGUuY3JlYXRlKCk7XG5cbiAgICAgICAgdmFyIGRlZmF1bHRzID0ge1xuICAgICAgICAgICAgbGFiZWw6ICdXb3JsZCcsXG4gICAgICAgICAgICBncmF2aXR5OiB7XG4gICAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgICB5OiAxLFxuICAgICAgICAgICAgICAgIHNjYWxlOiAwLjAwMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJvdW5kczogeyBcbiAgICAgICAgICAgICAgICBtaW46IHsgeDogLUluZmluaXR5LCB5OiAtSW5maW5pdHkgfSwgXG4gICAgICAgICAgICAgICAgbWF4OiB7IHg6IEluZmluaXR5LCB5OiBJbmZpbml0eSB9IFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIENvbW1vbi5leHRlbmQoY29tcG9zaXRlLCBkZWZhdWx0cywgb3B0aW9ucyk7XG4gICAgfTtcblxuICAgIC8qXG4gICAgKlxuICAgICogIFByb3BlcnRpZXMgRG9jdW1lbnRhdGlvblxuICAgICpcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgICogVGhlIGdyYXZpdHkgdG8gYXBwbHkgb24gdGhlIHdvcmxkLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGdyYXZpdHlcbiAgICAgKiBAdHlwZSBvYmplY3RcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSBncmF2aXR5IHggY29tcG9uZW50LlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGdyYXZpdHkueFxuICAgICAqIEB0eXBlIG9iamVjdFxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSBncmF2aXR5IHkgY29tcG9uZW50LlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGdyYXZpdHkueVxuICAgICAqIEB0eXBlIG9iamVjdFxuICAgICAqIEBkZWZhdWx0IDFcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSBncmF2aXR5IHNjYWxlIGZhY3Rvci5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBncmF2aXR5LnNjYWxlXG4gICAgICogQHR5cGUgb2JqZWN0XG4gICAgICogQGRlZmF1bHQgMC4wMDFcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYEJvdW5kc2Agb2JqZWN0IHRoYXQgZGVmaW5lcyB0aGUgd29ybGQgYm91bmRzIGZvciBjb2xsaXNpb24gZGV0ZWN0aW9uLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGJvdW5kc1xuICAgICAqIEB0eXBlIGJvdW5kc1xuICAgICAqIEBkZWZhdWx0IHsgbWluOiB7IHg6IC1JbmZpbml0eSwgeTogLUluZmluaXR5IH0sIG1heDogeyB4OiBJbmZpbml0eSwgeTogSW5maW5pdHkgfSB9XG4gICAgICovXG5cbiAgICAvLyBXb3JsZCBpcyBhIENvbXBvc2l0ZSBib2R5XG4gICAgLy8gc2VlIHNyYy9tb2R1bGUvT3V0cm8uanMgZm9yIHRoZXNlIGFsaWFzZXM6XG4gICAgXG4gICAgLyoqXG4gICAgICogQW4gYWxpYXMgZm9yIENvbXBvc2l0ZS5jbGVhclxuICAgICAqIEBtZXRob2QgY2xlYXJcbiAgICAgKiBAcGFyYW0ge3dvcmxkfSB3b3JsZFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0ga2VlcFN0YXRpY1xuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gYWxpYXMgZm9yIENvbXBvc2l0ZS5hZGRcbiAgICAgKiBAbWV0aG9kIGFkZENvbXBvc2l0ZVxuICAgICAqIEBwYXJhbSB7d29ybGR9IHdvcmxkXG4gICAgICogQHBhcmFtIHtjb21wb3NpdGV9IGNvbXBvc2l0ZVxuICAgICAqIEByZXR1cm4ge3dvcmxkfSBUaGUgb3JpZ2luYWwgd29ybGQgd2l0aCB0aGUgb2JqZWN0cyBmcm9tIGNvbXBvc2l0ZSBhZGRlZFxuICAgICAqL1xuICAgIFxuICAgICAvKipcbiAgICAgICogQW4gYWxpYXMgZm9yIENvbXBvc2l0ZS5hZGRCb2R5XG4gICAgICAqIEBtZXRob2QgYWRkQm9keVxuICAgICAgKiBAcGFyYW0ge3dvcmxkfSB3b3JsZFxuICAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlcbiAgICAgICogQHJldHVybiB7d29ybGR9IFRoZSBvcmlnaW5hbCB3b3JsZCB3aXRoIHRoZSBib2R5IGFkZGVkXG4gICAgICAqL1xuXG4gICAgIC8qKlxuICAgICAgKiBBbiBhbGlhcyBmb3IgQ29tcG9zaXRlLmFkZENvbnN0cmFpbnRcbiAgICAgICogQG1ldGhvZCBhZGRDb25zdHJhaW50XG4gICAgICAqIEBwYXJhbSB7d29ybGR9IHdvcmxkXG4gICAgICAqIEBwYXJhbSB7Y29uc3RyYWludH0gY29uc3RyYWludFxuICAgICAgKiBAcmV0dXJuIHt3b3JsZH0gVGhlIG9yaWdpbmFsIHdvcmxkIHdpdGggdGhlIGNvbnN0cmFpbnQgYWRkZWRcbiAgICAgICovXG5cbn0pKCk7XG5cbn0se1wiLi4vY29uc3RyYWludC9Db25zdHJhaW50XCI6MTIsXCIuLi9jb3JlL0NvbW1vblwiOjE0LFwiLi9Db21wb3NpdGVcIjoyfV0sNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiogVGhlIGBNYXR0ZXIuQ29udGFjdGAgbW9kdWxlIGNvbnRhaW5zIG1ldGhvZHMgZm9yIGNyZWF0aW5nIGFuZCBtYW5pcHVsYXRpbmcgY29sbGlzaW9uIGNvbnRhY3RzLlxuKlxuKiBAY2xhc3MgQ29udGFjdFxuKi9cblxudmFyIENvbnRhY3QgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBDb250YWN0O1xuXG4oZnVuY3Rpb24oKSB7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGNvbnRhY3QuXG4gICAgICogQG1ldGhvZCBjcmVhdGVcbiAgICAgKiBAcGFyYW0ge3ZlcnRleH0gdmVydGV4XG4gICAgICogQHJldHVybiB7Y29udGFjdH0gQSBuZXcgY29udGFjdFxuICAgICAqL1xuICAgIENvbnRhY3QuY3JlYXRlID0gZnVuY3Rpb24odmVydGV4KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpZDogQ29udGFjdC5pZCh2ZXJ0ZXgpLFxuICAgICAgICAgICAgdmVydGV4OiB2ZXJ0ZXgsXG4gICAgICAgICAgICBub3JtYWxJbXB1bHNlOiAwLFxuICAgICAgICAgICAgdGFuZ2VudEltcHVsc2U6IDBcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIFxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIGNvbnRhY3QgaWQuXG4gICAgICogQG1ldGhvZCBpZFxuICAgICAqIEBwYXJhbSB7dmVydGV4fSB2ZXJ0ZXhcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFVuaXF1ZSBjb250YWN0SURcbiAgICAgKi9cbiAgICBDb250YWN0LmlkID0gZnVuY3Rpb24odmVydGV4KSB7XG4gICAgICAgIHJldHVybiB2ZXJ0ZXguYm9keS5pZCArICdfJyArIHZlcnRleC5pbmRleDtcbiAgICB9O1xuXG59KSgpO1xuXG59LHt9XSw1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuKiBUaGUgYE1hdHRlci5EZXRlY3RvcmAgbW9kdWxlIGNvbnRhaW5zIG1ldGhvZHMgZm9yIGRldGVjdGluZyBjb2xsaXNpb25zIGdpdmVuIGEgc2V0IG9mIHBhaXJzLlxuKlxuKiBAY2xhc3MgRGV0ZWN0b3JcbiovXG5cbi8vIFRPRE86IHNwZWN1bGF0aXZlIGNvbnRhY3RzXG5cbnZhciBEZXRlY3RvciA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IERldGVjdG9yO1xuXG52YXIgU0FUID0gcmVxdWlyZSgnLi9TQVQnKTtcbnZhciBQYWlyID0gcmVxdWlyZSgnLi9QYWlyJyk7XG52YXIgQm91bmRzID0gcmVxdWlyZSgnLi4vZ2VvbWV0cnkvQm91bmRzJyk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIEZpbmRzIGFsbCBjb2xsaXNpb25zIGdpdmVuIGEgbGlzdCBvZiBwYWlycy5cbiAgICAgKiBAbWV0aG9kIGNvbGxpc2lvbnNcbiAgICAgKiBAcGFyYW0ge3BhaXJbXX0gYnJvYWRwaGFzZVBhaXJzXG4gICAgICogQHBhcmFtIHtlbmdpbmV9IGVuZ2luZVxuICAgICAqIEByZXR1cm4ge2FycmF5fSBjb2xsaXNpb25zXG4gICAgICovXG4gICAgRGV0ZWN0b3IuY29sbGlzaW9ucyA9IGZ1bmN0aW9uKGJyb2FkcGhhc2VQYWlycywgZW5naW5lKSB7XG4gICAgICAgIHZhciBjb2xsaXNpb25zID0gW10sXG4gICAgICAgICAgICBwYWlyc1RhYmxlID0gZW5naW5lLnBhaXJzLnRhYmxlO1xuXG4gICAgICAgIFxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJyb2FkcGhhc2VQYWlycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGJvZHlBID0gYnJvYWRwaGFzZVBhaXJzW2ldWzBdLCBcbiAgICAgICAgICAgICAgICBib2R5QiA9IGJyb2FkcGhhc2VQYWlyc1tpXVsxXTtcblxuICAgICAgICAgICAgaWYgKChib2R5QS5pc1N0YXRpYyB8fCBib2R5QS5pc1NsZWVwaW5nKSAmJiAoYm9keUIuaXNTdGF0aWMgfHwgYm9keUIuaXNTbGVlcGluZykpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICghRGV0ZWN0b3IuY2FuQ29sbGlkZShib2R5QS5jb2xsaXNpb25GaWx0ZXIsIGJvZHlCLmNvbGxpc2lvbkZpbHRlcikpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG5cblxuICAgICAgICAgICAgLy8gbWlkIHBoYXNlXG4gICAgICAgICAgICBpZiAoQm91bmRzLm92ZXJsYXBzKGJvZHlBLmJvdW5kcywgYm9keUIuYm91bmRzKSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSBib2R5QS5wYXJ0cy5sZW5ndGggPiAxID8gMSA6IDA7IGogPCBib2R5QS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGFydEEgPSBib2R5QS5wYXJ0c1tqXTtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrID0gYm9keUIucGFydHMubGVuZ3RoID4gMSA/IDEgOiAwOyBrIDwgYm9keUIucGFydHMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJ0QiA9IGJvZHlCLnBhcnRzW2tdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHBhcnRBID09PSBib2R5QSAmJiBwYXJ0QiA9PT0gYm9keUIpIHx8IEJvdW5kcy5vdmVybGFwcyhwYXJ0QS5ib3VuZHMsIHBhcnRCLmJvdW5kcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmaW5kIGEgcHJldmlvdXMgY29sbGlzaW9uIHdlIGNvdWxkIHJldXNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhaXJJZCA9IFBhaXIuaWQocGFydEEsIHBhcnRCKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFpciA9IHBhaXJzVGFibGVbcGFpcklkXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNDb2xsaXNpb247XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFpciAmJiBwYWlyLmlzQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzQ29sbGlzaW9uID0gcGFpci5jb2xsaXNpb247XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNDb2xsaXNpb24gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5hcnJvdyBwaGFzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb2xsaXNpb24gPSBTQVQuY29sbGlkZXMocGFydEEsIHBhcnRCLCBwcmV2aW91c0NvbGxpc2lvbik7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb2xsaXNpb24uY29sbGlkZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sbGlzaW9ucy5wdXNoKGNvbGxpc2lvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbGxpc2lvbnM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYHRydWVgIGlmIGJvdGggc3VwcGxpZWQgY29sbGlzaW9uIGZpbHRlcnMgd2lsbCBhbGxvdyBhIGNvbGxpc2lvbiB0byBvY2N1ci5cbiAgICAgKiBTZWUgYGJvZHkuY29sbGlzaW9uRmlsdGVyYCBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICAgKiBAbWV0aG9kIGNhbkNvbGxpZGVcbiAgICAgKiBAcGFyYW0ge30gZmlsdGVyQVxuICAgICAqIEBwYXJhbSB7fSBmaWx0ZXJCXG4gICAgICogQHJldHVybiB7Ym9vbH0gYHRydWVgIGlmIGNvbGxpc2lvbiBjYW4gb2NjdXJcbiAgICAgKi9cbiAgICBEZXRlY3Rvci5jYW5Db2xsaWRlID0gZnVuY3Rpb24oZmlsdGVyQSwgZmlsdGVyQikge1xuICAgICAgICBpZiAoZmlsdGVyQS5ncm91cCA9PT0gZmlsdGVyQi5ncm91cCAmJiBmaWx0ZXJBLmdyb3VwICE9PSAwKVxuICAgICAgICAgICAgcmV0dXJuIGZpbHRlckEuZ3JvdXAgPiAwO1xuXG4gICAgICAgIHJldHVybiAoZmlsdGVyQS5tYXNrICYgZmlsdGVyQi5jYXRlZ29yeSkgIT09IDAgJiYgKGZpbHRlckIubWFzayAmIGZpbHRlckEuY2F0ZWdvcnkpICE9PSAwO1xuICAgIH07XG5cbn0pKCk7XG5cbn0se1wiLi4vZ2VvbWV0cnkvQm91bmRzXCI6MjQsXCIuL1BhaXJcIjo3LFwiLi9TQVRcIjoxMX1dLDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLkdyaWRgIG1vZHVsZSBjb250YWlucyBtZXRob2RzIGZvciBjcmVhdGluZyBhbmQgbWFuaXB1bGF0aW5nIGNvbGxpc2lvbiBicm9hZHBoYXNlIGdyaWQgc3RydWN0dXJlcy5cbipcbiogQGNsYXNzIEdyaWRcbiovXG5cbnZhciBHcmlkID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gR3JpZDtcblxudmFyIFBhaXIgPSByZXF1aXJlKCcuL1BhaXInKTtcbnZhciBEZXRlY3RvciA9IHJlcXVpcmUoJy4vRGV0ZWN0b3InKTtcbnZhciBDb21tb24gPSByZXF1aXJlKCcuLi9jb3JlL0NvbW1vbicpO1xuXG4oZnVuY3Rpb24oKSB7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGdyaWQuXG4gICAgICogQG1ldGhvZCBjcmVhdGVcbiAgICAgKiBAcGFyYW0ge30gb3B0aW9uc1xuICAgICAqIEByZXR1cm4ge2dyaWR9IEEgbmV3IGdyaWRcbiAgICAgKi9cbiAgICBHcmlkLmNyZWF0ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGRlZmF1bHRzID0ge1xuICAgICAgICAgICAgY29udHJvbGxlcjogR3JpZCxcbiAgICAgICAgICAgIGRldGVjdG9yOiBEZXRlY3Rvci5jb2xsaXNpb25zLFxuICAgICAgICAgICAgYnVja2V0czoge30sXG4gICAgICAgICAgICBwYWlyczoge30sXG4gICAgICAgICAgICBwYWlyc0xpc3Q6IFtdLFxuICAgICAgICAgICAgYnVja2V0V2lkdGg6IDQ4LFxuICAgICAgICAgICAgYnVja2V0SGVpZ2h0OiA0OFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBDb21tb24uZXh0ZW5kKGRlZmF1bHRzLCBvcHRpb25zKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIHdpZHRoIG9mIGEgc2luZ2xlIGdyaWQgYnVja2V0LlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGJ1Y2tldFdpZHRoXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgNDhcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSBoZWlnaHQgb2YgYSBzaW5nbGUgZ3JpZCBidWNrZXQuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgYnVja2V0SGVpZ2h0XG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgNDhcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGdyaWQuXG4gICAgICogQG1ldGhvZCB1cGRhdGVcbiAgICAgKiBAcGFyYW0ge2dyaWR9IGdyaWRcbiAgICAgKiBAcGFyYW0ge2JvZHlbXX0gYm9kaWVzXG4gICAgICogQHBhcmFtIHtlbmdpbmV9IGVuZ2luZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gZm9yY2VVcGRhdGVcbiAgICAgKi9cbiAgICBHcmlkLnVwZGF0ZSA9IGZ1bmN0aW9uKGdyaWQsIGJvZGllcywgZW5naW5lLCBmb3JjZVVwZGF0ZSkge1xuICAgICAgICB2YXIgaSwgY29sLCByb3csXG4gICAgICAgICAgICB3b3JsZCA9IGVuZ2luZS53b3JsZCxcbiAgICAgICAgICAgIGJ1Y2tldHMgPSBncmlkLmJ1Y2tldHMsXG4gICAgICAgICAgICBidWNrZXQsXG4gICAgICAgICAgICBidWNrZXRJZCxcbiAgICAgICAgICAgIGdyaWRDaGFuZ2VkID0gZmFsc2U7XG5cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYm9keSA9IGJvZGllc1tpXTtcblxuICAgICAgICAgICAgaWYgKGJvZHkuaXNTbGVlcGluZyAmJiAhZm9yY2VVcGRhdGUpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgIC8vIGRvbid0IHVwZGF0ZSBvdXQgb2Ygd29ybGQgYm9kaWVzXG4gICAgICAgICAgICBpZiAoYm9keS5ib3VuZHMubWF4LnggPCB3b3JsZC5ib3VuZHMubWluLnggfHwgYm9keS5ib3VuZHMubWluLnggPiB3b3JsZC5ib3VuZHMubWF4LnhcbiAgICAgICAgICAgICAgICB8fCBib2R5LmJvdW5kcy5tYXgueSA8IHdvcmxkLmJvdW5kcy5taW4ueSB8fCBib2R5LmJvdW5kcy5taW4ueSA+IHdvcmxkLmJvdW5kcy5tYXgueSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgdmFyIG5ld1JlZ2lvbiA9IF9nZXRSZWdpb24oZ3JpZCwgYm9keSk7XG5cbiAgICAgICAgICAgIC8vIGlmIHRoZSBib2R5IGhhcyBjaGFuZ2VkIGdyaWQgcmVnaW9uXG4gICAgICAgICAgICBpZiAoIWJvZHkucmVnaW9uIHx8IG5ld1JlZ2lvbi5pZCAhPT0gYm9keS5yZWdpb24uaWQgfHwgZm9yY2VVcGRhdGUpIHtcblxuXG4gICAgICAgICAgICAgICAgaWYgKCFib2R5LnJlZ2lvbiB8fCBmb3JjZVVwZGF0ZSlcbiAgICAgICAgICAgICAgICAgICAgYm9keS5yZWdpb24gPSBuZXdSZWdpb247XG5cbiAgICAgICAgICAgICAgICB2YXIgdW5pb24gPSBfcmVnaW9uVW5pb24obmV3UmVnaW9uLCBib2R5LnJlZ2lvbik7XG5cbiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgZ3JpZCBidWNrZXRzIGFmZmVjdGVkIGJ5IHJlZ2lvbiBjaGFuZ2VcbiAgICAgICAgICAgICAgICAvLyBpdGVyYXRlIG92ZXIgdGhlIHVuaW9uIG9mIGJvdGggcmVnaW9uc1xuICAgICAgICAgICAgICAgIGZvciAoY29sID0gdW5pb24uc3RhcnRDb2w7IGNvbCA8PSB1bmlvbi5lbmRDb2w7IGNvbCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAocm93ID0gdW5pb24uc3RhcnRSb3c7IHJvdyA8PSB1bmlvbi5lbmRSb3c7IHJvdysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBidWNrZXRJZCA9IF9nZXRCdWNrZXRJZChjb2wsIHJvdyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBidWNrZXQgPSBidWNrZXRzW2J1Y2tldElkXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzSW5zaWRlTmV3UmVnaW9uID0gKGNvbCA+PSBuZXdSZWdpb24uc3RhcnRDb2wgJiYgY29sIDw9IG5ld1JlZ2lvbi5lbmRDb2xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIHJvdyA+PSBuZXdSZWdpb24uc3RhcnRSb3cgJiYgcm93IDw9IG5ld1JlZ2lvbi5lbmRSb3cpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNJbnNpZGVPbGRSZWdpb24gPSAoY29sID49IGJvZHkucmVnaW9uLnN0YXJ0Q29sICYmIGNvbCA8PSBib2R5LnJlZ2lvbi5lbmRDb2xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIHJvdyA+PSBib2R5LnJlZ2lvbi5zdGFydFJvdyAmJiByb3cgPD0gYm9keS5yZWdpb24uZW5kUm93KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGZyb20gb2xkIHJlZ2lvbiBidWNrZXRzXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzSW5zaWRlTmV3UmVnaW9uICYmIGlzSW5zaWRlT2xkUmVnaW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzSW5zaWRlT2xkUmVnaW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChidWNrZXQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYnVja2V0UmVtb3ZlQm9keShncmlkLCBidWNrZXQsIGJvZHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkIHRvIG5ldyByZWdpb24gYnVja2V0c1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJvZHkucmVnaW9uID09PSBuZXdSZWdpb24gfHwgKGlzSW5zaWRlTmV3UmVnaW9uICYmICFpc0luc2lkZU9sZFJlZ2lvbikgfHwgZm9yY2VVcGRhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWJ1Y2tldClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVja2V0ID0gX2NyZWF0ZUJ1Y2tldChidWNrZXRzLCBidWNrZXRJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2J1Y2tldEFkZEJvZHkoZ3JpZCwgYnVja2V0LCBib2R5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIHNldCB0aGUgbmV3IHJlZ2lvblxuICAgICAgICAgICAgICAgIGJvZHkucmVnaW9uID0gbmV3UmVnaW9uO1xuXG4gICAgICAgICAgICAgICAgLy8gZmxhZyBjaGFuZ2VzIHNvIHdlIGNhbiB1cGRhdGUgcGFpcnNcbiAgICAgICAgICAgICAgICBncmlkQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyB1cGRhdGUgcGFpcnMgbGlzdCBvbmx5IGlmIHBhaXJzIGNoYW5nZWQgKGkuZS4gYSBib2R5IGNoYW5nZWQgcmVnaW9uKVxuICAgICAgICBpZiAoZ3JpZENoYW5nZWQpXG4gICAgICAgICAgICBncmlkLnBhaXJzTGlzdCA9IF9jcmVhdGVBY3RpdmVQYWlyc0xpc3QoZ3JpZCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENsZWFycyB0aGUgZ3JpZC5cbiAgICAgKiBAbWV0aG9kIGNsZWFyXG4gICAgICogQHBhcmFtIHtncmlkfSBncmlkXG4gICAgICovXG4gICAgR3JpZC5jbGVhciA9IGZ1bmN0aW9uKGdyaWQpIHtcbiAgICAgICAgZ3JpZC5idWNrZXRzID0ge307XG4gICAgICAgIGdyaWQucGFpcnMgPSB7fTtcbiAgICAgICAgZ3JpZC5wYWlyc0xpc3QgPSBbXTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRmluZHMgdGhlIHVuaW9uIG9mIHR3byByZWdpb25zLlxuICAgICAqIEBtZXRob2QgX3JlZ2lvblVuaW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge30gcmVnaW9uQVxuICAgICAqIEBwYXJhbSB7fSByZWdpb25CXG4gICAgICogQHJldHVybiB7fSByZWdpb25cbiAgICAgKi9cbiAgICB2YXIgX3JlZ2lvblVuaW9uID0gZnVuY3Rpb24ocmVnaW9uQSwgcmVnaW9uQikge1xuICAgICAgICB2YXIgc3RhcnRDb2wgPSBNYXRoLm1pbihyZWdpb25BLnN0YXJ0Q29sLCByZWdpb25CLnN0YXJ0Q29sKSxcbiAgICAgICAgICAgIGVuZENvbCA9IE1hdGgubWF4KHJlZ2lvbkEuZW5kQ29sLCByZWdpb25CLmVuZENvbCksXG4gICAgICAgICAgICBzdGFydFJvdyA9IE1hdGgubWluKHJlZ2lvbkEuc3RhcnRSb3csIHJlZ2lvbkIuc3RhcnRSb3cpLFxuICAgICAgICAgICAgZW5kUm93ID0gTWF0aC5tYXgocmVnaW9uQS5lbmRSb3csIHJlZ2lvbkIuZW5kUm93KTtcblxuICAgICAgICByZXR1cm4gX2NyZWF0ZVJlZ2lvbihzdGFydENvbCwgZW5kQ29sLCBzdGFydFJvdywgZW5kUm93KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcmVnaW9uIGEgZ2l2ZW4gYm9keSBmYWxscyBpbiBmb3IgYSBnaXZlbiBncmlkLlxuICAgICAqIEBtZXRob2QgX2dldFJlZ2lvblxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHt9IGdyaWRcbiAgICAgKiBAcGFyYW0ge30gYm9keVxuICAgICAqIEByZXR1cm4ge30gcmVnaW9uXG4gICAgICovXG4gICAgdmFyIF9nZXRSZWdpb24gPSBmdW5jdGlvbihncmlkLCBib2R5KSB7XG4gICAgICAgIHZhciBib3VuZHMgPSBib2R5LmJvdW5kcyxcbiAgICAgICAgICAgIHN0YXJ0Q29sID0gTWF0aC5mbG9vcihib3VuZHMubWluLnggLyBncmlkLmJ1Y2tldFdpZHRoKSxcbiAgICAgICAgICAgIGVuZENvbCA9IE1hdGguZmxvb3IoYm91bmRzLm1heC54IC8gZ3JpZC5idWNrZXRXaWR0aCksXG4gICAgICAgICAgICBzdGFydFJvdyA9IE1hdGguZmxvb3IoYm91bmRzLm1pbi55IC8gZ3JpZC5idWNrZXRIZWlnaHQpLFxuICAgICAgICAgICAgZW5kUm93ID0gTWF0aC5mbG9vcihib3VuZHMubWF4LnkgLyBncmlkLmJ1Y2tldEhlaWdodCk7XG5cbiAgICAgICAgcmV0dXJuIF9jcmVhdGVSZWdpb24oc3RhcnRDb2wsIGVuZENvbCwgc3RhcnRSb3csIGVuZFJvdyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSByZWdpb24uXG4gICAgICogQG1ldGhvZCBfY3JlYXRlUmVnaW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge30gc3RhcnRDb2xcbiAgICAgKiBAcGFyYW0ge30gZW5kQ29sXG4gICAgICogQHBhcmFtIHt9IHN0YXJ0Um93XG4gICAgICogQHBhcmFtIHt9IGVuZFJvd1xuICAgICAqIEByZXR1cm4ge30gcmVnaW9uXG4gICAgICovXG4gICAgdmFyIF9jcmVhdGVSZWdpb24gPSBmdW5jdGlvbihzdGFydENvbCwgZW5kQ29sLCBzdGFydFJvdywgZW5kUm93KSB7XG4gICAgICAgIHJldHVybiB7IFxuICAgICAgICAgICAgaWQ6IHN0YXJ0Q29sICsgJywnICsgZW5kQ29sICsgJywnICsgc3RhcnRSb3cgKyAnLCcgKyBlbmRSb3csXG4gICAgICAgICAgICBzdGFydENvbDogc3RhcnRDb2wsIFxuICAgICAgICAgICAgZW5kQ29sOiBlbmRDb2wsIFxuICAgICAgICAgICAgc3RhcnRSb3c6IHN0YXJ0Um93LCBcbiAgICAgICAgICAgIGVuZFJvdzogZW5kUm93IFxuICAgICAgICB9O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBidWNrZXQgaWQgYXQgdGhlIGdpdmVuIHBvc2l0aW9uLlxuICAgICAqIEBtZXRob2QgX2dldEJ1Y2tldElkXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge30gY29sdW1uXG4gICAgICogQHBhcmFtIHt9IHJvd1xuICAgICAqIEByZXR1cm4ge3N0cmluZ30gYnVja2V0IGlkXG4gICAgICovXG4gICAgdmFyIF9nZXRCdWNrZXRJZCA9IGZ1bmN0aW9uKGNvbHVtbiwgcm93KSB7XG4gICAgICAgIHJldHVybiBjb2x1bW4gKyAnLCcgKyByb3c7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBidWNrZXQuXG4gICAgICogQG1ldGhvZCBfY3JlYXRlQnVja2V0XG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge30gYnVja2V0c1xuICAgICAqIEBwYXJhbSB7fSBidWNrZXRJZFxuICAgICAqIEByZXR1cm4ge30gYnVja2V0XG4gICAgICovXG4gICAgdmFyIF9jcmVhdGVCdWNrZXQgPSBmdW5jdGlvbihidWNrZXRzLCBidWNrZXRJZCkge1xuICAgICAgICB2YXIgYnVja2V0ID0gYnVja2V0c1tidWNrZXRJZF0gPSBbXTtcbiAgICAgICAgcmV0dXJuIGJ1Y2tldDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWRkcyBhIGJvZHkgdG8gYSBidWNrZXQuXG4gICAgICogQG1ldGhvZCBfYnVja2V0QWRkQm9keVxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHt9IGdyaWRcbiAgICAgKiBAcGFyYW0ge30gYnVja2V0XG4gICAgICogQHBhcmFtIHt9IGJvZHlcbiAgICAgKi9cbiAgICB2YXIgX2J1Y2tldEFkZEJvZHkgPSBmdW5jdGlvbihncmlkLCBidWNrZXQsIGJvZHkpIHtcbiAgICAgICAgLy8gYWRkIG5ldyBwYWlyc1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ1Y2tldC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGJvZHlCID0gYnVja2V0W2ldO1xuXG4gICAgICAgICAgICBpZiAoYm9keS5pZCA9PT0gYm9keUIuaWQgfHwgKGJvZHkuaXNTdGF0aWMgJiYgYm9keUIuaXNTdGF0aWMpKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAvLyBrZWVwIHRyYWNrIG9mIHRoZSBudW1iZXIgb2YgYnVja2V0cyB0aGUgcGFpciBleGlzdHMgaW5cbiAgICAgICAgICAgIC8vIGltcG9ydGFudCBmb3IgR3JpZC51cGRhdGUgdG8gd29ya1xuICAgICAgICAgICAgdmFyIHBhaXJJZCA9IFBhaXIuaWQoYm9keSwgYm9keUIpLFxuICAgICAgICAgICAgICAgIHBhaXIgPSBncmlkLnBhaXJzW3BhaXJJZF07XG5cbiAgICAgICAgICAgIGlmIChwYWlyKSB7XG4gICAgICAgICAgICAgICAgcGFpclsyXSArPSAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBncmlkLnBhaXJzW3BhaXJJZF0gPSBbYm9keSwgYm9keUIsIDFdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gYWRkIHRvIGJvZGllcyAoYWZ0ZXIgcGFpcnMsIG90aGVyd2lzZSBwYWlycyB3aXRoIHNlbGYpXG4gICAgICAgIGJ1Y2tldC5wdXNoKGJvZHkpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgYm9keSBmcm9tIGEgYnVja2V0LlxuICAgICAqIEBtZXRob2QgX2J1Y2tldFJlbW92ZUJvZHlcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7fSBncmlkXG4gICAgICogQHBhcmFtIHt9IGJ1Y2tldFxuICAgICAqIEBwYXJhbSB7fSBib2R5XG4gICAgICovXG4gICAgdmFyIF9idWNrZXRSZW1vdmVCb2R5ID0gZnVuY3Rpb24oZ3JpZCwgYnVja2V0LCBib2R5KSB7XG4gICAgICAgIC8vIHJlbW92ZSBmcm9tIGJ1Y2tldFxuICAgICAgICBidWNrZXQuc3BsaWNlKENvbW1vbi5pbmRleE9mKGJ1Y2tldCwgYm9keSksIDEpO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBwYWlyIGNvdW50c1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ1Y2tldC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgLy8ga2VlcCB0cmFjayBvZiB0aGUgbnVtYmVyIG9mIGJ1Y2tldHMgdGhlIHBhaXIgZXhpc3RzIGluXG4gICAgICAgICAgICAvLyBpbXBvcnRhbnQgZm9yIF9jcmVhdGVBY3RpdmVQYWlyc0xpc3QgdG8gd29ya1xuICAgICAgICAgICAgdmFyIGJvZHlCID0gYnVja2V0W2ldLFxuICAgICAgICAgICAgICAgIHBhaXJJZCA9IFBhaXIuaWQoYm9keSwgYm9keUIpLFxuICAgICAgICAgICAgICAgIHBhaXIgPSBncmlkLnBhaXJzW3BhaXJJZF07XG5cbiAgICAgICAgICAgIGlmIChwYWlyKVxuICAgICAgICAgICAgICAgIHBhaXJbMl0gLT0gMTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSBsaXN0IG9mIHRoZSBhY3RpdmUgcGFpcnMgaW4gdGhlIGdyaWQuXG4gICAgICogQG1ldGhvZCBfY3JlYXRlQWN0aXZlUGFpcnNMaXN0XG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge30gZ3JpZFxuICAgICAqIEByZXR1cm4gW10gcGFpcnNcbiAgICAgKi9cbiAgICB2YXIgX2NyZWF0ZUFjdGl2ZVBhaXJzTGlzdCA9IGZ1bmN0aW9uKGdyaWQpIHtcbiAgICAgICAgdmFyIHBhaXJLZXlzLFxuICAgICAgICAgICAgcGFpcixcbiAgICAgICAgICAgIHBhaXJzID0gW107XG5cbiAgICAgICAgLy8gZ3JpZC5wYWlycyBpcyB1c2VkIGFzIGEgaGFzaG1hcFxuICAgICAgICBwYWlyS2V5cyA9IENvbW1vbi5rZXlzKGdyaWQucGFpcnMpO1xuXG4gICAgICAgIC8vIGl0ZXJhdGUgb3ZlciBncmlkLnBhaXJzXG4gICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgcGFpcktleXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgIHBhaXIgPSBncmlkLnBhaXJzW3BhaXJLZXlzW2tdXTtcblxuICAgICAgICAgICAgLy8gaWYgcGFpciBleGlzdHMgaW4gYXQgbGVhc3Qgb25lIGJ1Y2tldFxuICAgICAgICAgICAgLy8gaXQgaXMgYSBwYWlyIHRoYXQgbmVlZHMgZnVydGhlciBjb2xsaXNpb24gdGVzdGluZyBzbyBwdXNoIGl0XG4gICAgICAgICAgICBpZiAocGFpclsyXSA+IDApIHtcbiAgICAgICAgICAgICAgICBwYWlycy5wdXNoKHBhaXIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgZ3JpZC5wYWlyc1twYWlyS2V5c1trXV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGFpcnM7XG4gICAgfTtcbiAgICBcbn0pKCk7XG5cbn0se1wiLi4vY29yZS9Db21tb25cIjoxNCxcIi4vRGV0ZWN0b3JcIjo1LFwiLi9QYWlyXCI6N31dLDc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLlBhaXJgIG1vZHVsZSBjb250YWlucyBtZXRob2RzIGZvciBjcmVhdGluZyBhbmQgbWFuaXB1bGF0aW5nIGNvbGxpc2lvbiBwYWlycy5cbipcbiogQGNsYXNzIFBhaXJcbiovXG5cbnZhciBQYWlyID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gUGFpcjtcblxudmFyIENvbnRhY3QgPSByZXF1aXJlKCcuL0NvbnRhY3QnKTtcblxuKGZ1bmN0aW9uKCkge1xuICAgIFxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBwYWlyLlxuICAgICAqIEBtZXRob2QgY3JlYXRlXG4gICAgICogQHBhcmFtIHtjb2xsaXNpb259IGNvbGxpc2lvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lc3RhbXBcbiAgICAgKiBAcmV0dXJuIHtwYWlyfSBBIG5ldyBwYWlyXG4gICAgICovXG4gICAgUGFpci5jcmVhdGUgPSBmdW5jdGlvbihjb2xsaXNpb24sIHRpbWVzdGFtcCkge1xuICAgICAgICB2YXIgYm9keUEgPSBjb2xsaXNpb24uYm9keUEsXG4gICAgICAgICAgICBib2R5QiA9IGNvbGxpc2lvbi5ib2R5QixcbiAgICAgICAgICAgIHBhcmVudEEgPSBjb2xsaXNpb24ucGFyZW50QSxcbiAgICAgICAgICAgIHBhcmVudEIgPSBjb2xsaXNpb24ucGFyZW50QjtcblxuICAgICAgICB2YXIgcGFpciA9IHtcbiAgICAgICAgICAgIGlkOiBQYWlyLmlkKGJvZHlBLCBib2R5QiksXG4gICAgICAgICAgICBib2R5QTogYm9keUEsXG4gICAgICAgICAgICBib2R5QjogYm9keUIsXG4gICAgICAgICAgICBjb250YWN0czoge30sXG4gICAgICAgICAgICBhY3RpdmVDb250YWN0czogW10sXG4gICAgICAgICAgICBzZXBhcmF0aW9uOiAwLFxuICAgICAgICAgICAgaXNBY3RpdmU6IHRydWUsXG4gICAgICAgICAgICBpc1NlbnNvcjogYm9keUEuaXNTZW5zb3IgfHwgYm9keUIuaXNTZW5zb3IsXG4gICAgICAgICAgICB0aW1lQ3JlYXRlZDogdGltZXN0YW1wLFxuICAgICAgICAgICAgdGltZVVwZGF0ZWQ6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgIGludmVyc2VNYXNzOiBwYXJlbnRBLmludmVyc2VNYXNzICsgcGFyZW50Qi5pbnZlcnNlTWFzcyxcbiAgICAgICAgICAgIGZyaWN0aW9uOiBNYXRoLm1pbihwYXJlbnRBLmZyaWN0aW9uLCBwYXJlbnRCLmZyaWN0aW9uKSxcbiAgICAgICAgICAgIGZyaWN0aW9uU3RhdGljOiBNYXRoLm1heChwYXJlbnRBLmZyaWN0aW9uU3RhdGljLCBwYXJlbnRCLmZyaWN0aW9uU3RhdGljKSxcbiAgICAgICAgICAgIHJlc3RpdHV0aW9uOiBNYXRoLm1heChwYXJlbnRBLnJlc3RpdHV0aW9uLCBwYXJlbnRCLnJlc3RpdHV0aW9uKSxcbiAgICAgICAgICAgIHNsb3A6IE1hdGgubWF4KHBhcmVudEEuc2xvcCwgcGFyZW50Qi5zbG9wKVxuICAgICAgICB9O1xuXG4gICAgICAgIFBhaXIudXBkYXRlKHBhaXIsIGNvbGxpc2lvbiwgdGltZXN0YW1wKTtcblxuICAgICAgICByZXR1cm4gcGFpcjtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyBhIHBhaXIgZ2l2ZW4gYSBjb2xsaXNpb24uXG4gICAgICogQG1ldGhvZCB1cGRhdGVcbiAgICAgKiBAcGFyYW0ge3BhaXJ9IHBhaXJcbiAgICAgKiBAcGFyYW0ge2NvbGxpc2lvbn0gY29sbGlzaW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWVzdGFtcFxuICAgICAqL1xuICAgIFBhaXIudXBkYXRlID0gZnVuY3Rpb24ocGFpciwgY29sbGlzaW9uLCB0aW1lc3RhbXApIHtcbiAgICAgICAgdmFyIGNvbnRhY3RzID0gcGFpci5jb250YWN0cyxcbiAgICAgICAgICAgIHN1cHBvcnRzID0gY29sbGlzaW9uLnN1cHBvcnRzLFxuICAgICAgICAgICAgYWN0aXZlQ29udGFjdHMgPSBwYWlyLmFjdGl2ZUNvbnRhY3RzLFxuICAgICAgICAgICAgcGFyZW50QSA9IGNvbGxpc2lvbi5wYXJlbnRBLFxuICAgICAgICAgICAgcGFyZW50QiA9IGNvbGxpc2lvbi5wYXJlbnRCO1xuICAgICAgICBcbiAgICAgICAgcGFpci5jb2xsaXNpb24gPSBjb2xsaXNpb247XG4gICAgICAgIHBhaXIuaW52ZXJzZU1hc3MgPSBwYXJlbnRBLmludmVyc2VNYXNzICsgcGFyZW50Qi5pbnZlcnNlTWFzcztcbiAgICAgICAgcGFpci5mcmljdGlvbiA9IE1hdGgubWluKHBhcmVudEEuZnJpY3Rpb24sIHBhcmVudEIuZnJpY3Rpb24pO1xuICAgICAgICBwYWlyLmZyaWN0aW9uU3RhdGljID0gTWF0aC5tYXgocGFyZW50QS5mcmljdGlvblN0YXRpYywgcGFyZW50Qi5mcmljdGlvblN0YXRpYyk7XG4gICAgICAgIHBhaXIucmVzdGl0dXRpb24gPSBNYXRoLm1heChwYXJlbnRBLnJlc3RpdHV0aW9uLCBwYXJlbnRCLnJlc3RpdHV0aW9uKTtcbiAgICAgICAgcGFpci5zbG9wID0gTWF0aC5tYXgocGFyZW50QS5zbG9wLCBwYXJlbnRCLnNsb3ApO1xuICAgICAgICBhY3RpdmVDb250YWN0cy5sZW5ndGggPSAwO1xuICAgICAgICBcbiAgICAgICAgaWYgKGNvbGxpc2lvbi5jb2xsaWRlZCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdXBwb3J0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBzdXBwb3J0ID0gc3VwcG9ydHNbaV0sXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhY3RJZCA9IENvbnRhY3QuaWQoc3VwcG9ydCksXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhY3QgPSBjb250YWN0c1tjb250YWN0SWRdO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRhY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlQ29udGFjdHMucHVzaChjb250YWN0KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhY3RpdmVDb250YWN0cy5wdXNoKGNvbnRhY3RzW2NvbnRhY3RJZF0gPSBDb250YWN0LmNyZWF0ZShzdXBwb3J0KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwYWlyLnNlcGFyYXRpb24gPSBjb2xsaXNpb24uZGVwdGg7XG4gICAgICAgICAgICBQYWlyLnNldEFjdGl2ZShwYWlyLCB0cnVlLCB0aW1lc3RhbXApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHBhaXIuaXNBY3RpdmUgPT09IHRydWUpXG4gICAgICAgICAgICAgICAgUGFpci5zZXRBY3RpdmUocGFpciwgZmFsc2UsIHRpbWVzdGFtcCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIC8qKlxuICAgICAqIFNldCBhIHBhaXIgYXMgYWN0aXZlIG9yIGluYWN0aXZlLlxuICAgICAqIEBtZXRob2Qgc2V0QWN0aXZlXG4gICAgICogQHBhcmFtIHtwYWlyfSBwYWlyXG4gICAgICogQHBhcmFtIHtib29sfSBpc0FjdGl2ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lc3RhbXBcbiAgICAgKi9cbiAgICBQYWlyLnNldEFjdGl2ZSA9IGZ1bmN0aW9uKHBhaXIsIGlzQWN0aXZlLCB0aW1lc3RhbXApIHtcbiAgICAgICAgaWYgKGlzQWN0aXZlKSB7XG4gICAgICAgICAgICBwYWlyLmlzQWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIHBhaXIudGltZVVwZGF0ZWQgPSB0aW1lc3RhbXA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYWlyLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICBwYWlyLmFjdGl2ZUNvbnRhY3RzLmxlbmd0aCA9IDA7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBpZCBmb3IgdGhlIGdpdmVuIHBhaXIuXG4gICAgICogQG1ldGhvZCBpZFxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keUFcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlCXG4gICAgICogQHJldHVybiB7c3RyaW5nfSBVbmlxdWUgcGFpcklkXG4gICAgICovXG4gICAgUGFpci5pZCA9IGZ1bmN0aW9uKGJvZHlBLCBib2R5Qikge1xuICAgICAgICBpZiAoYm9keUEuaWQgPCBib2R5Qi5pZCkge1xuICAgICAgICAgICAgcmV0dXJuIGJvZHlBLmlkICsgJ18nICsgYm9keUIuaWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYm9keUIuaWQgKyAnXycgKyBib2R5QS5pZDtcbiAgICAgICAgfVxuICAgIH07XG5cbn0pKCk7XG5cbn0se1wiLi9Db250YWN0XCI6NH1dLDg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLlBhaXJzYCBtb2R1bGUgY29udGFpbnMgbWV0aG9kcyBmb3IgY3JlYXRpbmcgYW5kIG1hbmlwdWxhdGluZyBjb2xsaXNpb24gcGFpciBzZXRzLlxuKlxuKiBAY2xhc3MgUGFpcnNcbiovXG5cbnZhciBQYWlycyA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBhaXJzO1xuXG52YXIgUGFpciA9IHJlcXVpcmUoJy4vUGFpcicpO1xudmFyIENvbW1vbiA9IHJlcXVpcmUoJy4uL2NvcmUvQ29tbW9uJyk7XG5cbihmdW5jdGlvbigpIHtcbiAgICBcbiAgICB2YXIgX3BhaXJNYXhJZGxlTGlmZSA9IDEwMDA7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHBhaXJzIHN0cnVjdHVyZS5cbiAgICAgKiBAbWV0aG9kIGNyZWF0ZVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gICAgICogQHJldHVybiB7cGFpcnN9IEEgbmV3IHBhaXJzIHN0cnVjdHVyZVxuICAgICAqL1xuICAgIFBhaXJzLmNyZWF0ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIENvbW1vbi5leHRlbmQoeyBcbiAgICAgICAgICAgIHRhYmxlOiB7fSxcbiAgICAgICAgICAgIGxpc3Q6IFtdLFxuICAgICAgICAgICAgY29sbGlzaW9uU3RhcnQ6IFtdLFxuICAgICAgICAgICAgY29sbGlzaW9uQWN0aXZlOiBbXSxcbiAgICAgICAgICAgIGNvbGxpc2lvbkVuZDogW11cbiAgICAgICAgfSwgb3B0aW9ucyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgcGFpcnMgZ2l2ZW4gYSBsaXN0IG9mIGNvbGxpc2lvbnMuXG4gICAgICogQG1ldGhvZCB1cGRhdGVcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcGFpcnNcbiAgICAgKiBAcGFyYW0ge2NvbGxpc2lvbltdfSBjb2xsaXNpb25zXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWVzdGFtcFxuICAgICAqL1xuICAgIFBhaXJzLnVwZGF0ZSA9IGZ1bmN0aW9uKHBhaXJzLCBjb2xsaXNpb25zLCB0aW1lc3RhbXApIHtcbiAgICAgICAgdmFyIHBhaXJzTGlzdCA9IHBhaXJzLmxpc3QsXG4gICAgICAgICAgICBwYWlyc1RhYmxlID0gcGFpcnMudGFibGUsXG4gICAgICAgICAgICBjb2xsaXNpb25TdGFydCA9IHBhaXJzLmNvbGxpc2lvblN0YXJ0LFxuICAgICAgICAgICAgY29sbGlzaW9uRW5kID0gcGFpcnMuY29sbGlzaW9uRW5kLFxuICAgICAgICAgICAgY29sbGlzaW9uQWN0aXZlID0gcGFpcnMuY29sbGlzaW9uQWN0aXZlLFxuICAgICAgICAgICAgYWN0aXZlUGFpcklkcyA9IFtdLFxuICAgICAgICAgICAgY29sbGlzaW9uLFxuICAgICAgICAgICAgcGFpcklkLFxuICAgICAgICAgICAgcGFpcixcbiAgICAgICAgICAgIGk7XG5cbiAgICAgICAgLy8gY2xlYXIgY29sbGlzaW9uIHN0YXRlIGFycmF5cywgYnV0IG1haW50YWluIG9sZCByZWZlcmVuY2VcbiAgICAgICAgY29sbGlzaW9uU3RhcnQubGVuZ3RoID0gMDtcbiAgICAgICAgY29sbGlzaW9uRW5kLmxlbmd0aCA9IDA7XG4gICAgICAgIGNvbGxpc2lvbkFjdGl2ZS5sZW5ndGggPSAwO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb2xsaXNpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb2xsaXNpb24gPSBjb2xsaXNpb25zW2ldO1xuXG4gICAgICAgICAgICBpZiAoY29sbGlzaW9uLmNvbGxpZGVkKSB7XG4gICAgICAgICAgICAgICAgcGFpcklkID0gUGFpci5pZChjb2xsaXNpb24uYm9keUEsIGNvbGxpc2lvbi5ib2R5Qik7XG4gICAgICAgICAgICAgICAgYWN0aXZlUGFpcklkcy5wdXNoKHBhaXJJZCk7XG5cbiAgICAgICAgICAgICAgICBwYWlyID0gcGFpcnNUYWJsZVtwYWlySWRdO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChwYWlyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHBhaXIgYWxyZWFkeSBleGlzdHMgKGJ1dCBtYXkgb3IgbWF5IG5vdCBiZSBhY3RpdmUpXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYWlyLmlzQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBwYWlyIGV4aXN0cyBhbmQgaXMgYWN0aXZlXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xsaXNpb25BY3RpdmUucHVzaChwYWlyKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBhaXIgZXhpc3RzIGJ1dCB3YXMgaW5hY3RpdmUsIHNvIGEgY29sbGlzaW9uIGhhcyBqdXN0IHN0YXJ0ZWQgYWdhaW5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxpc2lvblN0YXJ0LnB1c2gocGFpcik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyB1cGRhdGUgdGhlIHBhaXJcbiAgICAgICAgICAgICAgICAgICAgUGFpci51cGRhdGUocGFpciwgY29sbGlzaW9uLCB0aW1lc3RhbXApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHBhaXIgZGlkIG5vdCBleGlzdCwgY3JlYXRlIGEgbmV3IHBhaXJcbiAgICAgICAgICAgICAgICAgICAgcGFpciA9IFBhaXIuY3JlYXRlKGNvbGxpc2lvbiwgdGltZXN0YW1wKTtcbiAgICAgICAgICAgICAgICAgICAgcGFpcnNUYWJsZVtwYWlySWRdID0gcGFpcjtcblxuICAgICAgICAgICAgICAgICAgICAvLyBwdXNoIHRoZSBuZXcgcGFpclxuICAgICAgICAgICAgICAgICAgICBjb2xsaXNpb25TdGFydC5wdXNoKHBhaXIpO1xuICAgICAgICAgICAgICAgICAgICBwYWlyc0xpc3QucHVzaChwYWlyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBkZWFjdGl2YXRlIHByZXZpb3VzbHkgYWN0aXZlIHBhaXJzIHRoYXQgYXJlIG5vdyBpbmFjdGl2ZVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcGFpcnNMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBwYWlyID0gcGFpcnNMaXN0W2ldO1xuICAgICAgICAgICAgaWYgKHBhaXIuaXNBY3RpdmUgJiYgQ29tbW9uLmluZGV4T2YoYWN0aXZlUGFpcklkcywgcGFpci5pZCkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgUGFpci5zZXRBY3RpdmUocGFpciwgZmFsc2UsIHRpbWVzdGFtcCk7XG4gICAgICAgICAgICAgICAgY29sbGlzaW9uRW5kLnB1c2gocGFpcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIC8qKlxuICAgICAqIEZpbmRzIGFuZCByZW1vdmVzIHBhaXJzIHRoYXQgaGF2ZSBiZWVuIGluYWN0aXZlIGZvciBhIHNldCBhbW91bnQgb2YgdGltZS5cbiAgICAgKiBAbWV0aG9kIHJlbW92ZU9sZFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBwYWlyc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lc3RhbXBcbiAgICAgKi9cbiAgICBQYWlycy5yZW1vdmVPbGQgPSBmdW5jdGlvbihwYWlycywgdGltZXN0YW1wKSB7XG4gICAgICAgIHZhciBwYWlyc0xpc3QgPSBwYWlycy5saXN0LFxuICAgICAgICAgICAgcGFpcnNUYWJsZSA9IHBhaXJzLnRhYmxlLFxuICAgICAgICAgICAgaW5kZXhlc1RvUmVtb3ZlID0gW10sXG4gICAgICAgICAgICBwYWlyLFxuICAgICAgICAgICAgY29sbGlzaW9uLFxuICAgICAgICAgICAgcGFpckluZGV4LFxuICAgICAgICAgICAgaTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcGFpcnNMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBwYWlyID0gcGFpcnNMaXN0W2ldO1xuICAgICAgICAgICAgY29sbGlzaW9uID0gcGFpci5jb2xsaXNpb247XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIG5ldmVyIHJlbW92ZSBzbGVlcGluZyBwYWlyc1xuICAgICAgICAgICAgaWYgKGNvbGxpc2lvbi5ib2R5QS5pc1NsZWVwaW5nIHx8IGNvbGxpc2lvbi5ib2R5Qi5pc1NsZWVwaW5nKSB7XG4gICAgICAgICAgICAgICAgcGFpci50aW1lVXBkYXRlZCA9IHRpbWVzdGFtcDtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaWYgcGFpciBpcyBpbmFjdGl2ZSBmb3IgdG9vIGxvbmcsIG1hcmsgaXQgdG8gYmUgcmVtb3ZlZFxuICAgICAgICAgICAgaWYgKHRpbWVzdGFtcCAtIHBhaXIudGltZVVwZGF0ZWQgPiBfcGFpck1heElkbGVMaWZlKSB7XG4gICAgICAgICAgICAgICAgaW5kZXhlc1RvUmVtb3ZlLnB1c2goaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZW1vdmUgbWFya2VkIHBhaXJzXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbmRleGVzVG9SZW1vdmUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHBhaXJJbmRleCA9IGluZGV4ZXNUb1JlbW92ZVtpXSAtIGk7XG4gICAgICAgICAgICBwYWlyID0gcGFpcnNMaXN0W3BhaXJJbmRleF07XG4gICAgICAgICAgICBkZWxldGUgcGFpcnNUYWJsZVtwYWlyLmlkXTtcbiAgICAgICAgICAgIHBhaXJzTGlzdC5zcGxpY2UocGFpckluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDbGVhcnMgdGhlIGdpdmVuIHBhaXJzIHN0cnVjdHVyZS5cbiAgICAgKiBAbWV0aG9kIGNsZWFyXG4gICAgICogQHBhcmFtIHtwYWlyc30gcGFpcnNcbiAgICAgKiBAcmV0dXJuIHtwYWlyc30gcGFpcnNcbiAgICAgKi9cbiAgICBQYWlycy5jbGVhciA9IGZ1bmN0aW9uKHBhaXJzKSB7XG4gICAgICAgIHBhaXJzLnRhYmxlID0ge307XG4gICAgICAgIHBhaXJzLmxpc3QubGVuZ3RoID0gMDtcbiAgICAgICAgcGFpcnMuY29sbGlzaW9uU3RhcnQubGVuZ3RoID0gMDtcbiAgICAgICAgcGFpcnMuY29sbGlzaW9uQWN0aXZlLmxlbmd0aCA9IDA7XG4gICAgICAgIHBhaXJzLmNvbGxpc2lvbkVuZC5sZW5ndGggPSAwO1xuICAgICAgICByZXR1cm4gcGFpcnM7XG4gICAgfTtcblxufSkoKTtcblxufSx7XCIuLi9jb3JlL0NvbW1vblwiOjE0LFwiLi9QYWlyXCI6N31dLDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLlF1ZXJ5YCBtb2R1bGUgY29udGFpbnMgbWV0aG9kcyBmb3IgcGVyZm9ybWluZyBjb2xsaXNpb24gcXVlcmllcy5cbipcbiogU2VlIHRoZSBpbmNsdWRlZCB1c2FnZSBbZXhhbXBsZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9saWFicnUvbWF0dGVyLWpzL3RyZWUvbWFzdGVyL2V4YW1wbGVzKS5cbipcbiogQGNsYXNzIFF1ZXJ5XG4qL1xuXG52YXIgUXVlcnkgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBRdWVyeTtcblxudmFyIFZlY3RvciA9IHJlcXVpcmUoJy4uL2dlb21ldHJ5L1ZlY3RvcicpO1xudmFyIFNBVCA9IHJlcXVpcmUoJy4vU0FUJyk7XG52YXIgQm91bmRzID0gcmVxdWlyZSgnLi4vZ2VvbWV0cnkvQm91bmRzJyk7XG52YXIgQm9kaWVzID0gcmVxdWlyZSgnLi4vZmFjdG9yeS9Cb2RpZXMnKTtcbnZhciBWZXJ0aWNlcyA9IHJlcXVpcmUoJy4uL2dlb21ldHJ5L1ZlcnRpY2VzJyk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIENhc3RzIGEgcmF5IHNlZ21lbnQgYWdhaW5zdCBhIHNldCBvZiBib2RpZXMgYW5kIHJldHVybnMgYWxsIGNvbGxpc2lvbnMsIHJheSB3aWR0aCBpcyBvcHRpb25hbC4gSW50ZXJzZWN0aW9uIHBvaW50cyBhcmUgbm90IHByb3ZpZGVkLlxuICAgICAqIEBtZXRob2QgcmF5XG4gICAgICogQHBhcmFtIHtib2R5W119IGJvZGllc1xuICAgICAqIEBwYXJhbSB7dmVjdG9yfSBzdGFydFBvaW50XG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IGVuZFBvaW50XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtyYXlXaWR0aF1cbiAgICAgKiBAcmV0dXJuIHtvYmplY3RbXX0gQ29sbGlzaW9uc1xuICAgICAqL1xuICAgIFF1ZXJ5LnJheSA9IGZ1bmN0aW9uKGJvZGllcywgc3RhcnRQb2ludCwgZW5kUG9pbnQsIHJheVdpZHRoKSB7XG4gICAgICAgIHJheVdpZHRoID0gcmF5V2lkdGggfHwgMWUtMTAwO1xuXG4gICAgICAgIHZhciByYXlBbmdsZSA9IFZlY3Rvci5hbmdsZShzdGFydFBvaW50LCBlbmRQb2ludCksXG4gICAgICAgICAgICByYXlMZW5ndGggPSBWZWN0b3IubWFnbml0dWRlKFZlY3Rvci5zdWIoc3RhcnRQb2ludCwgZW5kUG9pbnQpKSxcbiAgICAgICAgICAgIHJheVggPSAoZW5kUG9pbnQueCArIHN0YXJ0UG9pbnQueCkgKiAwLjUsXG4gICAgICAgICAgICByYXlZID0gKGVuZFBvaW50LnkgKyBzdGFydFBvaW50LnkpICogMC41LFxuICAgICAgICAgICAgcmF5ID0gQm9kaWVzLnJlY3RhbmdsZShyYXlYLCByYXlZLCByYXlMZW5ndGgsIHJheVdpZHRoLCB7IGFuZ2xlOiByYXlBbmdsZSB9KSxcbiAgICAgICAgICAgIGNvbGxpc2lvbnMgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGJvZHlBID0gYm9kaWVzW2ldO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoQm91bmRzLm92ZXJsYXBzKGJvZHlBLmJvdW5kcywgcmF5LmJvdW5kcykpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gYm9keUEucGFydHMubGVuZ3RoID09PSAxID8gMCA6IDE7IGogPCBib2R5QS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGFydCA9IGJvZHlBLnBhcnRzW2pdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChCb3VuZHMub3ZlcmxhcHMocGFydC5ib3VuZHMsIHJheS5ib3VuZHMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29sbGlzaW9uID0gU0FULmNvbGxpZGVzKHBhcnQsIHJheSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29sbGlzaW9uLmNvbGxpZGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sbGlzaW9uLmJvZHkgPSBjb2xsaXNpb24uYm9keUEgPSBjb2xsaXNpb24uYm9keUIgPSBib2R5QTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xsaXNpb25zLnB1c2goY29sbGlzaW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb2xsaXNpb25zO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFsbCBib2RpZXMgd2hvc2UgYm91bmRzIGFyZSBpbnNpZGUgKG9yIG91dHNpZGUgaWYgc2V0KSB0aGUgZ2l2ZW4gc2V0IG9mIGJvdW5kcywgZnJvbSB0aGUgZ2l2ZW4gc2V0IG9mIGJvZGllcy5cbiAgICAgKiBAbWV0aG9kIHJlZ2lvblxuICAgICAqIEBwYXJhbSB7Ym9keVtdfSBib2RpZXNcbiAgICAgKiBAcGFyYW0ge2JvdW5kc30gYm91bmRzXG4gICAgICogQHBhcmFtIHtib29sfSBbb3V0c2lkZT1mYWxzZV1cbiAgICAgKiBAcmV0dXJuIHtib2R5W119IFRoZSBib2RpZXMgbWF0Y2hpbmcgdGhlIHF1ZXJ5XG4gICAgICovXG4gICAgUXVlcnkucmVnaW9uID0gZnVuY3Rpb24oYm9kaWVzLCBib3VuZHMsIG91dHNpZGUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYm9keSA9IGJvZGllc1tpXSxcbiAgICAgICAgICAgICAgICBvdmVybGFwcyA9IEJvdW5kcy5vdmVybGFwcyhib2R5LmJvdW5kcywgYm91bmRzKTtcbiAgICAgICAgICAgIGlmICgob3ZlcmxhcHMgJiYgIW91dHNpZGUpIHx8ICghb3ZlcmxhcHMgJiYgb3V0c2lkZSkpXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goYm9keSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFsbCBib2RpZXMgd2hvc2UgdmVydGljZXMgY29udGFpbiB0aGUgZ2l2ZW4gcG9pbnQsIGZyb20gdGhlIGdpdmVuIHNldCBvZiBib2RpZXMuXG4gICAgICogQG1ldGhvZCBwb2ludFxuICAgICAqIEBwYXJhbSB7Ym9keVtdfSBib2RpZXNcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gcG9pbnRcbiAgICAgKiBAcmV0dXJuIHtib2R5W119IFRoZSBib2RpZXMgbWF0Y2hpbmcgdGhlIHF1ZXJ5XG4gICAgICovXG4gICAgUXVlcnkucG9pbnQgPSBmdW5jdGlvbihib2RpZXMsIHBvaW50KSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGJvZHkgPSBib2RpZXNbaV07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChCb3VuZHMuY29udGFpbnMoYm9keS5ib3VuZHMsIHBvaW50KSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSBib2R5LnBhcnRzLmxlbmd0aCA9PT0gMSA/IDAgOiAxOyBqIDwgYm9keS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGFydCA9IGJvZHkucGFydHNbal07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKEJvdW5kcy5jb250YWlucyhwYXJ0LmJvdW5kcywgcG9pbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAmJiBWZXJ0aWNlcy5jb250YWlucyhwYXJ0LnZlcnRpY2VzLCBwb2ludCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGJvZHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbn0pKCk7XG5cbn0se1wiLi4vZmFjdG9yeS9Cb2RpZXNcIjoyMSxcIi4uL2dlb21ldHJ5L0JvdW5kc1wiOjI0LFwiLi4vZ2VvbWV0cnkvVmVjdG9yXCI6MjYsXCIuLi9nZW9tZXRyeS9WZXJ0aWNlc1wiOjI3LFwiLi9TQVRcIjoxMX1dLDEwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuKiBUaGUgYE1hdHRlci5SZXNvbHZlcmAgbW9kdWxlIGNvbnRhaW5zIG1ldGhvZHMgZm9yIHJlc29sdmluZyBjb2xsaXNpb24gcGFpcnMuXG4qXG4qIEBjbGFzcyBSZXNvbHZlclxuKi9cblxudmFyIFJlc29sdmVyID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gUmVzb2x2ZXI7XG5cbnZhciBWZXJ0aWNlcyA9IHJlcXVpcmUoJy4uL2dlb21ldHJ5L1ZlcnRpY2VzJyk7XG52YXIgVmVjdG9yID0gcmVxdWlyZSgnLi4vZ2VvbWV0cnkvVmVjdG9yJyk7XG52YXIgQ29tbW9uID0gcmVxdWlyZSgnLi4vY29yZS9Db21tb24nKTtcbnZhciBCb3VuZHMgPSByZXF1aXJlKCcuLi9nZW9tZXRyeS9Cb3VuZHMnKTtcblxuKGZ1bmN0aW9uKCkge1xuXG4gICAgUmVzb2x2ZXIuX3Jlc3RpbmdUaHJlc2ggPSA0O1xuICAgIFJlc29sdmVyLl9yZXN0aW5nVGhyZXNoVGFuZ2VudCA9IDY7XG4gICAgUmVzb2x2ZXIuX3Bvc2l0aW9uRGFtcGVuID0gMC45O1xuICAgIFJlc29sdmVyLl9wb3NpdGlvbldhcm1pbmcgPSAwLjg7XG4gICAgUmVzb2x2ZXIuX2ZyaWN0aW9uTm9ybWFsTXVsdGlwbGllciA9IDU7XG5cbiAgICAvKipcbiAgICAgKiBQcmVwYXJlIHBhaXJzIGZvciBwb3NpdGlvbiBzb2x2aW5nLlxuICAgICAqIEBtZXRob2QgcHJlU29sdmVQb3NpdGlvblxuICAgICAqIEBwYXJhbSB7cGFpcltdfSBwYWlyc1xuICAgICAqL1xuICAgIFJlc29sdmVyLnByZVNvbHZlUG9zaXRpb24gPSBmdW5jdGlvbihwYWlycykge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIHBhaXIsXG4gICAgICAgICAgICBhY3RpdmVDb3VudDtcblxuICAgICAgICAvLyBmaW5kIHRvdGFsIGNvbnRhY3RzIG9uIGVhY2ggYm9keVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcGFpcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHBhaXIgPSBwYWlyc1tpXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKCFwYWlyLmlzQWN0aXZlKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBhY3RpdmVDb3VudCA9IHBhaXIuYWN0aXZlQ29udGFjdHMubGVuZ3RoO1xuICAgICAgICAgICAgcGFpci5jb2xsaXNpb24ucGFyZW50QS50b3RhbENvbnRhY3RzICs9IGFjdGl2ZUNvdW50O1xuICAgICAgICAgICAgcGFpci5jb2xsaXNpb24ucGFyZW50Qi50b3RhbENvbnRhY3RzICs9IGFjdGl2ZUNvdW50O1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEZpbmQgYSBzb2x1dGlvbiBmb3IgcGFpciBwb3NpdGlvbnMuXG4gICAgICogQG1ldGhvZCBzb2x2ZVBvc2l0aW9uXG4gICAgICogQHBhcmFtIHtwYWlyW119IHBhaXJzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWVTY2FsZVxuICAgICAqL1xuICAgIFJlc29sdmVyLnNvbHZlUG9zaXRpb24gPSBmdW5jdGlvbihwYWlycywgdGltZVNjYWxlKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgcGFpcixcbiAgICAgICAgICAgIGNvbGxpc2lvbixcbiAgICAgICAgICAgIGJvZHlBLFxuICAgICAgICAgICAgYm9keUIsXG4gICAgICAgICAgICBub3JtYWwsXG4gICAgICAgICAgICBib2R5QnRvQSxcbiAgICAgICAgICAgIGNvbnRhY3RTaGFyZSxcbiAgICAgICAgICAgIHBvc2l0aW9uSW1wdWxzZSxcbiAgICAgICAgICAgIGNvbnRhY3RDb3VudCA9IHt9LFxuICAgICAgICAgICAgdGVtcEEgPSBWZWN0b3IuX3RlbXBbMF0sXG4gICAgICAgICAgICB0ZW1wQiA9IFZlY3Rvci5fdGVtcFsxXSxcbiAgICAgICAgICAgIHRlbXBDID0gVmVjdG9yLl90ZW1wWzJdLFxuICAgICAgICAgICAgdGVtcEQgPSBWZWN0b3IuX3RlbXBbM107XG5cbiAgICAgICAgLy8gZmluZCBpbXB1bHNlcyByZXF1aXJlZCB0byByZXNvbHZlIHBlbmV0cmF0aW9uXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwYWlycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcGFpciA9IHBhaXJzW2ldO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoIXBhaXIuaXNBY3RpdmUgfHwgcGFpci5pc1NlbnNvcilcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgY29sbGlzaW9uID0gcGFpci5jb2xsaXNpb247XG4gICAgICAgICAgICBib2R5QSA9IGNvbGxpc2lvbi5wYXJlbnRBO1xuICAgICAgICAgICAgYm9keUIgPSBjb2xsaXNpb24ucGFyZW50QjtcbiAgICAgICAgICAgIG5vcm1hbCA9IGNvbGxpc2lvbi5ub3JtYWw7XG5cbiAgICAgICAgICAgIC8vIGdldCBjdXJyZW50IHNlcGFyYXRpb24gYmV0d2VlbiBib2R5IGVkZ2VzIGludm9sdmVkIGluIGNvbGxpc2lvblxuICAgICAgICAgICAgYm9keUJ0b0EgPSBWZWN0b3Iuc3ViKFZlY3Rvci5hZGQoYm9keUIucG9zaXRpb25JbXB1bHNlLCBib2R5Qi5wb3NpdGlvbiwgdGVtcEEpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZlY3Rvci5hZGQoYm9keUEucG9zaXRpb25JbXB1bHNlLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWZWN0b3Iuc3ViKGJvZHlCLnBvc2l0aW9uLCBjb2xsaXNpb24ucGVuZXRyYXRpb24sIHRlbXBCKSwgdGVtcEMpLCB0ZW1wRCk7XG5cbiAgICAgICAgICAgIHBhaXIuc2VwYXJhdGlvbiA9IFZlY3Rvci5kb3Qobm9ybWFsLCBib2R5QnRvQSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwYWlycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcGFpciA9IHBhaXJzW2ldO1xuXG4gICAgICAgICAgICBpZiAoIXBhaXIuaXNBY3RpdmUgfHwgcGFpci5pc1NlbnNvciB8fCBwYWlyLnNlcGFyYXRpb24gPCAwKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb2xsaXNpb24gPSBwYWlyLmNvbGxpc2lvbjtcbiAgICAgICAgICAgIGJvZHlBID0gY29sbGlzaW9uLnBhcmVudEE7XG4gICAgICAgICAgICBib2R5QiA9IGNvbGxpc2lvbi5wYXJlbnRCO1xuICAgICAgICAgICAgbm9ybWFsID0gY29sbGlzaW9uLm5vcm1hbDtcbiAgICAgICAgICAgIHBvc2l0aW9uSW1wdWxzZSA9IChwYWlyLnNlcGFyYXRpb24gLSBwYWlyLnNsb3ApICogdGltZVNjYWxlO1xuXG4gICAgICAgICAgICBpZiAoYm9keUEuaXNTdGF0aWMgfHwgYm9keUIuaXNTdGF0aWMpXG4gICAgICAgICAgICAgICAgcG9zaXRpb25JbXB1bHNlICo9IDI7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICghKGJvZHlBLmlzU3RhdGljIHx8IGJvZHlBLmlzU2xlZXBpbmcpKSB7XG4gICAgICAgICAgICAgICAgY29udGFjdFNoYXJlID0gUmVzb2x2ZXIuX3Bvc2l0aW9uRGFtcGVuIC8gYm9keUEudG90YWxDb250YWN0cztcbiAgICAgICAgICAgICAgICBib2R5QS5wb3NpdGlvbkltcHVsc2UueCArPSBub3JtYWwueCAqIHBvc2l0aW9uSW1wdWxzZSAqIGNvbnRhY3RTaGFyZTtcbiAgICAgICAgICAgICAgICBib2R5QS5wb3NpdGlvbkltcHVsc2UueSArPSBub3JtYWwueSAqIHBvc2l0aW9uSW1wdWxzZSAqIGNvbnRhY3RTaGFyZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCEoYm9keUIuaXNTdGF0aWMgfHwgYm9keUIuaXNTbGVlcGluZykpIHtcbiAgICAgICAgICAgICAgICBjb250YWN0U2hhcmUgPSBSZXNvbHZlci5fcG9zaXRpb25EYW1wZW4gLyBib2R5Qi50b3RhbENvbnRhY3RzO1xuICAgICAgICAgICAgICAgIGJvZHlCLnBvc2l0aW9uSW1wdWxzZS54IC09IG5vcm1hbC54ICogcG9zaXRpb25JbXB1bHNlICogY29udGFjdFNoYXJlO1xuICAgICAgICAgICAgICAgIGJvZHlCLnBvc2l0aW9uSW1wdWxzZS55IC09IG5vcm1hbC55ICogcG9zaXRpb25JbXB1bHNlICogY29udGFjdFNoYXJlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFwcGx5IHBvc2l0aW9uIHJlc29sdXRpb24uXG4gICAgICogQG1ldGhvZCBwb3N0U29sdmVQb3NpdGlvblxuICAgICAqIEBwYXJhbSB7Ym9keVtdfSBib2RpZXNcbiAgICAgKi9cbiAgICBSZXNvbHZlci5wb3N0U29sdmVQb3NpdGlvbiA9IGZ1bmN0aW9uKGJvZGllcykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGJvZHkgPSBib2RpZXNbaV07XG5cbiAgICAgICAgICAgIC8vIHJlc2V0IGNvbnRhY3QgY291bnRcbiAgICAgICAgICAgIGJvZHkudG90YWxDb250YWN0cyA9IDA7XG5cbiAgICAgICAgICAgIGlmIChib2R5LnBvc2l0aW9uSW1wdWxzZS54ICE9PSAwIHx8IGJvZHkucG9zaXRpb25JbXB1bHNlLnkgIT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgYm9keSBnZW9tZXRyeVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgYm9keS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGFydCA9IGJvZHkucGFydHNbal07XG4gICAgICAgICAgICAgICAgICAgIFZlcnRpY2VzLnRyYW5zbGF0ZShwYXJ0LnZlcnRpY2VzLCBib2R5LnBvc2l0aW9uSW1wdWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIEJvdW5kcy51cGRhdGUocGFydC5ib3VuZHMsIHBhcnQudmVydGljZXMsIGJvZHkudmVsb2NpdHkpO1xuICAgICAgICAgICAgICAgICAgICBwYXJ0LnBvc2l0aW9uLnggKz0gYm9keS5wb3NpdGlvbkltcHVsc2UueDtcbiAgICAgICAgICAgICAgICAgICAgcGFydC5wb3NpdGlvbi55ICs9IGJvZHkucG9zaXRpb25JbXB1bHNlLnk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gbW92ZSB0aGUgYm9keSB3aXRob3V0IGNoYW5naW5nIHZlbG9jaXR5XG4gICAgICAgICAgICAgICAgYm9keS5wb3NpdGlvblByZXYueCArPSBib2R5LnBvc2l0aW9uSW1wdWxzZS54O1xuICAgICAgICAgICAgICAgIGJvZHkucG9zaXRpb25QcmV2LnkgKz0gYm9keS5wb3NpdGlvbkltcHVsc2UueTtcblxuICAgICAgICAgICAgICAgIGlmIChWZWN0b3IuZG90KGJvZHkucG9zaXRpb25JbXB1bHNlLCBib2R5LnZlbG9jaXR5KSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVzZXQgY2FjaGVkIGltcHVsc2UgaWYgdGhlIGJvZHkgaGFzIHZlbG9jaXR5IGFsb25nIGl0XG4gICAgICAgICAgICAgICAgICAgIGJvZHkucG9zaXRpb25JbXB1bHNlLnggPSAwO1xuICAgICAgICAgICAgICAgICAgICBib2R5LnBvc2l0aW9uSW1wdWxzZS55ID0gMDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyB3YXJtIHRoZSBuZXh0IGl0ZXJhdGlvblxuICAgICAgICAgICAgICAgICAgICBib2R5LnBvc2l0aW9uSW1wdWxzZS54ICo9IFJlc29sdmVyLl9wb3NpdGlvbldhcm1pbmc7XG4gICAgICAgICAgICAgICAgICAgIGJvZHkucG9zaXRpb25JbXB1bHNlLnkgKj0gUmVzb2x2ZXIuX3Bvc2l0aW9uV2FybWluZztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUHJlcGFyZSBwYWlycyBmb3IgdmVsb2NpdHkgc29sdmluZy5cbiAgICAgKiBAbWV0aG9kIHByZVNvbHZlVmVsb2NpdHlcbiAgICAgKiBAcGFyYW0ge3BhaXJbXX0gcGFpcnNcbiAgICAgKi9cbiAgICBSZXNvbHZlci5wcmVTb2x2ZVZlbG9jaXR5ID0gZnVuY3Rpb24ocGFpcnMpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBqLFxuICAgICAgICAgICAgcGFpcixcbiAgICAgICAgICAgIGNvbnRhY3RzLFxuICAgICAgICAgICAgY29sbGlzaW9uLFxuICAgICAgICAgICAgYm9keUEsXG4gICAgICAgICAgICBib2R5QixcbiAgICAgICAgICAgIG5vcm1hbCxcbiAgICAgICAgICAgIHRhbmdlbnQsXG4gICAgICAgICAgICBjb250YWN0LFxuICAgICAgICAgICAgY29udGFjdFZlcnRleCxcbiAgICAgICAgICAgIG5vcm1hbEltcHVsc2UsXG4gICAgICAgICAgICB0YW5nZW50SW1wdWxzZSxcbiAgICAgICAgICAgIG9mZnNldCxcbiAgICAgICAgICAgIGltcHVsc2UgPSBWZWN0b3IuX3RlbXBbMF0sXG4gICAgICAgICAgICB0ZW1wQSA9IFZlY3Rvci5fdGVtcFsxXTtcbiAgICAgICAgXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwYWlycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcGFpciA9IHBhaXJzW2ldO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoIXBhaXIuaXNBY3RpdmUgfHwgcGFpci5pc1NlbnNvcilcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29udGFjdHMgPSBwYWlyLmFjdGl2ZUNvbnRhY3RzO1xuICAgICAgICAgICAgY29sbGlzaW9uID0gcGFpci5jb2xsaXNpb247XG4gICAgICAgICAgICBib2R5QSA9IGNvbGxpc2lvbi5wYXJlbnRBO1xuICAgICAgICAgICAgYm9keUIgPSBjb2xsaXNpb24ucGFyZW50QjtcbiAgICAgICAgICAgIG5vcm1hbCA9IGNvbGxpc2lvbi5ub3JtYWw7XG4gICAgICAgICAgICB0YW5nZW50ID0gY29sbGlzaW9uLnRhbmdlbnQ7XG5cbiAgICAgICAgICAgIC8vIHJlc29sdmUgZWFjaCBjb250YWN0XG4gICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgY29udGFjdHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBjb250YWN0ID0gY29udGFjdHNbal07XG4gICAgICAgICAgICAgICAgY29udGFjdFZlcnRleCA9IGNvbnRhY3QudmVydGV4O1xuICAgICAgICAgICAgICAgIG5vcm1hbEltcHVsc2UgPSBjb250YWN0Lm5vcm1hbEltcHVsc2U7XG4gICAgICAgICAgICAgICAgdGFuZ2VudEltcHVsc2UgPSBjb250YWN0LnRhbmdlbnRJbXB1bHNlO1xuXG4gICAgICAgICAgICAgICAgaWYgKG5vcm1hbEltcHVsc2UgIT09IDAgfHwgdGFuZ2VudEltcHVsc2UgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdG90YWwgaW1wdWxzZSBmcm9tIGNvbnRhY3RcbiAgICAgICAgICAgICAgICAgICAgaW1wdWxzZS54ID0gKG5vcm1hbC54ICogbm9ybWFsSW1wdWxzZSkgKyAodGFuZ2VudC54ICogdGFuZ2VudEltcHVsc2UpO1xuICAgICAgICAgICAgICAgICAgICBpbXB1bHNlLnkgPSAobm9ybWFsLnkgKiBub3JtYWxJbXB1bHNlKSArICh0YW5nZW50LnkgKiB0YW5nZW50SW1wdWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBhcHBseSBpbXB1bHNlIGZyb20gY29udGFjdFxuICAgICAgICAgICAgICAgICAgICBpZiAoIShib2R5QS5pc1N0YXRpYyB8fCBib2R5QS5pc1NsZWVwaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gVmVjdG9yLnN1Yihjb250YWN0VmVydGV4LCBib2R5QS5wb3NpdGlvbiwgdGVtcEEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9keUEucG9zaXRpb25QcmV2LnggKz0gaW1wdWxzZS54ICogYm9keUEuaW52ZXJzZU1hc3M7XG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5QS5wb3NpdGlvblByZXYueSArPSBpbXB1bHNlLnkgKiBib2R5QS5pbnZlcnNlTWFzcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHlBLmFuZ2xlUHJldiArPSBWZWN0b3IuY3Jvc3Mob2Zmc2V0LCBpbXB1bHNlKSAqIGJvZHlBLmludmVyc2VJbmVydGlhO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoYm9keUIuaXNTdGF0aWMgfHwgYm9keUIuaXNTbGVlcGluZykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IFZlY3Rvci5zdWIoY29udGFjdFZlcnRleCwgYm9keUIucG9zaXRpb24sIHRlbXBBKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHlCLnBvc2l0aW9uUHJldi54IC09IGltcHVsc2UueCAqIGJvZHlCLmludmVyc2VNYXNzO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9keUIucG9zaXRpb25QcmV2LnkgLT0gaW1wdWxzZS55ICogYm9keUIuaW52ZXJzZU1hc3M7XG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5Qi5hbmdsZVByZXYgLT0gVmVjdG9yLmNyb3NzKG9mZnNldCwgaW1wdWxzZSkgKiBib2R5Qi5pbnZlcnNlSW5lcnRpYTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBGaW5kIGEgc29sdXRpb24gZm9yIHBhaXIgdmVsb2NpdGllcy5cbiAgICAgKiBAbWV0aG9kIHNvbHZlVmVsb2NpdHlcbiAgICAgKiBAcGFyYW0ge3BhaXJbXX0gcGFpcnNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdGltZVNjYWxlXG4gICAgICovXG4gICAgUmVzb2x2ZXIuc29sdmVWZWxvY2l0eSA9IGZ1bmN0aW9uKHBhaXJzLCB0aW1lU2NhbGUpIHtcbiAgICAgICAgdmFyIHRpbWVTY2FsZVNxdWFyZWQgPSB0aW1lU2NhbGUgKiB0aW1lU2NhbGUsXG4gICAgICAgICAgICBpbXB1bHNlID0gVmVjdG9yLl90ZW1wWzBdLFxuICAgICAgICAgICAgdGVtcEEgPSBWZWN0b3IuX3RlbXBbMV0sXG4gICAgICAgICAgICB0ZW1wQiA9IFZlY3Rvci5fdGVtcFsyXSxcbiAgICAgICAgICAgIHRlbXBDID0gVmVjdG9yLl90ZW1wWzNdLFxuICAgICAgICAgICAgdGVtcEQgPSBWZWN0b3IuX3RlbXBbNF0sXG4gICAgICAgICAgICB0ZW1wRSA9IFZlY3Rvci5fdGVtcFs1XTtcbiAgICAgICAgXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFpcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBwYWlyID0gcGFpcnNbaV07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICghcGFpci5pc0FjdGl2ZSB8fCBwYWlyLmlzU2Vuc29yKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgY29sbGlzaW9uID0gcGFpci5jb2xsaXNpb24sXG4gICAgICAgICAgICAgICAgYm9keUEgPSBjb2xsaXNpb24ucGFyZW50QSxcbiAgICAgICAgICAgICAgICBib2R5QiA9IGNvbGxpc2lvbi5wYXJlbnRCLFxuICAgICAgICAgICAgICAgIG5vcm1hbCA9IGNvbGxpc2lvbi5ub3JtYWwsXG4gICAgICAgICAgICAgICAgdGFuZ2VudCA9IGNvbGxpc2lvbi50YW5nZW50LFxuICAgICAgICAgICAgICAgIGNvbnRhY3RzID0gcGFpci5hY3RpdmVDb250YWN0cyxcbiAgICAgICAgICAgICAgICBjb250YWN0U2hhcmUgPSAxIC8gY29udGFjdHMubGVuZ3RoO1xuXG4gICAgICAgICAgICAvLyB1cGRhdGUgYm9keSB2ZWxvY2l0aWVzXG4gICAgICAgICAgICBib2R5QS52ZWxvY2l0eS54ID0gYm9keUEucG9zaXRpb24ueCAtIGJvZHlBLnBvc2l0aW9uUHJldi54O1xuICAgICAgICAgICAgYm9keUEudmVsb2NpdHkueSA9IGJvZHlBLnBvc2l0aW9uLnkgLSBib2R5QS5wb3NpdGlvblByZXYueTtcbiAgICAgICAgICAgIGJvZHlCLnZlbG9jaXR5LnggPSBib2R5Qi5wb3NpdGlvbi54IC0gYm9keUIucG9zaXRpb25QcmV2Lng7XG4gICAgICAgICAgICBib2R5Qi52ZWxvY2l0eS55ID0gYm9keUIucG9zaXRpb24ueSAtIGJvZHlCLnBvc2l0aW9uUHJldi55O1xuICAgICAgICAgICAgYm9keUEuYW5ndWxhclZlbG9jaXR5ID0gYm9keUEuYW5nbGUgLSBib2R5QS5hbmdsZVByZXY7XG4gICAgICAgICAgICBib2R5Qi5hbmd1bGFyVmVsb2NpdHkgPSBib2R5Qi5hbmdsZSAtIGJvZHlCLmFuZ2xlUHJldjtcblxuICAgICAgICAgICAgLy8gcmVzb2x2ZSBlYWNoIGNvbnRhY3RcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgY29udGFjdHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgY29udGFjdCA9IGNvbnRhY3RzW2pdLFxuICAgICAgICAgICAgICAgICAgICBjb250YWN0VmVydGV4ID0gY29udGFjdC52ZXJ0ZXgsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldEEgPSBWZWN0b3Iuc3ViKGNvbnRhY3RWZXJ0ZXgsIGJvZHlBLnBvc2l0aW9uLCB0ZW1wQSksXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldEIgPSBWZWN0b3Iuc3ViKGNvbnRhY3RWZXJ0ZXgsIGJvZHlCLnBvc2l0aW9uLCB0ZW1wQiksXG4gICAgICAgICAgICAgICAgICAgIHZlbG9jaXR5UG9pbnRBID0gVmVjdG9yLmFkZChib2R5QS52ZWxvY2l0eSwgVmVjdG9yLm11bHQoVmVjdG9yLnBlcnAob2Zmc2V0QSksIGJvZHlBLmFuZ3VsYXJWZWxvY2l0eSksIHRlbXBDKSxcbiAgICAgICAgICAgICAgICAgICAgdmVsb2NpdHlQb2ludEIgPSBWZWN0b3IuYWRkKGJvZHlCLnZlbG9jaXR5LCBWZWN0b3IubXVsdChWZWN0b3IucGVycChvZmZzZXRCKSwgYm9keUIuYW5ndWxhclZlbG9jaXR5KSwgdGVtcEQpLCBcbiAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmVWZWxvY2l0eSA9IFZlY3Rvci5zdWIodmVsb2NpdHlQb2ludEEsIHZlbG9jaXR5UG9pbnRCLCB0ZW1wRSksXG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbFZlbG9jaXR5ID0gVmVjdG9yLmRvdChub3JtYWwsIHJlbGF0aXZlVmVsb2NpdHkpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHRhbmdlbnRWZWxvY2l0eSA9IFZlY3Rvci5kb3QodGFuZ2VudCwgcmVsYXRpdmVWZWxvY2l0eSksXG4gICAgICAgICAgICAgICAgICAgIHRhbmdlbnRTcGVlZCA9IE1hdGguYWJzKHRhbmdlbnRWZWxvY2l0eSksXG4gICAgICAgICAgICAgICAgICAgIHRhbmdlbnRWZWxvY2l0eURpcmVjdGlvbiA9IENvbW1vbi5zaWduKHRhbmdlbnRWZWxvY2l0eSk7XG5cbiAgICAgICAgICAgICAgICAvLyByYXcgaW1wdWxzZXNcbiAgICAgICAgICAgICAgICB2YXIgbm9ybWFsSW1wdWxzZSA9ICgxICsgcGFpci5yZXN0aXR1dGlvbikgKiBub3JtYWxWZWxvY2l0eSxcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFsRm9yY2UgPSBDb21tb24uY2xhbXAocGFpci5zZXBhcmF0aW9uICsgbm9ybWFsVmVsb2NpdHksIDAsIDEpICogUmVzb2x2ZXIuX2ZyaWN0aW9uTm9ybWFsTXVsdGlwbGllcjtcblxuICAgICAgICAgICAgICAgIC8vIGNvdWxvbWIgZnJpY3Rpb25cbiAgICAgICAgICAgICAgICB2YXIgdGFuZ2VudEltcHVsc2UgPSB0YW5nZW50VmVsb2NpdHksXG4gICAgICAgICAgICAgICAgICAgIG1heEZyaWN0aW9uID0gSW5maW5pdHk7XG5cbiAgICAgICAgICAgICAgICBpZiAodGFuZ2VudFNwZWVkID4gcGFpci5mcmljdGlvbiAqIHBhaXIuZnJpY3Rpb25TdGF0aWMgKiBub3JtYWxGb3JjZSAqIHRpbWVTY2FsZVNxdWFyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbWF4RnJpY3Rpb24gPSB0YW5nZW50U3BlZWQ7XG4gICAgICAgICAgICAgICAgICAgIHRhbmdlbnRJbXB1bHNlID0gQ29tbW9uLmNsYW1wKFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFpci5mcmljdGlvbiAqIHRhbmdlbnRWZWxvY2l0eURpcmVjdGlvbiAqIHRpbWVTY2FsZVNxdWFyZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAtbWF4RnJpY3Rpb24sIG1heEZyaWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gbW9kaWZ5IGltcHVsc2VzIGFjY291bnRpbmcgZm9yIG1hc3MsIGluZXJ0aWEgYW5kIG9mZnNldFxuICAgICAgICAgICAgICAgIHZhciBvQWNOID0gVmVjdG9yLmNyb3NzKG9mZnNldEEsIG5vcm1hbCksXG4gICAgICAgICAgICAgICAgICAgIG9CY04gPSBWZWN0b3IuY3Jvc3Mob2Zmc2V0Qiwgbm9ybWFsKSxcbiAgICAgICAgICAgICAgICAgICAgc2hhcmUgPSBjb250YWN0U2hhcmUgLyAoYm9keUEuaW52ZXJzZU1hc3MgKyBib2R5Qi5pbnZlcnNlTWFzcyArIGJvZHlBLmludmVyc2VJbmVydGlhICogb0FjTiAqIG9BY04gICsgYm9keUIuaW52ZXJzZUluZXJ0aWEgKiBvQmNOICogb0JjTik7XG5cbiAgICAgICAgICAgICAgICBub3JtYWxJbXB1bHNlICo9IHNoYXJlO1xuICAgICAgICAgICAgICAgIHRhbmdlbnRJbXB1bHNlICo9IHNoYXJlO1xuXG4gICAgICAgICAgICAgICAgLy8gaGFuZGxlIGhpZ2ggdmVsb2NpdHkgYW5kIHJlc3RpbmcgY29sbGlzaW9ucyBzZXBhcmF0ZWx5XG4gICAgICAgICAgICAgICAgaWYgKG5vcm1hbFZlbG9jaXR5IDwgMCAmJiBub3JtYWxWZWxvY2l0eSAqIG5vcm1hbFZlbG9jaXR5ID4gUmVzb2x2ZXIuX3Jlc3RpbmdUaHJlc2ggKiB0aW1lU2NhbGVTcXVhcmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGhpZ2ggbm9ybWFsIHZlbG9jaXR5IHNvIGNsZWFyIGNhY2hlZCBjb250YWN0IG5vcm1hbCBpbXB1bHNlXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhY3Qubm9ybWFsSW1wdWxzZSA9IDA7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gc29sdmUgcmVzdGluZyBjb2xsaXNpb24gY29uc3RyYWludHMgdXNpbmcgRXJpbiBDYXR0bydzIG1ldGhvZCAoR0RDMDgpXG4gICAgICAgICAgICAgICAgICAgIC8vIGltcHVsc2UgY29uc3RyYWludCB0ZW5kcyB0byAwXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb250YWN0Tm9ybWFsSW1wdWxzZSA9IGNvbnRhY3Qubm9ybWFsSW1wdWxzZTtcbiAgICAgICAgICAgICAgICAgICAgY29udGFjdC5ub3JtYWxJbXB1bHNlID0gTWF0aC5taW4oY29udGFjdC5ub3JtYWxJbXB1bHNlICsgbm9ybWFsSW1wdWxzZSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbEltcHVsc2UgPSBjb250YWN0Lm5vcm1hbEltcHVsc2UgLSBjb250YWN0Tm9ybWFsSW1wdWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBoYW5kbGUgaGlnaCB2ZWxvY2l0eSBhbmQgcmVzdGluZyBjb2xsaXNpb25zIHNlcGFyYXRlbHlcbiAgICAgICAgICAgICAgICBpZiAodGFuZ2VudFZlbG9jaXR5ICogdGFuZ2VudFZlbG9jaXR5ID4gUmVzb2x2ZXIuX3Jlc3RpbmdUaHJlc2hUYW5nZW50ICogdGltZVNjYWxlU3F1YXJlZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBoaWdoIHRhbmdlbnQgdmVsb2NpdHkgc28gY2xlYXIgY2FjaGVkIGNvbnRhY3QgdGFuZ2VudCBpbXB1bHNlXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhY3QudGFuZ2VudEltcHVsc2UgPSAwO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHNvbHZlIHJlc3RpbmcgY29sbGlzaW9uIGNvbnN0cmFpbnRzIHVzaW5nIEVyaW4gQ2F0dG8ncyBtZXRob2QgKEdEQzA4KVxuICAgICAgICAgICAgICAgICAgICAvLyB0YW5nZW50IGltcHVsc2UgdGVuZHMgdG8gLXRhbmdlbnRTcGVlZCBvciArdGFuZ2VudFNwZWVkXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb250YWN0VGFuZ2VudEltcHVsc2UgPSBjb250YWN0LnRhbmdlbnRJbXB1bHNlO1xuICAgICAgICAgICAgICAgICAgICBjb250YWN0LnRhbmdlbnRJbXB1bHNlID0gQ29tbW9uLmNsYW1wKGNvbnRhY3QudGFuZ2VudEltcHVsc2UgKyB0YW5nZW50SW1wdWxzZSwgLW1heEZyaWN0aW9uLCBtYXhGcmljdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHRhbmdlbnRJbXB1bHNlID0gY29udGFjdC50YW5nZW50SW1wdWxzZSAtIGNvbnRhY3RUYW5nZW50SW1wdWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyB0b3RhbCBpbXB1bHNlIGZyb20gY29udGFjdFxuICAgICAgICAgICAgICAgIGltcHVsc2UueCA9IChub3JtYWwueCAqIG5vcm1hbEltcHVsc2UpICsgKHRhbmdlbnQueCAqIHRhbmdlbnRJbXB1bHNlKTtcbiAgICAgICAgICAgICAgICBpbXB1bHNlLnkgPSAobm9ybWFsLnkgKiBub3JtYWxJbXB1bHNlKSArICh0YW5nZW50LnkgKiB0YW5nZW50SW1wdWxzZSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gYXBwbHkgaW1wdWxzZSBmcm9tIGNvbnRhY3RcbiAgICAgICAgICAgICAgICBpZiAoIShib2R5QS5pc1N0YXRpYyB8fCBib2R5QS5pc1NsZWVwaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICBib2R5QS5wb3NpdGlvblByZXYueCArPSBpbXB1bHNlLnggKiBib2R5QS5pbnZlcnNlTWFzcztcbiAgICAgICAgICAgICAgICAgICAgYm9keUEucG9zaXRpb25QcmV2LnkgKz0gaW1wdWxzZS55ICogYm9keUEuaW52ZXJzZU1hc3M7XG4gICAgICAgICAgICAgICAgICAgIGJvZHlBLmFuZ2xlUHJldiArPSBWZWN0b3IuY3Jvc3Mob2Zmc2V0QSwgaW1wdWxzZSkgKiBib2R5QS5pbnZlcnNlSW5lcnRpYTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIShib2R5Qi5pc1N0YXRpYyB8fCBib2R5Qi5pc1NsZWVwaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICBib2R5Qi5wb3NpdGlvblByZXYueCAtPSBpbXB1bHNlLnggKiBib2R5Qi5pbnZlcnNlTWFzcztcbiAgICAgICAgICAgICAgICAgICAgYm9keUIucG9zaXRpb25QcmV2LnkgLT0gaW1wdWxzZS55ICogYm9keUIuaW52ZXJzZU1hc3M7XG4gICAgICAgICAgICAgICAgICAgIGJvZHlCLmFuZ2xlUHJldiAtPSBWZWN0b3IuY3Jvc3Mob2Zmc2V0QiwgaW1wdWxzZSkgKiBib2R5Qi5pbnZlcnNlSW5lcnRpYTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG59KSgpO1xuXG59LHtcIi4uL2NvcmUvQ29tbW9uXCI6MTQsXCIuLi9nZW9tZXRyeS9Cb3VuZHNcIjoyNCxcIi4uL2dlb21ldHJ5L1ZlY3RvclwiOjI2LFwiLi4vZ2VvbWV0cnkvVmVydGljZXNcIjoyN31dLDExOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuKiBUaGUgYE1hdHRlci5TQVRgIG1vZHVsZSBjb250YWlucyBtZXRob2RzIGZvciBkZXRlY3RpbmcgY29sbGlzaW9ucyB1c2luZyB0aGUgU2VwYXJhdGluZyBBeGlzIFRoZW9yZW0uXG4qXG4qIEBjbGFzcyBTQVRcbiovXG5cbi8vIFRPRE86IHRydWUgY2lyY2xlcyBhbmQgY3VydmVzXG5cbnZhciBTQVQgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBTQVQ7XG5cbnZhciBWZXJ0aWNlcyA9IHJlcXVpcmUoJy4uL2dlb21ldHJ5L1ZlcnRpY2VzJyk7XG52YXIgVmVjdG9yID0gcmVxdWlyZSgnLi4vZ2VvbWV0cnkvVmVjdG9yJyk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIERldGVjdCBjb2xsaXNpb24gYmV0d2VlbiB0d28gYm9kaWVzIHVzaW5nIHRoZSBTZXBhcmF0aW5nIEF4aXMgVGhlb3JlbS5cbiAgICAgKiBAbWV0aG9kIGNvbGxpZGVzXG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5QVxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keUJcbiAgICAgKiBAcGFyYW0ge2NvbGxpc2lvbn0gcHJldmlvdXNDb2xsaXNpb25cbiAgICAgKiBAcmV0dXJuIHtjb2xsaXNpb259IGNvbGxpc2lvblxuICAgICAqL1xuICAgIFNBVC5jb2xsaWRlcyA9IGZ1bmN0aW9uKGJvZHlBLCBib2R5QiwgcHJldmlvdXNDb2xsaXNpb24pIHtcbiAgICAgICAgdmFyIG92ZXJsYXBBQixcbiAgICAgICAgICAgIG92ZXJsYXBCQSwgXG4gICAgICAgICAgICBtaW5PdmVybGFwLFxuICAgICAgICAgICAgY29sbGlzaW9uLFxuICAgICAgICAgICAgcHJldkNvbCA9IHByZXZpb3VzQ29sbGlzaW9uLFxuICAgICAgICAgICAgY2FuUmV1c2VQcmV2Q29sID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHByZXZDb2wpIHtcbiAgICAgICAgICAgIC8vIGVzdGltYXRlIHRvdGFsIG1vdGlvblxuICAgICAgICAgICAgdmFyIHBhcmVudEEgPSBib2R5QS5wYXJlbnQsXG4gICAgICAgICAgICAgICAgcGFyZW50QiA9IGJvZHlCLnBhcmVudCxcbiAgICAgICAgICAgICAgICBtb3Rpb24gPSBwYXJlbnRBLnNwZWVkICogcGFyZW50QS5zcGVlZCArIHBhcmVudEEuYW5ndWxhclNwZWVkICogcGFyZW50QS5hbmd1bGFyU3BlZWRcbiAgICAgICAgICAgICAgICAgICAgICAgKyBwYXJlbnRCLnNwZWVkICogcGFyZW50Qi5zcGVlZCArIHBhcmVudEIuYW5ndWxhclNwZWVkICogcGFyZW50Qi5hbmd1bGFyU3BlZWQ7XG5cbiAgICAgICAgICAgIC8vIHdlIG1heSBiZSBhYmxlIHRvIChwYXJ0aWFsbHkpIHJldXNlIGNvbGxpc2lvbiByZXN1bHQgXG4gICAgICAgICAgICAvLyBidXQgb25seSBzYWZlIGlmIGNvbGxpc2lvbiB3YXMgcmVzdGluZ1xuICAgICAgICAgICAgY2FuUmV1c2VQcmV2Q29sID0gcHJldkNvbCAmJiBwcmV2Q29sLmNvbGxpZGVkICYmIG1vdGlvbiA8IDAuMjtcblxuICAgICAgICAgICAgLy8gcmV1c2UgY29sbGlzaW9uIG9iamVjdFxuICAgICAgICAgICAgY29sbGlzaW9uID0gcHJldkNvbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbGxpc2lvbiA9IHsgY29sbGlkZWQ6IGZhbHNlLCBib2R5QTogYm9keUEsIGJvZHlCOiBib2R5QiB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByZXZDb2wgJiYgY2FuUmV1c2VQcmV2Q29sKSB7XG4gICAgICAgICAgICAvLyBpZiB3ZSBjYW4gcmV1c2UgdGhlIGNvbGxpc2lvbiByZXN1bHRcbiAgICAgICAgICAgIC8vIHdlIG9ubHkgbmVlZCB0byB0ZXN0IHRoZSBwcmV2aW91c2x5IGZvdW5kIGF4aXNcbiAgICAgICAgICAgIHZhciBheGlzQm9keUEgPSBjb2xsaXNpb24uYXhpc0JvZHksXG4gICAgICAgICAgICAgICAgYXhpc0JvZHlCID0gYXhpc0JvZHlBID09PSBib2R5QSA/IGJvZHlCIDogYm9keUEsXG4gICAgICAgICAgICAgICAgYXhlcyA9IFtheGlzQm9keUEuYXhlc1twcmV2Q29sLmF4aXNOdW1iZXJdXTtcblxuICAgICAgICAgICAgbWluT3ZlcmxhcCA9IF9vdmVybGFwQXhlcyhheGlzQm9keUEudmVydGljZXMsIGF4aXNCb2R5Qi52ZXJ0aWNlcywgYXhlcyk7XG4gICAgICAgICAgICBjb2xsaXNpb24ucmV1c2VkID0gdHJ1ZTtcblxuICAgICAgICAgICAgaWYgKG1pbk92ZXJsYXAub3ZlcmxhcCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgY29sbGlzaW9uLmNvbGxpZGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbGxpc2lvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGlmIHdlIGNhbid0IHJldXNlIGEgcmVzdWx0LCBwZXJmb3JtIGEgZnVsbCBTQVQgdGVzdFxuXG4gICAgICAgICAgICBvdmVybGFwQUIgPSBfb3ZlcmxhcEF4ZXMoYm9keUEudmVydGljZXMsIGJvZHlCLnZlcnRpY2VzLCBib2R5QS5heGVzKTtcblxuICAgICAgICAgICAgaWYgKG92ZXJsYXBBQi5vdmVybGFwIDw9IDApIHtcbiAgICAgICAgICAgICAgICBjb2xsaXNpb24uY29sbGlkZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29sbGlzaW9uO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvdmVybGFwQkEgPSBfb3ZlcmxhcEF4ZXMoYm9keUIudmVydGljZXMsIGJvZHlBLnZlcnRpY2VzLCBib2R5Qi5heGVzKTtcblxuICAgICAgICAgICAgaWYgKG92ZXJsYXBCQS5vdmVybGFwIDw9IDApIHtcbiAgICAgICAgICAgICAgICBjb2xsaXNpb24uY29sbGlkZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29sbGlzaW9uO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAob3ZlcmxhcEFCLm92ZXJsYXAgPCBvdmVybGFwQkEub3ZlcmxhcCkge1xuICAgICAgICAgICAgICAgIG1pbk92ZXJsYXAgPSBvdmVybGFwQUI7XG4gICAgICAgICAgICAgICAgY29sbGlzaW9uLmF4aXNCb2R5ID0gYm9keUE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1pbk92ZXJsYXAgPSBvdmVybGFwQkE7XG4gICAgICAgICAgICAgICAgY29sbGlzaW9uLmF4aXNCb2R5ID0gYm9keUI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGltcG9ydGFudCBmb3IgcmV1c2UgbGF0ZXJcbiAgICAgICAgICAgIGNvbGxpc2lvbi5heGlzTnVtYmVyID0gbWluT3ZlcmxhcC5heGlzTnVtYmVyO1xuICAgICAgICB9XG5cbiAgICAgICAgY29sbGlzaW9uLmJvZHlBID0gYm9keUEuaWQgPCBib2R5Qi5pZCA/IGJvZHlBIDogYm9keUI7XG4gICAgICAgIGNvbGxpc2lvbi5ib2R5QiA9IGJvZHlBLmlkIDwgYm9keUIuaWQgPyBib2R5QiA6IGJvZHlBO1xuICAgICAgICBjb2xsaXNpb24uY29sbGlkZWQgPSB0cnVlO1xuICAgICAgICBjb2xsaXNpb24ubm9ybWFsID0gbWluT3ZlcmxhcC5heGlzO1xuICAgICAgICBjb2xsaXNpb24uZGVwdGggPSBtaW5PdmVybGFwLm92ZXJsYXA7XG4gICAgICAgIGNvbGxpc2lvbi5wYXJlbnRBID0gY29sbGlzaW9uLmJvZHlBLnBhcmVudDtcbiAgICAgICAgY29sbGlzaW9uLnBhcmVudEIgPSBjb2xsaXNpb24uYm9keUIucGFyZW50O1xuICAgICAgICBcbiAgICAgICAgYm9keUEgPSBjb2xsaXNpb24uYm9keUE7XG4gICAgICAgIGJvZHlCID0gY29sbGlzaW9uLmJvZHlCO1xuXG4gICAgICAgIC8vIGVuc3VyZSBub3JtYWwgaXMgZmFjaW5nIGF3YXkgZnJvbSBib2R5QVxuICAgICAgICBpZiAoVmVjdG9yLmRvdChjb2xsaXNpb24ubm9ybWFsLCBWZWN0b3Iuc3ViKGJvZHlCLnBvc2l0aW9uLCBib2R5QS5wb3NpdGlvbikpID4gMCkgXG4gICAgICAgICAgICBjb2xsaXNpb24ubm9ybWFsID0gVmVjdG9yLm5lZyhjb2xsaXNpb24ubm9ybWFsKTtcblxuICAgICAgICBjb2xsaXNpb24udGFuZ2VudCA9IFZlY3Rvci5wZXJwKGNvbGxpc2lvbi5ub3JtYWwpO1xuXG4gICAgICAgIGNvbGxpc2lvbi5wZW5ldHJhdGlvbiA9IHsgXG4gICAgICAgICAgICB4OiBjb2xsaXNpb24ubm9ybWFsLnggKiBjb2xsaXNpb24uZGVwdGgsIFxuICAgICAgICAgICAgeTogY29sbGlzaW9uLm5vcm1hbC55ICogY29sbGlzaW9uLmRlcHRoIFxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIGZpbmQgc3VwcG9ydCBwb2ludHMsIHRoZXJlIGlzIGFsd2F5cyBlaXRoZXIgZXhhY3RseSBvbmUgb3IgdHdvXG4gICAgICAgIHZhciB2ZXJ0aWNlc0IgPSBfZmluZFN1cHBvcnRzKGJvZHlBLCBib2R5QiwgY29sbGlzaW9uLm5vcm1hbCksXG4gICAgICAgICAgICBzdXBwb3J0cyA9IGNvbGxpc2lvbi5zdXBwb3J0cyB8fCBbXTtcbiAgICAgICAgc3VwcG9ydHMubGVuZ3RoID0gMDtcblxuICAgICAgICAvLyBmaW5kIHRoZSBzdXBwb3J0cyBmcm9tIGJvZHlCIHRoYXQgYXJlIGluc2lkZSBib2R5QVxuICAgICAgICBpZiAoVmVydGljZXMuY29udGFpbnMoYm9keUEudmVydGljZXMsIHZlcnRpY2VzQlswXSkpXG4gICAgICAgICAgICBzdXBwb3J0cy5wdXNoKHZlcnRpY2VzQlswXSk7XG5cbiAgICAgICAgaWYgKFZlcnRpY2VzLmNvbnRhaW5zKGJvZHlBLnZlcnRpY2VzLCB2ZXJ0aWNlc0JbMV0pKVxuICAgICAgICAgICAgc3VwcG9ydHMucHVzaCh2ZXJ0aWNlc0JbMV0pO1xuXG4gICAgICAgIC8vIGZpbmQgdGhlIHN1cHBvcnRzIGZyb20gYm9keUEgdGhhdCBhcmUgaW5zaWRlIGJvZHlCXG4gICAgICAgIGlmIChzdXBwb3J0cy5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgICB2YXIgdmVydGljZXNBID0gX2ZpbmRTdXBwb3J0cyhib2R5QiwgYm9keUEsIFZlY3Rvci5uZWcoY29sbGlzaW9uLm5vcm1hbCkpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKFZlcnRpY2VzLmNvbnRhaW5zKGJvZHlCLnZlcnRpY2VzLCB2ZXJ0aWNlc0FbMF0pKVxuICAgICAgICAgICAgICAgIHN1cHBvcnRzLnB1c2godmVydGljZXNBWzBdKTtcblxuICAgICAgICAgICAgaWYgKHN1cHBvcnRzLmxlbmd0aCA8IDIgJiYgVmVydGljZXMuY29udGFpbnMoYm9keUIudmVydGljZXMsIHZlcnRpY2VzQVsxXSkpXG4gICAgICAgICAgICAgICAgc3VwcG9ydHMucHVzaCh2ZXJ0aWNlc0FbMV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYWNjb3VudCBmb3IgdGhlIGVkZ2UgY2FzZSBvZiBvdmVybGFwcGluZyBidXQgbm8gdmVydGV4IGNvbnRhaW5tZW50XG4gICAgICAgIGlmIChzdXBwb3J0cy5sZW5ndGggPCAxKVxuICAgICAgICAgICAgc3VwcG9ydHMgPSBbdmVydGljZXNCWzBdXTtcbiAgICAgICAgXG4gICAgICAgIGNvbGxpc2lvbi5zdXBwb3J0cyA9IHN1cHBvcnRzO1xuXG4gICAgICAgIHJldHVybiBjb2xsaXNpb247XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEZpbmQgdGhlIG92ZXJsYXAgYmV0d2VlbiB0d28gc2V0cyBvZiB2ZXJ0aWNlcy5cbiAgICAgKiBAbWV0aG9kIF9vdmVybGFwQXhlc1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHt9IHZlcnRpY2VzQVxuICAgICAqIEBwYXJhbSB7fSB2ZXJ0aWNlc0JcbiAgICAgKiBAcGFyYW0ge30gYXhlc1xuICAgICAqIEByZXR1cm4gcmVzdWx0XG4gICAgICovXG4gICAgdmFyIF9vdmVybGFwQXhlcyA9IGZ1bmN0aW9uKHZlcnRpY2VzQSwgdmVydGljZXNCLCBheGVzKSB7XG4gICAgICAgIHZhciBwcm9qZWN0aW9uQSA9IFZlY3Rvci5fdGVtcFswXSwgXG4gICAgICAgICAgICBwcm9qZWN0aW9uQiA9IFZlY3Rvci5fdGVtcFsxXSxcbiAgICAgICAgICAgIHJlc3VsdCA9IHsgb3ZlcmxhcDogTnVtYmVyLk1BWF9WQUxVRSB9LFxuICAgICAgICAgICAgb3ZlcmxhcCxcbiAgICAgICAgICAgIGF4aXM7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBheGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBheGlzID0gYXhlc1tpXTtcblxuICAgICAgICAgICAgX3Byb2plY3RUb0F4aXMocHJvamVjdGlvbkEsIHZlcnRpY2VzQSwgYXhpcyk7XG4gICAgICAgICAgICBfcHJvamVjdFRvQXhpcyhwcm9qZWN0aW9uQiwgdmVydGljZXNCLCBheGlzKTtcblxuICAgICAgICAgICAgb3ZlcmxhcCA9IE1hdGgubWluKHByb2plY3Rpb25BLm1heCAtIHByb2plY3Rpb25CLm1pbiwgcHJvamVjdGlvbkIubWF4IC0gcHJvamVjdGlvbkEubWluKTtcblxuICAgICAgICAgICAgaWYgKG92ZXJsYXAgPD0gMCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5vdmVybGFwID0gb3ZlcmxhcDtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAob3ZlcmxhcCA8IHJlc3VsdC5vdmVybGFwKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0Lm92ZXJsYXAgPSBvdmVybGFwO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5heGlzID0gYXhpcztcbiAgICAgICAgICAgICAgICByZXN1bHQuYXhpc051bWJlciA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQcm9qZWN0cyB2ZXJ0aWNlcyBvbiBhbiBheGlzIGFuZCByZXR1cm5zIGFuIGludGVydmFsLlxuICAgICAqIEBtZXRob2QgX3Byb2plY3RUb0F4aXNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7fSBwcm9qZWN0aW9uXG4gICAgICogQHBhcmFtIHt9IHZlcnRpY2VzXG4gICAgICogQHBhcmFtIHt9IGF4aXNcbiAgICAgKi9cbiAgICB2YXIgX3Byb2plY3RUb0F4aXMgPSBmdW5jdGlvbihwcm9qZWN0aW9uLCB2ZXJ0aWNlcywgYXhpcykge1xuICAgICAgICB2YXIgbWluID0gVmVjdG9yLmRvdCh2ZXJ0aWNlc1swXSwgYXhpcyksXG4gICAgICAgICAgICBtYXggPSBtaW47XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCB2ZXJ0aWNlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgdmFyIGRvdCA9IFZlY3Rvci5kb3QodmVydGljZXNbaV0sIGF4aXMpO1xuXG4gICAgICAgICAgICBpZiAoZG90ID4gbWF4KSB7IFxuICAgICAgICAgICAgICAgIG1heCA9IGRvdDsgXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRvdCA8IG1pbikgeyBcbiAgICAgICAgICAgICAgICBtaW4gPSBkb3Q7IFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJvamVjdGlvbi5taW4gPSBtaW47XG4gICAgICAgIHByb2plY3Rpb24ubWF4ID0gbWF4O1xuICAgIH07XG4gICAgXG4gICAgLyoqXG4gICAgICogRmluZHMgc3VwcG9ydGluZyB2ZXJ0aWNlcyBnaXZlbiB0d28gYm9kaWVzIGFsb25nIGEgZ2l2ZW4gZGlyZWN0aW9uIHVzaW5nIGhpbGwtY2xpbWJpbmcuXG4gICAgICogQG1ldGhvZCBfZmluZFN1cHBvcnRzXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge30gYm9keUFcbiAgICAgKiBAcGFyYW0ge30gYm9keUJcbiAgICAgKiBAcGFyYW0ge30gbm9ybWFsXG4gICAgICogQHJldHVybiBbdmVjdG9yXVxuICAgICAqL1xuICAgIHZhciBfZmluZFN1cHBvcnRzID0gZnVuY3Rpb24oYm9keUEsIGJvZHlCLCBub3JtYWwpIHtcbiAgICAgICAgdmFyIG5lYXJlc3REaXN0YW5jZSA9IE51bWJlci5NQVhfVkFMVUUsXG4gICAgICAgICAgICB2ZXJ0ZXhUb0JvZHkgPSBWZWN0b3IuX3RlbXBbMF0sXG4gICAgICAgICAgICB2ZXJ0aWNlcyA9IGJvZHlCLnZlcnRpY2VzLFxuICAgICAgICAgICAgYm9keUFQb3NpdGlvbiA9IGJvZHlBLnBvc2l0aW9uLFxuICAgICAgICAgICAgZGlzdGFuY2UsXG4gICAgICAgICAgICB2ZXJ0ZXgsXG4gICAgICAgICAgICB2ZXJ0ZXhBLFxuICAgICAgICAgICAgdmVydGV4QjtcblxuICAgICAgICAvLyBmaW5kIGNsb3Nlc3QgdmVydGV4IG9uIGJvZHlCXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmVydGljZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZlcnRleCA9IHZlcnRpY2VzW2ldO1xuICAgICAgICAgICAgdmVydGV4VG9Cb2R5LnggPSB2ZXJ0ZXgueCAtIGJvZHlBUG9zaXRpb24ueDtcbiAgICAgICAgICAgIHZlcnRleFRvQm9keS55ID0gdmVydGV4LnkgLSBib2R5QVBvc2l0aW9uLnk7XG4gICAgICAgICAgICBkaXN0YW5jZSA9IC1WZWN0b3IuZG90KG5vcm1hbCwgdmVydGV4VG9Cb2R5KTtcblxuICAgICAgICAgICAgaWYgKGRpc3RhbmNlIDwgbmVhcmVzdERpc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgbmVhcmVzdERpc3RhbmNlID0gZGlzdGFuY2U7XG4gICAgICAgICAgICAgICAgdmVydGV4QSA9IHZlcnRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGZpbmQgbmV4dCBjbG9zZXN0IHZlcnRleCB1c2luZyB0aGUgdHdvIGNvbm5lY3RlZCB0byBpdFxuICAgICAgICB2YXIgcHJldkluZGV4ID0gdmVydGV4QS5pbmRleCAtIDEgPj0gMCA/IHZlcnRleEEuaW5kZXggLSAxIDogdmVydGljZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgdmVydGV4ID0gdmVydGljZXNbcHJldkluZGV4XTtcbiAgICAgICAgdmVydGV4VG9Cb2R5LnggPSB2ZXJ0ZXgueCAtIGJvZHlBUG9zaXRpb24ueDtcbiAgICAgICAgdmVydGV4VG9Cb2R5LnkgPSB2ZXJ0ZXgueSAtIGJvZHlBUG9zaXRpb24ueTtcbiAgICAgICAgbmVhcmVzdERpc3RhbmNlID0gLVZlY3Rvci5kb3Qobm9ybWFsLCB2ZXJ0ZXhUb0JvZHkpO1xuICAgICAgICB2ZXJ0ZXhCID0gdmVydGV4O1xuXG4gICAgICAgIHZhciBuZXh0SW5kZXggPSAodmVydGV4QS5pbmRleCArIDEpICUgdmVydGljZXMubGVuZ3RoO1xuICAgICAgICB2ZXJ0ZXggPSB2ZXJ0aWNlc1tuZXh0SW5kZXhdO1xuICAgICAgICB2ZXJ0ZXhUb0JvZHkueCA9IHZlcnRleC54IC0gYm9keUFQb3NpdGlvbi54O1xuICAgICAgICB2ZXJ0ZXhUb0JvZHkueSA9IHZlcnRleC55IC0gYm9keUFQb3NpdGlvbi55O1xuICAgICAgICBkaXN0YW5jZSA9IC1WZWN0b3IuZG90KG5vcm1hbCwgdmVydGV4VG9Cb2R5KTtcbiAgICAgICAgaWYgKGRpc3RhbmNlIDwgbmVhcmVzdERpc3RhbmNlKSB7XG4gICAgICAgICAgICB2ZXJ0ZXhCID0gdmVydGV4O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFt2ZXJ0ZXhBLCB2ZXJ0ZXhCXTtcbiAgICB9O1xuXG59KSgpO1xuXG59LHtcIi4uL2dlb21ldHJ5L1ZlY3RvclwiOjI2LFwiLi4vZ2VvbWV0cnkvVmVydGljZXNcIjoyN31dLDEyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuKiBUaGUgYE1hdHRlci5Db25zdHJhaW50YCBtb2R1bGUgY29udGFpbnMgbWV0aG9kcyBmb3IgY3JlYXRpbmcgYW5kIG1hbmlwdWxhdGluZyBjb25zdHJhaW50cy5cbiogQ29uc3RyYWludHMgYXJlIHVzZWQgZm9yIHNwZWNpZnlpbmcgdGhhdCBhIGZpeGVkIGRpc3RhbmNlIG11c3QgYmUgbWFpbnRhaW5lZCBiZXR3ZWVuIHR3byBib2RpZXMgKG9yIGEgYm9keSBhbmQgYSBmaXhlZCB3b3JsZC1zcGFjZSBwb3NpdGlvbikuXG4qIFRoZSBzdGlmZm5lc3Mgb2YgY29uc3RyYWludHMgY2FuIGJlIG1vZGlmaWVkIHRvIGNyZWF0ZSBzcHJpbmdzIG9yIGVsYXN0aWMuXG4qXG4qIFNlZSB0aGUgaW5jbHVkZWQgdXNhZ2UgW2V4YW1wbGVzXShodHRwczovL2dpdGh1Yi5jb20vbGlhYnJ1L21hdHRlci1qcy90cmVlL21hc3Rlci9leGFtcGxlcykuXG4qXG4qIEBjbGFzcyBDb25zdHJhaW50XG4qL1xuXG4vLyBUT0RPOiBmaXggaW5zdGFiaWxpdHkgaXNzdWVzIHdpdGggdG9ycXVlXG4vLyBUT0RPOiBsaW5rZWQgY29uc3RyYWludHNcbi8vIFRPRE86IGJyZWFrYWJsZSBjb25zdHJhaW50c1xuLy8gVE9ETzogY29sbGlzaW9uIGNvbnN0cmFpbnRzXG4vLyBUT0RPOiBhbGxvdyBjb25zdHJhaW5lZCBib2RpZXMgdG8gc2xlZXBcbi8vIFRPRE86IGhhbmRsZSAwIGxlbmd0aCBjb25zdHJhaW50cyBwcm9wZXJseVxuLy8gVE9ETzogaW1wdWxzZSBjYWNoaW5nIGFuZCB3YXJtaW5nXG5cbnZhciBDb25zdHJhaW50ID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gQ29uc3RyYWludDtcblxudmFyIFZlcnRpY2VzID0gcmVxdWlyZSgnLi4vZ2VvbWV0cnkvVmVydGljZXMnKTtcbnZhciBWZWN0b3IgPSByZXF1aXJlKCcuLi9nZW9tZXRyeS9WZWN0b3InKTtcbnZhciBTbGVlcGluZyA9IHJlcXVpcmUoJy4uL2NvcmUvU2xlZXBpbmcnKTtcbnZhciBCb3VuZHMgPSByZXF1aXJlKCcuLi9nZW9tZXRyeS9Cb3VuZHMnKTtcbnZhciBBeGVzID0gcmVxdWlyZSgnLi4vZ2VvbWV0cnkvQXhlcycpO1xudmFyIENvbW1vbiA9IHJlcXVpcmUoJy4uL2NvcmUvQ29tbW9uJyk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIHZhciBfbWluTGVuZ3RoID0gMC4wMDAwMDEsXG4gICAgICAgIF9taW5EaWZmZXJlbmNlID0gMC4wMDE7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGNvbnN0cmFpbnQuXG4gICAgICogQWxsIHByb3BlcnRpZXMgaGF2ZSBkZWZhdWx0IHZhbHVlcywgYW5kIG1hbnkgYXJlIHByZS1jYWxjdWxhdGVkIGF1dG9tYXRpY2FsbHkgYmFzZWQgb24gb3RoZXIgcHJvcGVydGllcy5cbiAgICAgKiBTZWUgdGhlIHByb3BlcnRpZXMgc2VjdGlvbiBiZWxvdyBmb3IgZGV0YWlsZWQgaW5mb3JtYXRpb24gb24gd2hhdCB5b3UgY2FuIHBhc3MgdmlhIHRoZSBgb3B0aW9uc2Agb2JqZWN0LlxuICAgICAqIEBtZXRob2QgY3JlYXRlXG4gICAgICogQHBhcmFtIHt9IG9wdGlvbnNcbiAgICAgKiBAcmV0dXJuIHtjb25zdHJhaW50fSBjb25zdHJhaW50XG4gICAgICovXG4gICAgQ29uc3RyYWludC5jcmVhdGUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIHZhciBjb25zdHJhaW50ID0gb3B0aW9ucztcblxuICAgICAgICAvLyBpZiBib2RpZXMgZGVmaW5lZCBidXQgbm8gcG9pbnRzLCB1c2UgYm9keSBjZW50cmVcbiAgICAgICAgaWYgKGNvbnN0cmFpbnQuYm9keUEgJiYgIWNvbnN0cmFpbnQucG9pbnRBKVxuICAgICAgICAgICAgY29uc3RyYWludC5wb2ludEEgPSB7IHg6IDAsIHk6IDAgfTtcbiAgICAgICAgaWYgKGNvbnN0cmFpbnQuYm9keUIgJiYgIWNvbnN0cmFpbnQucG9pbnRCKVxuICAgICAgICAgICAgY29uc3RyYWludC5wb2ludEIgPSB7IHg6IDAsIHk6IDAgfTtcblxuICAgICAgICAvLyBjYWxjdWxhdGUgc3RhdGljIGxlbmd0aCB1c2luZyBpbml0aWFsIHdvcmxkIHNwYWNlIHBvaW50c1xuICAgICAgICB2YXIgaW5pdGlhbFBvaW50QSA9IGNvbnN0cmFpbnQuYm9keUEgPyBWZWN0b3IuYWRkKGNvbnN0cmFpbnQuYm9keUEucG9zaXRpb24sIGNvbnN0cmFpbnQucG9pbnRBKSA6IGNvbnN0cmFpbnQucG9pbnRBLFxuICAgICAgICAgICAgaW5pdGlhbFBvaW50QiA9IGNvbnN0cmFpbnQuYm9keUIgPyBWZWN0b3IuYWRkKGNvbnN0cmFpbnQuYm9keUIucG9zaXRpb24sIGNvbnN0cmFpbnQucG9pbnRCKSA6IGNvbnN0cmFpbnQucG9pbnRCLFxuICAgICAgICAgICAgbGVuZ3RoID0gVmVjdG9yLm1hZ25pdHVkZShWZWN0b3Iuc3ViKGluaXRpYWxQb2ludEEsIGluaXRpYWxQb2ludEIpKTtcbiAgICBcbiAgICAgICAgY29uc3RyYWludC5sZW5ndGggPSBjb25zdHJhaW50Lmxlbmd0aCB8fCBsZW5ndGggfHwgX21pbkxlbmd0aDtcblxuICAgICAgICAvLyByZW5kZXJcbiAgICAgICAgdmFyIHJlbmRlciA9IHtcbiAgICAgICAgICAgIHZpc2libGU6IHRydWUsXG4gICAgICAgICAgICBsaW5lV2lkdGg6IDIsXG4gICAgICAgICAgICBzdHJva2VTdHlsZTogJyM2NjYnXG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICBjb25zdHJhaW50LnJlbmRlciA9IENvbW1vbi5leHRlbmQocmVuZGVyLCBjb25zdHJhaW50LnJlbmRlcik7XG5cbiAgICAgICAgLy8gb3B0aW9uIGRlZmF1bHRzXG4gICAgICAgIGNvbnN0cmFpbnQuaWQgPSBjb25zdHJhaW50LmlkIHx8IENvbW1vbi5uZXh0SWQoKTtcbiAgICAgICAgY29uc3RyYWludC5sYWJlbCA9IGNvbnN0cmFpbnQubGFiZWwgfHwgJ0NvbnN0cmFpbnQnO1xuICAgICAgICBjb25zdHJhaW50LnR5cGUgPSAnY29uc3RyYWludCc7XG4gICAgICAgIGNvbnN0cmFpbnQuc3RpZmZuZXNzID0gY29uc3RyYWludC5zdGlmZm5lc3MgfHwgMTtcbiAgICAgICAgY29uc3RyYWludC5hbmd1bGFyU3RpZmZuZXNzID0gY29uc3RyYWludC5hbmd1bGFyU3RpZmZuZXNzIHx8IDA7XG4gICAgICAgIGNvbnN0cmFpbnQuYW5nbGVBID0gY29uc3RyYWludC5ib2R5QSA/IGNvbnN0cmFpbnQuYm9keUEuYW5nbGUgOiBjb25zdHJhaW50LmFuZ2xlQTtcbiAgICAgICAgY29uc3RyYWludC5hbmdsZUIgPSBjb25zdHJhaW50LmJvZHlCID8gY29uc3RyYWludC5ib2R5Qi5hbmdsZSA6IGNvbnN0cmFpbnQuYW5nbGVCO1xuXG4gICAgICAgIHJldHVybiBjb25zdHJhaW50O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTb2x2ZXMgYWxsIGNvbnN0cmFpbnRzIGluIGEgbGlzdCBvZiBjb2xsaXNpb25zLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCBzb2x2ZUFsbFxuICAgICAqIEBwYXJhbSB7Y29uc3RyYWludFtdfSBjb25zdHJhaW50c1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lU2NhbGVcbiAgICAgKi9cbiAgICBDb25zdHJhaW50LnNvbHZlQWxsID0gZnVuY3Rpb24oY29uc3RyYWludHMsIHRpbWVTY2FsZSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnN0cmFpbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBDb25zdHJhaW50LnNvbHZlKGNvbnN0cmFpbnRzW2ldLCB0aW1lU2NhbGUpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNvbHZlcyBhIGRpc3RhbmNlIGNvbnN0cmFpbnQgd2l0aCBHYXVzcy1TaWVkZWwgbWV0aG9kLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCBzb2x2ZVxuICAgICAqIEBwYXJhbSB7Y29uc3RyYWludH0gY29uc3RyYWludFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lU2NhbGVcbiAgICAgKi9cbiAgICBDb25zdHJhaW50LnNvbHZlID0gZnVuY3Rpb24oY29uc3RyYWludCwgdGltZVNjYWxlKSB7XG4gICAgICAgIHZhciBib2R5QSA9IGNvbnN0cmFpbnQuYm9keUEsXG4gICAgICAgICAgICBib2R5QiA9IGNvbnN0cmFpbnQuYm9keUIsXG4gICAgICAgICAgICBwb2ludEEgPSBjb25zdHJhaW50LnBvaW50QSxcbiAgICAgICAgICAgIHBvaW50QiA9IGNvbnN0cmFpbnQucG9pbnRCO1xuXG4gICAgICAgIC8vIHVwZGF0ZSByZWZlcmVuY2UgYW5nbGVcbiAgICAgICAgaWYgKGJvZHlBICYmICFib2R5QS5pc1N0YXRpYykge1xuICAgICAgICAgICAgY29uc3RyYWludC5wb2ludEEgPSBWZWN0b3Iucm90YXRlKHBvaW50QSwgYm9keUEuYW5nbGUgLSBjb25zdHJhaW50LmFuZ2xlQSk7XG4gICAgICAgICAgICBjb25zdHJhaW50LmFuZ2xlQSA9IGJvZHlBLmFuZ2xlO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyB1cGRhdGUgcmVmZXJlbmNlIGFuZ2xlXG4gICAgICAgIGlmIChib2R5QiAmJiAhYm9keUIuaXNTdGF0aWMpIHtcbiAgICAgICAgICAgIGNvbnN0cmFpbnQucG9pbnRCID0gVmVjdG9yLnJvdGF0ZShwb2ludEIsIGJvZHlCLmFuZ2xlIC0gY29uc3RyYWludC5hbmdsZUIpO1xuICAgICAgICAgICAgY29uc3RyYWludC5hbmdsZUIgPSBib2R5Qi5hbmdsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwb2ludEFXb3JsZCA9IHBvaW50QSxcbiAgICAgICAgICAgIHBvaW50QldvcmxkID0gcG9pbnRCO1xuXG4gICAgICAgIGlmIChib2R5QSkgcG9pbnRBV29ybGQgPSBWZWN0b3IuYWRkKGJvZHlBLnBvc2l0aW9uLCBwb2ludEEpO1xuICAgICAgICBpZiAoYm9keUIpIHBvaW50QldvcmxkID0gVmVjdG9yLmFkZChib2R5Qi5wb3NpdGlvbiwgcG9pbnRCKTtcblxuICAgICAgICBpZiAoIXBvaW50QVdvcmxkIHx8ICFwb2ludEJXb3JsZClcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICB2YXIgZGVsdGEgPSBWZWN0b3Iuc3ViKHBvaW50QVdvcmxkLCBwb2ludEJXb3JsZCksXG4gICAgICAgICAgICBjdXJyZW50TGVuZ3RoID0gVmVjdG9yLm1hZ25pdHVkZShkZWx0YSk7XG5cbiAgICAgICAgLy8gcHJldmVudCBzaW5ndWxhcml0eVxuICAgICAgICBpZiAoY3VycmVudExlbmd0aCA9PT0gMClcbiAgICAgICAgICAgIGN1cnJlbnRMZW5ndGggPSBfbWluTGVuZ3RoO1xuXG4gICAgICAgIC8vIHNvbHZlIGRpc3RhbmNlIGNvbnN0cmFpbnQgd2l0aCBHYXVzcy1TaWVkZWwgbWV0aG9kXG4gICAgICAgIHZhciBkaWZmZXJlbmNlID0gKGN1cnJlbnRMZW5ndGggLSBjb25zdHJhaW50Lmxlbmd0aCkgLyBjdXJyZW50TGVuZ3RoLFxuICAgICAgICAgICAgbm9ybWFsID0gVmVjdG9yLmRpdihkZWx0YSwgY3VycmVudExlbmd0aCksXG4gICAgICAgICAgICBmb3JjZSA9IFZlY3Rvci5tdWx0KGRlbHRhLCBkaWZmZXJlbmNlICogMC41ICogY29uc3RyYWludC5zdGlmZm5lc3MgKiB0aW1lU2NhbGUgKiB0aW1lU2NhbGUpO1xuICAgICAgICBcbiAgICAgICAgLy8gaWYgZGlmZmVyZW5jZSBpcyB2ZXJ5IHNtYWxsLCB3ZSBjYW4gc2tpcFxuICAgICAgICBpZiAoTWF0aC5hYnMoMSAtIChjdXJyZW50TGVuZ3RoIC8gY29uc3RyYWludC5sZW5ndGgpKSA8IF9taW5EaWZmZXJlbmNlICogdGltZVNjYWxlKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIHZhciB2ZWxvY2l0eVBvaW50QSxcbiAgICAgICAgICAgIHZlbG9jaXR5UG9pbnRCLFxuICAgICAgICAgICAgb2Zmc2V0QSxcbiAgICAgICAgICAgIG9mZnNldEIsXG4gICAgICAgICAgICBvQW4sXG4gICAgICAgICAgICBvQm4sXG4gICAgICAgICAgICBib2R5QURlbm9tLFxuICAgICAgICAgICAgYm9keUJEZW5vbTtcbiAgICBcbiAgICAgICAgaWYgKGJvZHlBICYmICFib2R5QS5pc1N0YXRpYykge1xuICAgICAgICAgICAgLy8gcG9pbnQgYm9keSBvZmZzZXRcbiAgICAgICAgICAgIG9mZnNldEEgPSB7IFxuICAgICAgICAgICAgICAgIHg6IHBvaW50QVdvcmxkLnggLSBib2R5QS5wb3NpdGlvbi54ICsgZm9yY2UueCwgXG4gICAgICAgICAgICAgICAgeTogcG9pbnRBV29ybGQueSAtIGJvZHlBLnBvc2l0aW9uLnkgKyBmb3JjZS55XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyB1cGRhdGUgdmVsb2NpdHlcbiAgICAgICAgICAgIGJvZHlBLnZlbG9jaXR5LnggPSBib2R5QS5wb3NpdGlvbi54IC0gYm9keUEucG9zaXRpb25QcmV2Lng7XG4gICAgICAgICAgICBib2R5QS52ZWxvY2l0eS55ID0gYm9keUEucG9zaXRpb24ueSAtIGJvZHlBLnBvc2l0aW9uUHJldi55O1xuICAgICAgICAgICAgYm9keUEuYW5ndWxhclZlbG9jaXR5ID0gYm9keUEuYW5nbGUgLSBib2R5QS5hbmdsZVByZXY7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGZpbmQgcG9pbnQgdmVsb2NpdHkgYW5kIGJvZHkgbWFzc1xuICAgICAgICAgICAgdmVsb2NpdHlQb2ludEEgPSBWZWN0b3IuYWRkKGJvZHlBLnZlbG9jaXR5LCBWZWN0b3IubXVsdChWZWN0b3IucGVycChvZmZzZXRBKSwgYm9keUEuYW5ndWxhclZlbG9jaXR5KSk7XG4gICAgICAgICAgICBvQW4gPSBWZWN0b3IuZG90KG9mZnNldEEsIG5vcm1hbCk7XG4gICAgICAgICAgICBib2R5QURlbm9tID0gYm9keUEuaW52ZXJzZU1hc3MgKyBib2R5QS5pbnZlcnNlSW5lcnRpYSAqIG9BbiAqIG9BbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZlbG9jaXR5UG9pbnRBID0geyB4OiAwLCB5OiAwIH07XG4gICAgICAgICAgICBib2R5QURlbm9tID0gYm9keUEgPyBib2R5QS5pbnZlcnNlTWFzcyA6IDA7XG4gICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICBpZiAoYm9keUIgJiYgIWJvZHlCLmlzU3RhdGljKSB7XG4gICAgICAgICAgICAvLyBwb2ludCBib2R5IG9mZnNldFxuICAgICAgICAgICAgb2Zmc2V0QiA9IHsgXG4gICAgICAgICAgICAgICAgeDogcG9pbnRCV29ybGQueCAtIGJvZHlCLnBvc2l0aW9uLnggLSBmb3JjZS54LCBcbiAgICAgICAgICAgICAgICB5OiBwb2ludEJXb3JsZC55IC0gYm9keUIucG9zaXRpb24ueSAtIGZvcmNlLnkgXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyB1cGRhdGUgdmVsb2NpdHlcbiAgICAgICAgICAgIGJvZHlCLnZlbG9jaXR5LnggPSBib2R5Qi5wb3NpdGlvbi54IC0gYm9keUIucG9zaXRpb25QcmV2Lng7XG4gICAgICAgICAgICBib2R5Qi52ZWxvY2l0eS55ID0gYm9keUIucG9zaXRpb24ueSAtIGJvZHlCLnBvc2l0aW9uUHJldi55O1xuICAgICAgICAgICAgYm9keUIuYW5ndWxhclZlbG9jaXR5ID0gYm9keUIuYW5nbGUgLSBib2R5Qi5hbmdsZVByZXY7XG5cbiAgICAgICAgICAgIC8vIGZpbmQgcG9pbnQgdmVsb2NpdHkgYW5kIGJvZHkgbWFzc1xuICAgICAgICAgICAgdmVsb2NpdHlQb2ludEIgPSBWZWN0b3IuYWRkKGJvZHlCLnZlbG9jaXR5LCBWZWN0b3IubXVsdChWZWN0b3IucGVycChvZmZzZXRCKSwgYm9keUIuYW5ndWxhclZlbG9jaXR5KSk7XG4gICAgICAgICAgICBvQm4gPSBWZWN0b3IuZG90KG9mZnNldEIsIG5vcm1hbCk7XG4gICAgICAgICAgICBib2R5QkRlbm9tID0gYm9keUIuaW52ZXJzZU1hc3MgKyBib2R5Qi5pbnZlcnNlSW5lcnRpYSAqIG9CbiAqIG9CbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZlbG9jaXR5UG9pbnRCID0geyB4OiAwLCB5OiAwIH07XG4gICAgICAgICAgICBib2R5QkRlbm9tID0gYm9keUIgPyBib2R5Qi5pbnZlcnNlTWFzcyA6IDA7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciByZWxhdGl2ZVZlbG9jaXR5ID0gVmVjdG9yLnN1Yih2ZWxvY2l0eVBvaW50QiwgdmVsb2NpdHlQb2ludEEpLFxuICAgICAgICAgICAgbm9ybWFsSW1wdWxzZSA9IFZlY3Rvci5kb3Qobm9ybWFsLCByZWxhdGl2ZVZlbG9jaXR5KSAvIChib2R5QURlbm9tICsgYm9keUJEZW5vbSk7XG4gICAgXG4gICAgICAgIGlmIChub3JtYWxJbXB1bHNlID4gMCkgbm9ybWFsSW1wdWxzZSA9IDA7XG4gICAgXG4gICAgICAgIHZhciBub3JtYWxWZWxvY2l0eSA9IHtcbiAgICAgICAgICAgIHg6IG5vcm1hbC54ICogbm9ybWFsSW1wdWxzZSwgXG4gICAgICAgICAgICB5OiBub3JtYWwueSAqIG5vcm1hbEltcHVsc2VcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgdG9ycXVlO1xuIFxuICAgICAgICBpZiAoYm9keUEgJiYgIWJvZHlBLmlzU3RhdGljKSB7XG4gICAgICAgICAgICB0b3JxdWUgPSBWZWN0b3IuY3Jvc3Mob2Zmc2V0QSwgbm9ybWFsVmVsb2NpdHkpICogYm9keUEuaW52ZXJzZUluZXJ0aWEgKiAoMSAtIGNvbnN0cmFpbnQuYW5ndWxhclN0aWZmbmVzcyk7XG5cbiAgICAgICAgICAgIC8vIGtlZXAgdHJhY2sgb2YgYXBwbGllZCBpbXB1bHNlcyBmb3IgcG9zdCBzb2x2aW5nXG4gICAgICAgICAgICBib2R5QS5jb25zdHJhaW50SW1wdWxzZS54IC09IGZvcmNlLng7XG4gICAgICAgICAgICBib2R5QS5jb25zdHJhaW50SW1wdWxzZS55IC09IGZvcmNlLnk7XG4gICAgICAgICAgICBib2R5QS5jb25zdHJhaW50SW1wdWxzZS5hbmdsZSArPSB0b3JxdWU7XG5cbiAgICAgICAgICAgIC8vIGFwcGx5IGZvcmNlc1xuICAgICAgICAgICAgYm9keUEucG9zaXRpb24ueCAtPSBmb3JjZS54O1xuICAgICAgICAgICAgYm9keUEucG9zaXRpb24ueSAtPSBmb3JjZS55O1xuICAgICAgICAgICAgYm9keUEuYW5nbGUgKz0gdG9ycXVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJvZHlCICYmICFib2R5Qi5pc1N0YXRpYykge1xuICAgICAgICAgICAgdG9ycXVlID0gVmVjdG9yLmNyb3NzKG9mZnNldEIsIG5vcm1hbFZlbG9jaXR5KSAqIGJvZHlCLmludmVyc2VJbmVydGlhICogKDEgLSBjb25zdHJhaW50LmFuZ3VsYXJTdGlmZm5lc3MpO1xuXG4gICAgICAgICAgICAvLyBrZWVwIHRyYWNrIG9mIGFwcGxpZWQgaW1wdWxzZXMgZm9yIHBvc3Qgc29sdmluZ1xuICAgICAgICAgICAgYm9keUIuY29uc3RyYWludEltcHVsc2UueCArPSBmb3JjZS54O1xuICAgICAgICAgICAgYm9keUIuY29uc3RyYWludEltcHVsc2UueSArPSBmb3JjZS55O1xuICAgICAgICAgICAgYm9keUIuY29uc3RyYWludEltcHVsc2UuYW5nbGUgLT0gdG9ycXVlO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBhcHBseSBmb3JjZXNcbiAgICAgICAgICAgIGJvZHlCLnBvc2l0aW9uLnggKz0gZm9yY2UueDtcbiAgICAgICAgICAgIGJvZHlCLnBvc2l0aW9uLnkgKz0gZm9yY2UueTtcbiAgICAgICAgICAgIGJvZHlCLmFuZ2xlIC09IHRvcnF1ZTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGJvZHkgdXBkYXRlcyByZXF1aXJlZCBhZnRlciBzb2x2aW5nIGNvbnN0cmFpbnRzLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCBwb3N0U29sdmVBbGxcbiAgICAgKiBAcGFyYW0ge2JvZHlbXX0gYm9kaWVzXG4gICAgICovXG4gICAgQ29uc3RyYWludC5wb3N0U29sdmVBbGwgPSBmdW5jdGlvbihib2RpZXMpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBib2R5ID0gYm9kaWVzW2ldLFxuICAgICAgICAgICAgICAgIGltcHVsc2UgPSBib2R5LmNvbnN0cmFpbnRJbXB1bHNlO1xuXG4gICAgICAgICAgICBpZiAoaW1wdWxzZS54ID09PSAwICYmIGltcHVsc2UueSA9PT0gMCAmJiBpbXB1bHNlLmFuZ2xlID09PSAwKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFNsZWVwaW5nLnNldChib2R5LCBmYWxzZSk7XG5cbiAgICAgICAgICAgIC8vIHVwZGF0ZSBnZW9tZXRyeSBhbmQgcmVzZXRcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgYm9keS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBwYXJ0ID0gYm9keS5wYXJ0c1tqXTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBWZXJ0aWNlcy50cmFuc2xhdGUocGFydC52ZXJ0aWNlcywgaW1wdWxzZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoaiA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcGFydC5wb3NpdGlvbi54ICs9IGltcHVsc2UueDtcbiAgICAgICAgICAgICAgICAgICAgcGFydC5wb3NpdGlvbi55ICs9IGltcHVsc2UueTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaW1wdWxzZS5hbmdsZSAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBWZXJ0aWNlcy5yb3RhdGUocGFydC52ZXJ0aWNlcywgaW1wdWxzZS5hbmdsZSwgYm9keS5wb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIEF4ZXMucm90YXRlKHBhcnQuYXhlcywgaW1wdWxzZS5hbmdsZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChqID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgVmVjdG9yLnJvdGF0ZUFib3V0KHBhcnQucG9zaXRpb24sIGltcHVsc2UuYW5nbGUsIGJvZHkucG9zaXRpb24sIHBhcnQucG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgQm91bmRzLnVwZGF0ZShwYXJ0LmJvdW5kcywgcGFydC52ZXJ0aWNlcywgYm9keS52ZWxvY2l0eSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGltcHVsc2UuYW5nbGUgPSAwO1xuICAgICAgICAgICAgaW1wdWxzZS54ID0gMDtcbiAgICAgICAgICAgIGltcHVsc2UueSA9IDA7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLypcbiAgICAqXG4gICAgKiAgUHJvcGVydGllcyBEb2N1bWVudGF0aW9uXG4gICAgKlxuICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBbiBpbnRlZ2VyIGBOdW1iZXJgIHVuaXF1ZWx5IGlkZW50aWZ5aW5nIG51bWJlciBnZW5lcmF0ZWQgaW4gYENvbXBvc2l0ZS5jcmVhdGVgIGJ5IGBDb21tb24ubmV4dElkYC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBpZFxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgU3RyaW5nYCBkZW5vdGluZyB0aGUgdHlwZSBvZiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgdHlwZVxuICAgICAqIEB0eXBlIHN0cmluZ1xuICAgICAqIEBkZWZhdWx0IFwiY29uc3RyYWludFwiXG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBbiBhcmJpdHJhcnkgYFN0cmluZ2AgbmFtZSB0byBoZWxwIHRoZSB1c2VyIGlkZW50aWZ5IGFuZCBtYW5hZ2UgYm9kaWVzLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGxhYmVsXG4gICAgICogQHR5cGUgc3RyaW5nXG4gICAgICogQGRlZmF1bHQgXCJDb25zdHJhaW50XCJcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFuIGBPYmplY3RgIHRoYXQgZGVmaW5lcyB0aGUgcmVuZGVyaW5nIHByb3BlcnRpZXMgdG8gYmUgY29uc3VtZWQgYnkgdGhlIG1vZHVsZSBgTWF0dGVyLlJlbmRlcmAuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgcmVuZGVyXG4gICAgICogQHR5cGUgb2JqZWN0XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGZsYWcgdGhhdCBpbmRpY2F0ZXMgaWYgdGhlIGNvbnN0cmFpbnQgc2hvdWxkIGJlIHJlbmRlcmVkLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHJlbmRlci52aXNpYmxlXG4gICAgICogQHR5cGUgYm9vbGVhblxuICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBkZWZpbmVzIHRoZSBsaW5lIHdpZHRoIHRvIHVzZSB3aGVuIHJlbmRlcmluZyB0aGUgY29uc3RyYWludCBvdXRsaW5lLlxuICAgICAqIEEgdmFsdWUgb2YgYDBgIG1lYW5zIG5vIG91dGxpbmUgd2lsbCBiZSByZW5kZXJlZC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSByZW5kZXIubGluZVdpZHRoXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgU3RyaW5nYCB0aGF0IGRlZmluZXMgdGhlIHN0cm9rZSBzdHlsZSB0byB1c2Ugd2hlbiByZW5kZXJpbmcgdGhlIGNvbnN0cmFpbnQgb3V0bGluZS5cbiAgICAgKiBJdCBpcyB0aGUgc2FtZSBhcyB3aGVuIHVzaW5nIGEgY2FudmFzLCBzbyBpdCBhY2NlcHRzIENTUyBzdHlsZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgcmVuZGVyLnN0cm9rZVN0eWxlXG4gICAgICogQHR5cGUgc3RyaW5nXG4gICAgICogQGRlZmF1bHQgYSByYW5kb20gY29sb3VyXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgZmlyc3QgcG9zc2libGUgYEJvZHlgIHRoYXQgdGhpcyBjb25zdHJhaW50IGlzIGF0dGFjaGVkIHRvLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGJvZHlBXG4gICAgICogQHR5cGUgYm9keVxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSBzZWNvbmQgcG9zc2libGUgYEJvZHlgIHRoYXQgdGhpcyBjb25zdHJhaW50IGlzIGF0dGFjaGVkIHRvLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGJvZHlCXG4gICAgICogQHR5cGUgYm9keVxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYFZlY3RvcmAgdGhhdCBzcGVjaWZpZXMgdGhlIG9mZnNldCBvZiB0aGUgY29uc3RyYWludCBmcm9tIGNlbnRlciBvZiB0aGUgYGNvbnN0cmFpbnQuYm9keUFgIGlmIGRlZmluZWQsIG90aGVyd2lzZSBhIHdvcmxkLXNwYWNlIHBvc2l0aW9uLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHBvaW50QVxuICAgICAqIEB0eXBlIHZlY3RvclxuICAgICAqIEBkZWZhdWx0IHsgeDogMCwgeTogMCB9XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBWZWN0b3JgIHRoYXQgc3BlY2lmaWVzIHRoZSBvZmZzZXQgb2YgdGhlIGNvbnN0cmFpbnQgZnJvbSBjZW50ZXIgb2YgdGhlIGBjb25zdHJhaW50LmJvZHlBYCBpZiBkZWZpbmVkLCBvdGhlcndpc2UgYSB3b3JsZC1zcGFjZSBwb3NpdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBwb2ludEJcbiAgICAgKiBAdHlwZSB2ZWN0b3JcbiAgICAgKiBAZGVmYXVsdCB7IHg6IDAsIHk6IDAgfVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IHNwZWNpZmllcyB0aGUgc3RpZmZuZXNzIG9mIHRoZSBjb25zdHJhaW50LCBpLmUuIHRoZSByYXRlIGF0IHdoaWNoIGl0IHJldHVybnMgdG8gaXRzIHJlc3RpbmcgYGNvbnN0cmFpbnQubGVuZ3RoYC5cbiAgICAgKiBBIHZhbHVlIG9mIGAxYCBtZWFucyB0aGUgY29uc3RyYWludCBzaG91bGQgYmUgdmVyeSBzdGlmZi5cbiAgICAgKiBBIHZhbHVlIG9mIGAwLjJgIG1lYW5zIHRoZSBjb25zdHJhaW50IGFjdHMgbGlrZSBhIHNvZnQgc3ByaW5nLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHN0aWZmbmVzc1xuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDFcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBzcGVjaWZpZXMgdGhlIHRhcmdldCByZXN0aW5nIGxlbmd0aCBvZiB0aGUgY29uc3RyYWludC4gXG4gICAgICogSXQgaXMgY2FsY3VsYXRlZCBhdXRvbWF0aWNhbGx5IGluIGBDb25zdHJhaW50LmNyZWF0ZWAgZnJvbSBpbml0aWFsIHBvc2l0aW9ucyBvZiB0aGUgYGNvbnN0cmFpbnQuYm9keUFgIGFuZCBgY29uc3RyYWludC5ib2R5QmAuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgbGVuZ3RoXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICovXG5cbn0pKCk7XG5cbn0se1wiLi4vY29yZS9Db21tb25cIjoxNCxcIi4uL2NvcmUvU2xlZXBpbmdcIjoyMCxcIi4uL2dlb21ldHJ5L0F4ZXNcIjoyMyxcIi4uL2dlb21ldHJ5L0JvdW5kc1wiOjI0LFwiLi4vZ2VvbWV0cnkvVmVjdG9yXCI6MjYsXCIuLi9nZW9tZXRyeS9WZXJ0aWNlc1wiOjI3fV0sMTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLk1vdXNlQ29uc3RyYWludGAgbW9kdWxlIGNvbnRhaW5zIG1ldGhvZHMgZm9yIGNyZWF0aW5nIG1vdXNlIGNvbnN0cmFpbnRzLlxuKiBNb3VzZSBjb25zdHJhaW50cyBhcmUgdXNlZCBmb3IgYWxsb3dpbmcgdXNlciBpbnRlcmFjdGlvbiwgcHJvdmlkaW5nIHRoZSBhYmlsaXR5IHRvIG1vdmUgYm9kaWVzIHZpYSB0aGUgbW91c2Ugb3IgdG91Y2guXG4qXG4qIFNlZSB0aGUgaW5jbHVkZWQgdXNhZ2UgW2V4YW1wbGVzXShodHRwczovL2dpdGh1Yi5jb20vbGlhYnJ1L21hdHRlci1qcy90cmVlL21hc3Rlci9leGFtcGxlcykuXG4qXG4qIEBjbGFzcyBNb3VzZUNvbnN0cmFpbnRcbiovXG5cbnZhciBNb3VzZUNvbnN0cmFpbnQgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBNb3VzZUNvbnN0cmFpbnQ7XG5cbnZhciBWZXJ0aWNlcyA9IHJlcXVpcmUoJy4uL2dlb21ldHJ5L1ZlcnRpY2VzJyk7XG52YXIgU2xlZXBpbmcgPSByZXF1aXJlKCcuLi9jb3JlL1NsZWVwaW5nJyk7XG52YXIgTW91c2UgPSByZXF1aXJlKCcuLi9jb3JlL01vdXNlJyk7XG52YXIgRXZlbnRzID0gcmVxdWlyZSgnLi4vY29yZS9FdmVudHMnKTtcbnZhciBEZXRlY3RvciA9IHJlcXVpcmUoJy4uL2NvbGxpc2lvbi9EZXRlY3RvcicpO1xudmFyIENvbnN0cmFpbnQgPSByZXF1aXJlKCcuL0NvbnN0cmFpbnQnKTtcbnZhciBDb21wb3NpdGUgPSByZXF1aXJlKCcuLi9ib2R5L0NvbXBvc2l0ZScpO1xudmFyIENvbW1vbiA9IHJlcXVpcmUoJy4uL2NvcmUvQ29tbW9uJyk7XG52YXIgQm91bmRzID0gcmVxdWlyZSgnLi4vZ2VvbWV0cnkvQm91bmRzJyk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgbW91c2UgY29uc3RyYWludC5cbiAgICAgKiBBbGwgcHJvcGVydGllcyBoYXZlIGRlZmF1bHQgdmFsdWVzLCBhbmQgbWFueSBhcmUgcHJlLWNhbGN1bGF0ZWQgYXV0b21hdGljYWxseSBiYXNlZCBvbiBvdGhlciBwcm9wZXJ0aWVzLlxuICAgICAqIFNlZSB0aGUgcHJvcGVydGllcyBzZWN0aW9uIGJlbG93IGZvciBkZXRhaWxlZCBpbmZvcm1hdGlvbiBvbiB3aGF0IHlvdSBjYW4gcGFzcyB2aWEgdGhlIGBvcHRpb25zYCBvYmplY3QuXG4gICAgICogQG1ldGhvZCBjcmVhdGVcbiAgICAgKiBAcGFyYW0ge2VuZ2luZX0gZW5naW5lXG4gICAgICogQHBhcmFtIHt9IG9wdGlvbnNcbiAgICAgKiBAcmV0dXJuIHtNb3VzZUNvbnN0cmFpbnR9IEEgbmV3IE1vdXNlQ29uc3RyYWludFxuICAgICAqL1xuICAgIE1vdXNlQ29uc3RyYWludC5jcmVhdGUgPSBmdW5jdGlvbihlbmdpbmUsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIG1vdXNlID0gKGVuZ2luZSA/IGVuZ2luZS5tb3VzZSA6IG51bGwpIHx8IChvcHRpb25zID8gb3B0aW9ucy5tb3VzZSA6IG51bGwpO1xuXG4gICAgICAgIGlmICghbW91c2UpIHtcbiAgICAgICAgICAgIGlmIChlbmdpbmUgJiYgZW5naW5lLnJlbmRlciAmJiBlbmdpbmUucmVuZGVyLmNhbnZhcykge1xuICAgICAgICAgICAgICAgIG1vdXNlID0gTW91c2UuY3JlYXRlKGVuZ2luZS5yZW5kZXIuY2FudmFzKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBtb3VzZSA9IE1vdXNlLmNyZWF0ZShvcHRpb25zLmVsZW1lbnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtb3VzZSA9IE1vdXNlLmNyZWF0ZSgpO1xuICAgICAgICAgICAgICAgIENvbW1vbi5sb2coJ01vdXNlQ29uc3RyYWludC5jcmVhdGU6IG9wdGlvbnMubW91c2Ugd2FzIHVuZGVmaW5lZCwgb3B0aW9ucy5lbGVtZW50IHdhcyB1bmRlZmluZWQsIG1heSBub3QgZnVuY3Rpb24gYXMgZXhwZWN0ZWQnLCAnd2FybicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNvbnN0cmFpbnQgPSBDb25zdHJhaW50LmNyZWF0ZSh7IFxuICAgICAgICAgICAgbGFiZWw6ICdNb3VzZSBDb25zdHJhaW50JyxcbiAgICAgICAgICAgIHBvaW50QTogbW91c2UucG9zaXRpb24sXG4gICAgICAgICAgICBwb2ludEI6IHsgeDogMCwgeTogMCB9LFxuICAgICAgICAgICAgbGVuZ3RoOiAwLjAxLCBcbiAgICAgICAgICAgIHN0aWZmbmVzczogMC4xLFxuICAgICAgICAgICAgYW5ndWxhclN0aWZmbmVzczogMSxcbiAgICAgICAgICAgIHJlbmRlcjoge1xuICAgICAgICAgICAgICAgIHN0cm9rZVN0eWxlOiAnIzkwRUU5MCcsXG4gICAgICAgICAgICAgICAgbGluZVdpZHRoOiAzXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBkZWZhdWx0cyA9IHtcbiAgICAgICAgICAgIHR5cGU6ICdtb3VzZUNvbnN0cmFpbnQnLFxuICAgICAgICAgICAgbW91c2U6IG1vdXNlLFxuICAgICAgICAgICAgZWxlbWVudDogbnVsbCxcbiAgICAgICAgICAgIGJvZHk6IG51bGwsXG4gICAgICAgICAgICBjb25zdHJhaW50OiBjb25zdHJhaW50LFxuICAgICAgICAgICAgY29sbGlzaW9uRmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IDB4MDAwMSxcbiAgICAgICAgICAgICAgICBtYXNrOiAweEZGRkZGRkZGLFxuICAgICAgICAgICAgICAgIGdyb3VwOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIG1vdXNlQ29uc3RyYWludCA9IENvbW1vbi5leHRlbmQoZGVmYXVsdHMsIG9wdGlvbnMpO1xuXG4gICAgICAgIEV2ZW50cy5vbihlbmdpbmUsICd0aWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYWxsQm9kaWVzID0gQ29tcG9zaXRlLmFsbEJvZGllcyhlbmdpbmUud29ybGQpO1xuICAgICAgICAgICAgTW91c2VDb25zdHJhaW50LnVwZGF0ZShtb3VzZUNvbnN0cmFpbnQsIGFsbEJvZGllcyk7XG4gICAgICAgICAgICBfdHJpZ2dlckV2ZW50cyhtb3VzZUNvbnN0cmFpbnQpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gbW91c2VDb25zdHJhaW50O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBnaXZlbiBtb3VzZSBjb25zdHJhaW50LlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCB1cGRhdGVcbiAgICAgKiBAcGFyYW0ge01vdXNlQ29uc3RyYWludH0gbW91c2VDb25zdHJhaW50XG4gICAgICogQHBhcmFtIHtib2R5W119IGJvZGllc1xuICAgICAqL1xuICAgIE1vdXNlQ29uc3RyYWludC51cGRhdGUgPSBmdW5jdGlvbihtb3VzZUNvbnN0cmFpbnQsIGJvZGllcykge1xuICAgICAgICB2YXIgbW91c2UgPSBtb3VzZUNvbnN0cmFpbnQubW91c2UsXG4gICAgICAgICAgICBjb25zdHJhaW50ID0gbW91c2VDb25zdHJhaW50LmNvbnN0cmFpbnQsXG4gICAgICAgICAgICBib2R5ID0gbW91c2VDb25zdHJhaW50LmJvZHk7XG5cbiAgICAgICAgaWYgKG1vdXNlLmJ1dHRvbiA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKCFjb25zdHJhaW50LmJvZHlCKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgYm9keSA9IGJvZGllc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKEJvdW5kcy5jb250YWlucyhib2R5LmJvdW5kcywgbW91c2UucG9zaXRpb24pIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIERldGVjdG9yLmNhbkNvbGxpZGUoYm9keS5jb2xsaXNpb25GaWx0ZXIsIG1vdXNlQ29uc3RyYWludC5jb2xsaXNpb25GaWx0ZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gYm9keS5wYXJ0cy5sZW5ndGggPiAxID8gMSA6IDA7IGogPCBib2R5LnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnQgPSBib2R5LnBhcnRzW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChWZXJ0aWNlcy5jb250YWlucyhwYXJ0LnZlcnRpY2VzLCBtb3VzZS5wb3NpdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RyYWludC5wb2ludEEgPSBtb3VzZS5wb3NpdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RyYWludC5ib2R5QiA9IG1vdXNlQ29uc3RyYWludC5ib2R5ID0gYm9keTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RyYWludC5wb2ludEIgPSB7IHg6IG1vdXNlLnBvc2l0aW9uLnggLSBib2R5LnBvc2l0aW9uLngsIHk6IG1vdXNlLnBvc2l0aW9uLnkgLSBib2R5LnBvc2l0aW9uLnkgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RyYWludC5hbmdsZUIgPSBib2R5LmFuZ2xlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNsZWVwaW5nLnNldChib2R5LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50cy50cmlnZ2VyKG1vdXNlQ29uc3RyYWludCwgJ3N0YXJ0ZHJhZycsIHsgbW91c2U6IG1vdXNlLCBib2R5OiBib2R5IH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgU2xlZXBpbmcuc2V0KGNvbnN0cmFpbnQuYm9keUIsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBjb25zdHJhaW50LnBvaW50QSA9IG1vdXNlLnBvc2l0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3RyYWludC5ib2R5QiA9IG1vdXNlQ29uc3RyYWludC5ib2R5ID0gbnVsbDtcbiAgICAgICAgICAgIGNvbnN0cmFpbnQucG9pbnRCID0gbnVsbDtcblxuICAgICAgICAgICAgaWYgKGJvZHkpXG4gICAgICAgICAgICAgICAgRXZlbnRzLnRyaWdnZXIobW91c2VDb25zdHJhaW50LCAnZW5kZHJhZycsIHsgbW91c2U6IG1vdXNlLCBib2R5OiBib2R5IH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJzIG1vdXNlIGNvbnN0cmFpbnQgZXZlbnRzLlxuICAgICAqIEBtZXRob2QgX3RyaWdnZXJFdmVudHNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bW91c2V9IG1vdXNlQ29uc3RyYWludFxuICAgICAqL1xuICAgIHZhciBfdHJpZ2dlckV2ZW50cyA9IGZ1bmN0aW9uKG1vdXNlQ29uc3RyYWludCkge1xuICAgICAgICB2YXIgbW91c2UgPSBtb3VzZUNvbnN0cmFpbnQubW91c2UsXG4gICAgICAgICAgICBtb3VzZUV2ZW50cyA9IG1vdXNlLnNvdXJjZUV2ZW50cztcblxuICAgICAgICBpZiAobW91c2VFdmVudHMubW91c2Vtb3ZlKVxuICAgICAgICAgICAgRXZlbnRzLnRyaWdnZXIobW91c2VDb25zdHJhaW50LCAnbW91c2Vtb3ZlJywgeyBtb3VzZTogbW91c2UgfSk7XG5cbiAgICAgICAgaWYgKG1vdXNlRXZlbnRzLm1vdXNlZG93bilcbiAgICAgICAgICAgIEV2ZW50cy50cmlnZ2VyKG1vdXNlQ29uc3RyYWludCwgJ21vdXNlZG93bicsIHsgbW91c2U6IG1vdXNlIH0pO1xuXG4gICAgICAgIGlmIChtb3VzZUV2ZW50cy5tb3VzZXVwKVxuICAgICAgICAgICAgRXZlbnRzLnRyaWdnZXIobW91c2VDb25zdHJhaW50LCAnbW91c2V1cCcsIHsgbW91c2U6IG1vdXNlIH0pO1xuXG4gICAgICAgIC8vIHJlc2V0IHRoZSBtb3VzZSBzdGF0ZSByZWFkeSBmb3IgdGhlIG5leHQgc3RlcFxuICAgICAgICBNb3VzZS5jbGVhclNvdXJjZUV2ZW50cyhtb3VzZSk7XG4gICAgfTtcblxuICAgIC8qXG4gICAgKlxuICAgICogIEV2ZW50cyBEb2N1bWVudGF0aW9uXG4gICAgKlxuICAgICovXG5cbiAgICAvKipcbiAgICAqIEZpcmVkIHdoZW4gdGhlIG1vdXNlIGhhcyBtb3ZlZCAob3IgYSB0b3VjaCBtb3ZlcykgZHVyaW5nIHRoZSBsYXN0IHN0ZXBcbiAgICAqXG4gICAgKiBAZXZlbnQgbW91c2Vtb3ZlXG4gICAgKiBAcGFyYW0ge30gZXZlbnQgQW4gZXZlbnQgb2JqZWN0XG4gICAgKiBAcGFyYW0ge21vdXNlfSBldmVudC5tb3VzZSBUaGUgZW5naW5lJ3MgbW91c2UgaW5zdGFuY2VcbiAgICAqIEBwYXJhbSB7fSBldmVudC5zb3VyY2UgVGhlIHNvdXJjZSBvYmplY3Qgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQubmFtZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgKiBGaXJlZCB3aGVuIHRoZSBtb3VzZSBpcyBkb3duIChvciBhIHRvdWNoIGhhcyBzdGFydGVkKSBkdXJpbmcgdGhlIGxhc3Qgc3RlcFxuICAgICpcbiAgICAqIEBldmVudCBtb3VzZWRvd25cbiAgICAqIEBwYXJhbSB7fSBldmVudCBBbiBldmVudCBvYmplY3RcbiAgICAqIEBwYXJhbSB7bW91c2V9IGV2ZW50Lm1vdXNlIFRoZSBlbmdpbmUncyBtb3VzZSBpbnN0YW5jZVxuICAgICogQHBhcmFtIHt9IGV2ZW50LnNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5uYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgICovXG5cbiAgICAvKipcbiAgICAqIEZpcmVkIHdoZW4gdGhlIG1vdXNlIGlzIHVwIChvciBhIHRvdWNoIGhhcyBlbmRlZCkgZHVyaW5nIHRoZSBsYXN0IHN0ZXBcbiAgICAqXG4gICAgKiBAZXZlbnQgbW91c2V1cFxuICAgICogQHBhcmFtIHt9IGV2ZW50IEFuIGV2ZW50IG9iamVjdFxuICAgICogQHBhcmFtIHttb3VzZX0gZXZlbnQubW91c2UgVGhlIGVuZ2luZSdzIG1vdXNlIGluc3RhbmNlXG4gICAgKiBAcGFyYW0ge30gZXZlbnQuc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgKi9cblxuICAgIC8qKlxuICAgICogRmlyZWQgd2hlbiB0aGUgdXNlciBzdGFydHMgZHJhZ2dpbmcgYSBib2R5XG4gICAgKlxuICAgICogQGV2ZW50IHN0YXJ0ZHJhZ1xuICAgICogQHBhcmFtIHt9IGV2ZW50IEFuIGV2ZW50IG9iamVjdFxuICAgICogQHBhcmFtIHttb3VzZX0gZXZlbnQubW91c2UgVGhlIGVuZ2luZSdzIG1vdXNlIGluc3RhbmNlXG4gICAgKiBAcGFyYW0ge2JvZHl9IGV2ZW50LmJvZHkgVGhlIGJvZHkgYmVpbmcgZHJhZ2dlZFxuICAgICogQHBhcmFtIHt9IGV2ZW50LnNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5uYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgICovXG5cbiAgICAvKipcbiAgICAqIEZpcmVkIHdoZW4gdGhlIHVzZXIgZW5kcyBkcmFnZ2luZyBhIGJvZHlcbiAgICAqXG4gICAgKiBAZXZlbnQgZW5kZHJhZ1xuICAgICogQHBhcmFtIHt9IGV2ZW50IEFuIGV2ZW50IG9iamVjdFxuICAgICogQHBhcmFtIHttb3VzZX0gZXZlbnQubW91c2UgVGhlIGVuZ2luZSdzIG1vdXNlIGluc3RhbmNlXG4gICAgKiBAcGFyYW0ge2JvZHl9IGV2ZW50LmJvZHkgVGhlIGJvZHkgdGhhdCBoYXMgc3RvcHBlZCBiZWluZyBkcmFnZ2VkXG4gICAgKiBAcGFyYW0ge30gZXZlbnQuc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgKi9cblxuICAgIC8qXG4gICAgKlxuICAgICogIFByb3BlcnRpZXMgRG9jdW1lbnRhdGlvblxuICAgICpcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgU3RyaW5nYCBkZW5vdGluZyB0aGUgdHlwZSBvZiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgdHlwZVxuICAgICAqIEB0eXBlIHN0cmluZ1xuICAgICAqIEBkZWZhdWx0IFwiY29uc3RyYWludFwiXG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgYE1vdXNlYCBpbnN0YW5jZSBpbiB1c2UuIElmIG5vdCBzdXBwbGllZCBpbiBgTW91c2VDb25zdHJhaW50LmNyZWF0ZWAsIG9uZSB3aWxsIGJlIGNyZWF0ZWQuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgbW91c2VcbiAgICAgKiBAdHlwZSBtb3VzZVxuICAgICAqIEBkZWZhdWx0IG1vdXNlXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgYEJvZHlgIHRoYXQgaXMgY3VycmVudGx5IGJlaW5nIG1vdmVkIGJ5IHRoZSB1c2VyLCBvciBgbnVsbGAgaWYgbm8gYm9keS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBib2R5XG4gICAgICogQHR5cGUgYm9keVxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSBgQ29uc3RyYWludGAgb2JqZWN0IHRoYXQgaXMgdXNlZCB0byBtb3ZlIHRoZSBib2R5IGR1cmluZyBpbnRlcmFjdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBjb25zdHJhaW50XG4gICAgICogQHR5cGUgY29uc3RyYWludFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gYE9iamVjdGAgdGhhdCBzcGVjaWZpZXMgdGhlIGNvbGxpc2lvbiBmaWx0ZXIgcHJvcGVydGllcy5cbiAgICAgKiBUaGUgY29sbGlzaW9uIGZpbHRlciBhbGxvd3MgdGhlIHVzZXIgdG8gZGVmaW5lIHdoaWNoIHR5cGVzIG9mIGJvZHkgdGhpcyBtb3VzZSBjb25zdHJhaW50IGNhbiBpbnRlcmFjdCB3aXRoLlxuICAgICAqIFNlZSBgYm9keS5jb2xsaXNpb25GaWx0ZXJgIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGNvbGxpc2lvbkZpbHRlclxuICAgICAqIEB0eXBlIG9iamVjdFxuICAgICAqL1xuXG59KSgpO1xuXG59LHtcIi4uL2JvZHkvQ29tcG9zaXRlXCI6MixcIi4uL2NvbGxpc2lvbi9EZXRlY3RvclwiOjUsXCIuLi9jb3JlL0NvbW1vblwiOjE0LFwiLi4vY29yZS9FdmVudHNcIjoxNixcIi4uL2NvcmUvTW91c2VcIjoxOCxcIi4uL2NvcmUvU2xlZXBpbmdcIjoyMCxcIi4uL2dlb21ldHJ5L0JvdW5kc1wiOjI0LFwiLi4vZ2VvbWV0cnkvVmVydGljZXNcIjoyNyxcIi4vQ29uc3RyYWludFwiOjEyfV0sMTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLkNvbW1vbmAgbW9kdWxlIGNvbnRhaW5zIHV0aWxpdHkgZnVuY3Rpb25zIHRoYXQgYXJlIGNvbW1vbiB0byBhbGwgbW9kdWxlcy5cbipcbiogQGNsYXNzIENvbW1vblxuKi9cblxudmFyIENvbW1vbiA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENvbW1vbjtcblxuKGZ1bmN0aW9uKCkge1xuXG4gICAgQ29tbW9uLl9uZXh0SWQgPSAwO1xuICAgIENvbW1vbi5fc2VlZCA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBFeHRlbmRzIHRoZSBvYmplY3QgaW4gdGhlIGZpcnN0IGFyZ3VtZW50IHVzaW5nIHRoZSBvYmplY3QgaW4gdGhlIHNlY29uZCBhcmd1bWVudC5cbiAgICAgKiBAbWV0aG9kIGV4dGVuZFxuICAgICAqIEBwYXJhbSB7fSBvYmpcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGRlZXBcbiAgICAgKiBAcmV0dXJuIHt9IG9iaiBleHRlbmRlZFxuICAgICAqL1xuICAgIENvbW1vbi5leHRlbmQgPSBmdW5jdGlvbihvYmosIGRlZXApIHtcbiAgICAgICAgdmFyIGFyZ3NTdGFydCxcbiAgICAgICAgICAgIGFyZ3MsXG4gICAgICAgICAgICBkZWVwQ2xvbmU7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBkZWVwID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIGFyZ3NTdGFydCA9IDI7XG4gICAgICAgICAgICBkZWVwQ2xvbmUgPSBkZWVwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXJnc1N0YXJ0ID0gMTtcbiAgICAgICAgICAgIGRlZXBDbG9uZSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCBhcmdzU3RhcnQpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3NbaV07XG5cbiAgICAgICAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIHNvdXJjZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGVlcENsb25lICYmIHNvdXJjZVtwcm9wXSAmJiBzb3VyY2VbcHJvcF0uY29uc3RydWN0b3IgPT09IE9iamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvYmpbcHJvcF0gfHwgb2JqW3Byb3BdLmNvbnN0cnVjdG9yID09PSBPYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmpbcHJvcF0gPSBvYmpbcHJvcF0gfHwge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29tbW9uLmV4dGVuZChvYmpbcHJvcF0sIGRlZXBDbG9uZSwgc291cmNlW3Byb3BdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqW3Byb3BdID0gc291cmNlW3Byb3BdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqW3Byb3BdID0gc291cmNlW3Byb3BdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGNsb25lIG9mIHRoZSBvYmplY3QsIGlmIGRlZXAgaXMgdHJ1ZSByZWZlcmVuY2VzIHdpbGwgYWxzbyBiZSBjbG9uZWQuXG4gICAgICogQG1ldGhvZCBjbG9uZVxuICAgICAqIEBwYXJhbSB7fSBvYmpcbiAgICAgKiBAcGFyYW0ge2Jvb2x9IGRlZXBcbiAgICAgKiBAcmV0dXJuIHt9IG9iaiBjbG9uZWRcbiAgICAgKi9cbiAgICBDb21tb24uY2xvbmUgPSBmdW5jdGlvbihvYmosIGRlZXApIHtcbiAgICAgICAgcmV0dXJuIENvbW1vbi5leHRlbmQoe30sIGRlZXAsIG9iaik7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGxpc3Qgb2Yga2V5cyBmb3IgdGhlIGdpdmVuIG9iamVjdC5cbiAgICAgKiBAbWV0aG9kIGtleXNcbiAgICAgKiBAcGFyYW0ge30gb2JqXG4gICAgICogQHJldHVybiB7c3RyaW5nW119IGtleXNcbiAgICAgKi9cbiAgICBDb21tb24ua2V5cyA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICBpZiAoT2JqZWN0LmtleXMpXG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqKTtcblxuICAgICAgICAvLyBhdm9pZCBoYXNPd25Qcm9wZXJ0eSBmb3IgcGVyZm9ybWFuY2VcbiAgICAgICAgdmFyIGtleXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9iailcbiAgICAgICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgICByZXR1cm4ga2V5cztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbGlzdCBvZiB2YWx1ZXMgZm9yIHRoZSBnaXZlbiBvYmplY3QuXG4gICAgICogQG1ldGhvZCB2YWx1ZXNcbiAgICAgKiBAcGFyYW0ge30gb2JqXG4gICAgICogQHJldHVybiB7YXJyYXl9IEFycmF5IG9mIHRoZSBvYmplY3RzIHByb3BlcnR5IHZhbHVlc1xuICAgICAqL1xuICAgIENvbW1vbi52YWx1ZXMgPSBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgICBcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKSB7XG4gICAgICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaChvYmpba2V5c1tpXV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gYXZvaWQgaGFzT3duUHJvcGVydHkgZm9yIHBlcmZvcm1hbmNlXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBvYmopXG4gICAgICAgICAgICB2YWx1ZXMucHVzaChvYmpba2V5XSk7XG4gICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBoZXggY29sb3VyIHN0cmluZyBtYWRlIGJ5IGxpZ2h0ZW5pbmcgb3IgZGFya2VuaW5nIGNvbG9yIGJ5IHBlcmNlbnQuXG4gICAgICogQG1ldGhvZCBzaGFkZUNvbG9yXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHBlcmNlbnRcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IEEgaGV4IGNvbG91clxuICAgICAqL1xuICAgIENvbW1vbi5zaGFkZUNvbG9yID0gZnVuY3Rpb24oY29sb3IsIHBlcmNlbnQpIHsgICBcbiAgICAgICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy81NTYwMjQ4L3Byb2dyYW1tYXRpY2FsbHktbGlnaHRlbi1vci1kYXJrZW4tYS1oZXgtY29sb3JcbiAgICAgICAgdmFyIGNvbG9ySW50ZWdlciA9IHBhcnNlSW50KGNvbG9yLnNsaWNlKDEpLDE2KSwgXG4gICAgICAgICAgICBhbW91bnQgPSBNYXRoLnJvdW5kKDIuNTUgKiBwZXJjZW50KSwgXG4gICAgICAgICAgICBSID0gKGNvbG9ySW50ZWdlciA+PiAxNikgKyBhbW91bnQsIFxuICAgICAgICAgICAgQiA9IChjb2xvckludGVnZXIgPj4gOCAmIDB4MDBGRikgKyBhbW91bnQsIFxuICAgICAgICAgICAgRyA9IChjb2xvckludGVnZXIgJiAweDAwMDBGRikgKyBhbW91bnQ7XG4gICAgICAgIHJldHVybiBcIiNcIiArICgweDEwMDAwMDAgKyAoUiA8IDI1NSA/IFIgPCAxID8gMCA6IFIgOjI1NSkgKiAweDEwMDAwIFxuICAgICAgICAgICAgICAgICsgKEIgPCAyNTUgPyBCIDwgMSA/IDAgOiBCIDogMjU1KSAqIDB4MTAwIFxuICAgICAgICAgICAgICAgICsgKEcgPCAyNTUgPyBHIDwgMSA/IDAgOiBHIDogMjU1KSkudG9TdHJpbmcoMTYpLnNsaWNlKDEpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTaHVmZmxlcyB0aGUgZ2l2ZW4gYXJyYXkgaW4tcGxhY2UuXG4gICAgICogVGhlIGZ1bmN0aW9uIHVzZXMgYSBzZWVkZWQgcmFuZG9tIGdlbmVyYXRvci5cbiAgICAgKiBAbWV0aG9kIHNodWZmbGVcbiAgICAgKiBAcGFyYW0ge2FycmF5fSBhcnJheVxuICAgICAqIEByZXR1cm4ge2FycmF5fSBhcnJheSBzaHVmZmxlZCByYW5kb21seVxuICAgICAqL1xuICAgIENvbW1vbi5zaHVmZmxlID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IGFycmF5Lmxlbmd0aCAtIDE7IGkgPiAwOyBpLS0pIHtcbiAgICAgICAgICAgIHZhciBqID0gTWF0aC5mbG9vcihDb21tb24ucmFuZG9tKCkgKiAoaSArIDEpKTtcbiAgICAgICAgICAgIHZhciB0ZW1wID0gYXJyYXlbaV07XG4gICAgICAgICAgICBhcnJheVtpXSA9IGFycmF5W2pdO1xuICAgICAgICAgICAgYXJyYXlbal0gPSB0ZW1wO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmFuZG9tbHkgY2hvb3NlcyBhIHZhbHVlIGZyb20gYSBsaXN0IHdpdGggZXF1YWwgcHJvYmFiaWxpdHkuXG4gICAgICogVGhlIGZ1bmN0aW9uIHVzZXMgYSBzZWVkZWQgcmFuZG9tIGdlbmVyYXRvci5cbiAgICAgKiBAbWV0aG9kIGNob29zZVxuICAgICAqIEBwYXJhbSB7YXJyYXl9IGNob2ljZXNcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9IEEgcmFuZG9tIGNob2ljZSBvYmplY3QgZnJvbSB0aGUgYXJyYXlcbiAgICAgKi9cbiAgICBDb21tb24uY2hvb3NlID0gZnVuY3Rpb24oY2hvaWNlcykge1xuICAgICAgICByZXR1cm4gY2hvaWNlc1tNYXRoLmZsb29yKENvbW1vbi5yYW5kb20oKSAqIGNob2ljZXMubGVuZ3RoKV07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgb2JqZWN0IGlzIGEgSFRNTEVsZW1lbnQsIG90aGVyd2lzZSBmYWxzZS5cbiAgICAgKiBAbWV0aG9kIGlzRWxlbWVudFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvYmpcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBvYmplY3QgaXMgYSBIVE1MRWxlbWVudCwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgICovXG4gICAgQ29tbW9uLmlzRWxlbWVudCA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzM4NDI4Ni9qYXZhc2NyaXB0LWlzZG9tLWhvdy1kby15b3UtY2hlY2staWYtYS1qYXZhc2NyaXB0LW9iamVjdC1pcy1hLWRvbS1vYmplY3RcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBIVE1MRWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaChlKXtcbiAgICAgICAgICAgIHJldHVybiAodHlwZW9mIG9iaj09PVwib2JqZWN0XCIpICYmXG4gICAgICAgICAgICAgIChvYmoubm9kZVR5cGU9PT0xKSAmJiAodHlwZW9mIG9iai5zdHlsZSA9PT0gXCJvYmplY3RcIikgJiZcbiAgICAgICAgICAgICAgKHR5cGVvZiBvYmoub3duZXJEb2N1bWVudCA9PT1cIm9iamVjdFwiKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIG9iamVjdCBpcyBhbiBhcnJheS5cbiAgICAgKiBAbWV0aG9kIGlzQXJyYXlcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb2JqXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgb2JqZWN0IGlzIGFuIGFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAgICAgKi9cbiAgICBDb21tb24uaXNBcnJheSA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IEFycmF5XSc7XG4gICAgfTtcbiAgICBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBnaXZlbiB2YWx1ZSBjbGFtcGVkIGJldHdlZW4gYSBtaW5pbXVtIGFuZCBtYXhpbXVtIHZhbHVlLlxuICAgICAqIEBtZXRob2QgY2xhbXBcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWluXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1heFxuICAgICAqIEByZXR1cm4ge251bWJlcn0gVGhlIHZhbHVlIGNsYW1wZWQgYmV0d2VlbiBtaW4gYW5kIG1heCBpbmNsdXNpdmVcbiAgICAgKi9cbiAgICBDb21tb24uY2xhbXAgPSBmdW5jdGlvbih2YWx1ZSwgbWluLCBtYXgpIHtcbiAgICAgICAgaWYgKHZhbHVlIDwgbWluKVxuICAgICAgICAgICAgcmV0dXJuIG1pbjtcbiAgICAgICAgaWYgKHZhbHVlID4gbWF4KVxuICAgICAgICAgICAgcmV0dXJuIG1heDtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gICAgXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgc2lnbiBvZiB0aGUgZ2l2ZW4gdmFsdWUuXG4gICAgICogQG1ldGhvZCBzaWduXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gICAgICogQHJldHVybiB7bnVtYmVyfSAtMSBpZiBuZWdhdGl2ZSwgKzEgaWYgMCBvciBwb3NpdGl2ZVxuICAgICAqL1xuICAgIENvbW1vbi5zaWduID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlIDwgMCA/IC0xIDogMTtcbiAgICB9O1xuICAgIFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGN1cnJlbnQgdGltZXN0YW1wIChoaWdoLXJlcyBpZiBhdmFpbGFibGUpLlxuICAgICAqIEBtZXRob2Qgbm93XG4gICAgICogQHJldHVybiB7bnVtYmVyfSB0aGUgY3VycmVudCB0aW1lc3RhbXAgKGhpZ2gtcmVzIGlmIGF2YWlsYWJsZSlcbiAgICAgKi9cbiAgICBDb21tb24ubm93ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjIxMjk0L2hvdy1kby15b3UtZ2V0LWEtdGltZXN0YW1wLWluLWphdmFzY3JpcHRcbiAgICAgICAgLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vZGF2aWR3YXRlcnN0b24vMjk4MjUzMVxuXG4gICAgICAgIHZhciBwZXJmb3JtYW5jZSA9IHdpbmRvdy5wZXJmb3JtYW5jZSB8fCB7fTtcblxuICAgICAgICBwZXJmb3JtYW5jZS5ub3cgPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gcGVyZm9ybWFuY2Uubm93ICAgIHx8XG4gICAgICAgICAgICBwZXJmb3JtYW5jZS53ZWJraXROb3cgICAgIHx8XG4gICAgICAgICAgICBwZXJmb3JtYW5jZS5tc05vdyAgICAgICAgIHx8XG4gICAgICAgICAgICBwZXJmb3JtYW5jZS5vTm93ICAgICAgICAgIHx8XG4gICAgICAgICAgICBwZXJmb3JtYW5jZS5tb3pOb3cgICAgICAgIHx8XG4gICAgICAgICAgICBmdW5jdGlvbigpIHsgcmV0dXJuICsobmV3IERhdGUoKSk7IH07XG4gICAgICAgIH0pKCk7XG4gICAgICAgICAgICAgIFxuICAgICAgICByZXR1cm4gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgfTtcblxuICAgIFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSByYW5kb20gdmFsdWUgYmV0d2VlbiBhIG1pbmltdW0gYW5kIGEgbWF4aW11bSB2YWx1ZSBpbmNsdXNpdmUuXG4gICAgICogVGhlIGZ1bmN0aW9uIHVzZXMgYSBzZWVkZWQgcmFuZG9tIGdlbmVyYXRvci5cbiAgICAgKiBAbWV0aG9kIHJhbmRvbVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtaW5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWF4XG4gICAgICogQHJldHVybiB7bnVtYmVyfSBBIHJhbmRvbSBudW1iZXIgYmV0d2VlbiBtaW4gYW5kIG1heCBpbmNsdXNpdmVcbiAgICAgKi9cbiAgICBDb21tb24ucmFuZG9tID0gZnVuY3Rpb24obWluLCBtYXgpIHtcbiAgICAgICAgbWluID0gKHR5cGVvZiBtaW4gIT09IFwidW5kZWZpbmVkXCIpID8gbWluIDogMDtcbiAgICAgICAgbWF4ID0gKHR5cGVvZiBtYXggIT09IFwidW5kZWZpbmVkXCIpID8gbWF4IDogMTtcbiAgICAgICAgcmV0dXJuIG1pbiArIF9zZWVkZWRSYW5kb20oKSAqIChtYXggLSBtaW4pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhIENTUyBoZXggY29sb3VyIHN0cmluZyBpbnRvIGFuIGludGVnZXIuXG4gICAgICogQG1ldGhvZCBjb2xvclRvTnVtYmVyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yU3RyaW5nXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBBbiBpbnRlZ2VyIHJlcHJlc2VudGluZyB0aGUgQ1NTIGhleCBzdHJpbmdcbiAgICAgKi9cbiAgICBDb21tb24uY29sb3JUb051bWJlciA9IGZ1bmN0aW9uKGNvbG9yU3RyaW5nKSB7XG4gICAgICAgIGNvbG9yU3RyaW5nID0gY29sb3JTdHJpbmcucmVwbGFjZSgnIycsJycpO1xuXG4gICAgICAgIGlmIChjb2xvclN0cmluZy5sZW5ndGggPT0gMykge1xuICAgICAgICAgICAgY29sb3JTdHJpbmcgPSBjb2xvclN0cmluZy5jaGFyQXQoMCkgKyBjb2xvclN0cmluZy5jaGFyQXQoMClcbiAgICAgICAgICAgICAgICAgICAgICAgICsgY29sb3JTdHJpbmcuY2hhckF0KDEpICsgY29sb3JTdHJpbmcuY2hhckF0KDEpXG4gICAgICAgICAgICAgICAgICAgICAgICArIGNvbG9yU3RyaW5nLmNoYXJBdCgyKSArIGNvbG9yU3RyaW5nLmNoYXJBdCgyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwYXJzZUludChjb2xvclN0cmluZywgMTYpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBIHdyYXBwZXIgZm9yIGNvbnNvbGUubG9nLCBmb3IgcHJvdmlkaW5nIGVycm9ycyBhbmQgd2FybmluZ3MuXG4gICAgICogQG1ldGhvZCBsb2dcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gICAgICovXG4gICAgQ29tbW9uLmxvZyA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHR5cGUpIHtcbiAgICAgICAgaWYgKCFjb25zb2xlIHx8ICFjb25zb2xlLmxvZyB8fCAhY29uc29sZS53YXJuKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuXG4gICAgICAgIGNhc2UgJ3dhcm4nOlxuICAgICAgICAgICAgY29uc29sZS53YXJuKCdNYXR0ZXIuanM6JywgbWVzc2FnZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZXJyb3InOlxuICAgICAgICAgICAgY29uc29sZS5sb2coJ01hdHRlci5qczonLCBtZXNzYWdlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbmV4dCB1bmlxdWUgc2VxdWVudGlhbCBJRC5cbiAgICAgKiBAbWV0aG9kIG5leHRJZFxuICAgICAqIEByZXR1cm4ge051bWJlcn0gVW5pcXVlIHNlcXVlbnRpYWwgSURcbiAgICAgKi9cbiAgICBDb21tb24ubmV4dElkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBDb21tb24uX25leHRJZCsrO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBIGNyb3NzIGJyb3dzZXIgY29tcGF0aWJsZSBpbmRleE9mIGltcGxlbWVudGF0aW9uLlxuICAgICAqIEBtZXRob2QgaW5kZXhPZlxuICAgICAqIEBwYXJhbSB7YXJyYXl9IGhheXN0YWNrXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG5lZWRsZVxuICAgICAqL1xuICAgIENvbW1vbi5pbmRleE9mID0gZnVuY3Rpb24oaGF5c3RhY2ssIG5lZWRsZSkge1xuICAgICAgICBpZiAoaGF5c3RhY2suaW5kZXhPZilcbiAgICAgICAgICAgIHJldHVybiBoYXlzdGFjay5pbmRleE9mKG5lZWRsZSk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoYXlzdGFjay5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGhheXN0YWNrW2ldID09PSBuZWVkbGUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfTtcblxuICAgIHZhciBfc2VlZGVkUmFuZG9tID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL25ncnltYW4vMzgzMDQ4OVxuICAgICAgICBDb21tb24uX3NlZWQgPSAoQ29tbW9uLl9zZWVkICogOTMwMSArIDQ5Mjk3KSAlIDIzMzI4MDtcbiAgICAgICAgcmV0dXJuIENvbW1vbi5fc2VlZCAvIDIzMzI4MDtcbiAgICB9O1xuXG59KSgpO1xuXG59LHt9XSwxNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiogVGhlIGBNYXR0ZXIuRW5naW5lYCBtb2R1bGUgY29udGFpbnMgbWV0aG9kcyBmb3IgY3JlYXRpbmcgYW5kIG1hbmlwdWxhdGluZyBlbmdpbmVzLlxuKiBBbiBlbmdpbmUgaXMgYSBjb250cm9sbGVyIHRoYXQgbWFuYWdlcyB1cGRhdGluZyB0aGUgc2ltdWxhdGlvbiBvZiB0aGUgd29ybGQuXG4qIFNlZSBgTWF0dGVyLlJ1bm5lcmAgZm9yIGFuIG9wdGlvbmFsIGdhbWUgbG9vcCB1dGlsaXR5LlxuKlxuKiBTZWUgdGhlIGluY2x1ZGVkIHVzYWdlIFtleGFtcGxlc10oaHR0cHM6Ly9naXRodWIuY29tL2xpYWJydS9tYXR0ZXItanMvdHJlZS9tYXN0ZXIvZXhhbXBsZXMpLlxuKlxuKiBAY2xhc3MgRW5naW5lXG4qL1xuXG52YXIgRW5naW5lID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gRW5naW5lO1xuXG52YXIgV29ybGQgPSByZXF1aXJlKCcuLi9ib2R5L1dvcmxkJyk7XG52YXIgU2xlZXBpbmcgPSByZXF1aXJlKCcuL1NsZWVwaW5nJyk7XG52YXIgUmVzb2x2ZXIgPSByZXF1aXJlKCcuLi9jb2xsaXNpb24vUmVzb2x2ZXInKTtcbnZhciBSZW5kZXIgPSByZXF1aXJlKCcuLi9yZW5kZXIvUmVuZGVyJyk7XG52YXIgUGFpcnMgPSByZXF1aXJlKCcuLi9jb2xsaXNpb24vUGFpcnMnKTtcbnZhciBNZXRyaWNzID0gcmVxdWlyZSgnLi9NZXRyaWNzJyk7XG52YXIgR3JpZCA9IHJlcXVpcmUoJy4uL2NvbGxpc2lvbi9HcmlkJyk7XG52YXIgRXZlbnRzID0gcmVxdWlyZSgnLi9FdmVudHMnKTtcbnZhciBDb21wb3NpdGUgPSByZXF1aXJlKCcuLi9ib2R5L0NvbXBvc2l0ZScpO1xudmFyIENvbnN0cmFpbnQgPSByZXF1aXJlKCcuLi9jb25zdHJhaW50L0NvbnN0cmFpbnQnKTtcbnZhciBDb21tb24gPSByZXF1aXJlKCcuL0NvbW1vbicpO1xudmFyIEJvZHkgPSByZXF1aXJlKCcuLi9ib2R5L0JvZHknKTtcblxuKGZ1bmN0aW9uKCkge1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBlbmdpbmUuIFRoZSBvcHRpb25zIHBhcmFtZXRlciBpcyBhbiBvYmplY3QgdGhhdCBzcGVjaWZpZXMgYW55IHByb3BlcnRpZXMgeW91IHdpc2ggdG8gb3ZlcnJpZGUgdGhlIGRlZmF1bHRzLlxuICAgICAqIEFsbCBwcm9wZXJ0aWVzIGhhdmUgZGVmYXVsdCB2YWx1ZXMsIGFuZCBtYW55IGFyZSBwcmUtY2FsY3VsYXRlZCBhdXRvbWF0aWNhbGx5IGJhc2VkIG9uIG90aGVyIHByb3BlcnRpZXMuXG4gICAgICogU2VlIHRoZSBwcm9wZXJ0aWVzIHNlY3Rpb24gYmVsb3cgZm9yIGRldGFpbGVkIGluZm9ybWF0aW9uIG9uIHdoYXQgeW91IGNhbiBwYXNzIHZpYSB0aGUgYG9wdGlvbnNgIG9iamVjdC5cbiAgICAgKiBAbWV0aG9kIGNyZWF0ZVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAgICAgKiBAcmV0dXJuIHtlbmdpbmV9IGVuZ2luZVxuICAgICAqL1xuICAgIEVuZ2luZS5jcmVhdGUgPSBmdW5jdGlvbihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICAgIC8vIG9wdGlvbnMgbWF5IGJlIHBhc3NlZCBhcyB0aGUgZmlyc3QgKGFuZCBvbmx5KSBhcmd1bWVudFxuICAgICAgICBvcHRpb25zID0gQ29tbW9uLmlzRWxlbWVudChlbGVtZW50KSA/IG9wdGlvbnMgOiBlbGVtZW50O1xuICAgICAgICBlbGVtZW50ID0gQ29tbW9uLmlzRWxlbWVudChlbGVtZW50KSA/IGVsZW1lbnQgOiBudWxsO1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICBpZiAoZWxlbWVudCB8fCBvcHRpb25zLnJlbmRlcikge1xuICAgICAgICAgICAgQ29tbW9uLmxvZygnRW5naW5lLmNyZWF0ZTogZW5naW5lLnJlbmRlciBpcyBkZXByZWNhdGVkIChzZWUgZG9jcyknLCAnd2FybicpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRlZmF1bHRzID0ge1xuICAgICAgICAgICAgcG9zaXRpb25JdGVyYXRpb25zOiA2LFxuICAgICAgICAgICAgdmVsb2NpdHlJdGVyYXRpb25zOiA0LFxuICAgICAgICAgICAgY29uc3RyYWludEl0ZXJhdGlvbnM6IDIsXG4gICAgICAgICAgICBlbmFibGVTbGVlcGluZzogZmFsc2UsXG4gICAgICAgICAgICBldmVudHM6IFtdLFxuICAgICAgICAgICAgdGltaW5nOiB7XG4gICAgICAgICAgICAgICAgdGltZXN0YW1wOiAwLFxuICAgICAgICAgICAgICAgIHRpbWVTY2FsZTogMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJyb2FkcGhhc2U6IHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBHcmlkXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGVuZ2luZSA9IENvbW1vbi5leHRlbmQoZGVmYXVsdHMsIG9wdGlvbnMpO1xuXG4gICAgICAgIC8vIEBkZXByZWNhdGVkXG4gICAgICAgIGlmIChlbGVtZW50IHx8IGVuZ2luZS5yZW5kZXIpIHtcbiAgICAgICAgICAgIHZhciByZW5kZXJEZWZhdWx0cyA9IHtcbiAgICAgICAgICAgICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFJlbmRlclxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZW5naW5lLnJlbmRlciA9IENvbW1vbi5leHRlbmQocmVuZGVyRGVmYXVsdHMsIGVuZ2luZS5yZW5kZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQGRlcHJlY2F0ZWRcbiAgICAgICAgaWYgKGVuZ2luZS5yZW5kZXIgJiYgZW5naW5lLnJlbmRlci5jb250cm9sbGVyKSB7XG4gICAgICAgICAgICBlbmdpbmUucmVuZGVyID0gZW5naW5lLnJlbmRlci5jb250cm9sbGVyLmNyZWF0ZShlbmdpbmUucmVuZGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEBkZXByZWNhdGVkXG4gICAgICAgIGlmIChlbmdpbmUucmVuZGVyKSB7XG4gICAgICAgICAgICBlbmdpbmUucmVuZGVyLmVuZ2luZSA9IGVuZ2luZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVuZ2luZS53b3JsZCA9IG9wdGlvbnMud29ybGQgfHwgV29ybGQuY3JlYXRlKGVuZ2luZS53b3JsZCk7XG4gICAgICAgIGVuZ2luZS5wYWlycyA9IFBhaXJzLmNyZWF0ZSgpO1xuICAgICAgICBlbmdpbmUuYnJvYWRwaGFzZSA9IGVuZ2luZS5icm9hZHBoYXNlLmNvbnRyb2xsZXIuY3JlYXRlKGVuZ2luZS5icm9hZHBoYXNlKTtcbiAgICAgICAgZW5naW5lLm1ldHJpY3MgPSBlbmdpbmUubWV0cmljcyB8fCB7IGV4dGVuZGVkOiBmYWxzZSB9O1xuXG5cbiAgICAgICAgcmV0dXJuIGVuZ2luZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogTW92ZXMgdGhlIHNpbXVsYXRpb24gZm9yd2FyZCBpbiB0aW1lIGJ5IGBkZWx0YWAgbXMuXG4gICAgICogVGhlIGBjb3JyZWN0aW9uYCBhcmd1bWVudCBpcyBhbiBvcHRpb25hbCBgTnVtYmVyYCB0aGF0IHNwZWNpZmllcyB0aGUgdGltZSBjb3JyZWN0aW9uIGZhY3RvciB0byBhcHBseSB0byB0aGUgdXBkYXRlLlxuICAgICAqIFRoaXMgY2FuIGhlbHAgaW1wcm92ZSB0aGUgYWNjdXJhY3kgb2YgdGhlIHNpbXVsYXRpb24gaW4gY2FzZXMgd2hlcmUgYGRlbHRhYCBpcyBjaGFuZ2luZyBiZXR3ZWVuIHVwZGF0ZXMuXG4gICAgICogVGhlIHZhbHVlIG9mIGBjb3JyZWN0aW9uYCBpcyBkZWZpbmVkIGFzIGBkZWx0YSAvIGxhc3REZWx0YWAsIGkuZS4gdGhlIHBlcmNlbnRhZ2UgY2hhbmdlIG9mIGBkZWx0YWAgb3ZlciB0aGUgbGFzdCBzdGVwLlxuICAgICAqIFRoZXJlZm9yZSB0aGUgdmFsdWUgaXMgYWx3YXlzIGAxYCAobm8gY29ycmVjdGlvbikgd2hlbiBgZGVsdGFgIGNvbnN0YW50IChvciB3aGVuIG5vIGNvcnJlY3Rpb24gaXMgZGVzaXJlZCwgd2hpY2ggaXMgdGhlIGRlZmF1bHQpLlxuICAgICAqIFNlZSB0aGUgcGFwZXIgb24gPGEgaHJlZj1cImh0dHA6Ly9sb25lc29jay5uZXQvYXJ0aWNsZS92ZXJsZXQuaHRtbFwiPlRpbWUgQ29ycmVjdGVkIFZlcmxldDwvYT4gZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICpcbiAgICAgKiBUcmlnZ2VycyBgYmVmb3JlVXBkYXRlYCBhbmQgYGFmdGVyVXBkYXRlYCBldmVudHMuXG4gICAgICogVHJpZ2dlcnMgYGNvbGxpc2lvblN0YXJ0YCwgYGNvbGxpc2lvbkFjdGl2ZWAgYW5kIGBjb2xsaXNpb25FbmRgIGV2ZW50cy5cbiAgICAgKiBAbWV0aG9kIHVwZGF0ZVxuICAgICAqIEBwYXJhbSB7ZW5naW5lfSBlbmdpbmVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlbHRhPTE2LjY2Nl1cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2NvcnJlY3Rpb249MV1cbiAgICAgKi9cbiAgICBFbmdpbmUudXBkYXRlID0gZnVuY3Rpb24oZW5naW5lLCBkZWx0YSwgY29ycmVjdGlvbikge1xuICAgICAgICBkZWx0YSA9IGRlbHRhIHx8IDEwMDAgLyA2MDtcbiAgICAgICAgY29ycmVjdGlvbiA9IGNvcnJlY3Rpb24gfHwgMTtcblxuICAgICAgICB2YXIgd29ybGQgPSBlbmdpbmUud29ybGQsXG4gICAgICAgICAgICB0aW1pbmcgPSBlbmdpbmUudGltaW5nLFxuICAgICAgICAgICAgYnJvYWRwaGFzZSA9IGVuZ2luZS5icm9hZHBoYXNlLFxuICAgICAgICAgICAgYnJvYWRwaGFzZVBhaXJzID0gW10sXG4gICAgICAgICAgICBpO1xuXG4gICAgICAgIC8vIGluY3JlbWVudCB0aW1lc3RhbXBcbiAgICAgICAgdGltaW5nLnRpbWVzdGFtcCArPSBkZWx0YSAqIHRpbWluZy50aW1lU2NhbGU7XG5cbiAgICAgICAgLy8gY3JlYXRlIGFuIGV2ZW50IG9iamVjdFxuICAgICAgICB2YXIgZXZlbnQgPSB7XG4gICAgICAgICAgICB0aW1lc3RhbXA6IHRpbWluZy50aW1lc3RhbXBcbiAgICAgICAgfTtcblxuICAgICAgICBFdmVudHMudHJpZ2dlcihlbmdpbmUsICdiZWZvcmVVcGRhdGUnLCBldmVudCk7XG5cbiAgICAgICAgLy8gZ2V0IGxpc3RzIG9mIGFsbCBib2RpZXMgYW5kIGNvbnN0cmFpbnRzLCBubyBtYXR0ZXIgd2hhdCBjb21wb3NpdGVzIHRoZXkgYXJlIGluXG4gICAgICAgIHZhciBhbGxCb2RpZXMgPSBDb21wb3NpdGUuYWxsQm9kaWVzKHdvcmxkKSxcbiAgICAgICAgICAgIGFsbENvbnN0cmFpbnRzID0gQ29tcG9zaXRlLmFsbENvbnN0cmFpbnRzKHdvcmxkKTtcblxuXG4gICAgICAgIC8vIGlmIHNsZWVwaW5nIGVuYWJsZWQsIGNhbGwgdGhlIHNsZWVwaW5nIGNvbnRyb2xsZXJcbiAgICAgICAgaWYgKGVuZ2luZS5lbmFibGVTbGVlcGluZylcbiAgICAgICAgICAgIFNsZWVwaW5nLnVwZGF0ZShhbGxCb2RpZXMsIHRpbWluZy50aW1lU2NhbGUpO1xuXG4gICAgICAgIC8vIGFwcGxpZXMgZ3Jhdml0eSB0byBhbGwgYm9kaWVzXG4gICAgICAgIF9ib2RpZXNBcHBseUdyYXZpdHkoYWxsQm9kaWVzLCB3b3JsZC5ncmF2aXR5KTtcblxuICAgICAgICAvLyB1cGRhdGUgYWxsIGJvZHkgcG9zaXRpb24gYW5kIHJvdGF0aW9uIGJ5IGludGVncmF0aW9uXG4gICAgICAgIF9ib2RpZXNVcGRhdGUoYWxsQm9kaWVzLCBkZWx0YSwgdGltaW5nLnRpbWVTY2FsZSwgY29ycmVjdGlvbiwgd29ybGQuYm91bmRzKTtcblxuICAgICAgICAvLyB1cGRhdGUgYWxsIGNvbnN0cmFpbnRzXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBlbmdpbmUuY29uc3RyYWludEl0ZXJhdGlvbnM7IGkrKykge1xuICAgICAgICAgICAgQ29uc3RyYWludC5zb2x2ZUFsbChhbGxDb25zdHJhaW50cywgdGltaW5nLnRpbWVTY2FsZSk7XG4gICAgICAgIH1cbiAgICAgICAgQ29uc3RyYWludC5wb3N0U29sdmVBbGwoYWxsQm9kaWVzKTtcblxuICAgICAgICAvLyBicm9hZHBoYXNlIHBhc3M6IGZpbmQgcG90ZW50aWFsIGNvbGxpc2lvbiBwYWlyc1xuICAgICAgICBpZiAoYnJvYWRwaGFzZS5jb250cm9sbGVyKSB7XG5cbiAgICAgICAgICAgIC8vIGlmIHdvcmxkIGlzIGRpcnR5LCB3ZSBtdXN0IGZsdXNoIHRoZSB3aG9sZSBncmlkXG4gICAgICAgICAgICBpZiAod29ybGQuaXNNb2RpZmllZClcbiAgICAgICAgICAgICAgICBicm9hZHBoYXNlLmNvbnRyb2xsZXIuY2xlYXIoYnJvYWRwaGFzZSk7XG5cbiAgICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgZ3JpZCBidWNrZXRzIGJhc2VkIG9uIGN1cnJlbnQgYm9kaWVzXG4gICAgICAgICAgICBicm9hZHBoYXNlLmNvbnRyb2xsZXIudXBkYXRlKGJyb2FkcGhhc2UsIGFsbEJvZGllcywgZW5naW5lLCB3b3JsZC5pc01vZGlmaWVkKTtcbiAgICAgICAgICAgIGJyb2FkcGhhc2VQYWlycyA9IGJyb2FkcGhhc2UucGFpcnNMaXN0O1xuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAvLyBpZiBubyBicm9hZHBoYXNlIHNldCwgd2UganVzdCBwYXNzIGFsbCBib2RpZXNcbiAgICAgICAgICAgIGJyb2FkcGhhc2VQYWlycyA9IGFsbEJvZGllcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNsZWFyIGFsbCBjb21wb3NpdGUgbW9kaWZpZWQgZmxhZ3NcbiAgICAgICAgaWYgKHdvcmxkLmlzTW9kaWZpZWQpIHtcbiAgICAgICAgICAgIENvbXBvc2l0ZS5zZXRNb2RpZmllZCh3b3JsZCwgZmFsc2UsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG5hcnJvd3BoYXNlIHBhc3M6IGZpbmQgYWN0dWFsIGNvbGxpc2lvbnMsIHRoZW4gY3JlYXRlIG9yIHVwZGF0ZSBjb2xsaXNpb24gcGFpcnNcbiAgICAgICAgdmFyIGNvbGxpc2lvbnMgPSBicm9hZHBoYXNlLmRldGVjdG9yKGJyb2FkcGhhc2VQYWlycywgZW5naW5lKTtcblxuICAgICAgICAvLyB1cGRhdGUgY29sbGlzaW9uIHBhaXJzXG4gICAgICAgIHZhciBwYWlycyA9IGVuZ2luZS5wYWlycyxcbiAgICAgICAgICAgIHRpbWVzdGFtcCA9IHRpbWluZy50aW1lc3RhbXA7XG4gICAgICAgIFBhaXJzLnVwZGF0ZShwYWlycywgY29sbGlzaW9ucywgdGltZXN0YW1wKTtcbiAgICAgICAgUGFpcnMucmVtb3ZlT2xkKHBhaXJzLCB0aW1lc3RhbXApO1xuXG4gICAgICAgIC8vIHdha2UgdXAgYm9kaWVzIGludm9sdmVkIGluIGNvbGxpc2lvbnNcbiAgICAgICAgaWYgKGVuZ2luZS5lbmFibGVTbGVlcGluZylcbiAgICAgICAgICAgIFNsZWVwaW5nLmFmdGVyQ29sbGlzaW9ucyhwYWlycy5saXN0LCB0aW1pbmcudGltZVNjYWxlKTtcblxuICAgICAgICAvLyB0cmlnZ2VyIGNvbGxpc2lvbiBldmVudHNcbiAgICAgICAgaWYgKHBhaXJzLmNvbGxpc2lvblN0YXJ0Lmxlbmd0aCA+IDApXG4gICAgICAgICAgICBFdmVudHMudHJpZ2dlcihlbmdpbmUsICdjb2xsaXNpb25TdGFydCcsIHsgcGFpcnM6IHBhaXJzLmNvbGxpc2lvblN0YXJ0IH0pO1xuXG4gICAgICAgIC8vIGl0ZXJhdGl2ZWx5IHJlc29sdmUgcG9zaXRpb24gYmV0d2VlbiBjb2xsaXNpb25zXG4gICAgICAgIFJlc29sdmVyLnByZVNvbHZlUG9zaXRpb24ocGFpcnMubGlzdCk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBlbmdpbmUucG9zaXRpb25JdGVyYXRpb25zOyBpKyspIHtcbiAgICAgICAgICAgIFJlc29sdmVyLnNvbHZlUG9zaXRpb24ocGFpcnMubGlzdCwgdGltaW5nLnRpbWVTY2FsZSk7XG4gICAgICAgIH1cbiAgICAgICAgUmVzb2x2ZXIucG9zdFNvbHZlUG9zaXRpb24oYWxsQm9kaWVzKTtcblxuICAgICAgICAvLyBpdGVyYXRpdmVseSByZXNvbHZlIHZlbG9jaXR5IGJldHdlZW4gY29sbGlzaW9uc1xuICAgICAgICBSZXNvbHZlci5wcmVTb2x2ZVZlbG9jaXR5KHBhaXJzLmxpc3QpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZW5naW5lLnZlbG9jaXR5SXRlcmF0aW9uczsgaSsrKSB7XG4gICAgICAgICAgICBSZXNvbHZlci5zb2x2ZVZlbG9jaXR5KHBhaXJzLmxpc3QsIHRpbWluZy50aW1lU2NhbGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdHJpZ2dlciBjb2xsaXNpb24gZXZlbnRzXG4gICAgICAgIGlmIChwYWlycy5jb2xsaXNpb25BY3RpdmUubGVuZ3RoID4gMClcbiAgICAgICAgICAgIEV2ZW50cy50cmlnZ2VyKGVuZ2luZSwgJ2NvbGxpc2lvbkFjdGl2ZScsIHsgcGFpcnM6IHBhaXJzLmNvbGxpc2lvbkFjdGl2ZSB9KTtcblxuICAgICAgICBpZiAocGFpcnMuY29sbGlzaW9uRW5kLmxlbmd0aCA+IDApXG4gICAgICAgICAgICBFdmVudHMudHJpZ2dlcihlbmdpbmUsICdjb2xsaXNpb25FbmQnLCB7IHBhaXJzOiBwYWlycy5jb2xsaXNpb25FbmQgfSk7XG5cblxuICAgICAgICAvLyBjbGVhciBmb3JjZSBidWZmZXJzXG4gICAgICAgIF9ib2RpZXNDbGVhckZvcmNlcyhhbGxCb2RpZXMpO1xuXG4gICAgICAgIEV2ZW50cy50cmlnZ2VyKGVuZ2luZSwgJ2FmdGVyVXBkYXRlJywgZXZlbnQpO1xuXG4gICAgICAgIHJldHVybiBlbmdpbmU7XG4gICAgfTtcbiAgICBcbiAgICAvKipcbiAgICAgKiBNZXJnZXMgdHdvIGVuZ2luZXMgYnkga2VlcGluZyB0aGUgY29uZmlndXJhdGlvbiBvZiBgZW5naW5lQWAgYnV0IHJlcGxhY2luZyB0aGUgd29ybGQgd2l0aCB0aGUgb25lIGZyb20gYGVuZ2luZUJgLlxuICAgICAqIEBtZXRob2QgbWVyZ2VcbiAgICAgKiBAcGFyYW0ge2VuZ2luZX0gZW5naW5lQVxuICAgICAqIEBwYXJhbSB7ZW5naW5lfSBlbmdpbmVCXG4gICAgICovXG4gICAgRW5naW5lLm1lcmdlID0gZnVuY3Rpb24oZW5naW5lQSwgZW5naW5lQikge1xuICAgICAgICBDb21tb24uZXh0ZW5kKGVuZ2luZUEsIGVuZ2luZUIpO1xuICAgICAgICBcbiAgICAgICAgaWYgKGVuZ2luZUIud29ybGQpIHtcbiAgICAgICAgICAgIGVuZ2luZUEud29ybGQgPSBlbmdpbmVCLndvcmxkO1xuXG4gICAgICAgICAgICBFbmdpbmUuY2xlYXIoZW5naW5lQSk7XG5cbiAgICAgICAgICAgIHZhciBib2RpZXMgPSBDb21wb3NpdGUuYWxsQm9kaWVzKGVuZ2luZUEud29ybGQpO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBib2R5ID0gYm9kaWVzW2ldO1xuICAgICAgICAgICAgICAgIFNsZWVwaW5nLnNldChib2R5LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgYm9keS5pZCA9IENvbW1vbi5uZXh0SWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDbGVhcnMgdGhlIGVuZ2luZSBpbmNsdWRpbmcgdGhlIHdvcmxkLCBwYWlycyBhbmQgYnJvYWRwaGFzZS5cbiAgICAgKiBAbWV0aG9kIGNsZWFyXG4gICAgICogQHBhcmFtIHtlbmdpbmV9IGVuZ2luZVxuICAgICAqL1xuICAgIEVuZ2luZS5jbGVhciA9IGZ1bmN0aW9uKGVuZ2luZSkge1xuICAgICAgICB2YXIgd29ybGQgPSBlbmdpbmUud29ybGQ7XG4gICAgICAgIFxuICAgICAgICBQYWlycy5jbGVhcihlbmdpbmUucGFpcnMpO1xuXG4gICAgICAgIHZhciBicm9hZHBoYXNlID0gZW5naW5lLmJyb2FkcGhhc2U7XG4gICAgICAgIGlmIChicm9hZHBoYXNlLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgIHZhciBib2RpZXMgPSBDb21wb3NpdGUuYWxsQm9kaWVzKHdvcmxkKTtcbiAgICAgICAgICAgIGJyb2FkcGhhc2UuY29udHJvbGxlci5jbGVhcihicm9hZHBoYXNlKTtcbiAgICAgICAgICAgIGJyb2FkcGhhc2UuY29udHJvbGxlci51cGRhdGUoYnJvYWRwaGFzZSwgYm9kaWVzLCBlbmdpbmUsIHRydWUpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFplcm9lcyB0aGUgYGJvZHkuZm9yY2VgIGFuZCBgYm9keS50b3JxdWVgIGZvcmNlIGJ1ZmZlcnMuXG4gICAgICogQG1ldGhvZCBib2RpZXNDbGVhckZvcmNlc1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib2R5W119IGJvZGllc1xuICAgICAqL1xuICAgIHZhciBfYm9kaWVzQ2xlYXJGb3JjZXMgPSBmdW5jdGlvbihib2RpZXMpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBib2R5ID0gYm9kaWVzW2ldO1xuXG4gICAgICAgICAgICAvLyByZXNldCBmb3JjZSBidWZmZXJzXG4gICAgICAgICAgICBib2R5LmZvcmNlLnggPSAwO1xuICAgICAgICAgICAgYm9keS5mb3JjZS55ID0gMDtcbiAgICAgICAgICAgIGJvZHkudG9ycXVlID0gMDtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBcHBseXMgYSBtYXNzIGRlcGVuZGFudCBmb3JjZSB0byBhbGwgZ2l2ZW4gYm9kaWVzLlxuICAgICAqIEBtZXRob2QgYm9kaWVzQXBwbHlHcmF2aXR5XG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2JvZHlbXX0gYm9kaWVzXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IGdyYXZpdHlcbiAgICAgKi9cbiAgICB2YXIgX2JvZGllc0FwcGx5R3Jhdml0eSA9IGZ1bmN0aW9uKGJvZGllcywgZ3Jhdml0eSkge1xuICAgICAgICB2YXIgZ3Jhdml0eVNjYWxlID0gdHlwZW9mIGdyYXZpdHkuc2NhbGUgIT09ICd1bmRlZmluZWQnID8gZ3Jhdml0eS5zY2FsZSA6IDAuMDAxO1xuXG4gICAgICAgIGlmICgoZ3Jhdml0eS54ID09PSAwICYmIGdyYXZpdHkueSA9PT0gMCkgfHwgZ3Jhdml0eVNjYWxlID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYm9keSA9IGJvZGllc1tpXTtcblxuICAgICAgICAgICAgaWYgKGJvZHkuaXNTdGF0aWMgfHwgYm9keS5pc1NsZWVwaW5nKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAvLyBhcHBseSBncmF2aXR5XG4gICAgICAgICAgICBib2R5LmZvcmNlLnkgKz0gYm9keS5tYXNzICogZ3Jhdml0eS55ICogZ3Jhdml0eVNjYWxlO1xuICAgICAgICAgICAgYm9keS5mb3JjZS54ICs9IGJvZHkubWFzcyAqIGdyYXZpdHkueCAqIGdyYXZpdHlTY2FsZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBcHBseXMgYEJvZHkudXBkYXRlYCB0byBhbGwgZ2l2ZW4gYGJvZGllc2AuXG4gICAgICogQG1ldGhvZCB1cGRhdGVBbGxcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9keVtdfSBib2RpZXNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGVsdGFUaW1lIFxuICAgICAqIFRoZSBhbW91bnQgb2YgdGltZSBlbGFwc2VkIGJldHdlZW4gdXBkYXRlc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lU2NhbGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gY29ycmVjdGlvbiBcbiAgICAgKiBUaGUgVmVybGV0IGNvcnJlY3Rpb24gZmFjdG9yIChkZWx0YVRpbWUgLyBsYXN0RGVsdGFUaW1lKVxuICAgICAqIEBwYXJhbSB7Ym91bmRzfSB3b3JsZEJvdW5kc1xuICAgICAqL1xuICAgIHZhciBfYm9kaWVzVXBkYXRlID0gZnVuY3Rpb24oYm9kaWVzLCBkZWx0YVRpbWUsIHRpbWVTY2FsZSwgY29ycmVjdGlvbiwgd29ybGRCb3VuZHMpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBib2R5ID0gYm9kaWVzW2ldO1xuXG4gICAgICAgICAgICBpZiAoYm9keS5pc1N0YXRpYyB8fCBib2R5LmlzU2xlZXBpbmcpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgIEJvZHkudXBkYXRlKGJvZHksIGRlbHRhVGltZSwgdGltZVNjYWxlLCBjb3JyZWN0aW9uKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBbiBhbGlhcyBmb3IgYFJ1bm5lci5ydW5gLCBzZWUgYE1hdHRlci5SdW5uZXJgIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAqIEBtZXRob2QgcnVuXG4gICAgICogQHBhcmFtIHtlbmdpbmV9IGVuZ2luZVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgKiBGaXJlZCBqdXN0IGJlZm9yZSBhbiB1cGRhdGVcbiAgICAqXG4gICAgKiBAZXZlbnQgYmVmb3JlVXBkYXRlXG4gICAgKiBAcGFyYW0ge30gZXZlbnQgQW4gZXZlbnQgb2JqZWN0XG4gICAgKiBAcGFyYW0ge251bWJlcn0gZXZlbnQudGltZXN0YW1wIFRoZSBlbmdpbmUudGltaW5nLnRpbWVzdGFtcCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5zb3VyY2UgVGhlIHNvdXJjZSBvYmplY3Qgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQubmFtZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgKiBGaXJlZCBhZnRlciBlbmdpbmUgdXBkYXRlIGFuZCBhbGwgY29sbGlzaW9uIGV2ZW50c1xuICAgICpcbiAgICAqIEBldmVudCBhZnRlclVwZGF0ZVxuICAgICogQHBhcmFtIHt9IGV2ZW50IEFuIGV2ZW50IG9iamVjdFxuICAgICogQHBhcmFtIHtudW1iZXJ9IGV2ZW50LnRpbWVzdGFtcCBUaGUgZW5naW5lLnRpbWluZy50aW1lc3RhbXAgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQuc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgKi9cblxuICAgIC8qKlxuICAgICogRmlyZWQgYWZ0ZXIgZW5naW5lIHVwZGF0ZSwgcHJvdmlkZXMgYSBsaXN0IG9mIGFsbCBwYWlycyB0aGF0IGhhdmUgc3RhcnRlZCB0byBjb2xsaWRlIGluIHRoZSBjdXJyZW50IHRpY2sgKGlmIGFueSlcbiAgICAqXG4gICAgKiBAZXZlbnQgY29sbGlzaW9uU3RhcnRcbiAgICAqIEBwYXJhbSB7fSBldmVudCBBbiBldmVudCBvYmplY3RcbiAgICAqIEBwYXJhbSB7fSBldmVudC5wYWlycyBMaXN0IG9mIGFmZmVjdGVkIHBhaXJzXG4gICAgKiBAcGFyYW0ge251bWJlcn0gZXZlbnQudGltZXN0YW1wIFRoZSBlbmdpbmUudGltaW5nLnRpbWVzdGFtcCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5zb3VyY2UgVGhlIHNvdXJjZSBvYmplY3Qgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQubmFtZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgKiBGaXJlZCBhZnRlciBlbmdpbmUgdXBkYXRlLCBwcm92aWRlcyBhIGxpc3Qgb2YgYWxsIHBhaXJzIHRoYXQgYXJlIGNvbGxpZGluZyBpbiB0aGUgY3VycmVudCB0aWNrIChpZiBhbnkpXG4gICAgKlxuICAgICogQGV2ZW50IGNvbGxpc2lvbkFjdGl2ZVxuICAgICogQHBhcmFtIHt9IGV2ZW50IEFuIGV2ZW50IG9iamVjdFxuICAgICogQHBhcmFtIHt9IGV2ZW50LnBhaXJzIExpc3Qgb2YgYWZmZWN0ZWQgcGFpcnNcbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBldmVudC50aW1lc3RhbXAgVGhlIGVuZ2luZS50aW1pbmcudGltZXN0YW1wIG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50LnNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5uYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgICovXG5cbiAgICAvKipcbiAgICAqIEZpcmVkIGFmdGVyIGVuZ2luZSB1cGRhdGUsIHByb3ZpZGVzIGEgbGlzdCBvZiBhbGwgcGFpcnMgdGhhdCBoYXZlIGVuZGVkIGNvbGxpc2lvbiBpbiB0aGUgY3VycmVudCB0aWNrIChpZiBhbnkpXG4gICAgKlxuICAgICogQGV2ZW50IGNvbGxpc2lvbkVuZFxuICAgICogQHBhcmFtIHt9IGV2ZW50IEFuIGV2ZW50IG9iamVjdFxuICAgICogQHBhcmFtIHt9IGV2ZW50LnBhaXJzIExpc3Qgb2YgYWZmZWN0ZWQgcGFpcnNcbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBldmVudC50aW1lc3RhbXAgVGhlIGVuZ2luZS50aW1pbmcudGltZXN0YW1wIG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50LnNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5uYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgICovXG5cbiAgICAvKlxuICAgICpcbiAgICAqICBQcm9wZXJ0aWVzIERvY3VtZW50YXRpb25cbiAgICAqXG4gICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFuIGludGVnZXIgYE51bWJlcmAgdGhhdCBzcGVjaWZpZXMgdGhlIG51bWJlciBvZiBwb3NpdGlvbiBpdGVyYXRpb25zIHRvIHBlcmZvcm0gZWFjaCB1cGRhdGUuXG4gICAgICogVGhlIGhpZ2hlciB0aGUgdmFsdWUsIHRoZSBoaWdoZXIgcXVhbGl0eSB0aGUgc2ltdWxhdGlvbiB3aWxsIGJlIGF0IHRoZSBleHBlbnNlIG9mIHBlcmZvcm1hbmNlLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHBvc2l0aW9uSXRlcmF0aW9uc1xuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDZcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFuIGludGVnZXIgYE51bWJlcmAgdGhhdCBzcGVjaWZpZXMgdGhlIG51bWJlciBvZiB2ZWxvY2l0eSBpdGVyYXRpb25zIHRvIHBlcmZvcm0gZWFjaCB1cGRhdGUuXG4gICAgICogVGhlIGhpZ2hlciB0aGUgdmFsdWUsIHRoZSBoaWdoZXIgcXVhbGl0eSB0aGUgc2ltdWxhdGlvbiB3aWxsIGJlIGF0IHRoZSBleHBlbnNlIG9mIHBlcmZvcm1hbmNlLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHZlbG9jaXR5SXRlcmF0aW9uc1xuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDRcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFuIGludGVnZXIgYE51bWJlcmAgdGhhdCBzcGVjaWZpZXMgdGhlIG51bWJlciBvZiBjb25zdHJhaW50IGl0ZXJhdGlvbnMgdG8gcGVyZm9ybSBlYWNoIHVwZGF0ZS5cbiAgICAgKiBUaGUgaGlnaGVyIHRoZSB2YWx1ZSwgdGhlIGhpZ2hlciBxdWFsaXR5IHRoZSBzaW11bGF0aW9uIHdpbGwgYmUgYXQgdGhlIGV4cGVuc2Ugb2YgcGVyZm9ybWFuY2UuXG4gICAgICogVGhlIGRlZmF1bHQgdmFsdWUgb2YgYDJgIGlzIHVzdWFsbHkgdmVyeSBhZGVxdWF0ZS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBjb25zdHJhaW50SXRlcmF0aW9uc1xuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDJcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgZmxhZyB0aGF0IHNwZWNpZmllcyB3aGV0aGVyIHRoZSBlbmdpbmUgc2hvdWxkIGFsbG93IHNsZWVwaW5nIHZpYSB0aGUgYE1hdHRlci5TbGVlcGluZ2AgbW9kdWxlLlxuICAgICAqIFNsZWVwaW5nIGNhbiBpbXByb3ZlIHN0YWJpbGl0eSBhbmQgcGVyZm9ybWFuY2UsIGJ1dCBvZnRlbiBhdCB0aGUgZXhwZW5zZSBvZiBhY2N1cmFjeS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBlbmFibGVTbGVlcGluZ1xuICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gYE9iamVjdGAgY29udGFpbmluZyBwcm9wZXJ0aWVzIHJlZ2FyZGluZyB0aGUgdGltaW5nIHN5c3RlbXMgb2YgdGhlIGVuZ2luZS4gXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgdGltaW5nXG4gICAgICogQHR5cGUgb2JqZWN0XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBOdW1iZXJgIHRoYXQgc3BlY2lmaWVzIHRoZSBnbG9iYWwgc2NhbGluZyBmYWN0b3Igb2YgdGltZSBmb3IgYWxsIGJvZGllcy5cbiAgICAgKiBBIHZhbHVlIG9mIGAwYCBmcmVlemVzIHRoZSBzaW11bGF0aW9uLlxuICAgICAqIEEgdmFsdWUgb2YgYDAuMWAgZ2l2ZXMgYSBzbG93LW1vdGlvbiBlZmZlY3QuXG4gICAgICogQSB2YWx1ZSBvZiBgMS4yYCBnaXZlcyBhIHNwZWVkLXVwIGVmZmVjdC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB0aW1pbmcudGltZVNjYWxlXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IHNwZWNpZmllcyB0aGUgY3VycmVudCBzaW11bGF0aW9uLXRpbWUgaW4gbWlsbGlzZWNvbmRzIHN0YXJ0aW5nIGZyb20gYDBgLiBcbiAgICAgKiBJdCBpcyBpbmNyZW1lbnRlZCBvbiBldmVyeSBgRW5naW5lLnVwZGF0ZWAgYnkgdGhlIGdpdmVuIGBkZWx0YWAgYXJndW1lbnQuIFxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHRpbWluZy50aW1lc3RhbXBcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBbiBpbnN0YW5jZSBvZiBhIGBSZW5kZXJgIGNvbnRyb2xsZXIuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGEgYE1hdHRlci5SZW5kZXJgIGluc3RhbmNlIGNyZWF0ZWQgYnkgYEVuZ2luZS5jcmVhdGVgLlxuICAgICAqIE9uZSBtYXkgYWxzbyBkZXZlbG9wIGEgY3VzdG9tIHJlbmRlcmVyIG1vZHVsZSBiYXNlZCBvbiBgTWF0dGVyLlJlbmRlcmAgYW5kIHBhc3MgYW4gaW5zdGFuY2Ugb2YgaXQgdG8gYEVuZ2luZS5jcmVhdGVgIHZpYSBgb3B0aW9ucy5yZW5kZXJgLlxuICAgICAqXG4gICAgICogQSBtaW5pbWFsIGN1c3RvbSByZW5kZXJlciBvYmplY3QgbXVzdCBkZWZpbmUgYXQgbGVhc3QgdGhyZWUgZnVuY3Rpb25zOiBgY3JlYXRlYCwgYGNsZWFyYCBhbmQgYHdvcmxkYCAoc2VlIGBNYXR0ZXIuUmVuZGVyYCkuXG4gICAgICogSXQgaXMgYWxzbyBwb3NzaWJsZSB0byBpbnN0ZWFkIHBhc3MgdGhlIF9tb2R1bGVfIHJlZmVyZW5jZSB2aWEgYG9wdGlvbnMucmVuZGVyLmNvbnRyb2xsZXJgIGFuZCBgRW5naW5lLmNyZWF0ZWAgd2lsbCBpbnN0YW50aWF0ZSBvbmUgZm9yIHlvdS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSByZW5kZXJcbiAgICAgKiBAdHlwZSByZW5kZXJcbiAgICAgKiBAZGVwcmVjYXRlZCBzZWUgRGVtby5qcyBmb3IgYW4gZXhhbXBsZSBvZiBjcmVhdGluZyBhIHJlbmRlcmVyXG4gICAgICogQGRlZmF1bHQgYSBNYXR0ZXIuUmVuZGVyIGluc3RhbmNlXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBbiBpbnN0YW5jZSBvZiBhIGJyb2FkcGhhc2UgY29udHJvbGxlci4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgYSBgTWF0dGVyLkdyaWRgIGluc3RhbmNlIGNyZWF0ZWQgYnkgYEVuZ2luZS5jcmVhdGVgLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGJyb2FkcGhhc2VcbiAgICAgKiBAdHlwZSBncmlkXG4gICAgICogQGRlZmF1bHQgYSBNYXR0ZXIuR3JpZCBpbnN0YW5jZVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgV29ybGRgIGNvbXBvc2l0ZSBvYmplY3QgdGhhdCB3aWxsIGNvbnRhaW4gYWxsIHNpbXVsYXRlZCBib2RpZXMgYW5kIGNvbnN0cmFpbnRzLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHdvcmxkXG4gICAgICogQHR5cGUgd29ybGRcbiAgICAgKiBAZGVmYXVsdCBhIE1hdHRlci5Xb3JsZCBpbnN0YW5jZVxuICAgICAqL1xuXG59KSgpO1xuXG59LHtcIi4uL2JvZHkvQm9keVwiOjEsXCIuLi9ib2R5L0NvbXBvc2l0ZVwiOjIsXCIuLi9ib2R5L1dvcmxkXCI6MyxcIi4uL2NvbGxpc2lvbi9HcmlkXCI6NixcIi4uL2NvbGxpc2lvbi9QYWlyc1wiOjgsXCIuLi9jb2xsaXNpb24vUmVzb2x2ZXJcIjoxMCxcIi4uL2NvbnN0cmFpbnQvQ29uc3RyYWludFwiOjEyLFwiLi4vcmVuZGVyL1JlbmRlclwiOjI5LFwiLi9Db21tb25cIjoxNCxcIi4vRXZlbnRzXCI6MTYsXCIuL01ldHJpY3NcIjoxNyxcIi4vU2xlZXBpbmdcIjoyMH1dLDE2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuKiBUaGUgYE1hdHRlci5FdmVudHNgIG1vZHVsZSBjb250YWlucyBtZXRob2RzIHRvIGZpcmUgYW5kIGxpc3RlbiB0byBldmVudHMgb24gb3RoZXIgb2JqZWN0cy5cbipcbiogU2VlIHRoZSBpbmNsdWRlZCB1c2FnZSBbZXhhbXBsZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9saWFicnUvbWF0dGVyLWpzL3RyZWUvbWFzdGVyL2V4YW1wbGVzKS5cbipcbiogQGNsYXNzIEV2ZW50c1xuKi9cblxudmFyIEV2ZW50cyA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50cztcblxudmFyIENvbW1vbiA9IHJlcXVpcmUoJy4vQ29tbW9uJyk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZXMgYSBjYWxsYmFjayBmdW5jdGlvbiB0byB0aGUgZ2l2ZW4gb2JqZWN0J3MgYGV2ZW50TmFtZWAuXG4gICAgICogQG1ldGhvZCBvblxuICAgICAqIEBwYXJhbSB7fSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lc1xuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gICAgICovXG4gICAgRXZlbnRzLm9uID0gZnVuY3Rpb24ob2JqZWN0LCBldmVudE5hbWVzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgbmFtZXMgPSBldmVudE5hbWVzLnNwbGl0KCcgJyksXG4gICAgICAgICAgICBuYW1lO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIG5hbWUgPSBuYW1lc1tpXTtcbiAgICAgICAgICAgIG9iamVjdC5ldmVudHMgPSBvYmplY3QuZXZlbnRzIHx8IHt9O1xuICAgICAgICAgICAgb2JqZWN0LmV2ZW50c1tuYW1lXSA9IG9iamVjdC5ldmVudHNbbmFtZV0gfHwgW107XG4gICAgICAgICAgICBvYmplY3QuZXZlbnRzW25hbWVdLnB1c2goY2FsbGJhY2spO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBnaXZlbiBldmVudCBjYWxsYmFjay4gSWYgbm8gY2FsbGJhY2ssIGNsZWFycyBhbGwgY2FsbGJhY2tzIGluIGBldmVudE5hbWVzYC4gSWYgbm8gYGV2ZW50TmFtZXNgLCBjbGVhcnMgYWxsIGV2ZW50cy5cbiAgICAgKiBAbWV0aG9kIG9mZlxuICAgICAqIEBwYXJhbSB7fSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lc1xuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gICAgICovXG4gICAgRXZlbnRzLm9mZiA9IGZ1bmN0aW9uKG9iamVjdCwgZXZlbnROYW1lcywgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCFldmVudE5hbWVzKSB7XG4gICAgICAgICAgICBvYmplY3QuZXZlbnRzID0ge307XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBoYW5kbGUgRXZlbnRzLm9mZihvYmplY3QsIGNhbGxiYWNrKVxuICAgICAgICBpZiAodHlwZW9mIGV2ZW50TmFtZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gZXZlbnROYW1lcztcbiAgICAgICAgICAgIGV2ZW50TmFtZXMgPSBDb21tb24ua2V5cyhvYmplY3QuZXZlbnRzKS5qb2luKCcgJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbmFtZXMgPSBldmVudE5hbWVzLnNwbGl0KCcgJyk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGNhbGxiYWNrcyA9IG9iamVjdC5ldmVudHNbbmFtZXNbaV1dLFxuICAgICAgICAgICAgICAgIG5ld0NhbGxiYWNrcyA9IFtdO1xuXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgJiYgY2FsbGJhY2tzKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBjYWxsYmFja3MubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrc1tqXSAhPT0gY2FsbGJhY2spXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdDYWxsYmFja3MucHVzaChjYWxsYmFja3Nbal0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb2JqZWN0LmV2ZW50c1tuYW1lc1tpXV0gPSBuZXdDYWxsYmFja3M7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRmlyZXMgYWxsIHRoZSBjYWxsYmFja3Mgc3Vic2NyaWJlZCB0byB0aGUgZ2l2ZW4gb2JqZWN0J3MgYGV2ZW50TmFtZWAsIGluIHRoZSBvcmRlciB0aGV5IHN1YnNjcmliZWQsIGlmIGFueS5cbiAgICAgKiBAbWV0aG9kIHRyaWdnZXJcbiAgICAgKiBAcGFyYW0ge30gb2JqZWN0XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZXNcbiAgICAgKiBAcGFyYW0ge30gZXZlbnRcbiAgICAgKi9cbiAgICBFdmVudHMudHJpZ2dlciA9IGZ1bmN0aW9uKG9iamVjdCwgZXZlbnROYW1lcywgZXZlbnQpIHtcbiAgICAgICAgdmFyIG5hbWVzLFxuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIGNhbGxiYWNrcyxcbiAgICAgICAgICAgIGV2ZW50Q2xvbmU7XG5cbiAgICAgICAgaWYgKG9iamVjdC5ldmVudHMpIHtcbiAgICAgICAgICAgIGlmICghZXZlbnQpXG4gICAgICAgICAgICAgICAgZXZlbnQgPSB7fTtcblxuICAgICAgICAgICAgbmFtZXMgPSBldmVudE5hbWVzLnNwbGl0KCcgJyk7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBuYW1lID0gbmFtZXNbaV07XG4gICAgICAgICAgICAgICAgY2FsbGJhY2tzID0gb2JqZWN0LmV2ZW50c1tuYW1lXTtcblxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFja3MpIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRDbG9uZSA9IENvbW1vbi5jbG9uZShldmVudCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBldmVudENsb25lLm5hbWUgPSBuYW1lO1xuICAgICAgICAgICAgICAgICAgICBldmVudENsb25lLnNvdXJjZSA9IG9iamVjdDtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGNhbGxiYWNrcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzW2pdLmFwcGx5KG9iamVjdCwgW2V2ZW50Q2xvbmVdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbn0pKCk7XG5cbn0se1wiLi9Db21tb25cIjoxNH1dLDE3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblxufSx7XCIuLi9ib2R5L0NvbXBvc2l0ZVwiOjIsXCIuL0NvbW1vblwiOjE0fV0sMTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLk1vdXNlYCBtb2R1bGUgY29udGFpbnMgbWV0aG9kcyBmb3IgY3JlYXRpbmcgYW5kIG1hbmlwdWxhdGluZyBtb3VzZSBpbnB1dHMuXG4qXG4qIEBjbGFzcyBNb3VzZVxuKi9cblxudmFyIE1vdXNlID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gTW91c2U7XG5cbnZhciBDb21tb24gPSByZXF1aXJlKCcuLi9jb3JlL0NvbW1vbicpO1xuXG4oZnVuY3Rpb24oKSB7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbW91c2UgaW5wdXQuXG4gICAgICogQG1ldGhvZCBjcmVhdGVcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gICAgICogQHJldHVybiB7bW91c2V9IEEgbmV3IG1vdXNlXG4gICAgICovXG4gICAgTW91c2UuY3JlYXRlID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICB2YXIgbW91c2UgPSB7fTtcblxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICAgIENvbW1vbi5sb2coJ01vdXNlLmNyZWF0ZTogZWxlbWVudCB3YXMgdW5kZWZpbmVkLCBkZWZhdWx0aW5nIHRvIGRvY3VtZW50LmJvZHknLCAnd2FybicpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBtb3VzZS5lbGVtZW50ID0gZWxlbWVudCB8fCBkb2N1bWVudC5ib2R5O1xuICAgICAgICBtb3VzZS5hYnNvbHV0ZSA9IHsgeDogMCwgeTogMCB9O1xuICAgICAgICBtb3VzZS5wb3NpdGlvbiA9IHsgeDogMCwgeTogMCB9O1xuICAgICAgICBtb3VzZS5tb3VzZWRvd25Qb3NpdGlvbiA9IHsgeDogMCwgeTogMCB9O1xuICAgICAgICBtb3VzZS5tb3VzZXVwUG9zaXRpb24gPSB7IHg6IDAsIHk6IDAgfTtcbiAgICAgICAgbW91c2Uub2Zmc2V0ID0geyB4OiAwLCB5OiAwIH07XG4gICAgICAgIG1vdXNlLnNjYWxlID0geyB4OiAxLCB5OiAxIH07XG4gICAgICAgIG1vdXNlLndoZWVsRGVsdGEgPSAwO1xuICAgICAgICBtb3VzZS5idXR0b24gPSAtMTtcbiAgICAgICAgbW91c2UucGl4ZWxSYXRpbyA9IG1vdXNlLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXBpeGVsLXJhdGlvJykgfHwgMTtcblxuICAgICAgICBtb3VzZS5zb3VyY2VFdmVudHMgPSB7XG4gICAgICAgICAgICBtb3VzZW1vdmU6IG51bGwsXG4gICAgICAgICAgICBtb3VzZWRvd246IG51bGwsXG4gICAgICAgICAgICBtb3VzZXVwOiBudWxsLFxuICAgICAgICAgICAgbW91c2V3aGVlbDogbnVsbFxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgbW91c2UubW91c2Vtb3ZlID0gZnVuY3Rpb24oZXZlbnQpIHsgXG4gICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBfZ2V0UmVsYXRpdmVNb3VzZVBvc2l0aW9uKGV2ZW50LCBtb3VzZS5lbGVtZW50LCBtb3VzZS5waXhlbFJhdGlvKSxcbiAgICAgICAgICAgICAgICB0b3VjaGVzID0gZXZlbnQuY2hhbmdlZFRvdWNoZXM7XG5cbiAgICAgICAgICAgIGlmICh0b3VjaGVzKSB7XG4gICAgICAgICAgICAgICAgbW91c2UuYnV0dG9uID0gMDtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBtb3VzZS5hYnNvbHV0ZS54ID0gcG9zaXRpb24ueDtcbiAgICAgICAgICAgIG1vdXNlLmFic29sdXRlLnkgPSBwb3NpdGlvbi55O1xuICAgICAgICAgICAgbW91c2UucG9zaXRpb24ueCA9IG1vdXNlLmFic29sdXRlLnggKiBtb3VzZS5zY2FsZS54ICsgbW91c2Uub2Zmc2V0Lng7XG4gICAgICAgICAgICBtb3VzZS5wb3NpdGlvbi55ID0gbW91c2UuYWJzb2x1dGUueSAqIG1vdXNlLnNjYWxlLnkgKyBtb3VzZS5vZmZzZXQueTtcbiAgICAgICAgICAgIG1vdXNlLnNvdXJjZUV2ZW50cy5tb3VzZW1vdmUgPSBldmVudDtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIG1vdXNlLm1vdXNlZG93biA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBfZ2V0UmVsYXRpdmVNb3VzZVBvc2l0aW9uKGV2ZW50LCBtb3VzZS5lbGVtZW50LCBtb3VzZS5waXhlbFJhdGlvKSxcbiAgICAgICAgICAgICAgICB0b3VjaGVzID0gZXZlbnQuY2hhbmdlZFRvdWNoZXM7XG5cbiAgICAgICAgICAgIGlmICh0b3VjaGVzKSB7XG4gICAgICAgICAgICAgICAgbW91c2UuYnV0dG9uID0gMDtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtb3VzZS5idXR0b24gPSBldmVudC5idXR0b247XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1vdXNlLmFic29sdXRlLnggPSBwb3NpdGlvbi54O1xuICAgICAgICAgICAgbW91c2UuYWJzb2x1dGUueSA9IHBvc2l0aW9uLnk7XG4gICAgICAgICAgICBtb3VzZS5wb3NpdGlvbi54ID0gbW91c2UuYWJzb2x1dGUueCAqIG1vdXNlLnNjYWxlLnggKyBtb3VzZS5vZmZzZXQueDtcbiAgICAgICAgICAgIG1vdXNlLnBvc2l0aW9uLnkgPSBtb3VzZS5hYnNvbHV0ZS55ICogbW91c2Uuc2NhbGUueSArIG1vdXNlLm9mZnNldC55O1xuICAgICAgICAgICAgbW91c2UubW91c2Vkb3duUG9zaXRpb24ueCA9IG1vdXNlLnBvc2l0aW9uLng7XG4gICAgICAgICAgICBtb3VzZS5tb3VzZWRvd25Qb3NpdGlvbi55ID0gbW91c2UucG9zaXRpb24ueTtcbiAgICAgICAgICAgIG1vdXNlLnNvdXJjZUV2ZW50cy5tb3VzZWRvd24gPSBldmVudDtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIG1vdXNlLm1vdXNldXAgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gX2dldFJlbGF0aXZlTW91c2VQb3NpdGlvbihldmVudCwgbW91c2UuZWxlbWVudCwgbW91c2UucGl4ZWxSYXRpbyksXG4gICAgICAgICAgICAgICAgdG91Y2hlcyA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzO1xuXG4gICAgICAgICAgICBpZiAodG91Y2hlcykge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIG1vdXNlLmJ1dHRvbiA9IC0xO1xuICAgICAgICAgICAgbW91c2UuYWJzb2x1dGUueCA9IHBvc2l0aW9uLng7XG4gICAgICAgICAgICBtb3VzZS5hYnNvbHV0ZS55ID0gcG9zaXRpb24ueTtcbiAgICAgICAgICAgIG1vdXNlLnBvc2l0aW9uLnggPSBtb3VzZS5hYnNvbHV0ZS54ICogbW91c2Uuc2NhbGUueCArIG1vdXNlLm9mZnNldC54O1xuICAgICAgICAgICAgbW91c2UucG9zaXRpb24ueSA9IG1vdXNlLmFic29sdXRlLnkgKiBtb3VzZS5zY2FsZS55ICsgbW91c2Uub2Zmc2V0Lnk7XG4gICAgICAgICAgICBtb3VzZS5tb3VzZXVwUG9zaXRpb24ueCA9IG1vdXNlLnBvc2l0aW9uLng7XG4gICAgICAgICAgICBtb3VzZS5tb3VzZXVwUG9zaXRpb24ueSA9IG1vdXNlLnBvc2l0aW9uLnk7XG4gICAgICAgICAgICBtb3VzZS5zb3VyY2VFdmVudHMubW91c2V1cCA9IGV2ZW50O1xuICAgICAgICB9O1xuXG4gICAgICAgIG1vdXNlLm1vdXNld2hlZWwgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgbW91c2Uud2hlZWxEZWx0YSA9IE1hdGgubWF4KC0xLCBNYXRoLm1pbigxLCBldmVudC53aGVlbERlbHRhIHx8IC1ldmVudC5kZXRhaWwpKTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgTW91c2Uuc2V0RWxlbWVudChtb3VzZSwgbW91c2UuZWxlbWVudCk7XG5cbiAgICAgICAgcmV0dXJuIG1vdXNlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBlbGVtZW50IHRoZSBtb3VzZSBpcyBib3VuZCB0byAoYW5kIHJlbGF0aXZlIHRvKS5cbiAgICAgKiBAbWV0aG9kIHNldEVsZW1lbnRcbiAgICAgKiBAcGFyYW0ge21vdXNlfSBtb3VzZVxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAgICAgKi9cbiAgICBNb3VzZS5zZXRFbGVtZW50ID0gZnVuY3Rpb24obW91c2UsIGVsZW1lbnQpIHtcbiAgICAgICAgbW91c2UuZWxlbWVudCA9IGVsZW1lbnQ7XG5cbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBtb3VzZS5tb3VzZW1vdmUpO1xuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIG1vdXNlLm1vdXNlZG93bik7XG4gICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG1vdXNlLm1vdXNldXApO1xuICAgICAgICBcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXdoZWVsJywgbW91c2UubW91c2V3aGVlbCk7XG4gICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NTW91c2VTY3JvbGwnLCBtb3VzZS5tb3VzZXdoZWVsKTtcblxuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG1vdXNlLm1vdXNlbW92ZSk7XG4gICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG1vdXNlLm1vdXNlZG93bik7XG4gICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBtb3VzZS5tb3VzZXVwKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2xlYXJzIGFsbCBjYXB0dXJlZCBzb3VyY2UgZXZlbnRzLlxuICAgICAqIEBtZXRob2QgY2xlYXJTb3VyY2VFdmVudHNcbiAgICAgKiBAcGFyYW0ge21vdXNlfSBtb3VzZVxuICAgICAqL1xuICAgIE1vdXNlLmNsZWFyU291cmNlRXZlbnRzID0gZnVuY3Rpb24obW91c2UpIHtcbiAgICAgICAgbW91c2Uuc291cmNlRXZlbnRzLm1vdXNlbW92ZSA9IG51bGw7XG4gICAgICAgIG1vdXNlLnNvdXJjZUV2ZW50cy5tb3VzZWRvd24gPSBudWxsO1xuICAgICAgICBtb3VzZS5zb3VyY2VFdmVudHMubW91c2V1cCA9IG51bGw7XG4gICAgICAgIG1vdXNlLnNvdXJjZUV2ZW50cy5tb3VzZXdoZWVsID0gbnVsbDtcbiAgICAgICAgbW91c2Uud2hlZWxEZWx0YSA9IDA7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIG1vdXNlIHBvc2l0aW9uIG9mZnNldC5cbiAgICAgKiBAbWV0aG9kIHNldE9mZnNldFxuICAgICAqIEBwYXJhbSB7bW91c2V9IG1vdXNlXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IG9mZnNldFxuICAgICAqL1xuICAgIE1vdXNlLnNldE9mZnNldCA9IGZ1bmN0aW9uKG1vdXNlLCBvZmZzZXQpIHtcbiAgICAgICAgbW91c2Uub2Zmc2V0LnggPSBvZmZzZXQueDtcbiAgICAgICAgbW91c2Uub2Zmc2V0LnkgPSBvZmZzZXQueTtcbiAgICAgICAgbW91c2UucG9zaXRpb24ueCA9IG1vdXNlLmFic29sdXRlLnggKiBtb3VzZS5zY2FsZS54ICsgbW91c2Uub2Zmc2V0Lng7XG4gICAgICAgIG1vdXNlLnBvc2l0aW9uLnkgPSBtb3VzZS5hYnNvbHV0ZS55ICogbW91c2Uuc2NhbGUueSArIG1vdXNlLm9mZnNldC55O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBtb3VzZSBwb3NpdGlvbiBzY2FsZS5cbiAgICAgKiBAbWV0aG9kIHNldFNjYWxlXG4gICAgICogQHBhcmFtIHttb3VzZX0gbW91c2VcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gc2NhbGVcbiAgICAgKi9cbiAgICBNb3VzZS5zZXRTY2FsZSA9IGZ1bmN0aW9uKG1vdXNlLCBzY2FsZSkge1xuICAgICAgICBtb3VzZS5zY2FsZS54ID0gc2NhbGUueDtcbiAgICAgICAgbW91c2Uuc2NhbGUueSA9IHNjYWxlLnk7XG4gICAgICAgIG1vdXNlLnBvc2l0aW9uLnggPSBtb3VzZS5hYnNvbHV0ZS54ICogbW91c2Uuc2NhbGUueCArIG1vdXNlLm9mZnNldC54O1xuICAgICAgICBtb3VzZS5wb3NpdGlvbi55ID0gbW91c2UuYWJzb2x1dGUueSAqIG1vdXNlLnNjYWxlLnkgKyBtb3VzZS5vZmZzZXQueTtcbiAgICB9O1xuICAgIFxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG1vdXNlIHBvc2l0aW9uIHJlbGF0aXZlIHRvIGFuIGVsZW1lbnQgZ2l2ZW4gYSBzY3JlZW4gcGl4ZWwgcmF0aW8uXG4gICAgICogQG1ldGhvZCBfZ2V0UmVsYXRpdmVNb3VzZVBvc2l0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge30gZXZlbnRcbiAgICAgKiBAcGFyYW0ge30gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBwaXhlbFJhdGlvXG4gICAgICogQHJldHVybiB7fVxuICAgICAqL1xuICAgIHZhciBfZ2V0UmVsYXRpdmVNb3VzZVBvc2l0aW9uID0gZnVuY3Rpb24oZXZlbnQsIGVsZW1lbnQsIHBpeGVsUmF0aW8pIHtcbiAgICAgICAgdmFyIGVsZW1lbnRCb3VuZHMgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICAgICAgcm9vdE5vZGUgPSAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IHx8IGRvY3VtZW50LmJvZHkucGFyZW50Tm9kZSB8fCBkb2N1bWVudC5ib2R5KSxcbiAgICAgICAgICAgIHNjcm9sbFggPSAod2luZG93LnBhZ2VYT2Zmc2V0ICE9PSB1bmRlZmluZWQpID8gd2luZG93LnBhZ2VYT2Zmc2V0IDogcm9vdE5vZGUuc2Nyb2xsTGVmdCxcbiAgICAgICAgICAgIHNjcm9sbFkgPSAod2luZG93LnBhZ2VZT2Zmc2V0ICE9PSB1bmRlZmluZWQpID8gd2luZG93LnBhZ2VZT2Zmc2V0IDogcm9vdE5vZGUuc2Nyb2xsVG9wLFxuICAgICAgICAgICAgdG91Y2hlcyA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICAgICAgeCwgeTtcbiAgICAgICAgXG4gICAgICAgIGlmICh0b3VjaGVzKSB7XG4gICAgICAgICAgICB4ID0gdG91Y2hlc1swXS5wYWdlWCAtIGVsZW1lbnRCb3VuZHMubGVmdCAtIHNjcm9sbFg7XG4gICAgICAgICAgICB5ID0gdG91Y2hlc1swXS5wYWdlWSAtIGVsZW1lbnRCb3VuZHMudG9wIC0gc2Nyb2xsWTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHggPSBldmVudC5wYWdlWCAtIGVsZW1lbnRCb3VuZHMubGVmdCAtIHNjcm9sbFg7XG4gICAgICAgICAgICB5ID0gZXZlbnQucGFnZVkgLSBlbGVtZW50Qm91bmRzLnRvcCAtIHNjcm9sbFk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geyBcbiAgICAgICAgICAgIHg6IHggLyAoZWxlbWVudC5jbGllbnRXaWR0aCAvIGVsZW1lbnQud2lkdGggKiBwaXhlbFJhdGlvKSxcbiAgICAgICAgICAgIHk6IHkgLyAoZWxlbWVudC5jbGllbnRIZWlnaHQgLyBlbGVtZW50LmhlaWdodCAqIHBpeGVsUmF0aW8pXG4gICAgICAgIH07XG4gICAgfTtcblxufSkoKTtcblxufSx7XCIuLi9jb3JlL0NvbW1vblwiOjE0fV0sMTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLlJ1bm5lcmAgbW9kdWxlIGlzIGFuIG9wdGlvbmFsIHV0aWxpdHkgd2hpY2ggcHJvdmlkZXMgYSBnYW1lIGxvb3AsIFxuKiB0aGF0IGhhbmRsZXMgY29udGludW91c2x5IHVwZGF0aW5nIGEgYE1hdHRlci5FbmdpbmVgIGZvciB5b3Ugd2l0aGluIGEgYnJvd3Nlci5cbiogSXQgaXMgaW50ZW5kZWQgZm9yIGRldmVsb3BtZW50IGFuZCBkZWJ1Z2dpbmcgcHVycG9zZXMsIGJ1dCBtYXkgYWxzbyBiZSBzdWl0YWJsZSBmb3Igc2ltcGxlIGdhbWVzLlxuKiBJZiB5b3UgYXJlIHVzaW5nIHlvdXIgb3duIGdhbWUgbG9vcCBpbnN0ZWFkLCB0aGVuIHlvdSBkbyBub3QgbmVlZCB0aGUgYE1hdHRlci5SdW5uZXJgIG1vZHVsZS5cbiogSW5zdGVhZCBqdXN0IGNhbGwgYEVuZ2luZS51cGRhdGUoZW5naW5lLCBkZWx0YSlgIGluIHlvdXIgb3duIGxvb3AuXG4qXG4qIFNlZSB0aGUgaW5jbHVkZWQgdXNhZ2UgW2V4YW1wbGVzXShodHRwczovL2dpdGh1Yi5jb20vbGlhYnJ1L21hdHRlci1qcy90cmVlL21hc3Rlci9leGFtcGxlcykuXG4qXG4qIEBjbGFzcyBSdW5uZXJcbiovXG5cbnZhciBSdW5uZXIgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBSdW5uZXI7XG5cbnZhciBFdmVudHMgPSByZXF1aXJlKCcuL0V2ZW50cycpO1xudmFyIEVuZ2luZSA9IHJlcXVpcmUoJy4vRW5naW5lJyk7XG52YXIgQ29tbW9uID0gcmVxdWlyZSgnLi9Db21tb24nKTtcblxuKGZ1bmN0aW9uKCkge1xuXG4gICAgdmFyIF9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUsXG4gICAgICAgIF9jYW5jZWxBbmltYXRpb25GcmFtZTtcblxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBfcmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgd2luZG93Lm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBmdW5jdGlvbihjYWxsYmFjayl7IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBjYWxsYmFjayhDb21tb24ubm93KCkpOyB9LCAxMDAwIC8gNjApOyB9O1xuICAgXG4gICAgICAgIF9jYW5jZWxBbmltYXRpb25GcmFtZSA9IHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cubW96Q2FuY2VsQW5pbWF0aW9uRnJhbWUgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IHdpbmRvdy53ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cubXNDYW5jZWxBbmltYXRpb25GcmFtZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IFJ1bm5lci4gVGhlIG9wdGlvbnMgcGFyYW1ldGVyIGlzIGFuIG9iamVjdCB0aGF0IHNwZWNpZmllcyBhbnkgcHJvcGVydGllcyB5b3Ugd2lzaCB0byBvdmVycmlkZSB0aGUgZGVmYXVsdHMuXG4gICAgICogQG1ldGhvZCBjcmVhdGVcbiAgICAgKiBAcGFyYW0ge30gb3B0aW9uc1xuICAgICAqL1xuICAgIFJ1bm5lci5jcmVhdGUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIHZhciBkZWZhdWx0cyA9IHtcbiAgICAgICAgICAgIGZwczogNjAsXG4gICAgICAgICAgICBjb3JyZWN0aW9uOiAxLFxuICAgICAgICAgICAgZGVsdGFTYW1wbGVTaXplOiA2MCxcbiAgICAgICAgICAgIGNvdW50ZXJUaW1lc3RhbXA6IDAsXG4gICAgICAgICAgICBmcmFtZUNvdW50ZXI6IDAsXG4gICAgICAgICAgICBkZWx0YUhpc3Rvcnk6IFtdLFxuICAgICAgICAgICAgdGltZVByZXY6IG51bGwsXG4gICAgICAgICAgICB0aW1lU2NhbGVQcmV2OiAxLFxuICAgICAgICAgICAgZnJhbWVSZXF1ZXN0SWQ6IG51bGwsXG4gICAgICAgICAgICBpc0ZpeGVkOiBmYWxzZSxcbiAgICAgICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgcnVubmVyID0gQ29tbW9uLmV4dGVuZChkZWZhdWx0cywgb3B0aW9ucyk7XG5cbiAgICAgICAgcnVubmVyLmRlbHRhID0gcnVubmVyLmRlbHRhIHx8IDEwMDAgLyBydW5uZXIuZnBzO1xuICAgICAgICBydW5uZXIuZGVsdGFNaW4gPSBydW5uZXIuZGVsdGFNaW4gfHwgMTAwMCAvIHJ1bm5lci5mcHM7XG4gICAgICAgIHJ1bm5lci5kZWx0YU1heCA9IHJ1bm5lci5kZWx0YU1heCB8fCAxMDAwIC8gKHJ1bm5lci5mcHMgKiAwLjUpO1xuICAgICAgICBydW5uZXIuZnBzID0gMTAwMCAvIHJ1bm5lci5kZWx0YTtcblxuICAgICAgICByZXR1cm4gcnVubmVyO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDb250aW51b3VzbHkgdGlja3MgYSBgTWF0dGVyLkVuZ2luZWAgYnkgY2FsbGluZyBgUnVubmVyLnRpY2tgIG9uIHRoZSBgcmVxdWVzdEFuaW1hdGlvbkZyYW1lYCBldmVudC5cbiAgICAgKiBAbWV0aG9kIHJ1blxuICAgICAqIEBwYXJhbSB7ZW5naW5lfSBlbmdpbmVcbiAgICAgKi9cbiAgICBSdW5uZXIucnVuID0gZnVuY3Rpb24ocnVubmVyLCBlbmdpbmUpIHtcbiAgICAgICAgLy8gY3JlYXRlIHJ1bm5lciBpZiBlbmdpbmUgaXMgZmlyc3QgYXJndW1lbnRcbiAgICAgICAgaWYgKHR5cGVvZiBydW5uZXIucG9zaXRpb25JdGVyYXRpb25zICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgZW5naW5lID0gcnVubmVyO1xuICAgICAgICAgICAgcnVubmVyID0gUnVubmVyLmNyZWF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgKGZ1bmN0aW9uIHJlbmRlcih0aW1lKXtcbiAgICAgICAgICAgIHJ1bm5lci5mcmFtZVJlcXVlc3RJZCA9IF9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcblxuICAgICAgICAgICAgaWYgKHRpbWUgJiYgcnVubmVyLmVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICBSdW5uZXIudGljayhydW5uZXIsIGVuZ2luZSwgdGltZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKCk7XG5cbiAgICAgICAgcmV0dXJuIHJ1bm5lcjtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQSBnYW1lIGxvb3AgdXRpbGl0eSB0aGF0IHVwZGF0ZXMgdGhlIGVuZ2luZSBhbmQgcmVuZGVyZXIgYnkgb25lIHN0ZXAgKGEgJ3RpY2snKS5cbiAgICAgKiBGZWF0dXJlcyBkZWx0YSBzbW9vdGhpbmcsIHRpbWUgY29ycmVjdGlvbiBhbmQgZml4ZWQgb3IgZHluYW1pYyB0aW1pbmcuXG4gICAgICogVHJpZ2dlcnMgYGJlZm9yZVRpY2tgLCBgdGlja2AgYW5kIGBhZnRlclRpY2tgIGV2ZW50cyBvbiB0aGUgZW5naW5lLlxuICAgICAqIENvbnNpZGVyIGp1c3QgYEVuZ2luZS51cGRhdGUoZW5naW5lLCBkZWx0YSlgIGlmIHlvdSdyZSB1c2luZyB5b3VyIG93biBsb29wLlxuICAgICAqIEBtZXRob2QgdGlja1xuICAgICAqIEBwYXJhbSB7cnVubmVyfSBydW5uZXJcbiAgICAgKiBAcGFyYW0ge2VuZ2luZX0gZW5naW5lXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWVcbiAgICAgKi9cbiAgICBSdW5uZXIudGljayA9IGZ1bmN0aW9uKHJ1bm5lciwgZW5naW5lLCB0aW1lKSB7XG4gICAgICAgIHZhciB0aW1pbmcgPSBlbmdpbmUudGltaW5nLFxuICAgICAgICAgICAgY29ycmVjdGlvbiA9IDEsXG4gICAgICAgICAgICBkZWx0YTtcblxuICAgICAgICAvLyBjcmVhdGUgYW4gZXZlbnQgb2JqZWN0XG4gICAgICAgIHZhciBldmVudCA9IHtcbiAgICAgICAgICAgIHRpbWVzdGFtcDogdGltaW5nLnRpbWVzdGFtcFxuICAgICAgICB9O1xuXG4gICAgICAgIEV2ZW50cy50cmlnZ2VyKHJ1bm5lciwgJ2JlZm9yZVRpY2snLCBldmVudCk7XG4gICAgICAgIEV2ZW50cy50cmlnZ2VyKGVuZ2luZSwgJ2JlZm9yZVRpY2snLCBldmVudCk7IC8vIEBkZXByZWNhdGVkXG5cbiAgICAgICAgaWYgKHJ1bm5lci5pc0ZpeGVkKSB7XG4gICAgICAgICAgICAvLyBmaXhlZCB0aW1lc3RlcFxuICAgICAgICAgICAgZGVsdGEgPSBydW5uZXIuZGVsdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBkeW5hbWljIHRpbWVzdGVwIGJhc2VkIG9uIHdhbGwgY2xvY2sgYmV0d2VlbiBjYWxsc1xuICAgICAgICAgICAgZGVsdGEgPSAodGltZSAtIHJ1bm5lci50aW1lUHJldikgfHwgcnVubmVyLmRlbHRhO1xuICAgICAgICAgICAgcnVubmVyLnRpbWVQcmV2ID0gdGltZTtcblxuICAgICAgICAgICAgLy8gb3B0aW1pc3RpY2FsbHkgZmlsdGVyIGRlbHRhIG92ZXIgYSBmZXcgZnJhbWVzLCB0byBpbXByb3ZlIHN0YWJpbGl0eVxuICAgICAgICAgICAgcnVubmVyLmRlbHRhSGlzdG9yeS5wdXNoKGRlbHRhKTtcbiAgICAgICAgICAgIHJ1bm5lci5kZWx0YUhpc3RvcnkgPSBydW5uZXIuZGVsdGFIaXN0b3J5LnNsaWNlKC1ydW5uZXIuZGVsdGFTYW1wbGVTaXplKTtcbiAgICAgICAgICAgIGRlbHRhID0gTWF0aC5taW4uYXBwbHkobnVsbCwgcnVubmVyLmRlbHRhSGlzdG9yeSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGxpbWl0IGRlbHRhXG4gICAgICAgICAgICBkZWx0YSA9IGRlbHRhIDwgcnVubmVyLmRlbHRhTWluID8gcnVubmVyLmRlbHRhTWluIDogZGVsdGE7XG4gICAgICAgICAgICBkZWx0YSA9IGRlbHRhID4gcnVubmVyLmRlbHRhTWF4ID8gcnVubmVyLmRlbHRhTWF4IDogZGVsdGE7XG5cbiAgICAgICAgICAgIC8vIGNvcnJlY3Rpb24gZm9yIGRlbHRhXG4gICAgICAgICAgICBjb3JyZWN0aW9uID0gZGVsdGEgLyBydW5uZXIuZGVsdGE7XG5cbiAgICAgICAgICAgIC8vIHVwZGF0ZSBlbmdpbmUgdGltaW5nIG9iamVjdFxuICAgICAgICAgICAgcnVubmVyLmRlbHRhID0gZGVsdGE7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0aW1lIGNvcnJlY3Rpb24gZm9yIHRpbWUgc2NhbGluZ1xuICAgICAgICBpZiAocnVubmVyLnRpbWVTY2FsZVByZXYgIT09IDApXG4gICAgICAgICAgICBjb3JyZWN0aW9uICo9IHRpbWluZy50aW1lU2NhbGUgLyBydW5uZXIudGltZVNjYWxlUHJldjtcblxuICAgICAgICBpZiAodGltaW5nLnRpbWVTY2FsZSA9PT0gMClcbiAgICAgICAgICAgIGNvcnJlY3Rpb24gPSAwO1xuXG4gICAgICAgIHJ1bm5lci50aW1lU2NhbGVQcmV2ID0gdGltaW5nLnRpbWVTY2FsZTtcbiAgICAgICAgcnVubmVyLmNvcnJlY3Rpb24gPSBjb3JyZWN0aW9uO1xuXG4gICAgICAgIC8vIGZwcyBjb3VudGVyXG4gICAgICAgIHJ1bm5lci5mcmFtZUNvdW50ZXIgKz0gMTtcbiAgICAgICAgaWYgKHRpbWUgLSBydW5uZXIuY291bnRlclRpbWVzdGFtcCA+PSAxMDAwKSB7XG4gICAgICAgICAgICBydW5uZXIuZnBzID0gcnVubmVyLmZyYW1lQ291bnRlciAqICgodGltZSAtIHJ1bm5lci5jb3VudGVyVGltZXN0YW1wKSAvIDEwMDApO1xuICAgICAgICAgICAgcnVubmVyLmNvdW50ZXJUaW1lc3RhbXAgPSB0aW1lO1xuICAgICAgICAgICAgcnVubmVyLmZyYW1lQ291bnRlciA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBFdmVudHMudHJpZ2dlcihydW5uZXIsICd0aWNrJywgZXZlbnQpO1xuICAgICAgICBFdmVudHMudHJpZ2dlcihlbmdpbmUsICd0aWNrJywgZXZlbnQpOyAvLyBAZGVwcmVjYXRlZFxuXG4gICAgICAgIC8vIGlmIHdvcmxkIGhhcyBiZWVuIG1vZGlmaWVkLCBjbGVhciB0aGUgcmVuZGVyIHNjZW5lIGdyYXBoXG4gICAgICAgIGlmIChlbmdpbmUud29ybGQuaXNNb2RpZmllZCBcbiAgICAgICAgICAgICYmIGVuZ2luZS5yZW5kZXJcbiAgICAgICAgICAgICYmIGVuZ2luZS5yZW5kZXIuY29udHJvbGxlclxuICAgICAgICAgICAgJiYgZW5naW5lLnJlbmRlci5jb250cm9sbGVyLmNsZWFyKSB7XG4gICAgICAgICAgICBlbmdpbmUucmVuZGVyLmNvbnRyb2xsZXIuY2xlYXIoZW5naW5lLnJlbmRlcik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB1cGRhdGVcbiAgICAgICAgRXZlbnRzLnRyaWdnZXIocnVubmVyLCAnYmVmb3JlVXBkYXRlJywgZXZlbnQpO1xuICAgICAgICBFbmdpbmUudXBkYXRlKGVuZ2luZSwgZGVsdGEsIGNvcnJlY3Rpb24pO1xuICAgICAgICBFdmVudHMudHJpZ2dlcihydW5uZXIsICdhZnRlclVwZGF0ZScsIGV2ZW50KTtcblxuICAgICAgICAvLyByZW5kZXJcbiAgICAgICAgLy8gQGRlcHJlY2F0ZWRcbiAgICAgICAgaWYgKGVuZ2luZS5yZW5kZXIgJiYgZW5naW5lLnJlbmRlci5jb250cm9sbGVyKSB7XG4gICAgICAgICAgICBFdmVudHMudHJpZ2dlcihydW5uZXIsICdiZWZvcmVSZW5kZXInLCBldmVudCk7XG4gICAgICAgICAgICBFdmVudHMudHJpZ2dlcihlbmdpbmUsICdiZWZvcmVSZW5kZXInLCBldmVudCk7IC8vIEBkZXByZWNhdGVkXG5cbiAgICAgICAgICAgIGVuZ2luZS5yZW5kZXIuY29udHJvbGxlci53b3JsZChlbmdpbmUucmVuZGVyKTtcblxuICAgICAgICAgICAgRXZlbnRzLnRyaWdnZXIocnVubmVyLCAnYWZ0ZXJSZW5kZXInLCBldmVudCk7XG4gICAgICAgICAgICBFdmVudHMudHJpZ2dlcihlbmdpbmUsICdhZnRlclJlbmRlcicsIGV2ZW50KTsgLy8gQGRlcHJlY2F0ZWRcbiAgICAgICAgfVxuXG4gICAgICAgIEV2ZW50cy50cmlnZ2VyKHJ1bm5lciwgJ2FmdGVyVGljaycsIGV2ZW50KTtcbiAgICAgICAgRXZlbnRzLnRyaWdnZXIoZW5naW5lLCAnYWZ0ZXJUaWNrJywgZXZlbnQpOyAvLyBAZGVwcmVjYXRlZFxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBFbmRzIGV4ZWN1dGlvbiBvZiBgUnVubmVyLnJ1bmAgb24gdGhlIGdpdmVuIGBydW5uZXJgLCBieSBjYW5jZWxpbmcgdGhlIGFuaW1hdGlvbiBmcmFtZSByZXF1ZXN0IGV2ZW50IGxvb3AuXG4gICAgICogSWYgeW91IHdpc2ggdG8gb25seSB0ZW1wb3JhcmlseSBwYXVzZSB0aGUgZW5naW5lLCBzZWUgYGVuZ2luZS5lbmFibGVkYCBpbnN0ZWFkLlxuICAgICAqIEBtZXRob2Qgc3RvcFxuICAgICAqIEBwYXJhbSB7cnVubmVyfSBydW5uZXJcbiAgICAgKi9cbiAgICBSdW5uZXIuc3RvcCA9IGZ1bmN0aW9uKHJ1bm5lcikge1xuICAgICAgICBfY2FuY2VsQW5pbWF0aW9uRnJhbWUocnVubmVyLmZyYW1lUmVxdWVzdElkKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWxpYXMgZm9yIGBSdW5uZXIucnVuYC5cbiAgICAgKiBAbWV0aG9kIHN0YXJ0XG4gICAgICogQHBhcmFtIHtydW5uZXJ9IHJ1bm5lclxuICAgICAqIEBwYXJhbSB7ZW5naW5lfSBlbmdpbmVcbiAgICAgKi9cbiAgICBSdW5uZXIuc3RhcnQgPSBmdW5jdGlvbihydW5uZXIsIGVuZ2luZSkge1xuICAgICAgICBSdW5uZXIucnVuKHJ1bm5lciwgZW5naW5lKTtcbiAgICB9O1xuXG4gICAgLypcbiAgICAqXG4gICAgKiAgRXZlbnRzIERvY3VtZW50YXRpb25cbiAgICAqXG4gICAgKi9cblxuICAgIC8qKlxuICAgICogRmlyZWQgYXQgdGhlIHN0YXJ0IG9mIGEgdGljaywgYmVmb3JlIGFueSB1cGRhdGVzIHRvIHRoZSBlbmdpbmUgb3IgdGltaW5nXG4gICAgKlxuICAgICogQGV2ZW50IGJlZm9yZVRpY2tcbiAgICAqIEBwYXJhbSB7fSBldmVudCBBbiBldmVudCBvYmplY3RcbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBldmVudC50aW1lc3RhbXAgVGhlIGVuZ2luZS50aW1pbmcudGltZXN0YW1wIG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50LnNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5uYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgICovXG5cbiAgICAvKipcbiAgICAqIEZpcmVkIGFmdGVyIGVuZ2luZSB0aW1pbmcgdXBkYXRlZCwgYnV0IGp1c3QgYmVmb3JlIHVwZGF0ZVxuICAgICpcbiAgICAqIEBldmVudCB0aWNrXG4gICAgKiBAcGFyYW0ge30gZXZlbnQgQW4gZXZlbnQgb2JqZWN0XG4gICAgKiBAcGFyYW0ge251bWJlcn0gZXZlbnQudGltZXN0YW1wIFRoZSBlbmdpbmUudGltaW5nLnRpbWVzdGFtcCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5zb3VyY2UgVGhlIHNvdXJjZSBvYmplY3Qgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQubmFtZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgKiBGaXJlZCBhdCB0aGUgZW5kIG9mIGEgdGljaywgYWZ0ZXIgZW5naW5lIHVwZGF0ZSBhbmQgYWZ0ZXIgcmVuZGVyaW5nXG4gICAgKlxuICAgICogQGV2ZW50IGFmdGVyVGlja1xuICAgICogQHBhcmFtIHt9IGV2ZW50IEFuIGV2ZW50IG9iamVjdFxuICAgICogQHBhcmFtIHtudW1iZXJ9IGV2ZW50LnRpbWVzdGFtcCBUaGUgZW5naW5lLnRpbWluZy50aW1lc3RhbXAgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQuc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgKi9cblxuICAgIC8qKlxuICAgICogRmlyZWQgYmVmb3JlIHVwZGF0ZVxuICAgICpcbiAgICAqIEBldmVudCBiZWZvcmVVcGRhdGVcbiAgICAqIEBwYXJhbSB7fSBldmVudCBBbiBldmVudCBvYmplY3RcbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBldmVudC50aW1lc3RhbXAgVGhlIGVuZ2luZS50aW1pbmcudGltZXN0YW1wIG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50LnNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5uYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgICovXG5cbiAgICAvKipcbiAgICAqIEZpcmVkIGFmdGVyIHVwZGF0ZVxuICAgICpcbiAgICAqIEBldmVudCBhZnRlclVwZGF0ZVxuICAgICogQHBhcmFtIHt9IGV2ZW50IEFuIGV2ZW50IG9iamVjdFxuICAgICogQHBhcmFtIHtudW1iZXJ9IGV2ZW50LnRpbWVzdGFtcCBUaGUgZW5naW5lLnRpbWluZy50aW1lc3RhbXAgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQuc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgKi9cblxuICAgIC8qKlxuICAgICogRmlyZWQgYmVmb3JlIHJlbmRlcmluZ1xuICAgICpcbiAgICAqIEBldmVudCBiZWZvcmVSZW5kZXJcbiAgICAqIEBwYXJhbSB7fSBldmVudCBBbiBldmVudCBvYmplY3RcbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBldmVudC50aW1lc3RhbXAgVGhlIGVuZ2luZS50aW1pbmcudGltZXN0YW1wIG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50LnNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5uYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgICogQGRlcHJlY2F0ZWRcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgKiBGaXJlZCBhZnRlciByZW5kZXJpbmdcbiAgICAqXG4gICAgKiBAZXZlbnQgYWZ0ZXJSZW5kZXJcbiAgICAqIEBwYXJhbSB7fSBldmVudCBBbiBldmVudCBvYmplY3RcbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBldmVudC50aW1lc3RhbXAgVGhlIGVuZ2luZS50aW1pbmcudGltZXN0YW1wIG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50LnNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5uYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgICogQGRlcHJlY2F0ZWRcbiAgICAqL1xuXG4gICAgLypcbiAgICAqXG4gICAgKiAgUHJvcGVydGllcyBEb2N1bWVudGF0aW9uXG4gICAgKlxuICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGZsYWcgdGhhdCBzcGVjaWZpZXMgd2hldGhlciB0aGUgcnVubmVyIGlzIHJ1bm5pbmcgb3Igbm90LlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGVuYWJsZWRcbiAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgQm9vbGVhbmAgdGhhdCBzcGVjaWZpZXMgaWYgdGhlIHJ1bm5lciBzaG91bGQgdXNlIGEgZml4ZWQgdGltZXN0ZXAgKG90aGVyd2lzZSBpdCBpcyB2YXJpYWJsZSkuXG4gICAgICogSWYgdGltaW5nIGlzIGZpeGVkLCB0aGVuIHRoZSBhcHBhcmVudCBzaW11bGF0aW9uIHNwZWVkIHdpbGwgY2hhbmdlIGRlcGVuZGluZyBvbiB0aGUgZnJhbWUgcmF0ZSAoYnV0IGJlaGF2aW91ciB3aWxsIGJlIGRldGVybWluaXN0aWMpLlxuICAgICAqIElmIHRoZSB0aW1pbmcgaXMgdmFyaWFibGUsIHRoZW4gdGhlIGFwcGFyZW50IHNpbXVsYXRpb24gc3BlZWQgd2lsbCBiZSBjb25zdGFudCAoYXBwcm94aW1hdGVseSwgYnV0IGF0IHRoZSBjb3N0IG9mIGRldGVybWluaW5pc20pLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGlzRml4ZWRcbiAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBzcGVjaWZpZXMgdGhlIHRpbWUgc3RlcCBiZXR3ZWVuIHVwZGF0ZXMgaW4gbWlsbGlzZWNvbmRzLlxuICAgICAqIElmIGBlbmdpbmUudGltaW5nLmlzRml4ZWRgIGlzIHNldCB0byBgdHJ1ZWAsIHRoZW4gYGRlbHRhYCBpcyBmaXhlZC5cbiAgICAgKiBJZiBpdCBpcyBgZmFsc2VgLCB0aGVuIGBkZWx0YWAgY2FuIGR5bmFtaWNhbGx5IGNoYW5nZSB0byBtYWludGFpbiB0aGUgY29ycmVjdCBhcHBhcmVudCBzaW11bGF0aW9uIHNwZWVkLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGRlbHRhXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMTAwMCAvIDYwXG4gICAgICovXG5cbn0pKCk7XG5cbn0se1wiLi9Db21tb25cIjoxNCxcIi4vRW5naW5lXCI6MTUsXCIuL0V2ZW50c1wiOjE2fV0sMjA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLlNsZWVwaW5nYCBtb2R1bGUgY29udGFpbnMgbWV0aG9kcyB0byBtYW5hZ2UgdGhlIHNsZWVwaW5nIHN0YXRlIG9mIGJvZGllcy5cbipcbiogQGNsYXNzIFNsZWVwaW5nXG4qL1xuXG52YXIgU2xlZXBpbmcgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBTbGVlcGluZztcblxudmFyIEV2ZW50cyA9IHJlcXVpcmUoJy4vRXZlbnRzJyk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIFNsZWVwaW5nLl9tb3Rpb25XYWtlVGhyZXNob2xkID0gMC4xODtcbiAgICBTbGVlcGluZy5fbW90aW9uU2xlZXBUaHJlc2hvbGQgPSAwLjA4O1xuICAgIFNsZWVwaW5nLl9taW5CaWFzID0gMC45O1xuXG4gICAgLyoqXG4gICAgICogUHV0cyBib2RpZXMgdG8gc2xlZXAgb3Igd2FrZXMgdGhlbSB1cCBkZXBlbmRpbmcgb24gdGhlaXIgbW90aW9uLlxuICAgICAqIEBtZXRob2QgdXBkYXRlXG4gICAgICogQHBhcmFtIHtib2R5W119IGJvZGllc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lU2NhbGVcbiAgICAgKi9cbiAgICBTbGVlcGluZy51cGRhdGUgPSBmdW5jdGlvbihib2RpZXMsIHRpbWVTY2FsZSkge1xuICAgICAgICB2YXIgdGltZUZhY3RvciA9IHRpbWVTY2FsZSAqIHRpbWVTY2FsZSAqIHRpbWVTY2FsZTtcblxuICAgICAgICAvLyB1cGRhdGUgYm9kaWVzIHNsZWVwaW5nIHN0YXR1c1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGJvZHkgPSBib2RpZXNbaV0sXG4gICAgICAgICAgICAgICAgbW90aW9uID0gYm9keS5zcGVlZCAqIGJvZHkuc3BlZWQgKyBib2R5LmFuZ3VsYXJTcGVlZCAqIGJvZHkuYW5ndWxhclNwZWVkO1xuXG4gICAgICAgICAgICAvLyB3YWtlIHVwIGJvZGllcyBpZiB0aGV5IGhhdmUgYSBmb3JjZSBhcHBsaWVkXG4gICAgICAgICAgICBpZiAoYm9keS5mb3JjZS54ICE9PSAwIHx8IGJvZHkuZm9yY2UueSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIFNsZWVwaW5nLnNldChib2R5LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBtaW5Nb3Rpb24gPSBNYXRoLm1pbihib2R5Lm1vdGlvbiwgbW90aW9uKSxcbiAgICAgICAgICAgICAgICBtYXhNb3Rpb24gPSBNYXRoLm1heChib2R5Lm1vdGlvbiwgbW90aW9uKTtcbiAgICAgICAgXG4gICAgICAgICAgICAvLyBiaWFzZWQgYXZlcmFnZSBtb3Rpb24gZXN0aW1hdGlvbiBiZXR3ZWVuIGZyYW1lc1xuICAgICAgICAgICAgYm9keS5tb3Rpb24gPSBTbGVlcGluZy5fbWluQmlhcyAqIG1pbk1vdGlvbiArICgxIC0gU2xlZXBpbmcuX21pbkJpYXMpICogbWF4TW90aW9uO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoYm9keS5zbGVlcFRocmVzaG9sZCA+IDAgJiYgYm9keS5tb3Rpb24gPCBTbGVlcGluZy5fbW90aW9uU2xlZXBUaHJlc2hvbGQgKiB0aW1lRmFjdG9yKSB7XG4gICAgICAgICAgICAgICAgYm9keS5zbGVlcENvdW50ZXIgKz0gMTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoYm9keS5zbGVlcENvdW50ZXIgPj0gYm9keS5zbGVlcFRocmVzaG9sZClcbiAgICAgICAgICAgICAgICAgICAgU2xlZXBpbmcuc2V0KGJvZHksIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChib2R5LnNsZWVwQ291bnRlciA+IDApIHtcbiAgICAgICAgICAgICAgICBib2R5LnNsZWVwQ291bnRlciAtPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdpdmVuIGEgc2V0IG9mIGNvbGxpZGluZyBwYWlycywgd2FrZXMgdGhlIHNsZWVwaW5nIGJvZGllcyBpbnZvbHZlZC5cbiAgICAgKiBAbWV0aG9kIGFmdGVyQ29sbGlzaW9uc1xuICAgICAqIEBwYXJhbSB7cGFpcltdfSBwYWlyc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lU2NhbGVcbiAgICAgKi9cbiAgICBTbGVlcGluZy5hZnRlckNvbGxpc2lvbnMgPSBmdW5jdGlvbihwYWlycywgdGltZVNjYWxlKSB7XG4gICAgICAgIHZhciB0aW1lRmFjdG9yID0gdGltZVNjYWxlICogdGltZVNjYWxlICogdGltZVNjYWxlO1xuXG4gICAgICAgIC8vIHdha2UgdXAgYm9kaWVzIGludm9sdmVkIGluIGNvbGxpc2lvbnNcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYWlycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHBhaXIgPSBwYWlyc1tpXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gZG9uJ3Qgd2FrZSBpbmFjdGl2ZSBwYWlyc1xuICAgICAgICAgICAgaWYgKCFwYWlyLmlzQWN0aXZlKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICB2YXIgY29sbGlzaW9uID0gcGFpci5jb2xsaXNpb24sXG4gICAgICAgICAgICAgICAgYm9keUEgPSBjb2xsaXNpb24uYm9keUEucGFyZW50LCBcbiAgICAgICAgICAgICAgICBib2R5QiA9IGNvbGxpc2lvbi5ib2R5Qi5wYXJlbnQ7XG4gICAgICAgIFxuICAgICAgICAgICAgLy8gZG9uJ3Qgd2FrZSBpZiBhdCBsZWFzdCBvbmUgYm9keSBpcyBzdGF0aWNcbiAgICAgICAgICAgIGlmICgoYm9keUEuaXNTbGVlcGluZyAmJiBib2R5Qi5pc1NsZWVwaW5nKSB8fCBib2R5QS5pc1N0YXRpYyB8fCBib2R5Qi5pc1N0YXRpYylcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgXG4gICAgICAgICAgICBpZiAoYm9keUEuaXNTbGVlcGluZyB8fCBib2R5Qi5pc1NsZWVwaW5nKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNsZWVwaW5nQm9keSA9IChib2R5QS5pc1NsZWVwaW5nICYmICFib2R5QS5pc1N0YXRpYykgPyBib2R5QSA6IGJvZHlCLFxuICAgICAgICAgICAgICAgICAgICBtb3ZpbmdCb2R5ID0gc2xlZXBpbmdCb2R5ID09PSBib2R5QSA/IGJvZHlCIDogYm9keUE7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXNsZWVwaW5nQm9keS5pc1N0YXRpYyAmJiBtb3ZpbmdCb2R5Lm1vdGlvbiA+IFNsZWVwaW5nLl9tb3Rpb25XYWtlVGhyZXNob2xkICogdGltZUZhY3Rvcikge1xuICAgICAgICAgICAgICAgICAgICBTbGVlcGluZy5zZXQoc2xlZXBpbmdCb2R5LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgXG4gICAgLyoqXG4gICAgICogU2V0IGEgYm9keSBhcyBzbGVlcGluZyBvciBhd2FrZS5cbiAgICAgKiBAbWV0aG9kIHNldFxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNTbGVlcGluZ1xuICAgICAqL1xuICAgIFNsZWVwaW5nLnNldCA9IGZ1bmN0aW9uKGJvZHksIGlzU2xlZXBpbmcpIHtcbiAgICAgICAgdmFyIHdhc1NsZWVwaW5nID0gYm9keS5pc1NsZWVwaW5nO1xuXG4gICAgICAgIGlmIChpc1NsZWVwaW5nKSB7XG4gICAgICAgICAgICBib2R5LmlzU2xlZXBpbmcgPSB0cnVlO1xuICAgICAgICAgICAgYm9keS5zbGVlcENvdW50ZXIgPSBib2R5LnNsZWVwVGhyZXNob2xkO1xuXG4gICAgICAgICAgICBib2R5LnBvc2l0aW9uSW1wdWxzZS54ID0gMDtcbiAgICAgICAgICAgIGJvZHkucG9zaXRpb25JbXB1bHNlLnkgPSAwO1xuXG4gICAgICAgICAgICBib2R5LnBvc2l0aW9uUHJldi54ID0gYm9keS5wb3NpdGlvbi54O1xuICAgICAgICAgICAgYm9keS5wb3NpdGlvblByZXYueSA9IGJvZHkucG9zaXRpb24ueTtcblxuICAgICAgICAgICAgYm9keS5hbmdsZVByZXYgPSBib2R5LmFuZ2xlO1xuICAgICAgICAgICAgYm9keS5zcGVlZCA9IDA7XG4gICAgICAgICAgICBib2R5LmFuZ3VsYXJTcGVlZCA9IDA7XG4gICAgICAgICAgICBib2R5Lm1vdGlvbiA9IDA7XG5cbiAgICAgICAgICAgIGlmICghd2FzU2xlZXBpbmcpIHtcbiAgICAgICAgICAgICAgICBFdmVudHMudHJpZ2dlcihib2R5LCAnc2xlZXBTdGFydCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYm9keS5pc1NsZWVwaW5nID0gZmFsc2U7XG4gICAgICAgICAgICBib2R5LnNsZWVwQ291bnRlciA9IDA7XG5cbiAgICAgICAgICAgIGlmICh3YXNTbGVlcGluZykge1xuICAgICAgICAgICAgICAgIEV2ZW50cy50cmlnZ2VyKGJvZHksICdzbGVlcEVuZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxufSkoKTtcblxufSx7XCIuL0V2ZW50c1wiOjE2fV0sMjE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLkJvZGllc2AgbW9kdWxlIGNvbnRhaW5zIGZhY3RvcnkgbWV0aG9kcyBmb3IgY3JlYXRpbmcgcmlnaWQgYm9keSBtb2RlbHMgXG4qIHdpdGggY29tbW9ubHkgdXNlZCBib2R5IGNvbmZpZ3VyYXRpb25zIChzdWNoIGFzIHJlY3RhbmdsZXMsIGNpcmNsZXMgYW5kIG90aGVyIHBvbHlnb25zKS5cbipcbiogU2VlIHRoZSBpbmNsdWRlZCB1c2FnZSBbZXhhbXBsZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9saWFicnUvbWF0dGVyLWpzL3RyZWUvbWFzdGVyL2V4YW1wbGVzKS5cbipcbiogQGNsYXNzIEJvZGllc1xuKi9cblxuLy8gVE9ETzogdHJ1ZSBjaXJjbGUgYm9kaWVzXG5cbnZhciBCb2RpZXMgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBCb2RpZXM7XG5cbnZhciBWZXJ0aWNlcyA9IHJlcXVpcmUoJy4uL2dlb21ldHJ5L1ZlcnRpY2VzJyk7XG52YXIgQ29tbW9uID0gcmVxdWlyZSgnLi4vY29yZS9Db21tb24nKTtcbnZhciBCb2R5ID0gcmVxdWlyZSgnLi4vYm9keS9Cb2R5Jyk7XG52YXIgQm91bmRzID0gcmVxdWlyZSgnLi4vZ2VvbWV0cnkvQm91bmRzJyk7XG52YXIgVmVjdG9yID0gcmVxdWlyZSgnLi4vZ2VvbWV0cnkvVmVjdG9yJyk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgcmlnaWQgYm9keSBtb2RlbCB3aXRoIGEgcmVjdGFuZ2xlIGh1bGwuIFxuICAgICAqIFRoZSBvcHRpb25zIHBhcmFtZXRlciBpcyBhbiBvYmplY3QgdGhhdCBzcGVjaWZpZXMgYW55IHByb3BlcnRpZXMgeW91IHdpc2ggdG8gb3ZlcnJpZGUgdGhlIGRlZmF1bHRzLlxuICAgICAqIFNlZSB0aGUgcHJvcGVydGllcyBzZWN0aW9uIG9mIHRoZSBgTWF0dGVyLkJvZHlgIG1vZHVsZSBmb3IgZGV0YWlsZWQgaW5mb3JtYXRpb24gb24gd2hhdCB5b3UgY2FuIHBhc3MgdmlhIHRoZSBgb3B0aW9uc2Agb2JqZWN0LlxuICAgICAqIEBtZXRob2QgcmVjdGFuZ2xlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gICAgICogQHJldHVybiB7Ym9keX0gQSBuZXcgcmVjdGFuZ2xlIGJvZHlcbiAgICAgKi9cbiAgICBCb2RpZXMucmVjdGFuZ2xlID0gZnVuY3Rpb24oeCwgeSwgd2lkdGgsIGhlaWdodCwgb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICB2YXIgcmVjdGFuZ2xlID0geyBcbiAgICAgICAgICAgIGxhYmVsOiAnUmVjdGFuZ2xlIEJvZHknLFxuICAgICAgICAgICAgcG9zaXRpb246IHsgeDogeCwgeTogeSB9LFxuICAgICAgICAgICAgdmVydGljZXM6IFZlcnRpY2VzLmZyb21QYXRoKCdMIDAgMCBMICcgKyB3aWR0aCArICcgMCBMICcgKyB3aWR0aCArICcgJyArIGhlaWdodCArICcgTCAwICcgKyBoZWlnaHQpXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuY2hhbWZlcikge1xuICAgICAgICAgICAgdmFyIGNoYW1mZXIgPSBvcHRpb25zLmNoYW1mZXI7XG4gICAgICAgICAgICByZWN0YW5nbGUudmVydGljZXMgPSBWZXJ0aWNlcy5jaGFtZmVyKHJlY3RhbmdsZS52ZXJ0aWNlcywgY2hhbWZlci5yYWRpdXMsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbWZlci5xdWFsaXR5LCBjaGFtZmVyLnF1YWxpdHlNaW4sIGNoYW1mZXIucXVhbGl0eU1heCk7XG4gICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5jaGFtZmVyO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIEJvZHkuY3JlYXRlKENvbW1vbi5leHRlbmQoe30sIHJlY3RhbmdsZSwgb3B0aW9ucykpO1xuICAgIH07XG4gICAgXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyByaWdpZCBib2R5IG1vZGVsIHdpdGggYSB0cmFwZXpvaWQgaHVsbC4gXG4gICAgICogVGhlIG9wdGlvbnMgcGFyYW1ldGVyIGlzIGFuIG9iamVjdCB0aGF0IHNwZWNpZmllcyBhbnkgcHJvcGVydGllcyB5b3Ugd2lzaCB0byBvdmVycmlkZSB0aGUgZGVmYXVsdHMuXG4gICAgICogU2VlIHRoZSBwcm9wZXJ0aWVzIHNlY3Rpb24gb2YgdGhlIGBNYXR0ZXIuQm9keWAgbW9kdWxlIGZvciBkZXRhaWxlZCBpbmZvcm1hdGlvbiBvbiB3aGF0IHlvdSBjYW4gcGFzcyB2aWEgdGhlIGBvcHRpb25zYCBvYmplY3QuXG4gICAgICogQG1ldGhvZCB0cmFwZXpvaWRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzbG9wZVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAgICAgKiBAcmV0dXJuIHtib2R5fSBBIG5ldyB0cmFwZXpvaWQgYm9keVxuICAgICAqL1xuICAgIEJvZGllcy50cmFwZXpvaWQgPSBmdW5jdGlvbih4LCB5LCB3aWR0aCwgaGVpZ2h0LCBzbG9wZSwgb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICBzbG9wZSAqPSAwLjU7XG4gICAgICAgIHZhciByb29mID0gKDEgLSAoc2xvcGUgKiAyKSkgKiB3aWR0aDtcbiAgICAgICAgXG4gICAgICAgIHZhciB4MSA9IHdpZHRoICogc2xvcGUsXG4gICAgICAgICAgICB4MiA9IHgxICsgcm9vZixcbiAgICAgICAgICAgIHgzID0geDIgKyB4MSxcbiAgICAgICAgICAgIHZlcnRpY2VzUGF0aDtcblxuICAgICAgICBpZiAoc2xvcGUgPCAwLjUpIHtcbiAgICAgICAgICAgIHZlcnRpY2VzUGF0aCA9ICdMIDAgMCBMICcgKyB4MSArICcgJyArICgtaGVpZ2h0KSArICcgTCAnICsgeDIgKyAnICcgKyAoLWhlaWdodCkgKyAnIEwgJyArIHgzICsgJyAwJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZlcnRpY2VzUGF0aCA9ICdMIDAgMCBMICcgKyB4MiArICcgJyArICgtaGVpZ2h0KSArICcgTCAnICsgeDMgKyAnIDAnO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRyYXBlem9pZCA9IHsgXG4gICAgICAgICAgICBsYWJlbDogJ1RyYXBlem9pZCBCb2R5JyxcbiAgICAgICAgICAgIHBvc2l0aW9uOiB7IHg6IHgsIHk6IHkgfSxcbiAgICAgICAgICAgIHZlcnRpY2VzOiBWZXJ0aWNlcy5mcm9tUGF0aCh2ZXJ0aWNlc1BhdGgpXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuY2hhbWZlcikge1xuICAgICAgICAgICAgdmFyIGNoYW1mZXIgPSBvcHRpb25zLmNoYW1mZXI7XG4gICAgICAgICAgICB0cmFwZXpvaWQudmVydGljZXMgPSBWZXJ0aWNlcy5jaGFtZmVyKHRyYXBlem9pZC52ZXJ0aWNlcywgY2hhbWZlci5yYWRpdXMsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbWZlci5xdWFsaXR5LCBjaGFtZmVyLnF1YWxpdHlNaW4sIGNoYW1mZXIucXVhbGl0eU1heCk7XG4gICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5jaGFtZmVyO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIEJvZHkuY3JlYXRlKENvbW1vbi5leHRlbmQoe30sIHRyYXBlem9pZCwgb3B0aW9ucykpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHJpZ2lkIGJvZHkgbW9kZWwgd2l0aCBhIGNpcmNsZSBodWxsLiBcbiAgICAgKiBUaGUgb3B0aW9ucyBwYXJhbWV0ZXIgaXMgYW4gb2JqZWN0IHRoYXQgc3BlY2lmaWVzIGFueSBwcm9wZXJ0aWVzIHlvdSB3aXNoIHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0cy5cbiAgICAgKiBTZWUgdGhlIHByb3BlcnRpZXMgc2VjdGlvbiBvZiB0aGUgYE1hdHRlci5Cb2R5YCBtb2R1bGUgZm9yIGRldGFpbGVkIGluZm9ybWF0aW9uIG9uIHdoYXQgeW91IGNhbiBwYXNzIHZpYSB0aGUgYG9wdGlvbnNgIG9iamVjdC5cbiAgICAgKiBAbWV0aG9kIGNpcmNsZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcmFkaXVzXG4gICAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbWF4U2lkZXNdXG4gICAgICogQHJldHVybiB7Ym9keX0gQSBuZXcgY2lyY2xlIGJvZHlcbiAgICAgKi9cbiAgICBCb2RpZXMuY2lyY2xlID0gZnVuY3Rpb24oeCwgeSwgcmFkaXVzLCBvcHRpb25zLCBtYXhTaWRlcykge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICB2YXIgY2lyY2xlID0ge1xuICAgICAgICAgICAgbGFiZWw6ICdDaXJjbGUgQm9keScsXG4gICAgICAgICAgICBjaXJjbGVSYWRpdXM6IHJhZGl1c1xuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgLy8gYXBwcm94aW1hdGUgY2lyY2xlcyB3aXRoIHBvbHlnb25zIHVudGlsIHRydWUgY2lyY2xlcyBpbXBsZW1lbnRlZCBpbiBTQVRcbiAgICAgICAgbWF4U2lkZXMgPSBtYXhTaWRlcyB8fCAyNTtcbiAgICAgICAgdmFyIHNpZGVzID0gTWF0aC5jZWlsKE1hdGgubWF4KDEwLCBNYXRoLm1pbihtYXhTaWRlcywgcmFkaXVzKSkpO1xuXG4gICAgICAgIC8vIG9wdGltaXNhdGlvbjogYWx3YXlzIHVzZSBldmVuIG51bWJlciBvZiBzaWRlcyAoaGFsZiB0aGUgbnVtYmVyIG9mIHVuaXF1ZSBheGVzKVxuICAgICAgICBpZiAoc2lkZXMgJSAyID09PSAxKVxuICAgICAgICAgICAgc2lkZXMgKz0gMTtcblxuICAgICAgICByZXR1cm4gQm9kaWVzLnBvbHlnb24oeCwgeSwgc2lkZXMsIHJhZGl1cywgQ29tbW9uLmV4dGVuZCh7fSwgY2lyY2xlLCBvcHRpb25zKSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgcmlnaWQgYm9keSBtb2RlbCB3aXRoIGEgcmVndWxhciBwb2x5Z29uIGh1bGwgd2l0aCB0aGUgZ2l2ZW4gbnVtYmVyIG9mIHNpZGVzLiBcbiAgICAgKiBUaGUgb3B0aW9ucyBwYXJhbWV0ZXIgaXMgYW4gb2JqZWN0IHRoYXQgc3BlY2lmaWVzIGFueSBwcm9wZXJ0aWVzIHlvdSB3aXNoIHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0cy5cbiAgICAgKiBTZWUgdGhlIHByb3BlcnRpZXMgc2VjdGlvbiBvZiB0aGUgYE1hdHRlci5Cb2R5YCBtb2R1bGUgZm9yIGRldGFpbGVkIGluZm9ybWF0aW9uIG9uIHdoYXQgeW91IGNhbiBwYXNzIHZpYSB0aGUgYG9wdGlvbnNgIG9iamVjdC5cbiAgICAgKiBAbWV0aG9kIHBvbHlnb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNpZGVzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1c1xuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAgICAgKiBAcmV0dXJuIHtib2R5fSBBIG5ldyByZWd1bGFyIHBvbHlnb24gYm9keVxuICAgICAqL1xuICAgIEJvZGllcy5wb2x5Z29uID0gZnVuY3Rpb24oeCwgeSwgc2lkZXMsIHJhZGl1cywgb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICBpZiAoc2lkZXMgPCAzKVxuICAgICAgICAgICAgcmV0dXJuIEJvZGllcy5jaXJjbGUoeCwgeSwgcmFkaXVzLCBvcHRpb25zKTtcblxuICAgICAgICB2YXIgdGhldGEgPSAyICogTWF0aC5QSSAvIHNpZGVzLFxuICAgICAgICAgICAgcGF0aCA9ICcnLFxuICAgICAgICAgICAgb2Zmc2V0ID0gdGhldGEgKiAwLjU7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaWRlczsgaSArPSAxKSB7XG4gICAgICAgICAgICB2YXIgYW5nbGUgPSBvZmZzZXQgKyAoaSAqIHRoZXRhKSxcbiAgICAgICAgICAgICAgICB4eCA9IE1hdGguY29zKGFuZ2xlKSAqIHJhZGl1cyxcbiAgICAgICAgICAgICAgICB5eSA9IE1hdGguc2luKGFuZ2xlKSAqIHJhZGl1cztcblxuICAgICAgICAgICAgcGF0aCArPSAnTCAnICsgeHgudG9GaXhlZCgzKSArICcgJyArIHl5LnRvRml4ZWQoMykgKyAnICc7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcG9seWdvbiA9IHsgXG4gICAgICAgICAgICBsYWJlbDogJ1BvbHlnb24gQm9keScsXG4gICAgICAgICAgICBwb3NpdGlvbjogeyB4OiB4LCB5OiB5IH0sXG4gICAgICAgICAgICB2ZXJ0aWNlczogVmVydGljZXMuZnJvbVBhdGgocGF0aClcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAob3B0aW9ucy5jaGFtZmVyKSB7XG4gICAgICAgICAgICB2YXIgY2hhbWZlciA9IG9wdGlvbnMuY2hhbWZlcjtcbiAgICAgICAgICAgIHBvbHlnb24udmVydGljZXMgPSBWZXJ0aWNlcy5jaGFtZmVyKHBvbHlnb24udmVydGljZXMsIGNoYW1mZXIucmFkaXVzLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW1mZXIucXVhbGl0eSwgY2hhbWZlci5xdWFsaXR5TWluLCBjaGFtZmVyLnF1YWxpdHlNYXgpO1xuICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuY2hhbWZlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBCb2R5LmNyZWF0ZShDb21tb24uZXh0ZW5kKHt9LCBwb2x5Z29uLCBvcHRpb25zKSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBib2R5IHVzaW5nIHRoZSBzdXBwbGllZCB2ZXJ0aWNlcyAob3IgYW4gYXJyYXkgY29udGFpbmluZyBtdWx0aXBsZSBzZXRzIG9mIHZlcnRpY2VzKS5cbiAgICAgKiBJZiB0aGUgdmVydGljZXMgYXJlIGNvbnZleCwgdGhleSB3aWxsIHBhc3MgdGhyb3VnaCBhcyBzdXBwbGllZC5cbiAgICAgKiBPdGhlcndpc2UgaWYgdGhlIHZlcnRpY2VzIGFyZSBjb25jYXZlLCB0aGV5IHdpbGwgYmUgZGVjb21wb3NlZCBpZiBbcG9seS1kZWNvbXAuanNdKGh0dHBzOi8vZ2l0aHViLmNvbS9zY2h0ZXBwZS9wb2x5LWRlY29tcC5qcykgaXMgYXZhaWxhYmxlLlxuICAgICAqIE5vdGUgdGhhdCB0aGlzIHByb2Nlc3MgaXMgbm90IGd1YXJhbnRlZWQgdG8gc3VwcG9ydCBjb21wbGV4IHNldHMgb2YgdmVydGljZXMgKGUuZy4gdGhvc2Ugd2l0aCBob2xlcyBtYXkgZmFpbCkuXG4gICAgICogQnkgZGVmYXVsdCB0aGUgZGVjb21wb3NpdGlvbiB3aWxsIGRpc2NhcmQgY29sbGluZWFyIGVkZ2VzICh0byBpbXByb3ZlIHBlcmZvcm1hbmNlKS5cbiAgICAgKiBJdCBjYW4gYWxzbyBvcHRpb25hbGx5IGRpc2NhcmQgYW55IHBhcnRzIHRoYXQgaGF2ZSBhbiBhcmVhIGxlc3MgdGhhbiBgbWluaW11bUFyZWFgLlxuICAgICAqIElmIHRoZSB2ZXJ0aWNlcyBjYW4gbm90IGJlIGRlY29tcG9zZWQsIHRoZSByZXN1bHQgd2lsbCBmYWxsIGJhY2sgdG8gdXNpbmcgdGhlIGNvbnZleCBodWxsLlxuICAgICAqIFRoZSBvcHRpb25zIHBhcmFtZXRlciBpcyBhbiBvYmplY3QgdGhhdCBzcGVjaWZpZXMgYW55IGBNYXR0ZXIuQm9keWAgcHJvcGVydGllcyB5b3Ugd2lzaCB0byBvdmVycmlkZSB0aGUgZGVmYXVsdHMuXG4gICAgICogU2VlIHRoZSBwcm9wZXJ0aWVzIHNlY3Rpb24gb2YgdGhlIGBNYXR0ZXIuQm9keWAgbW9kdWxlIGZvciBkZXRhaWxlZCBpbmZvcm1hdGlvbiBvbiB3aGF0IHlvdSBjYW4gcGFzcyB2aWEgdGhlIGBvcHRpb25zYCBvYmplY3QuXG4gICAgICogQG1ldGhvZCBmcm9tVmVydGljZXNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAgICogQHBhcmFtIFtbdmVjdG9yXV0gdmVydGV4U2V0c1xuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAgICAgKiBAcGFyYW0ge2Jvb2x9IFtmbGFnSW50ZXJuYWw9ZmFsc2VdXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtyZW1vdmVDb2xsaW5lYXI9MC4wMV1cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW21pbmltdW1BcmVhPTEwXVxuICAgICAqIEByZXR1cm4ge2JvZHl9XG4gICAgICovXG4gICAgQm9kaWVzLmZyb21WZXJ0aWNlcyA9IGZ1bmN0aW9uKHgsIHksIHZlcnRleFNldHMsIG9wdGlvbnMsIGZsYWdJbnRlcm5hbCwgcmVtb3ZlQ29sbGluZWFyLCBtaW5pbXVtQXJlYSkge1xuICAgICAgICB2YXIgYm9keSxcbiAgICAgICAgICAgIHBhcnRzLFxuICAgICAgICAgICAgaXNDb252ZXgsXG4gICAgICAgICAgICB2ZXJ0aWNlcyxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBqLFxuICAgICAgICAgICAgayxcbiAgICAgICAgICAgIHYsXG4gICAgICAgICAgICB6O1xuXG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICBwYXJ0cyA9IFtdO1xuXG4gICAgICAgIGZsYWdJbnRlcm5hbCA9IHR5cGVvZiBmbGFnSW50ZXJuYWwgIT09ICd1bmRlZmluZWQnID8gZmxhZ0ludGVybmFsIDogZmFsc2U7XG4gICAgICAgIHJlbW92ZUNvbGxpbmVhciA9IHR5cGVvZiByZW1vdmVDb2xsaW5lYXIgIT09ICd1bmRlZmluZWQnID8gcmVtb3ZlQ29sbGluZWFyIDogMC4wMTtcbiAgICAgICAgbWluaW11bUFyZWEgPSB0eXBlb2YgbWluaW11bUFyZWEgIT09ICd1bmRlZmluZWQnID8gbWluaW11bUFyZWEgOiAxMDtcblxuICAgICAgICBpZiAoIXdpbmRvdy5kZWNvbXApIHtcbiAgICAgICAgICAgIENvbW1vbi5sb2coJ0JvZGllcy5mcm9tVmVydGljZXM6IHBvbHktZGVjb21wLmpzIHJlcXVpcmVkLiBDb3VsZCBub3QgZGVjb21wb3NlIHZlcnRpY2VzLiBGYWxsYmFjayB0byBjb252ZXggaHVsbC4nLCAnd2FybicpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZW5zdXJlIHZlcnRleFNldHMgaXMgYW4gYXJyYXkgb2YgYXJyYXlzXG4gICAgICAgIGlmICghQ29tbW9uLmlzQXJyYXkodmVydGV4U2V0c1swXSkpIHtcbiAgICAgICAgICAgIHZlcnRleFNldHMgPSBbdmVydGV4U2V0c107XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHYgPSAwOyB2IDwgdmVydGV4U2V0cy5sZW5ndGg7IHYgKz0gMSkge1xuICAgICAgICAgICAgdmVydGljZXMgPSB2ZXJ0ZXhTZXRzW3ZdO1xuICAgICAgICAgICAgaXNDb252ZXggPSBWZXJ0aWNlcy5pc0NvbnZleCh2ZXJ0aWNlcyk7XG5cbiAgICAgICAgICAgIGlmIChpc0NvbnZleCB8fCAhd2luZG93LmRlY29tcCkge1xuICAgICAgICAgICAgICAgIGlmIChpc0NvbnZleCkge1xuICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNlcyA9IFZlcnRpY2VzLmNsb2Nrd2lzZVNvcnQodmVydGljZXMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGZhbGxiYWNrIHRvIGNvbnZleCBodWxsIHdoZW4gZGVjb21wb3NpdGlvbiBpcyBub3QgcG9zc2libGVcbiAgICAgICAgICAgICAgICAgICAgdmVydGljZXMgPSBWZXJ0aWNlcy5odWxsKHZlcnRpY2VzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBwYXJ0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHsgeDogeCwgeTogeSB9LFxuICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNlczogdmVydGljZXNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gaW5pdGlhbGlzZSBhIGRlY29tcG9zaXRpb25cbiAgICAgICAgICAgICAgICB2YXIgY29uY2F2ZSA9IG5ldyBkZWNvbXAuUG9seWdvbigpO1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB2ZXJ0aWNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBjb25jYXZlLnZlcnRpY2VzLnB1c2goW3ZlcnRpY2VzW2ldLngsIHZlcnRpY2VzW2ldLnldKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyB2ZXJ0aWNlcyBhcmUgY29uY2F2ZSBhbmQgc2ltcGxlLCB3ZSBjYW4gZGVjb21wb3NlIGludG8gcGFydHNcbiAgICAgICAgICAgICAgICBjb25jYXZlLm1ha2VDQ1coKTtcbiAgICAgICAgICAgICAgICBpZiAocmVtb3ZlQ29sbGluZWFyICE9PSBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgY29uY2F2ZS5yZW1vdmVDb2xsaW5lYXJQb2ludHMocmVtb3ZlQ29sbGluZWFyKTtcblxuICAgICAgICAgICAgICAgIC8vIHVzZSB0aGUgcXVpY2sgZGVjb21wb3NpdGlvbiBhbGdvcml0aG0gKEJheWF6aXQpXG4gICAgICAgICAgICAgICAgdmFyIGRlY29tcG9zZWQgPSBjb25jYXZlLnF1aWNrRGVjb21wKCk7XG5cbiAgICAgICAgICAgICAgICAvLyBmb3IgZWFjaCBkZWNvbXBvc2VkIGNodW5rXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGRlY29tcG9zZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNodW5rID0gZGVjb21wb3NlZFtpXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNodW5rVmVydGljZXMgPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBjb252ZXJ0IHZlcnRpY2VzIGludG8gdGhlIGNvcnJlY3Qgc3RydWN0dXJlXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBjaHVuay52ZXJ0aWNlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2h1bmtWZXJ0aWNlcy5wdXNoKHsgeDogY2h1bmsudmVydGljZXNbal1bMF0sIHk6IGNodW5rLnZlcnRpY2VzW2pdWzFdIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gc2tpcCBzbWFsbCBjaHVua3NcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1pbmltdW1BcmVhID4gMCAmJiBWZXJ0aWNlcy5hcmVhKGNodW5rVmVydGljZXMpIDwgbWluaW11bUFyZWEpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBjcmVhdGUgYSBjb21wb3VuZCBwYXJ0XG4gICAgICAgICAgICAgICAgICAgIHBhcnRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IFZlcnRpY2VzLmNlbnRyZShjaHVua1ZlcnRpY2VzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2VzOiBjaHVua1ZlcnRpY2VzXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNyZWF0ZSBib2R5IHBhcnRzXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcGFydHNbaV0gPSBCb2R5LmNyZWF0ZShDb21tb24uZXh0ZW5kKHBhcnRzW2ldLCBvcHRpb25zKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmbGFnIGludGVybmFsIGVkZ2VzIChjb2luY2lkZW50IHBhcnQgZWRnZXMpXG4gICAgICAgIGlmIChmbGFnSW50ZXJuYWwpIHtcbiAgICAgICAgICAgIHZhciBjb2luY2lkZW50X21heF9kaXN0ID0gNTtcblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhcnRBID0gcGFydHNbaV07XG5cbiAgICAgICAgICAgICAgICBmb3IgKGogPSBpICsgMTsgaiA8IHBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJ0QiA9IHBhcnRzW2pdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChCb3VuZHMub3ZlcmxhcHMocGFydEEuYm91bmRzLCBwYXJ0Qi5ib3VuZHMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGF2ID0gcGFydEEudmVydGljZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGJ2ID0gcGFydEIudmVydGljZXM7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGl0ZXJhdGUgdmVydGljZXMgb2YgYm90aCBwYXJ0c1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChrID0gMDsgayA8IHBhcnRBLnZlcnRpY2VzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh6ID0gMDsgeiA8IHBhcnRCLnZlcnRpY2VzLmxlbmd0aDsgeisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZpbmQgZGlzdGFuY2VzIGJldHdlZW4gdGhlIHZlcnRpY2VzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYSA9IFZlY3Rvci5tYWduaXR1ZGVTcXVhcmVkKFZlY3Rvci5zdWIocGF2WyhrICsgMSkgJSBwYXYubGVuZ3RoXSwgcGJ2W3pdKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYiA9IFZlY3Rvci5tYWduaXR1ZGVTcXVhcmVkKFZlY3Rvci5zdWIocGF2W2tdLCBwYnZbKHogKyAxKSAlIHBidi5sZW5ndGhdKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgYm90aCB2ZXJ0aWNlcyBhcmUgdmVyeSBjbG9zZSwgY29uc2lkZXIgdGhlIGVkZ2UgY29uY2lkZW50IChpbnRlcm5hbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhIDwgY29pbmNpZGVudF9tYXhfZGlzdCAmJiBkYiA8IGNvaW5jaWRlbnRfbWF4X2Rpc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdltrXS5pc0ludGVybmFsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBidlt6XS5pc0ludGVybmFsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIC8vIGNyZWF0ZSB0aGUgcGFyZW50IGJvZHkgdG8gYmUgcmV0dXJuZWQsIHRoYXQgY29udGFpbnMgZ2VuZXJhdGVkIGNvbXBvdW5kIHBhcnRzXG4gICAgICAgICAgICBib2R5ID0gQm9keS5jcmVhdGUoQ29tbW9uLmV4dGVuZCh7IHBhcnRzOiBwYXJ0cy5zbGljZSgwKSB9LCBvcHRpb25zKSk7XG4gICAgICAgICAgICBCb2R5LnNldFBvc2l0aW9uKGJvZHksIHsgeDogeCwgeTogeSB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIGJvZHk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcGFydHNbMF07XG4gICAgICAgIH1cbiAgICB9O1xuXG59KSgpO1xufSx7XCIuLi9ib2R5L0JvZHlcIjoxLFwiLi4vY29yZS9Db21tb25cIjoxNCxcIi4uL2dlb21ldHJ5L0JvdW5kc1wiOjI0LFwiLi4vZ2VvbWV0cnkvVmVjdG9yXCI6MjYsXCIuLi9nZW9tZXRyeS9WZXJ0aWNlc1wiOjI3fV0sMjI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLkNvbXBvc2l0ZXNgIG1vZHVsZSBjb250YWlucyBmYWN0b3J5IG1ldGhvZHMgZm9yIGNyZWF0aW5nIGNvbXBvc2l0ZSBib2RpZXNcbiogd2l0aCBjb21tb25seSB1c2VkIGNvbmZpZ3VyYXRpb25zIChzdWNoIGFzIHN0YWNrcyBhbmQgY2hhaW5zKS5cbipcbiogU2VlIHRoZSBpbmNsdWRlZCB1c2FnZSBbZXhhbXBsZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9saWFicnUvbWF0dGVyLWpzL3RyZWUvbWFzdGVyL2V4YW1wbGVzKS5cbipcbiogQGNsYXNzIENvbXBvc2l0ZXNcbiovXG5cbnZhciBDb21wb3NpdGVzID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcG9zaXRlcztcblxudmFyIENvbXBvc2l0ZSA9IHJlcXVpcmUoJy4uL2JvZHkvQ29tcG9zaXRlJyk7XG52YXIgQ29uc3RyYWludCA9IHJlcXVpcmUoJy4uL2NvbnN0cmFpbnQvQ29uc3RyYWludCcpO1xudmFyIENvbW1vbiA9IHJlcXVpcmUoJy4uL2NvcmUvQ29tbW9uJyk7XG52YXIgQm9keSA9IHJlcXVpcmUoJy4uL2JvZHkvQm9keScpO1xudmFyIEJvZGllcyA9IHJlcXVpcmUoJy4vQm9kaWVzJyk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBjb21wb3NpdGUgY29udGFpbmluZyBib2RpZXMgY3JlYXRlZCBpbiB0aGUgY2FsbGJhY2sgaW4gYSBncmlkIGFycmFuZ2VtZW50LlxuICAgICAqIFRoaXMgZnVuY3Rpb24gdXNlcyB0aGUgYm9keSdzIGJvdW5kcyB0byBwcmV2ZW50IG92ZXJsYXBzLlxuICAgICAqIEBtZXRob2Qgc3RhY2tcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geHhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geXlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gY29sdW1uc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSByb3dzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGNvbHVtbkdhcFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSByb3dHYXBcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICAgICAqIEByZXR1cm4ge2NvbXBvc2l0ZX0gQSBuZXcgY29tcG9zaXRlIGNvbnRhaW5pbmcgb2JqZWN0cyBjcmVhdGVkIGluIHRoZSBjYWxsYmFja1xuICAgICAqL1xuICAgIENvbXBvc2l0ZXMuc3RhY2sgPSBmdW5jdGlvbih4eCwgeXksIGNvbHVtbnMsIHJvd3MsIGNvbHVtbkdhcCwgcm93R2FwLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgc3RhY2sgPSBDb21wb3NpdGUuY3JlYXRlKHsgbGFiZWw6ICdTdGFjaycgfSksXG4gICAgICAgICAgICB4ID0geHgsXG4gICAgICAgICAgICB5ID0geXksXG4gICAgICAgICAgICBsYXN0Qm9keSxcbiAgICAgICAgICAgIGkgPSAwO1xuXG4gICAgICAgIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IHJvd3M7IHJvdysrKSB7XG4gICAgICAgICAgICB2YXIgbWF4SGVpZ2h0ID0gMDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yICh2YXIgY29sdW1uID0gMDsgY29sdW1uIDwgY29sdW1uczsgY29sdW1uKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgYm9keSA9IGNhbGxiYWNrKHgsIHksIGNvbHVtbiwgcm93LCBsYXN0Qm9keSwgaSk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChib2R5KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBib2R5SGVpZ2h0ID0gYm9keS5ib3VuZHMubWF4LnkgLSBib2R5LmJvdW5kcy5taW4ueSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHlXaWR0aCA9IGJvZHkuYm91bmRzLm1heC54IC0gYm9keS5ib3VuZHMubWluLng7IFxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChib2R5SGVpZ2h0ID4gbWF4SGVpZ2h0KVxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4SGVpZ2h0ID0gYm9keUhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIEJvZHkudHJhbnNsYXRlKGJvZHksIHsgeDogYm9keVdpZHRoICogMC41LCB5OiBib2R5SGVpZ2h0ICogMC41IH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHggPSBib2R5LmJvdW5kcy5tYXgueCArIGNvbHVtbkdhcDtcblxuICAgICAgICAgICAgICAgICAgICBDb21wb3NpdGUuYWRkQm9keShzdGFjaywgYm9keSk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBsYXN0Qm9keSA9IGJvZHk7XG4gICAgICAgICAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB4ICs9IGNvbHVtbkdhcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHkgKz0gbWF4SGVpZ2h0ICsgcm93R2FwO1xuICAgICAgICAgICAgeCA9IHh4O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN0YWNrO1xuICAgIH07XG4gICAgXG4gICAgLyoqXG4gICAgICogQ2hhaW5zIGFsbCBib2RpZXMgaW4gdGhlIGdpdmVuIGNvbXBvc2l0ZSB0b2dldGhlciB1c2luZyBjb25zdHJhaW50cy5cbiAgICAgKiBAbWV0aG9kIGNoYWluXG4gICAgICogQHBhcmFtIHtjb21wb3NpdGV9IGNvbXBvc2l0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB4T2Zmc2V0QVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5T2Zmc2V0QVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB4T2Zmc2V0QlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5T2Zmc2V0QlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gICAgICogQHJldHVybiB7Y29tcG9zaXRlfSBBIG5ldyBjb21wb3NpdGUgY29udGFpbmluZyBvYmplY3RzIGNoYWluZWQgdG9nZXRoZXIgd2l0aCBjb25zdHJhaW50c1xuICAgICAqL1xuICAgIENvbXBvc2l0ZXMuY2hhaW4gPSBmdW5jdGlvbihjb21wb3NpdGUsIHhPZmZzZXRBLCB5T2Zmc2V0QSwgeE9mZnNldEIsIHlPZmZzZXRCLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBib2RpZXMgPSBjb21wb3NpdGUuYm9kaWVzO1xuICAgICAgICBcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBib2RpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBib2R5QSA9IGJvZGllc1tpIC0gMV0sXG4gICAgICAgICAgICAgICAgYm9keUIgPSBib2RpZXNbaV0sXG4gICAgICAgICAgICAgICAgYm9keUFIZWlnaHQgPSBib2R5QS5ib3VuZHMubWF4LnkgLSBib2R5QS5ib3VuZHMubWluLnksXG4gICAgICAgICAgICAgICAgYm9keUFXaWR0aCA9IGJvZHlBLmJvdW5kcy5tYXgueCAtIGJvZHlBLmJvdW5kcy5taW4ueCwgXG4gICAgICAgICAgICAgICAgYm9keUJIZWlnaHQgPSBib2R5Qi5ib3VuZHMubWF4LnkgLSBib2R5Qi5ib3VuZHMubWluLnksXG4gICAgICAgICAgICAgICAgYm9keUJXaWR0aCA9IGJvZHlCLmJvdW5kcy5tYXgueCAtIGJvZHlCLmJvdW5kcy5taW4ueDtcbiAgICAgICAgXG4gICAgICAgICAgICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgICAgICAgICAgICAgYm9keUE6IGJvZHlBLFxuICAgICAgICAgICAgICAgIHBvaW50QTogeyB4OiBib2R5QVdpZHRoICogeE9mZnNldEEsIHk6IGJvZHlBSGVpZ2h0ICogeU9mZnNldEEgfSxcbiAgICAgICAgICAgICAgICBib2R5QjogYm9keUIsXG4gICAgICAgICAgICAgICAgcG9pbnRCOiB7IHg6IGJvZHlCV2lkdGggKiB4T2Zmc2V0QiwgeTogYm9keUJIZWlnaHQgKiB5T2Zmc2V0QiB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgY29uc3RyYWludCA9IENvbW1vbi5leHRlbmQoZGVmYXVsdHMsIG9wdGlvbnMpO1xuICAgICAgICBcbiAgICAgICAgICAgIENvbXBvc2l0ZS5hZGRDb25zdHJhaW50KGNvbXBvc2l0ZSwgQ29uc3RyYWludC5jcmVhdGUoY29uc3RyYWludCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29tcG9zaXRlLmxhYmVsICs9ICcgQ2hhaW4nO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGNvbXBvc2l0ZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ29ubmVjdHMgYm9kaWVzIGluIHRoZSBjb21wb3NpdGUgd2l0aCBjb25zdHJhaW50cyBpbiBhIGdyaWQgcGF0dGVybiwgd2l0aCBvcHRpb25hbCBjcm9zcyBicmFjZXMuXG4gICAgICogQG1ldGhvZCBtZXNoXG4gICAgICogQHBhcmFtIHtjb21wb3NpdGV9IGNvbXBvc2l0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjb2x1bW5zXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHJvd3NcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGNyb3NzQnJhY2VcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICAgICAqIEByZXR1cm4ge2NvbXBvc2l0ZX0gVGhlIGNvbXBvc2l0ZSBjb250YWluaW5nIG9iamVjdHMgbWVzaGVkIHRvZ2V0aGVyIHdpdGggY29uc3RyYWludHNcbiAgICAgKi9cbiAgICBDb21wb3NpdGVzLm1lc2ggPSBmdW5jdGlvbihjb21wb3NpdGUsIGNvbHVtbnMsIHJvd3MsIGNyb3NzQnJhY2UsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGJvZGllcyA9IGNvbXBvc2l0ZS5ib2RpZXMsXG4gICAgICAgICAgICByb3csXG4gICAgICAgICAgICBjb2wsXG4gICAgICAgICAgICBib2R5QSxcbiAgICAgICAgICAgIGJvZHlCLFxuICAgICAgICAgICAgYm9keUM7XG4gICAgICAgIFxuICAgICAgICBmb3IgKHJvdyA9IDA7IHJvdyA8IHJvd3M7IHJvdysrKSB7XG4gICAgICAgICAgICBmb3IgKGNvbCA9IDE7IGNvbCA8IGNvbHVtbnM7IGNvbCsrKSB7XG4gICAgICAgICAgICAgICAgYm9keUEgPSBib2RpZXNbKGNvbCAtIDEpICsgKHJvdyAqIGNvbHVtbnMpXTtcbiAgICAgICAgICAgICAgICBib2R5QiA9IGJvZGllc1tjb2wgKyAocm93ICogY29sdW1ucyldO1xuICAgICAgICAgICAgICAgIENvbXBvc2l0ZS5hZGRDb25zdHJhaW50KGNvbXBvc2l0ZSwgQ29uc3RyYWludC5jcmVhdGUoQ29tbW9uLmV4dGVuZCh7IGJvZHlBOiBib2R5QSwgYm9keUI6IGJvZHlCIH0sIG9wdGlvbnMpKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyb3cgPiAwKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb2wgPSAwOyBjb2wgPCBjb2x1bW5zOyBjb2wrKykge1xuICAgICAgICAgICAgICAgICAgICBib2R5QSA9IGJvZGllc1tjb2wgKyAoKHJvdyAtIDEpICogY29sdW1ucyldO1xuICAgICAgICAgICAgICAgICAgICBib2R5QiA9IGJvZGllc1tjb2wgKyAocm93ICogY29sdW1ucyldO1xuICAgICAgICAgICAgICAgICAgICBDb21wb3NpdGUuYWRkQ29uc3RyYWludChjb21wb3NpdGUsIENvbnN0cmFpbnQuY3JlYXRlKENvbW1vbi5leHRlbmQoeyBib2R5QTogYm9keUEsIGJvZHlCOiBib2R5QiB9LCBvcHRpb25zKSkpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjcm9zc0JyYWNlICYmIGNvbCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHlDID0gYm9kaWVzWyhjb2wgLSAxKSArICgocm93IC0gMSkgKiBjb2x1bW5zKV07XG4gICAgICAgICAgICAgICAgICAgICAgICBDb21wb3NpdGUuYWRkQ29uc3RyYWludChjb21wb3NpdGUsIENvbnN0cmFpbnQuY3JlYXRlKENvbW1vbi5leHRlbmQoeyBib2R5QTogYm9keUMsIGJvZHlCOiBib2R5QiB9LCBvcHRpb25zKSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNyb3NzQnJhY2UgJiYgY29sIDwgY29sdW1ucyAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHlDID0gYm9kaWVzWyhjb2wgKyAxKSArICgocm93IC0gMSkgKiBjb2x1bW5zKV07XG4gICAgICAgICAgICAgICAgICAgICAgICBDb21wb3NpdGUuYWRkQ29uc3RyYWludChjb21wb3NpdGUsIENvbnN0cmFpbnQuY3JlYXRlKENvbW1vbi5leHRlbmQoeyBib2R5QTogYm9keUMsIGJvZHlCOiBib2R5QiB9LCBvcHRpb25zKSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29tcG9zaXRlLmxhYmVsICs9ICcgTWVzaCc7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gY29tcG9zaXRlO1xuICAgIH07XG4gICAgXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGNvbXBvc2l0ZSBjb250YWluaW5nIGJvZGllcyBjcmVhdGVkIGluIHRoZSBjYWxsYmFjayBpbiBhIHB5cmFtaWQgYXJyYW5nZW1lbnQuXG4gICAgICogVGhpcyBmdW5jdGlvbiB1c2VzIHRoZSBib2R5J3MgYm91bmRzIHRvIHByZXZlbnQgb3ZlcmxhcHMuXG4gICAgICogQG1ldGhvZCBweXJhbWlkXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHh4XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHl5XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGNvbHVtbnNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcm93c1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjb2x1bW5HYXBcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcm93R2FwXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAgICAgKiBAcmV0dXJuIHtjb21wb3NpdGV9IEEgbmV3IGNvbXBvc2l0ZSBjb250YWluaW5nIG9iamVjdHMgY3JlYXRlZCBpbiB0aGUgY2FsbGJhY2tcbiAgICAgKi9cbiAgICBDb21wb3NpdGVzLnB5cmFtaWQgPSBmdW5jdGlvbih4eCwgeXksIGNvbHVtbnMsIHJvd3MsIGNvbHVtbkdhcCwgcm93R2FwLCBjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gQ29tcG9zaXRlcy5zdGFjayh4eCwgeXksIGNvbHVtbnMsIHJvd3MsIGNvbHVtbkdhcCwgcm93R2FwLCBmdW5jdGlvbih4LCB5LCBjb2x1bW4sIHJvdywgbGFzdEJvZHksIGkpIHtcbiAgICAgICAgICAgIHZhciBhY3R1YWxSb3dzID0gTWF0aC5taW4ocm93cywgTWF0aC5jZWlsKGNvbHVtbnMgLyAyKSksXG4gICAgICAgICAgICAgICAgbGFzdEJvZHlXaWR0aCA9IGxhc3RCb2R5ID8gbGFzdEJvZHkuYm91bmRzLm1heC54IC0gbGFzdEJvZHkuYm91bmRzLm1pbi54IDogMDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHJvdyA+IGFjdHVhbFJvd3MpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyByZXZlcnNlIHJvdyBvcmRlclxuICAgICAgICAgICAgcm93ID0gYWN0dWFsUm93cyAtIHJvdztcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gcm93LFxuICAgICAgICAgICAgICAgIGVuZCA9IGNvbHVtbnMgLSAxIC0gcm93O1xuXG4gICAgICAgICAgICBpZiAoY29sdW1uIDwgc3RhcnQgfHwgY29sdW1uID4gZW5kKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gcmV0cm9hY3RpdmVseSBmaXggdGhlIGZpcnN0IGJvZHkncyBwb3NpdGlvbiwgc2luY2Ugd2lkdGggd2FzIHVua25vd25cbiAgICAgICAgICAgIGlmIChpID09PSAxKSB7XG4gICAgICAgICAgICAgICAgQm9keS50cmFuc2xhdGUobGFzdEJvZHksIHsgeDogKGNvbHVtbiArIChjb2x1bW5zICUgMiA9PT0gMSA/IDEgOiAtMSkpICogbGFzdEJvZHlXaWR0aCwgeTogMCB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHhPZmZzZXQgPSBsYXN0Qm9keSA/IGNvbHVtbiAqIGxhc3RCb2R5V2lkdGggOiAwO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soeHggKyB4T2Zmc2V0ICsgY29sdW1uICogY29sdW1uR2FwLCB5LCBjb2x1bW4sIHJvdywgbGFzdEJvZHksIGkpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNvbXBvc2l0ZSB3aXRoIGEgTmV3dG9uJ3MgQ3JhZGxlIHNldHVwIG9mIGJvZGllcyBhbmQgY29uc3RyYWludHMuXG4gICAgICogQG1ldGhvZCBuZXd0b25zQ3JhZGxlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHh4XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHl5XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzaXplXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICAgICAqIEByZXR1cm4ge2NvbXBvc2l0ZX0gQSBuZXcgY29tcG9zaXRlIG5ld3RvbnNDcmFkbGUgYm9keVxuICAgICAqL1xuICAgIENvbXBvc2l0ZXMubmV3dG9uc0NyYWRsZSA9IGZ1bmN0aW9uKHh4LCB5eSwgbnVtYmVyLCBzaXplLCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIG5ld3RvbnNDcmFkbGUgPSBDb21wb3NpdGUuY3JlYXRlKHsgbGFiZWw6ICdOZXd0b25zIENyYWRsZScgfSk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1iZXI7IGkrKykge1xuICAgICAgICAgICAgdmFyIHNlcGFyYXRpb24gPSAxLjksXG4gICAgICAgICAgICAgICAgY2lyY2xlID0gQm9kaWVzLmNpcmNsZSh4eCArIGkgKiAoc2l6ZSAqIHNlcGFyYXRpb24pLCB5eSArIGxlbmd0aCwgc2l6ZSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBpbmVydGlhOiBJbmZpbml0eSwgcmVzdGl0dXRpb246IDEsIGZyaWN0aW9uOiAwLCBmcmljdGlvbkFpcjogMC4wMDAxLCBzbG9wOiAxIH0pLFxuICAgICAgICAgICAgICAgIGNvbnN0cmFpbnQgPSBDb25zdHJhaW50LmNyZWF0ZSh7IHBvaW50QTogeyB4OiB4eCArIGkgKiAoc2l6ZSAqIHNlcGFyYXRpb24pLCB5OiB5eSB9LCBib2R5QjogY2lyY2xlIH0pO1xuXG4gICAgICAgICAgICBDb21wb3NpdGUuYWRkQm9keShuZXd0b25zQ3JhZGxlLCBjaXJjbGUpO1xuICAgICAgICAgICAgQ29tcG9zaXRlLmFkZENvbnN0cmFpbnQobmV3dG9uc0NyYWRsZSwgY29uc3RyYWludCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3dG9uc0NyYWRsZTtcbiAgICB9O1xuICAgIFxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjb21wb3NpdGUgd2l0aCBzaW1wbGUgY2FyIHNldHVwIG9mIGJvZGllcyBhbmQgY29uc3RyYWludHMuXG4gICAgICogQG1ldGhvZCBjYXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geHhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geXlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdoZWVsU2l6ZVxuICAgICAqIEByZXR1cm4ge2NvbXBvc2l0ZX0gQSBuZXcgY29tcG9zaXRlIGNhciBib2R5XG4gICAgICovXG4gICAgQ29tcG9zaXRlcy5jYXIgPSBmdW5jdGlvbih4eCwgeXksIHdpZHRoLCBoZWlnaHQsIHdoZWVsU2l6ZSkge1xuICAgICAgICB2YXIgZ3JvdXAgPSBCb2R5Lm5leHRHcm91cCh0cnVlKSxcbiAgICAgICAgICAgIHdoZWVsQmFzZSA9IC0yMCxcbiAgICAgICAgICAgIHdoZWVsQU9mZnNldCA9IC13aWR0aCAqIDAuNSArIHdoZWVsQmFzZSxcbiAgICAgICAgICAgIHdoZWVsQk9mZnNldCA9IHdpZHRoICogMC41IC0gd2hlZWxCYXNlLFxuICAgICAgICAgICAgd2hlZWxZT2Zmc2V0ID0gMDtcbiAgICBcbiAgICAgICAgdmFyIGNhciA9IENvbXBvc2l0ZS5jcmVhdGUoeyBsYWJlbDogJ0NhcicgfSksXG4gICAgICAgICAgICBib2R5ID0gQm9kaWVzLnRyYXBlem9pZCh4eCwgeXksIHdpZHRoLCBoZWlnaHQsIDAuMywgeyBcbiAgICAgICAgICAgICAgICBjb2xsaXNpb25GaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXA6IGdyb3VwXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBmcmljdGlvbjogMC4wMSxcbiAgICAgICAgICAgICAgICBjaGFtZmVyOiB7XG4gICAgICAgICAgICAgICAgICAgIHJhZGl1czogMTBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICBcbiAgICAgICAgdmFyIHdoZWVsQSA9IEJvZGllcy5jaXJjbGUoeHggKyB3aGVlbEFPZmZzZXQsIHl5ICsgd2hlZWxZT2Zmc2V0LCB3aGVlbFNpemUsIHsgXG4gICAgICAgICAgICBjb2xsaXNpb25GaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICBncm91cDogZ3JvdXBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmcmljdGlvbjogMC44LFxuICAgICAgICAgICAgZGVuc2l0eTogMC4wMVxuICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgIHZhciB3aGVlbEIgPSBCb2RpZXMuY2lyY2xlKHh4ICsgd2hlZWxCT2Zmc2V0LCB5eSArIHdoZWVsWU9mZnNldCwgd2hlZWxTaXplLCB7IFxuICAgICAgICAgICAgY29sbGlzaW9uRmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgZ3JvdXA6IGdyb3VwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZnJpY3Rpb246IDAuOCxcbiAgICAgICAgICAgIGRlbnNpdHk6IDAuMDFcbiAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICB2YXIgYXhlbEEgPSBDb25zdHJhaW50LmNyZWF0ZSh7XG4gICAgICAgICAgICBib2R5QTogYm9keSxcbiAgICAgICAgICAgIHBvaW50QTogeyB4OiB3aGVlbEFPZmZzZXQsIHk6IHdoZWVsWU9mZnNldCB9LFxuICAgICAgICAgICAgYm9keUI6IHdoZWVsQSxcbiAgICAgICAgICAgIHN0aWZmbmVzczogMC4yXG4gICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgIHZhciBheGVsQiA9IENvbnN0cmFpbnQuY3JlYXRlKHtcbiAgICAgICAgICAgIGJvZHlBOiBib2R5LFxuICAgICAgICAgICAgcG9pbnRBOiB7IHg6IHdoZWVsQk9mZnNldCwgeTogd2hlZWxZT2Zmc2V0IH0sXG4gICAgICAgICAgICBib2R5Qjogd2hlZWxCLFxuICAgICAgICAgICAgc3RpZmZuZXNzOiAwLjJcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBDb21wb3NpdGUuYWRkQm9keShjYXIsIGJvZHkpO1xuICAgICAgICBDb21wb3NpdGUuYWRkQm9keShjYXIsIHdoZWVsQSk7XG4gICAgICAgIENvbXBvc2l0ZS5hZGRCb2R5KGNhciwgd2hlZWxCKTtcbiAgICAgICAgQ29tcG9zaXRlLmFkZENvbnN0cmFpbnQoY2FyLCBheGVsQSk7XG4gICAgICAgIENvbXBvc2l0ZS5hZGRDb25zdHJhaW50KGNhciwgYXhlbEIpO1xuXG4gICAgICAgIHJldHVybiBjYXI7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzaW1wbGUgc29mdCBib2R5IGxpa2Ugb2JqZWN0LlxuICAgICAqIEBtZXRob2Qgc29mdEJvZHlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geHhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geXlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gY29sdW1uc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSByb3dzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGNvbHVtbkdhcFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSByb3dHYXBcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGNyb3NzQnJhY2VcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcGFydGljbGVSYWRpdXNcbiAgICAgKiBAcGFyYW0ge30gcGFydGljbGVPcHRpb25zXG4gICAgICogQHBhcmFtIHt9IGNvbnN0cmFpbnRPcHRpb25zXG4gICAgICogQHJldHVybiB7Y29tcG9zaXRlfSBBIG5ldyBjb21wb3NpdGUgc29mdEJvZHlcbiAgICAgKi9cbiAgICBDb21wb3NpdGVzLnNvZnRCb2R5ID0gZnVuY3Rpb24oeHgsIHl5LCBjb2x1bW5zLCByb3dzLCBjb2x1bW5HYXAsIHJvd0dhcCwgY3Jvc3NCcmFjZSwgcGFydGljbGVSYWRpdXMsIHBhcnRpY2xlT3B0aW9ucywgY29uc3RyYWludE9wdGlvbnMpIHtcbiAgICAgICAgcGFydGljbGVPcHRpb25zID0gQ29tbW9uLmV4dGVuZCh7IGluZXJ0aWE6IEluZmluaXR5IH0sIHBhcnRpY2xlT3B0aW9ucyk7XG4gICAgICAgIGNvbnN0cmFpbnRPcHRpb25zID0gQ29tbW9uLmV4dGVuZCh7IHN0aWZmbmVzczogMC40IH0sIGNvbnN0cmFpbnRPcHRpb25zKTtcblxuICAgICAgICB2YXIgc29mdEJvZHkgPSBDb21wb3NpdGVzLnN0YWNrKHh4LCB5eSwgY29sdW1ucywgcm93cywgY29sdW1uR2FwLCByb3dHYXAsIGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgICAgICAgIHJldHVybiBCb2RpZXMuY2lyY2xlKHgsIHksIHBhcnRpY2xlUmFkaXVzLCBwYXJ0aWNsZU9wdGlvbnMpO1xuICAgICAgICB9KTtcblxuICAgICAgICBDb21wb3NpdGVzLm1lc2goc29mdEJvZHksIGNvbHVtbnMsIHJvd3MsIGNyb3NzQnJhY2UsIGNvbnN0cmFpbnRPcHRpb25zKTtcblxuICAgICAgICBzb2Z0Qm9keS5sYWJlbCA9ICdTb2Z0IEJvZHknO1xuXG4gICAgICAgIHJldHVybiBzb2Z0Qm9keTtcbiAgICB9O1xuXG59KSgpO1xuXG59LHtcIi4uL2JvZHkvQm9keVwiOjEsXCIuLi9ib2R5L0NvbXBvc2l0ZVwiOjIsXCIuLi9jb25zdHJhaW50L0NvbnN0cmFpbnRcIjoxMixcIi4uL2NvcmUvQ29tbW9uXCI6MTQsXCIuL0JvZGllc1wiOjIxfV0sMjM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLkF4ZXNgIG1vZHVsZSBjb250YWlucyBtZXRob2RzIGZvciBjcmVhdGluZyBhbmQgbWFuaXB1bGF0aW5nIHNldHMgb2YgYXhlcy5cbipcbiogQGNsYXNzIEF4ZXNcbiovXG5cbnZhciBBeGVzID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gQXhlcztcblxudmFyIFZlY3RvciA9IHJlcXVpcmUoJy4uL2dlb21ldHJ5L1ZlY3RvcicpO1xudmFyIENvbW1vbiA9IHJlcXVpcmUoJy4uL2NvcmUvQ29tbW9uJyk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgc2V0IG9mIGF4ZXMgZnJvbSB0aGUgZ2l2ZW4gdmVydGljZXMuXG4gICAgICogQG1ldGhvZCBmcm9tVmVydGljZXNcbiAgICAgKiBAcGFyYW0ge3ZlcnRpY2VzfSB2ZXJ0aWNlc1xuICAgICAqIEByZXR1cm4ge2F4ZXN9IEEgbmV3IGF4ZXMgZnJvbSB0aGUgZ2l2ZW4gdmVydGljZXNcbiAgICAgKi9cbiAgICBBeGVzLmZyb21WZXJ0aWNlcyA9IGZ1bmN0aW9uKHZlcnRpY2VzKSB7XG4gICAgICAgIHZhciBheGVzID0ge307XG5cbiAgICAgICAgLy8gZmluZCB0aGUgdW5pcXVlIGF4ZXMsIHVzaW5nIGVkZ2Ugbm9ybWFsIGdyYWRpZW50c1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZlcnRpY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaiA9IChpICsgMSkgJSB2ZXJ0aWNlcy5sZW5ndGgsIFxuICAgICAgICAgICAgICAgIG5vcm1hbCA9IFZlY3Rvci5ub3JtYWxpc2UoeyBcbiAgICAgICAgICAgICAgICAgICAgeDogdmVydGljZXNbal0ueSAtIHZlcnRpY2VzW2ldLnksIFxuICAgICAgICAgICAgICAgICAgICB5OiB2ZXJ0aWNlc1tpXS54IC0gdmVydGljZXNbal0ueFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIGdyYWRpZW50ID0gKG5vcm1hbC55ID09PSAwKSA/IEluZmluaXR5IDogKG5vcm1hbC54IC8gbm9ybWFsLnkpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBsaW1pdCBwcmVjaXNpb25cbiAgICAgICAgICAgIGdyYWRpZW50ID0gZ3JhZGllbnQudG9GaXhlZCgzKS50b1N0cmluZygpO1xuICAgICAgICAgICAgYXhlc1tncmFkaWVudF0gPSBub3JtYWw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gQ29tbW9uLnZhbHVlcyhheGVzKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUm90YXRlcyBhIHNldCBvZiBheGVzIGJ5IHRoZSBnaXZlbiBhbmdsZS5cbiAgICAgKiBAbWV0aG9kIHJvdGF0ZVxuICAgICAqIEBwYXJhbSB7YXhlc30gYXhlc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhbmdsZVxuICAgICAqL1xuICAgIEF4ZXMucm90YXRlID0gZnVuY3Rpb24oYXhlcywgYW5nbGUpIHtcbiAgICAgICAgaWYgKGFuZ2xlID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBcbiAgICAgICAgdmFyIGNvcyA9IE1hdGguY29zKGFuZ2xlKSxcbiAgICAgICAgICAgIHNpbiA9IE1hdGguc2luKGFuZ2xlKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGF4ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBheGlzID0gYXhlc1tpXSxcbiAgICAgICAgICAgICAgICB4eDtcbiAgICAgICAgICAgIHh4ID0gYXhpcy54ICogY29zIC0gYXhpcy55ICogc2luO1xuICAgICAgICAgICAgYXhpcy55ID0gYXhpcy54ICogc2luICsgYXhpcy55ICogY29zO1xuICAgICAgICAgICAgYXhpcy54ID0geHg7XG4gICAgICAgIH1cbiAgICB9O1xuXG59KSgpO1xuXG59LHtcIi4uL2NvcmUvQ29tbW9uXCI6MTQsXCIuLi9nZW9tZXRyeS9WZWN0b3JcIjoyNn1dLDI0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuKiBUaGUgYE1hdHRlci5Cb3VuZHNgIG1vZHVsZSBjb250YWlucyBtZXRob2RzIGZvciBjcmVhdGluZyBhbmQgbWFuaXB1bGF0aW5nIGF4aXMtYWxpZ25lZCBib3VuZGluZyBib3hlcyAoQUFCQikuXG4qXG4qIEBjbGFzcyBCb3VuZHNcbiovXG5cbnZhciBCb3VuZHMgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBCb3VuZHM7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgYXhpcy1hbGlnbmVkIGJvdW5kaW5nIGJveCAoQUFCQikgZm9yIHRoZSBnaXZlbiB2ZXJ0aWNlcy5cbiAgICAgKiBAbWV0aG9kIGNyZWF0ZVxuICAgICAqIEBwYXJhbSB7dmVydGljZXN9IHZlcnRpY2VzXG4gICAgICogQHJldHVybiB7Ym91bmRzfSBBIG5ldyBib3VuZHMgb2JqZWN0XG4gICAgICovXG4gICAgQm91bmRzLmNyZWF0ZSA9IGZ1bmN0aW9uKHZlcnRpY2VzKSB7XG4gICAgICAgIHZhciBib3VuZHMgPSB7IFxuICAgICAgICAgICAgbWluOiB7IHg6IDAsIHk6IDAgfSwgXG4gICAgICAgICAgICBtYXg6IHsgeDogMCwgeTogMCB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHZlcnRpY2VzKVxuICAgICAgICAgICAgQm91bmRzLnVwZGF0ZShib3VuZHMsIHZlcnRpY2VzKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBib3VuZHM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgYm91bmRzIHVzaW5nIHRoZSBnaXZlbiB2ZXJ0aWNlcyBhbmQgZXh0ZW5kcyB0aGUgYm91bmRzIGdpdmVuIGEgdmVsb2NpdHkuXG4gICAgICogQG1ldGhvZCB1cGRhdGVcbiAgICAgKiBAcGFyYW0ge2JvdW5kc30gYm91bmRzXG4gICAgICogQHBhcmFtIHt2ZXJ0aWNlc30gdmVydGljZXNcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVsb2NpdHlcbiAgICAgKi9cbiAgICBCb3VuZHMudXBkYXRlID0gZnVuY3Rpb24oYm91bmRzLCB2ZXJ0aWNlcywgdmVsb2NpdHkpIHtcbiAgICAgICAgYm91bmRzLm1pbi54ID0gSW5maW5pdHk7XG4gICAgICAgIGJvdW5kcy5tYXgueCA9IC1JbmZpbml0eTtcbiAgICAgICAgYm91bmRzLm1pbi55ID0gSW5maW5pdHk7XG4gICAgICAgIGJvdW5kcy5tYXgueSA9IC1JbmZpbml0eTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZlcnRpY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgdmVydGV4ID0gdmVydGljZXNbaV07XG4gICAgICAgICAgICBpZiAodmVydGV4LnggPiBib3VuZHMubWF4LngpIGJvdW5kcy5tYXgueCA9IHZlcnRleC54O1xuICAgICAgICAgICAgaWYgKHZlcnRleC54IDwgYm91bmRzLm1pbi54KSBib3VuZHMubWluLnggPSB2ZXJ0ZXgueDtcbiAgICAgICAgICAgIGlmICh2ZXJ0ZXgueSA+IGJvdW5kcy5tYXgueSkgYm91bmRzLm1heC55ID0gdmVydGV4Lnk7XG4gICAgICAgICAgICBpZiAodmVydGV4LnkgPCBib3VuZHMubWluLnkpIGJvdW5kcy5taW4ueSA9IHZlcnRleC55O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAodmVsb2NpdHkpIHtcbiAgICAgICAgICAgIGlmICh2ZWxvY2l0eS54ID4gMCkge1xuICAgICAgICAgICAgICAgIGJvdW5kcy5tYXgueCArPSB2ZWxvY2l0eS54O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBib3VuZHMubWluLnggKz0gdmVsb2NpdHkueDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHZlbG9jaXR5LnkgPiAwKSB7XG4gICAgICAgICAgICAgICAgYm91bmRzLm1heC55ICs9IHZlbG9jaXR5Lnk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGJvdW5kcy5taW4ueSArPSB2ZWxvY2l0eS55O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgYm91bmRzIGNvbnRhaW5zIHRoZSBnaXZlbiBwb2ludC5cbiAgICAgKiBAbWV0aG9kIGNvbnRhaW5zXG4gICAgICogQHBhcmFtIHtib3VuZHN9IGJvdW5kc1xuICAgICAqIEBwYXJhbSB7dmVjdG9yfSBwb2ludFxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGJvdW5kcyBjb250YWluIHRoZSBwb2ludCwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgICovXG4gICAgQm91bmRzLmNvbnRhaW5zID0gZnVuY3Rpb24oYm91bmRzLCBwb2ludCkge1xuICAgICAgICByZXR1cm4gcG9pbnQueCA+PSBib3VuZHMubWluLnggJiYgcG9pbnQueCA8PSBib3VuZHMubWF4LnggXG4gICAgICAgICAgICAgICAmJiBwb2ludC55ID49IGJvdW5kcy5taW4ueSAmJiBwb2ludC55IDw9IGJvdW5kcy5tYXgueTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSB0d28gYm91bmRzIGludGVyc2VjdC5cbiAgICAgKiBAbWV0aG9kIG92ZXJsYXBzXG4gICAgICogQHBhcmFtIHtib3VuZHN9IGJvdW5kc0FcbiAgICAgKiBAcGFyYW0ge2JvdW5kc30gYm91bmRzQlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGJvdW5kcyBvdmVybGFwLCBvdGhlcndpc2UgZmFsc2VcbiAgICAgKi9cbiAgICBCb3VuZHMub3ZlcmxhcHMgPSBmdW5jdGlvbihib3VuZHNBLCBib3VuZHNCKSB7XG4gICAgICAgIHJldHVybiAoYm91bmRzQS5taW4ueCA8PSBib3VuZHNCLm1heC54ICYmIGJvdW5kc0EubWF4LnggPj0gYm91bmRzQi5taW4ueFxuICAgICAgICAgICAgICAgICYmIGJvdW5kc0EubWF4LnkgPj0gYm91bmRzQi5taW4ueSAmJiBib3VuZHNBLm1pbi55IDw9IGJvdW5kc0IubWF4LnkpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2xhdGVzIHRoZSBib3VuZHMgYnkgdGhlIGdpdmVuIHZlY3Rvci5cbiAgICAgKiBAbWV0aG9kIHRyYW5zbGF0ZVxuICAgICAqIEBwYXJhbSB7Ym91bmRzfSBib3VuZHNcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yXG4gICAgICovXG4gICAgQm91bmRzLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKGJvdW5kcywgdmVjdG9yKSB7XG4gICAgICAgIGJvdW5kcy5taW4ueCArPSB2ZWN0b3IueDtcbiAgICAgICAgYm91bmRzLm1heC54ICs9IHZlY3Rvci54O1xuICAgICAgICBib3VuZHMubWluLnkgKz0gdmVjdG9yLnk7XG4gICAgICAgIGJvdW5kcy5tYXgueSArPSB2ZWN0b3IueTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2hpZnRzIHRoZSBib3VuZHMgdG8gdGhlIGdpdmVuIHBvc2l0aW9uLlxuICAgICAqIEBtZXRob2Qgc2hpZnRcbiAgICAgKiBAcGFyYW0ge2JvdW5kc30gYm91bmRzXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHBvc2l0aW9uXG4gICAgICovXG4gICAgQm91bmRzLnNoaWZ0ID0gZnVuY3Rpb24oYm91bmRzLCBwb3NpdGlvbikge1xuICAgICAgICB2YXIgZGVsdGFYID0gYm91bmRzLm1heC54IC0gYm91bmRzLm1pbi54LFxuICAgICAgICAgICAgZGVsdGFZID0gYm91bmRzLm1heC55IC0gYm91bmRzLm1pbi55O1xuICAgICAgICAgICAgXG4gICAgICAgIGJvdW5kcy5taW4ueCA9IHBvc2l0aW9uLng7XG4gICAgICAgIGJvdW5kcy5tYXgueCA9IHBvc2l0aW9uLnggKyBkZWx0YVg7XG4gICAgICAgIGJvdW5kcy5taW4ueSA9IHBvc2l0aW9uLnk7XG4gICAgICAgIGJvdW5kcy5tYXgueSA9IHBvc2l0aW9uLnkgKyBkZWx0YVk7XG4gICAgfTtcbiAgICBcbn0pKCk7XG5cbn0se31dLDI1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuKiBUaGUgYE1hdHRlci5TdmdgIG1vZHVsZSBjb250YWlucyBtZXRob2RzIGZvciBjb252ZXJ0aW5nIFNWRyBpbWFnZXMgaW50byBhbiBhcnJheSBvZiB2ZWN0b3IgcG9pbnRzLlxuKlxuKiBUbyB1c2UgdGhpcyBtb2R1bGUgeW91IGFsc28gbmVlZCB0aGUgU1ZHUGF0aFNlZyBwb2x5ZmlsbDogaHR0cHM6Ly9naXRodWIuY29tL3Byb2dlcnMvcGF0aHNlZ1xuKlxuKiBTZWUgdGhlIGluY2x1ZGVkIHVzYWdlIFtleGFtcGxlc10oaHR0cHM6Ly9naXRodWIuY29tL2xpYWJydS9tYXR0ZXItanMvdHJlZS9tYXN0ZXIvZXhhbXBsZXMpLlxuKlxuKiBAY2xhc3MgU3ZnXG4qL1xuXG52YXIgU3ZnID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gU3ZnO1xuXG52YXIgQm91bmRzID0gcmVxdWlyZSgnLi4vZ2VvbWV0cnkvQm91bmRzJyk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGFuIFNWRyBwYXRoIGludG8gYW4gYXJyYXkgb2YgdmVjdG9yIHBvaW50cy5cbiAgICAgKiBJZiB0aGUgaW5wdXQgcGF0aCBmb3JtcyBhIGNvbmNhdmUgc2hhcGUsIHlvdSBtdXN0IGRlY29tcG9zZSB0aGUgcmVzdWx0IGludG8gY29udmV4IHBhcnRzIGJlZm9yZSB1c2UuXG4gICAgICogU2VlIGBCb2RpZXMuZnJvbVZlcnRpY2VzYCB3aGljaCBwcm92aWRlcyBzdXBwb3J0IGZvciB0aGlzLlxuICAgICAqIE5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uIGlzIG5vdCBndWFyYW50ZWVkIHRvIHN1cHBvcnQgY29tcGxleCBwYXRocyAoc3VjaCBhcyB0aG9zZSB3aXRoIGhvbGVzKS5cbiAgICAgKiBAbWV0aG9kIHBhdGhUb1ZlcnRpY2VzXG4gICAgICogQHBhcmFtIHtTVkdQYXRoRWxlbWVudH0gcGF0aFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbc2FtcGxlTGVuZ3RoPTE1XVxuICAgICAqIEByZXR1cm4ge1ZlY3RvcltdfSBwb2ludHNcbiAgICAgKi9cbiAgICBTdmcucGF0aFRvVmVydGljZXMgPSBmdW5jdGlvbihwYXRoLCBzYW1wbGVMZW5ndGgpIHtcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3dvdXQvc3ZnLnRvcG9seS5qcy9ibG9iL21hc3Rlci9zdmcudG9wb2x5LmpzXG4gICAgICAgIHZhciBpLCBpbCwgdG90YWwsIHBvaW50LCBzZWdtZW50LCBzZWdtZW50cywgXG4gICAgICAgICAgICBzZWdtZW50c1F1ZXVlLCBsYXN0U2VnbWVudCwgXG4gICAgICAgICAgICBsYXN0UG9pbnQsIHNlZ21lbnRJbmRleCwgcG9pbnRzID0gW10sXG4gICAgICAgICAgICBseCwgbHksIGxlbmd0aCA9IDAsIHggPSAwLCB5ID0gMDtcblxuICAgICAgICBzYW1wbGVMZW5ndGggPSBzYW1wbGVMZW5ndGggfHwgMTU7XG5cbiAgICAgICAgdmFyIGFkZFBvaW50ID0gZnVuY3Rpb24ocHgsIHB5LCBwYXRoU2VnVHlwZSkge1xuICAgICAgICAgICAgLy8gYWxsIG9kZC1udW1iZXJlZCBwYXRoIHR5cGVzIGFyZSByZWxhdGl2ZSBleGNlcHQgUEFUSFNFR19DTE9TRVBBVEggKDEpXG4gICAgICAgICAgICB2YXIgaXNSZWxhdGl2ZSA9IHBhdGhTZWdUeXBlICUgMiA9PT0gMSAmJiBwYXRoU2VnVHlwZSA+IDE7XG5cbiAgICAgICAgICAgIC8vIHdoZW4gdGhlIGxhc3QgcG9pbnQgZG9lc24ndCBlcXVhbCB0aGUgY3VycmVudCBwb2ludCBhZGQgdGhlIGN1cnJlbnQgcG9pbnRcbiAgICAgICAgICAgIGlmICghbGFzdFBvaW50IHx8IHB4ICE9IGxhc3RQb2ludC54IHx8IHB5ICE9IGxhc3RQb2ludC55KSB7XG4gICAgICAgICAgICAgICAgaWYgKGxhc3RQb2ludCAmJiBpc1JlbGF0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIGx4ID0gbGFzdFBvaW50Lng7XG4gICAgICAgICAgICAgICAgICAgIGx5ID0gbGFzdFBvaW50Lnk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbHggPSAwO1xuICAgICAgICAgICAgICAgICAgICBseSA9IDA7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIHBvaW50ID0ge1xuICAgICAgICAgICAgICAgICAgICB4OiBseCArIHB4LFxuICAgICAgICAgICAgICAgICAgICB5OiBseSArIHB5XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIC8vIHNldCBsYXN0IHBvaW50XG4gICAgICAgICAgICAgICAgaWYgKGlzUmVsYXRpdmUgfHwgIWxhc3RQb2ludCkge1xuICAgICAgICAgICAgICAgICAgICBsYXN0UG9pbnQgPSBwb2ludDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBwb2ludHMucHVzaChwb2ludCk7XG5cbiAgICAgICAgICAgICAgICB4ID0gbHggKyBweDtcbiAgICAgICAgICAgICAgICB5ID0gbHkgKyBweTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgYWRkU2VnbWVudFBvaW50ID0gZnVuY3Rpb24oc2VnbWVudCkge1xuICAgICAgICAgICAgdmFyIHNlZ1R5cGUgPSBzZWdtZW50LnBhdGhTZWdUeXBlQXNMZXR0ZXIudG9VcHBlckNhc2UoKTtcblxuICAgICAgICAgICAgLy8gc2tpcCBwYXRoIGVuZHNcbiAgICAgICAgICAgIGlmIChzZWdUeXBlID09PSAnWicpIFxuICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgLy8gbWFwIHNlZ21lbnQgdG8geCBhbmQgeVxuICAgICAgICAgICAgc3dpdGNoIChzZWdUeXBlKSB7XG5cbiAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgY2FzZSAnTCc6XG4gICAgICAgICAgICBjYXNlICdUJzpcbiAgICAgICAgICAgIGNhc2UgJ0MnOlxuICAgICAgICAgICAgY2FzZSAnUyc6XG4gICAgICAgICAgICBjYXNlICdRJzpcbiAgICAgICAgICAgICAgICB4ID0gc2VnbWVudC54O1xuICAgICAgICAgICAgICAgIHkgPSBzZWdtZW50Lnk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdIJzpcbiAgICAgICAgICAgICAgICB4ID0gc2VnbWVudC54O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnVic6XG4gICAgICAgICAgICAgICAgeSA9IHNlZ21lbnQueTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYWRkUG9pbnQoeCwgeSwgc2VnbWVudC5wYXRoU2VnVHlwZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gZW5zdXJlIHBhdGggaXMgYWJzb2x1dGVcbiAgICAgICAgX3N2Z1BhdGhUb0Fic29sdXRlKHBhdGgpO1xuXG4gICAgICAgIC8vIGdldCB0b3RhbCBsZW5ndGhcbiAgICAgICAgdG90YWwgPSBwYXRoLmdldFRvdGFsTGVuZ3RoKCk7XG5cbiAgICAgICAgLy8gcXVldWUgc2VnbWVudHNcbiAgICAgICAgc2VnbWVudHMgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhdGgucGF0aFNlZ0xpc3QubnVtYmVyT2ZJdGVtczsgaSArPSAxKVxuICAgICAgICAgICAgc2VnbWVudHMucHVzaChwYXRoLnBhdGhTZWdMaXN0LmdldEl0ZW0oaSkpO1xuXG4gICAgICAgIHNlZ21lbnRzUXVldWUgPSBzZWdtZW50cy5jb25jYXQoKTtcblxuICAgICAgICAvLyBzYW1wbGUgdGhyb3VnaCBwYXRoXG4gICAgICAgIHdoaWxlIChsZW5ndGggPCB0b3RhbCkge1xuICAgICAgICAgICAgLy8gZ2V0IHNlZ21lbnQgYXQgcG9zaXRpb25cbiAgICAgICAgICAgIHNlZ21lbnRJbmRleCA9IHBhdGguZ2V0UGF0aFNlZ0F0TGVuZ3RoKGxlbmd0aCk7XG4gICAgICAgICAgICBzZWdtZW50ID0gc2VnbWVudHNbc2VnbWVudEluZGV4XTtcblxuICAgICAgICAgICAgLy8gbmV3IHNlZ21lbnRcbiAgICAgICAgICAgIGlmIChzZWdtZW50ICE9IGxhc3RTZWdtZW50KSB7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHNlZ21lbnRzUXVldWUubGVuZ3RoICYmIHNlZ21lbnRzUXVldWVbMF0gIT0gc2VnbWVudClcbiAgICAgICAgICAgICAgICAgICAgYWRkU2VnbWVudFBvaW50KHNlZ21lbnRzUXVldWUuc2hpZnQoKSk7XG5cbiAgICAgICAgICAgICAgICBsYXN0U2VnbWVudCA9IHNlZ21lbnQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGFkZCBwb2ludHMgaW4gYmV0d2VlbiB3aGVuIGN1cnZpbmdcbiAgICAgICAgICAgIC8vIFRPRE86IGFkYXB0aXZlIHNhbXBsaW5nXG4gICAgICAgICAgICBzd2l0Y2ggKHNlZ21lbnQucGF0aFNlZ1R5cGVBc0xldHRlci50b1VwcGVyQ2FzZSgpKSB7XG5cbiAgICAgICAgICAgIGNhc2UgJ0MnOlxuICAgICAgICAgICAgY2FzZSAnVCc6XG4gICAgICAgICAgICBjYXNlICdTJzpcbiAgICAgICAgICAgIGNhc2UgJ1EnOlxuICAgICAgICAgICAgY2FzZSAnQSc6XG4gICAgICAgICAgICAgICAgcG9pbnQgPSBwYXRoLmdldFBvaW50QXRMZW5ndGgobGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBhZGRQb2ludChwb2ludC54LCBwb2ludC55LCAwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBpbmNyZW1lbnQgYnkgc2FtcGxlIHZhbHVlXG4gICAgICAgICAgICBsZW5ndGggKz0gc2FtcGxlTGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYWRkIHJlbWFpbmluZyBzZWdtZW50cyBub3QgcGFzc2VkIGJ5IHNhbXBsaW5nXG4gICAgICAgIGZvciAoaSA9IDAsIGlsID0gc2VnbWVudHNRdWV1ZS5sZW5ndGg7IGkgPCBpbDsgKytpKVxuICAgICAgICAgICAgYWRkU2VnbWVudFBvaW50KHNlZ21lbnRzUXVldWVbaV0pO1xuXG4gICAgICAgIHJldHVybiBwb2ludHM7XG4gICAgfTtcblxuICAgIHZhciBfc3ZnUGF0aFRvQWJzb2x1dGUgPSBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIC8vIGh0dHA6Ly9waHJvZ3oubmV0L2NvbnZlcnQtc3ZnLXBhdGgtdG8tYWxsLWFic29sdXRlLWNvbW1hbmRzXG4gICAgICAgIHZhciB4MCwgeTAsIHgxLCB5MSwgeDIsIHkyLCBzZWdzID0gcGF0aC5wYXRoU2VnTGlzdCxcbiAgICAgICAgICAgIHggPSAwLCB5ID0gMCwgbGVuID0gc2Vncy5udW1iZXJPZkl0ZW1zO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBzZWcgPSBzZWdzLmdldEl0ZW0oaSksXG4gICAgICAgICAgICAgICAgc2VnVHlwZSA9IHNlZy5wYXRoU2VnVHlwZUFzTGV0dGVyO1xuXG4gICAgICAgICAgICBpZiAoL1tNTEhWQ1NRVEFdLy50ZXN0KHNlZ1R5cGUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCd4JyBpbiBzZWcpIHggPSBzZWcueDtcbiAgICAgICAgICAgICAgICBpZiAoJ3knIGluIHNlZykgeSA9IHNlZy55O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoJ3gxJyBpbiBzZWcpIHgxID0geCArIHNlZy54MTtcbiAgICAgICAgICAgICAgICBpZiAoJ3gyJyBpbiBzZWcpIHgyID0geCArIHNlZy54MjtcbiAgICAgICAgICAgICAgICBpZiAoJ3kxJyBpbiBzZWcpIHkxID0geSArIHNlZy55MTtcbiAgICAgICAgICAgICAgICBpZiAoJ3kyJyBpbiBzZWcpIHkyID0geSArIHNlZy55MjtcbiAgICAgICAgICAgICAgICBpZiAoJ3gnIGluIHNlZykgeCArPSBzZWcueDtcbiAgICAgICAgICAgICAgICBpZiAoJ3knIGluIHNlZykgeSArPSBzZWcueTtcblxuICAgICAgICAgICAgICAgIHN3aXRjaCAoc2VnVHlwZSkge1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgICAgIHNlZ3MucmVwbGFjZUl0ZW0ocGF0aC5jcmVhdGVTVkdQYXRoU2VnTW92ZXRvQWJzKHgsIHkpLCBpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbCc6XG4gICAgICAgICAgICAgICAgICAgIHNlZ3MucmVwbGFjZUl0ZW0ocGF0aC5jcmVhdGVTVkdQYXRoU2VnTGluZXRvQWJzKHgsIHkpLCBpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICAgICAgICAgIHNlZ3MucmVwbGFjZUl0ZW0ocGF0aC5jcmVhdGVTVkdQYXRoU2VnTGluZXRvSG9yaXpvbnRhbEFicyh4KSwgaSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3YnOlxuICAgICAgICAgICAgICAgICAgICBzZWdzLnJlcGxhY2VJdGVtKHBhdGguY3JlYXRlU1ZHUGF0aFNlZ0xpbmV0b1ZlcnRpY2FsQWJzKHkpLCBpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnYyc6XG4gICAgICAgICAgICAgICAgICAgIHNlZ3MucmVwbGFjZUl0ZW0ocGF0aC5jcmVhdGVTVkdQYXRoU2VnQ3VydmV0b0N1YmljQWJzKHgsIHksIHgxLCB5MSwgeDIsIHkyKSwgaSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgICAgICAgICBzZWdzLnJlcGxhY2VJdGVtKHBhdGguY3JlYXRlU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1Ntb290aEFicyh4LCB5LCB4MiwgeTIpLCBpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAncSc6XG4gICAgICAgICAgICAgICAgICAgIHNlZ3MucmVwbGFjZUl0ZW0ocGF0aC5jcmVhdGVTVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY0Ficyh4LCB5LCB4MSwgeTEpLCBpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAndCc6XG4gICAgICAgICAgICAgICAgICAgIHNlZ3MucmVwbGFjZUl0ZW0ocGF0aC5jcmVhdGVTVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1Ntb290aEFicyh4LCB5KSwgaSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2EnOlxuICAgICAgICAgICAgICAgICAgICBzZWdzLnJlcGxhY2VJdGVtKHBhdGguY3JlYXRlU1ZHUGF0aFNlZ0FyY0Ficyh4LCB5LCBzZWcucjEsIHNlZy5yMiwgc2VnLmFuZ2xlLCBzZWcubGFyZ2VBcmNGbGFnLCBzZWcuc3dlZXBGbGFnKSwgaSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3onOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1onOlxuICAgICAgICAgICAgICAgICAgICB4ID0geDA7XG4gICAgICAgICAgICAgICAgICAgIHkgPSB5MDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzZWdUeXBlID09ICdNJyB8fCBzZWdUeXBlID09ICdtJykge1xuICAgICAgICAgICAgICAgIHgwID0geDtcbiAgICAgICAgICAgICAgICB5MCA9IHk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG59KSgpO1xufSx7XCIuLi9nZW9tZXRyeS9Cb3VuZHNcIjoyNH1dLDI2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuKiBUaGUgYE1hdHRlci5WZWN0b3JgIG1vZHVsZSBjb250YWlucyBtZXRob2RzIGZvciBjcmVhdGluZyBhbmQgbWFuaXB1bGF0aW5nIHZlY3RvcnMuXG4qIFZlY3RvcnMgYXJlIHRoZSBiYXNpcyBvZiBhbGwgdGhlIGdlb21ldHJ5IHJlbGF0ZWQgb3BlcmF0aW9ucyBpbiB0aGUgZW5naW5lLlxuKiBBIGBNYXR0ZXIuVmVjdG9yYCBvYmplY3QgaXMgb2YgdGhlIGZvcm0gYHsgeDogMCwgeTogMCB9YC5cbipcbiogU2VlIHRoZSBpbmNsdWRlZCB1c2FnZSBbZXhhbXBsZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9saWFicnUvbWF0dGVyLWpzL3RyZWUvbWFzdGVyL2V4YW1wbGVzKS5cbipcbiogQGNsYXNzIFZlY3RvclxuKi9cblxuLy8gVE9ETzogY29uc2lkZXIgcGFyYW1zIGZvciByZXVzaW5nIHZlY3RvciBvYmplY3RzXG5cbnZhciBWZWN0b3IgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBWZWN0b3I7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgdmVjdG9yLlxuICAgICAqIEBtZXRob2QgY3JlYXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgICAqIEByZXR1cm4ge3ZlY3Rvcn0gQSBuZXcgdmVjdG9yXG4gICAgICovXG4gICAgVmVjdG9yLmNyZWF0ZSA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgICAgcmV0dXJuIHsgeDogeCB8fCAwLCB5OiB5IHx8IDAgfTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyB2ZWN0b3Igd2l0aCBgeGAgYW5kIGB5YCBjb3BpZWQgZnJvbSB0aGUgZ2l2ZW4gYHZlY3RvcmAuXG4gICAgICogQG1ldGhvZCBjbG9uZVxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JcbiAgICAgKiBAcmV0dXJuIHt2ZWN0b3J9IEEgbmV3IGNsb25lZCB2ZWN0b3JcbiAgICAgKi9cbiAgICBWZWN0b3IuY2xvbmUgPSBmdW5jdGlvbih2ZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIHsgeDogdmVjdG9yLngsIHk6IHZlY3Rvci55IH07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG1hZ25pdHVkZSAobGVuZ3RoKSBvZiBhIHZlY3Rvci5cbiAgICAgKiBAbWV0aG9kIG1hZ25pdHVkZVxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBtYWduaXR1ZGUgb2YgdGhlIHZlY3RvclxuICAgICAqL1xuICAgIFZlY3Rvci5tYWduaXR1ZGUgPSBmdW5jdGlvbih2ZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydCgodmVjdG9yLnggKiB2ZWN0b3IueCkgKyAodmVjdG9yLnkgKiB2ZWN0b3IueSkpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBtYWduaXR1ZGUgKGxlbmd0aCkgb2YgYSB2ZWN0b3IgKHRoZXJlZm9yZSBzYXZpbmcgYSBgc3FydGAgb3BlcmF0aW9uKS5cbiAgICAgKiBAbWV0aG9kIG1hZ25pdHVkZVNxdWFyZWRcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgc3F1YXJlZCBtYWduaXR1ZGUgb2YgdGhlIHZlY3RvclxuICAgICAqL1xuICAgIFZlY3Rvci5tYWduaXR1ZGVTcXVhcmVkID0gZnVuY3Rpb24odmVjdG9yKSB7XG4gICAgICAgIHJldHVybiAodmVjdG9yLnggKiB2ZWN0b3IueCkgKyAodmVjdG9yLnkgKiB2ZWN0b3IueSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJvdGF0ZXMgdGhlIHZlY3RvciBhYm91dCAoMCwgMCkgYnkgc3BlY2lmaWVkIGFuZ2xlLlxuICAgICAqIEBtZXRob2Qgcm90YXRlXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhbmdsZVxuICAgICAqIEByZXR1cm4ge3ZlY3Rvcn0gQSBuZXcgdmVjdG9yIHJvdGF0ZWQgYWJvdXQgKDAsIDApXG4gICAgICovXG4gICAgVmVjdG9yLnJvdGF0ZSA9IGZ1bmN0aW9uKHZlY3RvciwgYW5nbGUpIHtcbiAgICAgICAgdmFyIGNvcyA9IE1hdGguY29zKGFuZ2xlKSwgc2luID0gTWF0aC5zaW4oYW5nbGUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogdmVjdG9yLnggKiBjb3MgLSB2ZWN0b3IueSAqIHNpbixcbiAgICAgICAgICAgIHk6IHZlY3Rvci54ICogc2luICsgdmVjdG9yLnkgKiBjb3NcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUm90YXRlcyB0aGUgdmVjdG9yIGFib3V0IGEgc3BlY2lmaWVkIHBvaW50IGJ5IHNwZWNpZmllZCBhbmdsZS5cbiAgICAgKiBAbWV0aG9kIHJvdGF0ZUFib3V0XG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhbmdsZVxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSBwb2ludFxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSBbb3V0cHV0XVxuICAgICAqIEByZXR1cm4ge3ZlY3Rvcn0gQSBuZXcgdmVjdG9yIHJvdGF0ZWQgYWJvdXQgdGhlIHBvaW50XG4gICAgICovXG4gICAgVmVjdG9yLnJvdGF0ZUFib3V0ID0gZnVuY3Rpb24odmVjdG9yLCBhbmdsZSwgcG9pbnQsIG91dHB1dCkge1xuICAgICAgICB2YXIgY29zID0gTWF0aC5jb3MoYW5nbGUpLCBzaW4gPSBNYXRoLnNpbihhbmdsZSk7XG4gICAgICAgIGlmICghb3V0cHV0KSBvdXRwdXQgPSB7fTtcbiAgICAgICAgdmFyIHggPSBwb2ludC54ICsgKCh2ZWN0b3IueCAtIHBvaW50LngpICogY29zIC0gKHZlY3Rvci55IC0gcG9pbnQueSkgKiBzaW4pO1xuICAgICAgICBvdXRwdXQueSA9IHBvaW50LnkgKyAoKHZlY3Rvci54IC0gcG9pbnQueCkgKiBzaW4gKyAodmVjdG9yLnkgLSBwb2ludC55KSAqIGNvcyk7XG4gICAgICAgIG91dHB1dC54ID0geDtcbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogTm9ybWFsaXNlcyBhIHZlY3RvciAoc3VjaCB0aGF0IGl0cyBtYWduaXR1ZGUgaXMgYDFgKS5cbiAgICAgKiBAbWV0aG9kIG5vcm1hbGlzZVxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JcbiAgICAgKiBAcmV0dXJuIHt2ZWN0b3J9IEEgbmV3IHZlY3RvciBub3JtYWxpc2VkXG4gICAgICovXG4gICAgVmVjdG9yLm5vcm1hbGlzZSA9IGZ1bmN0aW9uKHZlY3Rvcikge1xuICAgICAgICB2YXIgbWFnbml0dWRlID0gVmVjdG9yLm1hZ25pdHVkZSh2ZWN0b3IpO1xuICAgICAgICBpZiAobWFnbml0dWRlID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIHsgeDogMCwgeTogMCB9O1xuICAgICAgICByZXR1cm4geyB4OiB2ZWN0b3IueCAvIG1hZ25pdHVkZSwgeTogdmVjdG9yLnkgLyBtYWduaXR1ZGUgfTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZG90LXByb2R1Y3Qgb2YgdHdvIHZlY3RvcnMuXG4gICAgICogQG1ldGhvZCBkb3RcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yQVxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JCXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgZG90IHByb2R1Y3Qgb2YgdGhlIHR3byB2ZWN0b3JzXG4gICAgICovXG4gICAgVmVjdG9yLmRvdCA9IGZ1bmN0aW9uKHZlY3RvckEsIHZlY3RvckIpIHtcbiAgICAgICAgcmV0dXJuICh2ZWN0b3JBLnggKiB2ZWN0b3JCLngpICsgKHZlY3RvckEueSAqIHZlY3RvckIueSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGNyb3NzLXByb2R1Y3Qgb2YgdHdvIHZlY3RvcnMuXG4gICAgICogQG1ldGhvZCBjcm9zc1xuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JBXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvckJcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBjcm9zcyBwcm9kdWN0IG9mIHRoZSB0d28gdmVjdG9yc1xuICAgICAqL1xuICAgIFZlY3Rvci5jcm9zcyA9IGZ1bmN0aW9uKHZlY3RvckEsIHZlY3RvckIpIHtcbiAgICAgICAgcmV0dXJuICh2ZWN0b3JBLnggKiB2ZWN0b3JCLnkpIC0gKHZlY3RvckEueSAqIHZlY3RvckIueCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGNyb3NzLXByb2R1Y3Qgb2YgdGhyZWUgdmVjdG9ycy5cbiAgICAgKiBAbWV0aG9kIGNyb3NzM1xuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JBXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvckJcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yQ1xuICAgICAqIEByZXR1cm4ge251bWJlcn0gVGhlIGNyb3NzIHByb2R1Y3Qgb2YgdGhlIHRocmVlIHZlY3RvcnNcbiAgICAgKi9cbiAgICBWZWN0b3IuY3Jvc3MzID0gZnVuY3Rpb24odmVjdG9yQSwgdmVjdG9yQiwgdmVjdG9yQykge1xuICAgICAgICByZXR1cm4gKHZlY3RvckIueCAtIHZlY3RvckEueCkgKiAodmVjdG9yQy55IC0gdmVjdG9yQS55KSAtICh2ZWN0b3JCLnkgLSB2ZWN0b3JBLnkpICogKHZlY3RvckMueCAtIHZlY3RvckEueCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFkZHMgdGhlIHR3byB2ZWN0b3JzLlxuICAgICAqIEBtZXRob2QgYWRkXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvckFcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yQlxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSBbb3V0cHV0XVxuICAgICAqIEByZXR1cm4ge3ZlY3Rvcn0gQSBuZXcgdmVjdG9yIG9mIHZlY3RvckEgYW5kIHZlY3RvckIgYWRkZWRcbiAgICAgKi9cbiAgICBWZWN0b3IuYWRkID0gZnVuY3Rpb24odmVjdG9yQSwgdmVjdG9yQiwgb3V0cHV0KSB7XG4gICAgICAgIGlmICghb3V0cHV0KSBvdXRwdXQgPSB7fTtcbiAgICAgICAgb3V0cHV0LnggPSB2ZWN0b3JBLnggKyB2ZWN0b3JCLng7XG4gICAgICAgIG91dHB1dC55ID0gdmVjdG9yQS55ICsgdmVjdG9yQi55O1xuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTdWJ0cmFjdHMgdGhlIHR3byB2ZWN0b3JzLlxuICAgICAqIEBtZXRob2Qgc3ViXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvckFcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yQlxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSBbb3V0cHV0XVxuICAgICAqIEByZXR1cm4ge3ZlY3Rvcn0gQSBuZXcgdmVjdG9yIG9mIHZlY3RvckEgYW5kIHZlY3RvckIgc3VidHJhY3RlZFxuICAgICAqL1xuICAgIFZlY3Rvci5zdWIgPSBmdW5jdGlvbih2ZWN0b3JBLCB2ZWN0b3JCLCBvdXRwdXQpIHtcbiAgICAgICAgaWYgKCFvdXRwdXQpIG91dHB1dCA9IHt9O1xuICAgICAgICBvdXRwdXQueCA9IHZlY3RvckEueCAtIHZlY3RvckIueDtcbiAgICAgICAgb3V0cHV0LnkgPSB2ZWN0b3JBLnkgLSB2ZWN0b3JCLnk7XG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIE11bHRpcGxpZXMgYSB2ZWN0b3IgYW5kIGEgc2NhbGFyLlxuICAgICAqIEBtZXRob2QgbXVsdFxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2NhbGFyXG4gICAgICogQHJldHVybiB7dmVjdG9yfSBBIG5ldyB2ZWN0b3IgbXVsdGlwbGllZCBieSBzY2FsYXJcbiAgICAgKi9cbiAgICBWZWN0b3IubXVsdCA9IGZ1bmN0aW9uKHZlY3Rvciwgc2NhbGFyKSB7XG4gICAgICAgIHJldHVybiB7IHg6IHZlY3Rvci54ICogc2NhbGFyLCB5OiB2ZWN0b3IueSAqIHNjYWxhciB9O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEaXZpZGVzIGEgdmVjdG9yIGFuZCBhIHNjYWxhci5cbiAgICAgKiBAbWV0aG9kIGRpdlxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2NhbGFyXG4gICAgICogQHJldHVybiB7dmVjdG9yfSBBIG5ldyB2ZWN0b3IgZGl2aWRlZCBieSBzY2FsYXJcbiAgICAgKi9cbiAgICBWZWN0b3IuZGl2ID0gZnVuY3Rpb24odmVjdG9yLCBzY2FsYXIpIHtcbiAgICAgICAgcmV0dXJuIHsgeDogdmVjdG9yLnggLyBzY2FsYXIsIHk6IHZlY3Rvci55IC8gc2NhbGFyIH07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHBlcnBlbmRpY3VsYXIgdmVjdG9yLiBTZXQgYG5lZ2F0ZWAgdG8gdHJ1ZSBmb3IgdGhlIHBlcnBlbmRpY3VsYXIgaW4gdGhlIG9wcG9zaXRlIGRpcmVjdGlvbi5cbiAgICAgKiBAbWV0aG9kIHBlcnBcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yXG4gICAgICogQHBhcmFtIHtib29sfSBbbmVnYXRlPWZhbHNlXVxuICAgICAqIEByZXR1cm4ge3ZlY3Rvcn0gVGhlIHBlcnBlbmRpY3VsYXIgdmVjdG9yXG4gICAgICovXG4gICAgVmVjdG9yLnBlcnAgPSBmdW5jdGlvbih2ZWN0b3IsIG5lZ2F0ZSkge1xuICAgICAgICBuZWdhdGUgPSBuZWdhdGUgPT09IHRydWUgPyAtMSA6IDE7XG4gICAgICAgIHJldHVybiB7IHg6IG5lZ2F0ZSAqIC12ZWN0b3IueSwgeTogbmVnYXRlICogdmVjdG9yLnggfTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogTmVnYXRlcyBib3RoIGNvbXBvbmVudHMgb2YgYSB2ZWN0b3Igc3VjaCB0aGF0IGl0IHBvaW50cyBpbiB0aGUgb3Bwb3NpdGUgZGlyZWN0aW9uLlxuICAgICAqIEBtZXRob2QgbmVnXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvclxuICAgICAqIEByZXR1cm4ge3ZlY3Rvcn0gVGhlIG5lZ2F0ZWQgdmVjdG9yXG4gICAgICovXG4gICAgVmVjdG9yLm5lZyA9IGZ1bmN0aW9uKHZlY3Rvcikge1xuICAgICAgICByZXR1cm4geyB4OiAtdmVjdG9yLngsIHk6IC12ZWN0b3IueSB9O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBhbmdsZSBpbiByYWRpYW5zIGJldHdlZW4gdGhlIHR3byB2ZWN0b3JzIHJlbGF0aXZlIHRvIHRoZSB4LWF4aXMuXG4gICAgICogQG1ldGhvZCBhbmdsZVxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JBXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvckJcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBhbmdsZSBpbiByYWRpYW5zXG4gICAgICovXG4gICAgVmVjdG9yLmFuZ2xlID0gZnVuY3Rpb24odmVjdG9yQSwgdmVjdG9yQikge1xuICAgICAgICByZXR1cm4gTWF0aC5hdGFuMih2ZWN0b3JCLnkgLSB2ZWN0b3JBLnksIHZlY3RvckIueCAtIHZlY3RvckEueCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRlbXBvcmFyeSB2ZWN0b3IgcG9vbCAobm90IHRocmVhZC1zYWZlKS5cbiAgICAgKiBAcHJvcGVydHkgX3RlbXBcbiAgICAgKiBAdHlwZSB7dmVjdG9yW119XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBWZWN0b3IuX3RlbXAgPSBbVmVjdG9yLmNyZWF0ZSgpLCBWZWN0b3IuY3JlYXRlKCksIFxuICAgICAgICAgICAgICAgICAgICBWZWN0b3IuY3JlYXRlKCksIFZlY3Rvci5jcmVhdGUoKSwgXG4gICAgICAgICAgICAgICAgICAgIFZlY3Rvci5jcmVhdGUoKSwgVmVjdG9yLmNyZWF0ZSgpXTtcblxufSkoKTtcbn0se31dLDI3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuKiBUaGUgYE1hdHRlci5WZXJ0aWNlc2AgbW9kdWxlIGNvbnRhaW5zIG1ldGhvZHMgZm9yIGNyZWF0aW5nIGFuZCBtYW5pcHVsYXRpbmcgc2V0cyBvZiB2ZXJ0aWNlcy5cbiogQSBzZXQgb2YgdmVydGljZXMgaXMgYW4gYXJyYXkgb2YgYE1hdHRlci5WZWN0b3JgIHdpdGggYWRkaXRpb25hbCBpbmRleGluZyBwcm9wZXJ0aWVzIGluc2VydGVkIGJ5IGBWZXJ0aWNlcy5jcmVhdGVgLlxuKiBBIGBNYXR0ZXIuQm9keWAgbWFpbnRhaW5zIGEgc2V0IG9mIHZlcnRpY2VzIHRvIHJlcHJlc2VudCB0aGUgc2hhcGUgb2YgdGhlIG9iamVjdCAoaXRzIGNvbnZleCBodWxsKS5cbipcbiogU2VlIHRoZSBpbmNsdWRlZCB1c2FnZSBbZXhhbXBsZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9saWFicnUvbWF0dGVyLWpzL3RyZWUvbWFzdGVyL2V4YW1wbGVzKS5cbipcbiogQGNsYXNzIFZlcnRpY2VzXG4qL1xuXG52YXIgVmVydGljZXMgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBWZXJ0aWNlcztcblxudmFyIFZlY3RvciA9IHJlcXVpcmUoJy4uL2dlb21ldHJ5L1ZlY3RvcicpO1xudmFyIENvbW1vbiA9IHJlcXVpcmUoJy4uL2NvcmUvQ29tbW9uJyk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgc2V0IG9mIGBNYXR0ZXIuQm9keWAgY29tcGF0aWJsZSB2ZXJ0aWNlcy5cbiAgICAgKiBUaGUgYHBvaW50c2AgYXJndW1lbnQgYWNjZXB0cyBhbiBhcnJheSBvZiBgTWF0dGVyLlZlY3RvcmAgcG9pbnRzIG9yaWVudGF0ZWQgYXJvdW5kIHRoZSBvcmlnaW4gYCgwLCAwKWAsIGZvciBleGFtcGxlOlxuICAgICAqXG4gICAgICogICAgIFt7IHg6IDAsIHk6IDAgfSwgeyB4OiAyNSwgeTogNTAgfSwgeyB4OiA1MCwgeTogMCB9XVxuICAgICAqXG4gICAgICogVGhlIGBWZXJ0aWNlcy5jcmVhdGVgIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5IG9mIHZlcnRpY2VzLCB3aGljaCBhcmUgc2ltaWxhciB0byBNYXR0ZXIuVmVjdG9yIG9iamVjdHMsXG4gICAgICogYnV0IHdpdGggc29tZSBhZGRpdGlvbmFsIHJlZmVyZW5jZXMgcmVxdWlyZWQgZm9yIGVmZmljaWVudCBjb2xsaXNpb24gZGV0ZWN0aW9uIHJvdXRpbmVzLlxuICAgICAqXG4gICAgICogTm90ZSB0aGF0IHRoZSBgYm9keWAgYXJndW1lbnQgaXMgbm90IG9wdGlvbmFsLCBhIGBNYXR0ZXIuQm9keWAgcmVmZXJlbmNlIG11c3QgYmUgcHJvdmlkZWQuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGNyZWF0ZVxuICAgICAqIEBwYXJhbSB7dmVjdG9yW119IHBvaW50c1xuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqL1xuICAgIFZlcnRpY2VzLmNyZWF0ZSA9IGZ1bmN0aW9uKHBvaW50cywgYm9keSkge1xuICAgICAgICB2YXIgdmVydGljZXMgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHBvaW50ID0gcG9pbnRzW2ldLFxuICAgICAgICAgICAgICAgIHZlcnRleCA9IHtcbiAgICAgICAgICAgICAgICAgICAgeDogcG9pbnQueCxcbiAgICAgICAgICAgICAgICAgICAgeTogcG9pbnQueSxcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGksXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IGJvZHksXG4gICAgICAgICAgICAgICAgICAgIGlzSW50ZXJuYWw6IGZhbHNlXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmVydGljZXMucHVzaCh2ZXJ0ZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZlcnRpY2VzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYSBzdHJpbmcgY29udGFpbmluZyBvcmRlcmVkIHggeSBwYWlycyBzZXBhcmF0ZWQgYnkgc3BhY2VzIChhbmQgb3B0aW9uYWxseSBjb21tYXMpLCBcbiAgICAgKiBpbnRvIGEgYE1hdHRlci5WZXJ0aWNlc2Agb2JqZWN0IGZvciB0aGUgZ2l2ZW4gYE1hdHRlci5Cb2R5YC5cbiAgICAgKiBGb3IgcGFyc2luZyBTVkcgcGF0aHMsIHNlZSBgU3ZnLnBhdGhUb1ZlcnRpY2VzYC5cbiAgICAgKiBAbWV0aG9kIGZyb21QYXRoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGhcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlcbiAgICAgKiBAcmV0dXJuIHt2ZXJ0aWNlc30gdmVydGljZXNcbiAgICAgKi9cbiAgICBWZXJ0aWNlcy5mcm9tUGF0aCA9IGZ1bmN0aW9uKHBhdGgsIGJvZHkpIHtcbiAgICAgICAgdmFyIHBhdGhQYXR0ZXJuID0gL0w/XFxzKihbXFwtXFxkXFwuZV0rKVtcXHMsXSooW1xcLVxcZFxcLmVdKykqL2lnLFxuICAgICAgICAgICAgcG9pbnRzID0gW107XG5cbiAgICAgICAgcGF0aC5yZXBsYWNlKHBhdGhQYXR0ZXJuLCBmdW5jdGlvbihtYXRjaCwgeCwgeSkge1xuICAgICAgICAgICAgcG9pbnRzLnB1c2goeyB4OiBwYXJzZUZsb2F0KHgpLCB5OiBwYXJzZUZsb2F0KHkpIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gVmVydGljZXMuY3JlYXRlKHBvaW50cywgYm9keSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGNlbnRyZSAoY2VudHJvaWQpIG9mIHRoZSBzZXQgb2YgdmVydGljZXMuXG4gICAgICogQG1ldGhvZCBjZW50cmVcbiAgICAgKiBAcGFyYW0ge3ZlcnRpY2VzfSB2ZXJ0aWNlc1xuICAgICAqIEByZXR1cm4ge3ZlY3Rvcn0gVGhlIGNlbnRyZSBwb2ludFxuICAgICAqL1xuICAgIFZlcnRpY2VzLmNlbnRyZSA9IGZ1bmN0aW9uKHZlcnRpY2VzKSB7XG4gICAgICAgIHZhciBhcmVhID0gVmVydGljZXMuYXJlYSh2ZXJ0aWNlcywgdHJ1ZSksXG4gICAgICAgICAgICBjZW50cmUgPSB7IHg6IDAsIHk6IDAgfSxcbiAgICAgICAgICAgIGNyb3NzLFxuICAgICAgICAgICAgdGVtcCxcbiAgICAgICAgICAgIGo7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZXJ0aWNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaiA9IChpICsgMSkgJSB2ZXJ0aWNlcy5sZW5ndGg7XG4gICAgICAgICAgICBjcm9zcyA9IFZlY3Rvci5jcm9zcyh2ZXJ0aWNlc1tpXSwgdmVydGljZXNbal0pO1xuICAgICAgICAgICAgdGVtcCA9IFZlY3Rvci5tdWx0KFZlY3Rvci5hZGQodmVydGljZXNbaV0sIHZlcnRpY2VzW2pdKSwgY3Jvc3MpO1xuICAgICAgICAgICAgY2VudHJlID0gVmVjdG9yLmFkZChjZW50cmUsIHRlbXApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFZlY3Rvci5kaXYoY2VudHJlLCA2ICogYXJlYSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGF2ZXJhZ2UgKG1lYW4pIG9mIHRoZSBzZXQgb2YgdmVydGljZXMuXG4gICAgICogQG1ldGhvZCBtZWFuXG4gICAgICogQHBhcmFtIHt2ZXJ0aWNlc30gdmVydGljZXNcbiAgICAgKiBAcmV0dXJuIHt2ZWN0b3J9IFRoZSBhdmVyYWdlIHBvaW50XG4gICAgICovXG4gICAgVmVydGljZXMubWVhbiA9IGZ1bmN0aW9uKHZlcnRpY2VzKSB7XG4gICAgICAgIHZhciBhdmVyYWdlID0geyB4OiAwLCB5OiAwIH07XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZXJ0aWNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXZlcmFnZS54ICs9IHZlcnRpY2VzW2ldLng7XG4gICAgICAgICAgICBhdmVyYWdlLnkgKz0gdmVydGljZXNbaV0ueTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBWZWN0b3IuZGl2KGF2ZXJhZ2UsIHZlcnRpY2VzLmxlbmd0aCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGFyZWEgb2YgdGhlIHNldCBvZiB2ZXJ0aWNlcy5cbiAgICAgKiBAbWV0aG9kIGFyZWFcbiAgICAgKiBAcGFyYW0ge3ZlcnRpY2VzfSB2ZXJ0aWNlc1xuICAgICAqIEBwYXJhbSB7Ym9vbH0gc2lnbmVkXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgYXJlYVxuICAgICAqL1xuICAgIFZlcnRpY2VzLmFyZWEgPSBmdW5jdGlvbih2ZXJ0aWNlcywgc2lnbmVkKSB7XG4gICAgICAgIHZhciBhcmVhID0gMCxcbiAgICAgICAgICAgIGogPSB2ZXJ0aWNlcy5sZW5ndGggLSAxO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmVydGljZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZWEgKz0gKHZlcnRpY2VzW2pdLnggLSB2ZXJ0aWNlc1tpXS54KSAqICh2ZXJ0aWNlc1tqXS55ICsgdmVydGljZXNbaV0ueSk7XG4gICAgICAgICAgICBqID0gaTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaWduZWQpXG4gICAgICAgICAgICByZXR1cm4gYXJlYSAvIDI7XG5cbiAgICAgICAgcmV0dXJuIE1hdGguYWJzKGFyZWEpIC8gMjtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbW9tZW50IG9mIGluZXJ0aWEgKHNlY29uZCBtb21lbnQgb2YgYXJlYSkgb2YgdGhlIHNldCBvZiB2ZXJ0aWNlcyBnaXZlbiB0aGUgdG90YWwgbWFzcy5cbiAgICAgKiBAbWV0aG9kIGluZXJ0aWFcbiAgICAgKiBAcGFyYW0ge3ZlcnRpY2VzfSB2ZXJ0aWNlc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtYXNzXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgcG9seWdvbidzIG1vbWVudCBvZiBpbmVydGlhXG4gICAgICovXG4gICAgVmVydGljZXMuaW5lcnRpYSA9IGZ1bmN0aW9uKHZlcnRpY2VzLCBtYXNzKSB7XG4gICAgICAgIHZhciBudW1lcmF0b3IgPSAwLFxuICAgICAgICAgICAgZGVub21pbmF0b3IgPSAwLFxuICAgICAgICAgICAgdiA9IHZlcnRpY2VzLFxuICAgICAgICAgICAgY3Jvc3MsXG4gICAgICAgICAgICBqO1xuXG4gICAgICAgIC8vIGZpbmQgdGhlIHBvbHlnb24ncyBtb21lbnQgb2YgaW5lcnRpYSwgdXNpbmcgc2Vjb25kIG1vbWVudCBvZiBhcmVhXG4gICAgICAgIC8vIGh0dHA6Ly93d3cucGh5c2ljc2ZvcnVtcy5jb20vc2hvd3RocmVhZC5waHA/dD0yNTI5M1xuICAgICAgICBmb3IgKHZhciBuID0gMDsgbiA8IHYubGVuZ3RoOyBuKyspIHtcbiAgICAgICAgICAgIGogPSAobiArIDEpICUgdi5sZW5ndGg7XG4gICAgICAgICAgICBjcm9zcyA9IE1hdGguYWJzKFZlY3Rvci5jcm9zcyh2W2pdLCB2W25dKSk7XG4gICAgICAgICAgICBudW1lcmF0b3IgKz0gY3Jvc3MgKiAoVmVjdG9yLmRvdCh2W2pdLCB2W2pdKSArIFZlY3Rvci5kb3QodltqXSwgdltuXSkgKyBWZWN0b3IuZG90KHZbbl0sIHZbbl0pKTtcbiAgICAgICAgICAgIGRlbm9taW5hdG9yICs9IGNyb3NzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIChtYXNzIC8gNikgKiAobnVtZXJhdG9yIC8gZGVub21pbmF0b3IpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2xhdGVzIHRoZSBzZXQgb2YgdmVydGljZXMgaW4tcGxhY2UuXG4gICAgICogQG1ldGhvZCB0cmFuc2xhdGVcbiAgICAgKiBAcGFyYW0ge3ZlcnRpY2VzfSB2ZXJ0aWNlc1xuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2NhbGFyXG4gICAgICovXG4gICAgVmVydGljZXMudHJhbnNsYXRlID0gZnVuY3Rpb24odmVydGljZXMsIHZlY3Rvciwgc2NhbGFyKSB7XG4gICAgICAgIHZhciBpO1xuICAgICAgICBpZiAoc2NhbGFyKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdmVydGljZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2ZXJ0aWNlc1tpXS54ICs9IHZlY3Rvci54ICogc2NhbGFyO1xuICAgICAgICAgICAgICAgIHZlcnRpY2VzW2ldLnkgKz0gdmVjdG9yLnkgKiBzY2FsYXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdmVydGljZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2ZXJ0aWNlc1tpXS54ICs9IHZlY3Rvci54O1xuICAgICAgICAgICAgICAgIHZlcnRpY2VzW2ldLnkgKz0gdmVjdG9yLnk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmVydGljZXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJvdGF0ZXMgdGhlIHNldCBvZiB2ZXJ0aWNlcyBpbi1wbGFjZS5cbiAgICAgKiBAbWV0aG9kIHJvdGF0ZVxuICAgICAqIEBwYXJhbSB7dmVydGljZXN9IHZlcnRpY2VzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFuZ2xlXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHBvaW50XG4gICAgICovXG4gICAgVmVydGljZXMucm90YXRlID0gZnVuY3Rpb24odmVydGljZXMsIGFuZ2xlLCBwb2ludCkge1xuICAgICAgICBpZiAoYW5nbGUgPT09IDApXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgdmFyIGNvcyA9IE1hdGguY29zKGFuZ2xlKSxcbiAgICAgICAgICAgIHNpbiA9IE1hdGguc2luKGFuZ2xlKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZlcnRpY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgdmVydGljZSA9IHZlcnRpY2VzW2ldLFxuICAgICAgICAgICAgICAgIGR4ID0gdmVydGljZS54IC0gcG9pbnQueCxcbiAgICAgICAgICAgICAgICBkeSA9IHZlcnRpY2UueSAtIHBvaW50Lnk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB2ZXJ0aWNlLnggPSBwb2ludC54ICsgKGR4ICogY29zIC0gZHkgKiBzaW4pO1xuICAgICAgICAgICAgdmVydGljZS55ID0gcG9pbnQueSArIChkeCAqIHNpbiArIGR5ICogY29zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2ZXJ0aWNlcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGBwb2ludGAgaXMgaW5zaWRlIHRoZSBzZXQgb2YgYHZlcnRpY2VzYC5cbiAgICAgKiBAbWV0aG9kIGNvbnRhaW5zXG4gICAgICogQHBhcmFtIHt2ZXJ0aWNlc30gdmVydGljZXNcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gcG9pbnRcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSB2ZXJ0aWNlcyBjb250YWlucyBwb2ludCwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgICovXG4gICAgVmVydGljZXMuY29udGFpbnMgPSBmdW5jdGlvbih2ZXJ0aWNlcywgcG9pbnQpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZXJ0aWNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHZlcnRpY2UgPSB2ZXJ0aWNlc1tpXSxcbiAgICAgICAgICAgICAgICBuZXh0VmVydGljZSA9IHZlcnRpY2VzWyhpICsgMSkgJSB2ZXJ0aWNlcy5sZW5ndGhdO1xuICAgICAgICAgICAgaWYgKChwb2ludC54IC0gdmVydGljZS54KSAqIChuZXh0VmVydGljZS55IC0gdmVydGljZS55KSArIChwb2ludC55IC0gdmVydGljZS55KSAqICh2ZXJ0aWNlLnggLSBuZXh0VmVydGljZS54KSA+IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2NhbGVzIHRoZSB2ZXJ0aWNlcyBmcm9tIGEgcG9pbnQgKGRlZmF1bHQgaXMgY2VudHJlKSBpbi1wbGFjZS5cbiAgICAgKiBAbWV0aG9kIHNjYWxlXG4gICAgICogQHBhcmFtIHt2ZXJ0aWNlc30gdmVydGljZXNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2NhbGVYXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNjYWxlWVxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSBwb2ludFxuICAgICAqL1xuICAgIFZlcnRpY2VzLnNjYWxlID0gZnVuY3Rpb24odmVydGljZXMsIHNjYWxlWCwgc2NhbGVZLCBwb2ludCkge1xuICAgICAgICBpZiAoc2NhbGVYID09PSAxICYmIHNjYWxlWSA9PT0gMSlcbiAgICAgICAgICAgIHJldHVybiB2ZXJ0aWNlcztcblxuICAgICAgICBwb2ludCA9IHBvaW50IHx8IFZlcnRpY2VzLmNlbnRyZSh2ZXJ0aWNlcyk7XG5cbiAgICAgICAgdmFyIHZlcnRleCxcbiAgICAgICAgICAgIGRlbHRhO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmVydGljZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZlcnRleCA9IHZlcnRpY2VzW2ldO1xuICAgICAgICAgICAgZGVsdGEgPSBWZWN0b3Iuc3ViKHZlcnRleCwgcG9pbnQpO1xuICAgICAgICAgICAgdmVydGljZXNbaV0ueCA9IHBvaW50LnggKyBkZWx0YS54ICogc2NhbGVYO1xuICAgICAgICAgICAgdmVydGljZXNbaV0ueSA9IHBvaW50LnkgKyBkZWx0YS55ICogc2NhbGVZO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZlcnRpY2VzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDaGFtZmVycyBhIHNldCBvZiB2ZXJ0aWNlcyBieSBnaXZpbmcgdGhlbSByb3VuZGVkIGNvcm5lcnMsIHJldHVybnMgYSBuZXcgc2V0IG9mIHZlcnRpY2VzLlxuICAgICAqIFRoZSByYWRpdXMgcGFyYW1ldGVyIGlzIGEgc2luZ2xlIG51bWJlciBvciBhbiBhcnJheSB0byBzcGVjaWZ5IHRoZSByYWRpdXMgZm9yIGVhY2ggdmVydGV4LlxuICAgICAqIEBtZXRob2QgY2hhbWZlclxuICAgICAqIEBwYXJhbSB7dmVydGljZXN9IHZlcnRpY2VzXG4gICAgICogQHBhcmFtIHtudW1iZXJbXX0gcmFkaXVzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHF1YWxpdHlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcXVhbGl0eU1pblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBxdWFsaXR5TWF4XG4gICAgICovXG4gICAgVmVydGljZXMuY2hhbWZlciA9IGZ1bmN0aW9uKHZlcnRpY2VzLCByYWRpdXMsIHF1YWxpdHksIHF1YWxpdHlNaW4sIHF1YWxpdHlNYXgpIHtcbiAgICAgICAgcmFkaXVzID0gcmFkaXVzIHx8IFs4XTtcblxuICAgICAgICBpZiAoIXJhZGl1cy5sZW5ndGgpXG4gICAgICAgICAgICByYWRpdXMgPSBbcmFkaXVzXTtcblxuICAgICAgICAvLyBxdWFsaXR5IGRlZmF1bHRzIHRvIC0xLCB3aGljaCBpcyBhdXRvXG4gICAgICAgIHF1YWxpdHkgPSAodHlwZW9mIHF1YWxpdHkgIT09ICd1bmRlZmluZWQnKSA/IHF1YWxpdHkgOiAtMTtcbiAgICAgICAgcXVhbGl0eU1pbiA9IHF1YWxpdHlNaW4gfHwgMjtcbiAgICAgICAgcXVhbGl0eU1heCA9IHF1YWxpdHlNYXggfHwgMTQ7XG5cbiAgICAgICAgdmFyIG5ld1ZlcnRpY2VzID0gW107XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZXJ0aWNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHByZXZWZXJ0ZXggPSB2ZXJ0aWNlc1tpIC0gMSA+PSAwID8gaSAtIDEgOiB2ZXJ0aWNlcy5sZW5ndGggLSAxXSxcbiAgICAgICAgICAgICAgICB2ZXJ0ZXggPSB2ZXJ0aWNlc1tpXSxcbiAgICAgICAgICAgICAgICBuZXh0VmVydGV4ID0gdmVydGljZXNbKGkgKyAxKSAlIHZlcnRpY2VzLmxlbmd0aF0sXG4gICAgICAgICAgICAgICAgY3VycmVudFJhZGl1cyA9IHJhZGl1c1tpIDwgcmFkaXVzLmxlbmd0aCA/IGkgOiByYWRpdXMubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgICAgIGlmIChjdXJyZW50UmFkaXVzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgbmV3VmVydGljZXMucHVzaCh2ZXJ0ZXgpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcHJldk5vcm1hbCA9IFZlY3Rvci5ub3JtYWxpc2UoeyBcbiAgICAgICAgICAgICAgICB4OiB2ZXJ0ZXgueSAtIHByZXZWZXJ0ZXgueSwgXG4gICAgICAgICAgICAgICAgeTogcHJldlZlcnRleC54IC0gdmVydGV4LnhcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB2YXIgbmV4dE5vcm1hbCA9IFZlY3Rvci5ub3JtYWxpc2UoeyBcbiAgICAgICAgICAgICAgICB4OiBuZXh0VmVydGV4LnkgLSB2ZXJ0ZXgueSwgXG4gICAgICAgICAgICAgICAgeTogdmVydGV4LnggLSBuZXh0VmVydGV4LnhcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB2YXIgZGlhZ29uYWxSYWRpdXMgPSBNYXRoLnNxcnQoMiAqIE1hdGgucG93KGN1cnJlbnRSYWRpdXMsIDIpKSxcbiAgICAgICAgICAgICAgICByYWRpdXNWZWN0b3IgPSBWZWN0b3IubXVsdChDb21tb24uY2xvbmUocHJldk5vcm1hbCksIGN1cnJlbnRSYWRpdXMpLFxuICAgICAgICAgICAgICAgIG1pZE5vcm1hbCA9IFZlY3Rvci5ub3JtYWxpc2UoVmVjdG9yLm11bHQoVmVjdG9yLmFkZChwcmV2Tm9ybWFsLCBuZXh0Tm9ybWFsKSwgMC41KSksXG4gICAgICAgICAgICAgICAgc2NhbGVkVmVydGV4ID0gVmVjdG9yLnN1Yih2ZXJ0ZXgsIFZlY3Rvci5tdWx0KG1pZE5vcm1hbCwgZGlhZ29uYWxSYWRpdXMpKTtcblxuICAgICAgICAgICAgdmFyIHByZWNpc2lvbiA9IHF1YWxpdHk7XG5cbiAgICAgICAgICAgIGlmIChxdWFsaXR5ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIC8vIGF1dG9tYXRpY2FsbHkgZGVjaWRlIHByZWNpc2lvblxuICAgICAgICAgICAgICAgIHByZWNpc2lvbiA9IE1hdGgucG93KGN1cnJlbnRSYWRpdXMsIDAuMzIpICogMS43NTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcHJlY2lzaW9uID0gQ29tbW9uLmNsYW1wKHByZWNpc2lvbiwgcXVhbGl0eU1pbiwgcXVhbGl0eU1heCk7XG5cbiAgICAgICAgICAgIC8vIHVzZSBhbiBldmVuIHZhbHVlIGZvciBwcmVjaXNpb24sIG1vcmUgbGlrZWx5IHRvIHJlZHVjZSBheGVzIGJ5IHVzaW5nIHN5bW1ldHJ5XG4gICAgICAgICAgICBpZiAocHJlY2lzaW9uICUgMiA9PT0gMSlcbiAgICAgICAgICAgICAgICBwcmVjaXNpb24gKz0gMTtcblxuICAgICAgICAgICAgdmFyIGFscGhhID0gTWF0aC5hY29zKFZlY3Rvci5kb3QocHJldk5vcm1hbCwgbmV4dE5vcm1hbCkpLFxuICAgICAgICAgICAgICAgIHRoZXRhID0gYWxwaGEgLyBwcmVjaXNpb247XG5cbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgcHJlY2lzaW9uOyBqKyspIHtcbiAgICAgICAgICAgICAgICBuZXdWZXJ0aWNlcy5wdXNoKFZlY3Rvci5hZGQoVmVjdG9yLnJvdGF0ZShyYWRpdXNWZWN0b3IsIHRoZXRhICogaiksIHNjYWxlZFZlcnRleCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ld1ZlcnRpY2VzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTb3J0cyB0aGUgaW5wdXQgdmVydGljZXMgaW50byBjbG9ja3dpc2Ugb3JkZXIgaW4gcGxhY2UuXG4gICAgICogQG1ldGhvZCBjbG9ja3dpc2VTb3J0XG4gICAgICogQHBhcmFtIHt2ZXJ0aWNlc30gdmVydGljZXNcbiAgICAgKiBAcmV0dXJuIHt2ZXJ0aWNlc30gdmVydGljZXNcbiAgICAgKi9cbiAgICBWZXJ0aWNlcy5jbG9ja3dpc2VTb3J0ID0gZnVuY3Rpb24odmVydGljZXMpIHtcbiAgICAgICAgdmFyIGNlbnRyZSA9IFZlcnRpY2VzLm1lYW4odmVydGljZXMpO1xuXG4gICAgICAgIHZlcnRpY2VzLnNvcnQoZnVuY3Rpb24odmVydGV4QSwgdmVydGV4Qikge1xuICAgICAgICAgICAgcmV0dXJuIFZlY3Rvci5hbmdsZShjZW50cmUsIHZlcnRleEEpIC0gVmVjdG9yLmFuZ2xlKGNlbnRyZSwgdmVydGV4Qik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB2ZXJ0aWNlcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSB2ZXJ0aWNlcyBmb3JtIGEgY29udmV4IHNoYXBlICh2ZXJ0aWNlcyBtdXN0IGJlIGluIGNsb2Nrd2lzZSBvcmRlcikuXG4gICAgICogQG1ldGhvZCBpc0NvbnZleFxuICAgICAqIEBwYXJhbSB7dmVydGljZXN9IHZlcnRpY2VzXG4gICAgICogQHJldHVybiB7Ym9vbH0gYHRydWVgIGlmIHRoZSBgdmVydGljZXNgIGFyZSBjb252ZXgsIGBmYWxzZWAgaWYgbm90IChvciBgbnVsbGAgaWYgbm90IGNvbXB1dGFibGUpLlxuICAgICAqL1xuICAgIFZlcnRpY2VzLmlzQ29udmV4ID0gZnVuY3Rpb24odmVydGljZXMpIHtcbiAgICAgICAgLy8gaHR0cDovL3BhdWxib3Vya2UubmV0L2dlb21ldHJ5L3BvbHlnb25tZXNoL1xuXG4gICAgICAgIHZhciBmbGFnID0gMCxcbiAgICAgICAgICAgIG4gPSB2ZXJ0aWNlcy5sZW5ndGgsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgaixcbiAgICAgICAgICAgIGssXG4gICAgICAgICAgICB6O1xuXG4gICAgICAgIGlmIChuIDwgMylcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIGogPSAoaSArIDEpICUgbjtcbiAgICAgICAgICAgIGsgPSAoaSArIDIpICUgbjtcbiAgICAgICAgICAgIHogPSAodmVydGljZXNbal0ueCAtIHZlcnRpY2VzW2ldLngpICogKHZlcnRpY2VzW2tdLnkgLSB2ZXJ0aWNlc1tqXS55KTtcbiAgICAgICAgICAgIHogLT0gKHZlcnRpY2VzW2pdLnkgLSB2ZXJ0aWNlc1tpXS55KSAqICh2ZXJ0aWNlc1trXS54IC0gdmVydGljZXNbal0ueCk7XG5cbiAgICAgICAgICAgIGlmICh6IDwgMCkge1xuICAgICAgICAgICAgICAgIGZsYWcgfD0gMTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoeiA+IDApIHtcbiAgICAgICAgICAgICAgICBmbGFnIHw9IDI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChmbGFnID09PSAzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZsYWcgIT09IDApe1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjb252ZXggaHVsbCBvZiB0aGUgaW5wdXQgdmVydGljZXMgYXMgYSBuZXcgYXJyYXkgb2YgcG9pbnRzLlxuICAgICAqIEBtZXRob2QgaHVsbFxuICAgICAqIEBwYXJhbSB7dmVydGljZXN9IHZlcnRpY2VzXG4gICAgICogQHJldHVybiBbdmVydGV4XSB2ZXJ0aWNlc1xuICAgICAqL1xuICAgIFZlcnRpY2VzLmh1bGwgPSBmdW5jdGlvbih2ZXJ0aWNlcykge1xuICAgICAgICAvLyBodHRwOi8vZW4ud2lraWJvb2tzLm9yZy93aWtpL0FsZ29yaXRobV9JbXBsZW1lbnRhdGlvbi9HZW9tZXRyeS9Db252ZXhfaHVsbC9Nb25vdG9uZV9jaGFpblxuXG4gICAgICAgIHZhciB1cHBlciA9IFtdLFxuICAgICAgICAgICAgbG93ZXIgPSBbXSwgXG4gICAgICAgICAgICB2ZXJ0ZXgsXG4gICAgICAgICAgICBpO1xuXG4gICAgICAgIC8vIHNvcnQgdmVydGljZXMgb24geC1heGlzICh5LWF4aXMgZm9yIHRpZXMpXG4gICAgICAgIHZlcnRpY2VzID0gdmVydGljZXMuc2xpY2UoMCk7XG4gICAgICAgIHZlcnRpY2VzLnNvcnQoZnVuY3Rpb24odmVydGV4QSwgdmVydGV4Qikge1xuICAgICAgICAgICAgdmFyIGR4ID0gdmVydGV4QS54IC0gdmVydGV4Qi54O1xuICAgICAgICAgICAgcmV0dXJuIGR4ICE9PSAwID8gZHggOiB2ZXJ0ZXhBLnkgLSB2ZXJ0ZXhCLnk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGJ1aWxkIGxvd2VyIGh1bGxcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHZlcnRpY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2ZXJ0ZXggPSB2ZXJ0aWNlc1tpXTtcblxuICAgICAgICAgICAgd2hpbGUgKGxvd2VyLmxlbmd0aCA+PSAyIFxuICAgICAgICAgICAgICAgICAgICYmIFZlY3Rvci5jcm9zczMobG93ZXJbbG93ZXIubGVuZ3RoIC0gMl0sIGxvd2VyW2xvd2VyLmxlbmd0aCAtIDFdLCB2ZXJ0ZXgpIDw9IDApIHtcbiAgICAgICAgICAgICAgICBsb3dlci5wb3AoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbG93ZXIucHVzaCh2ZXJ0ZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYnVpbGQgdXBwZXIgaHVsbFxuICAgICAgICBmb3IgKGkgPSB2ZXJ0aWNlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgdmVydGV4ID0gdmVydGljZXNbaV07XG5cbiAgICAgICAgICAgIHdoaWxlICh1cHBlci5sZW5ndGggPj0gMiBcbiAgICAgICAgICAgICAgICAgICAmJiBWZWN0b3IuY3Jvc3MzKHVwcGVyW3VwcGVyLmxlbmd0aCAtIDJdLCB1cHBlclt1cHBlci5sZW5ndGggLSAxXSwgdmVydGV4KSA8PSAwKSB7XG4gICAgICAgICAgICAgICAgdXBwZXIucG9wKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHVwcGVyLnB1c2godmVydGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNvbmNhdGVuYXRpb24gb2YgdGhlIGxvd2VyIGFuZCB1cHBlciBodWxscyBnaXZlcyB0aGUgY29udmV4IGh1bGxcbiAgICAgICAgLy8gb21pdCBsYXN0IHBvaW50cyBiZWNhdXNlIHRoZXkgYXJlIHJlcGVhdGVkIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIG90aGVyIGxpc3RcbiAgICAgICAgdXBwZXIucG9wKCk7XG4gICAgICAgIGxvd2VyLnBvcCgpO1xuXG4gICAgICAgIHJldHVybiB1cHBlci5jb25jYXQobG93ZXIpO1xuICAgIH07XG5cbn0pKCk7XG5cbn0se1wiLi4vY29yZS9Db21tb25cIjoxNCxcIi4uL2dlb21ldHJ5L1ZlY3RvclwiOjI2fV0sMjg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIE1hdHRlciA9IG1vZHVsZS5leHBvcnRzID0ge307XG5NYXR0ZXIudmVyc2lvbiA9ICdtYXN0ZXInO1xuXG5NYXR0ZXIuQm9keSA9IHJlcXVpcmUoJy4uL2JvZHkvQm9keScpO1xuTWF0dGVyLkNvbXBvc2l0ZSA9IHJlcXVpcmUoJy4uL2JvZHkvQ29tcG9zaXRlJyk7XG5NYXR0ZXIuV29ybGQgPSByZXF1aXJlKCcuLi9ib2R5L1dvcmxkJyk7XG5cbk1hdHRlci5Db250YWN0ID0gcmVxdWlyZSgnLi4vY29sbGlzaW9uL0NvbnRhY3QnKTtcbk1hdHRlci5EZXRlY3RvciA9IHJlcXVpcmUoJy4uL2NvbGxpc2lvbi9EZXRlY3RvcicpO1xuTWF0dGVyLkdyaWQgPSByZXF1aXJlKCcuLi9jb2xsaXNpb24vR3JpZCcpO1xuTWF0dGVyLlBhaXJzID0gcmVxdWlyZSgnLi4vY29sbGlzaW9uL1BhaXJzJyk7XG5NYXR0ZXIuUGFpciA9IHJlcXVpcmUoJy4uL2NvbGxpc2lvbi9QYWlyJyk7XG5NYXR0ZXIuUXVlcnkgPSByZXF1aXJlKCcuLi9jb2xsaXNpb24vUXVlcnknKTtcbk1hdHRlci5SZXNvbHZlciA9IHJlcXVpcmUoJy4uL2NvbGxpc2lvbi9SZXNvbHZlcicpO1xuTWF0dGVyLlNBVCA9IHJlcXVpcmUoJy4uL2NvbGxpc2lvbi9TQVQnKTtcblxuTWF0dGVyLkNvbnN0cmFpbnQgPSByZXF1aXJlKCcuLi9jb25zdHJhaW50L0NvbnN0cmFpbnQnKTtcbk1hdHRlci5Nb3VzZUNvbnN0cmFpbnQgPSByZXF1aXJlKCcuLi9jb25zdHJhaW50L01vdXNlQ29uc3RyYWludCcpO1xuXG5NYXR0ZXIuQ29tbW9uID0gcmVxdWlyZSgnLi4vY29yZS9Db21tb24nKTtcbk1hdHRlci5FbmdpbmUgPSByZXF1aXJlKCcuLi9jb3JlL0VuZ2luZScpO1xuTWF0dGVyLkV2ZW50cyA9IHJlcXVpcmUoJy4uL2NvcmUvRXZlbnRzJyk7XG5NYXR0ZXIuTW91c2UgPSByZXF1aXJlKCcuLi9jb3JlL01vdXNlJyk7XG5NYXR0ZXIuUnVubmVyID0gcmVxdWlyZSgnLi4vY29yZS9SdW5uZXInKTtcbk1hdHRlci5TbGVlcGluZyA9IHJlcXVpcmUoJy4uL2NvcmUvU2xlZXBpbmcnKTtcblxuXG5NYXR0ZXIuQm9kaWVzID0gcmVxdWlyZSgnLi4vZmFjdG9yeS9Cb2RpZXMnKTtcbk1hdHRlci5Db21wb3NpdGVzID0gcmVxdWlyZSgnLi4vZmFjdG9yeS9Db21wb3NpdGVzJyk7XG5cbk1hdHRlci5BeGVzID0gcmVxdWlyZSgnLi4vZ2VvbWV0cnkvQXhlcycpO1xuTWF0dGVyLkJvdW5kcyA9IHJlcXVpcmUoJy4uL2dlb21ldHJ5L0JvdW5kcycpO1xuTWF0dGVyLlN2ZyA9IHJlcXVpcmUoJy4uL2dlb21ldHJ5L1N2ZycpO1xuTWF0dGVyLlZlY3RvciA9IHJlcXVpcmUoJy4uL2dlb21ldHJ5L1ZlY3RvcicpO1xuTWF0dGVyLlZlcnRpY2VzID0gcmVxdWlyZSgnLi4vZ2VvbWV0cnkvVmVydGljZXMnKTtcblxuTWF0dGVyLlJlbmRlciA9IHJlcXVpcmUoJy4uL3JlbmRlci9SZW5kZXInKTtcbk1hdHRlci5SZW5kZXJQaXhpID0gcmVxdWlyZSgnLi4vcmVuZGVyL1JlbmRlclBpeGknKTtcblxuLy8gYWxpYXNlc1xuXG5NYXR0ZXIuV29ybGQuYWRkID0gTWF0dGVyLkNvbXBvc2l0ZS5hZGQ7XG5NYXR0ZXIuV29ybGQucmVtb3ZlID0gTWF0dGVyLkNvbXBvc2l0ZS5yZW1vdmU7XG5NYXR0ZXIuV29ybGQuYWRkQ29tcG9zaXRlID0gTWF0dGVyLkNvbXBvc2l0ZS5hZGRDb21wb3NpdGU7XG5NYXR0ZXIuV29ybGQuYWRkQm9keSA9IE1hdHRlci5Db21wb3NpdGUuYWRkQm9keTtcbk1hdHRlci5Xb3JsZC5hZGRDb25zdHJhaW50ID0gTWF0dGVyLkNvbXBvc2l0ZS5hZGRDb25zdHJhaW50O1xuTWF0dGVyLldvcmxkLmNsZWFyID0gTWF0dGVyLkNvbXBvc2l0ZS5jbGVhcjtcbk1hdHRlci5FbmdpbmUucnVuID0gTWF0dGVyLlJ1bm5lci5ydW47XG5cbn0se1wiLi4vYm9keS9Cb2R5XCI6MSxcIi4uL2JvZHkvQ29tcG9zaXRlXCI6MixcIi4uL2JvZHkvV29ybGRcIjozLFwiLi4vY29sbGlzaW9uL0NvbnRhY3RcIjo0LFwiLi4vY29sbGlzaW9uL0RldGVjdG9yXCI6NSxcIi4uL2NvbGxpc2lvbi9HcmlkXCI6NixcIi4uL2NvbGxpc2lvbi9QYWlyXCI6NyxcIi4uL2NvbGxpc2lvbi9QYWlyc1wiOjgsXCIuLi9jb2xsaXNpb24vUXVlcnlcIjo5LFwiLi4vY29sbGlzaW9uL1Jlc29sdmVyXCI6MTAsXCIuLi9jb2xsaXNpb24vU0FUXCI6MTEsXCIuLi9jb25zdHJhaW50L0NvbnN0cmFpbnRcIjoxMixcIi4uL2NvbnN0cmFpbnQvTW91c2VDb25zdHJhaW50XCI6MTMsXCIuLi9jb3JlL0NvbW1vblwiOjE0LFwiLi4vY29yZS9FbmdpbmVcIjoxNSxcIi4uL2NvcmUvRXZlbnRzXCI6MTYsXCIuLi9jb3JlL01ldHJpY3NcIjoxNyxcIi4uL2NvcmUvTW91c2VcIjoxOCxcIi4uL2NvcmUvUnVubmVyXCI6MTksXCIuLi9jb3JlL1NsZWVwaW5nXCI6MjAsXCIuLi9mYWN0b3J5L0JvZGllc1wiOjIxLFwiLi4vZmFjdG9yeS9Db21wb3NpdGVzXCI6MjIsXCIuLi9nZW9tZXRyeS9BeGVzXCI6MjMsXCIuLi9nZW9tZXRyeS9Cb3VuZHNcIjoyNCxcIi4uL2dlb21ldHJ5L1N2Z1wiOjI1LFwiLi4vZ2VvbWV0cnkvVmVjdG9yXCI6MjYsXCIuLi9nZW9tZXRyeS9WZXJ0aWNlc1wiOjI3LFwiLi4vcmVuZGVyL1JlbmRlclwiOjI5LFwiLi4vcmVuZGVyL1JlbmRlclBpeGlcIjozMH1dLDI5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuKiBUaGUgYE1hdHRlci5SZW5kZXJgIG1vZHVsZSBpcyBhIHNpbXBsZSBIVE1MNSBjYW52YXMgYmFzZWQgcmVuZGVyZXIgZm9yIHZpc3VhbGlzaW5nIGluc3RhbmNlcyBvZiBgTWF0dGVyLkVuZ2luZWAuXG4qIEl0IGlzIGludGVuZGVkIGZvciBkZXZlbG9wbWVudCBhbmQgZGVidWdnaW5nIHB1cnBvc2VzLCBidXQgbWF5IGFsc28gYmUgc3VpdGFibGUgZm9yIHNpbXBsZSBnYW1lcy5cbiogSXQgaW5jbHVkZXMgYSBudW1iZXIgb2YgZHJhd2luZyBvcHRpb25zIGluY2x1ZGluZyB3aXJlZnJhbWUsIHZlY3RvciB3aXRoIHN1cHBvcnQgZm9yIHNwcml0ZXMgYW5kIHZpZXdwb3J0cy5cbipcbiogQGNsYXNzIFJlbmRlclxuKi9cblxudmFyIFJlbmRlciA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlbmRlcjtcblxudmFyIENvbW1vbiA9IHJlcXVpcmUoJy4uL2NvcmUvQ29tbW9uJyk7XG52YXIgQ29tcG9zaXRlID0gcmVxdWlyZSgnLi4vYm9keS9Db21wb3NpdGUnKTtcbnZhciBCb3VuZHMgPSByZXF1aXJlKCcuLi9nZW9tZXRyeS9Cb3VuZHMnKTtcbnZhciBFdmVudHMgPSByZXF1aXJlKCcuLi9jb3JlL0V2ZW50cycpO1xudmFyIEdyaWQgPSByZXF1aXJlKCcuLi9jb2xsaXNpb24vR3JpZCcpO1xudmFyIFZlY3RvciA9IHJlcXVpcmUoJy4uL2dlb21ldHJ5L1ZlY3RvcicpO1xuXG4oZnVuY3Rpb24oKSB7XG4gICAgXG4gICAgdmFyIF9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUsXG4gICAgICAgIF9jYW5jZWxBbmltYXRpb25GcmFtZTtcblxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBfcmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgd2luZG93Lm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBmdW5jdGlvbihjYWxsYmFjayl7IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBjYWxsYmFjayhDb21tb24ubm93KCkpOyB9LCAxMDAwIC8gNjApOyB9O1xuICAgXG4gICAgICAgIF9jYW5jZWxBbmltYXRpb25GcmFtZSA9IHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cubW96Q2FuY2VsQW5pbWF0aW9uRnJhbWUgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IHdpbmRvdy53ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cubXNDYW5jZWxBbmltYXRpb25GcmFtZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHJlbmRlcmVyLiBUaGUgb3B0aW9ucyBwYXJhbWV0ZXIgaXMgYW4gb2JqZWN0IHRoYXQgc3BlY2lmaWVzIGFueSBwcm9wZXJ0aWVzIHlvdSB3aXNoIHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0cy5cbiAgICAgKiBBbGwgcHJvcGVydGllcyBoYXZlIGRlZmF1bHQgdmFsdWVzLCBhbmQgbWFueSBhcmUgcHJlLWNhbGN1bGF0ZWQgYXV0b21hdGljYWxseSBiYXNlZCBvbiBvdGhlciBwcm9wZXJ0aWVzLlxuICAgICAqIFNlZSB0aGUgcHJvcGVydGllcyBzZWN0aW9uIGJlbG93IGZvciBkZXRhaWxlZCBpbmZvcm1hdGlvbiBvbiB3aGF0IHlvdSBjYW4gcGFzcyB2aWEgdGhlIGBvcHRpb25zYCBvYmplY3QuXG4gICAgICogQG1ldGhvZCBjcmVhdGVcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gICAgICogQHJldHVybiB7cmVuZGVyfSBBIG5ldyByZW5kZXJlclxuICAgICAqL1xuICAgIFJlbmRlci5jcmVhdGUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIHZhciBkZWZhdWx0cyA9IHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFJlbmRlcixcbiAgICAgICAgICAgIGVuZ2luZTogbnVsbCxcbiAgICAgICAgICAgIGVsZW1lbnQ6IG51bGwsXG4gICAgICAgICAgICBjYW52YXM6IG51bGwsXG4gICAgICAgICAgICBtb3VzZTogbnVsbCxcbiAgICAgICAgICAgIGZyYW1lUmVxdWVzdElkOiBudWxsLFxuICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgIHdpZHRoOiA4MDAsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA2MDAsXG4gICAgICAgICAgICAgICAgcGl4ZWxSYXRpbzogMSxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAnI2ZhZmFmYScsXG4gICAgICAgICAgICAgICAgd2lyZWZyYW1lQmFja2dyb3VuZDogJyMyMjInLFxuICAgICAgICAgICAgICAgIGhhc0JvdW5kczogISFvcHRpb25zLmJvdW5kcyxcbiAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHdpcmVmcmFtZXM6IHRydWUsXG4gICAgICAgICAgICAgICAgc2hvd1NsZWVwaW5nOiB0cnVlLFxuICAgICAgICAgICAgICAgIHNob3dEZWJ1ZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2hvd0Jyb2FkcGhhc2U6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNob3dCb3VuZHM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNob3dWZWxvY2l0eTogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2hvd0NvbGxpc2lvbnM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNob3dTZXBhcmF0aW9uczogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2hvd0F4ZXM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNob3dQb3NpdGlvbnM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNob3dBbmdsZUluZGljYXRvcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2hvd0lkczogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2hvd1NoYWRvd3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNob3dWZXJ0ZXhOdW1iZXJzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaG93Q29udmV4SHVsbHM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNob3dJbnRlcm5hbEVkZ2VzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaG93TW91c2VQb3NpdGlvbjogZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgcmVuZGVyID0gQ29tbW9uLmV4dGVuZChkZWZhdWx0cywgb3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKHJlbmRlci5jYW52YXMpIHtcbiAgICAgICAgICAgIHJlbmRlci5jYW52YXMud2lkdGggPSByZW5kZXIub3B0aW9ucy53aWR0aCB8fCByZW5kZXIuY2FudmFzLndpZHRoO1xuICAgICAgICAgICAgcmVuZGVyLmNhbnZhcy5oZWlnaHQgPSByZW5kZXIub3B0aW9ucy5oZWlnaHQgfHwgcmVuZGVyLmNhbnZhcy5oZWlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICByZW5kZXIubW91c2UgPSBvcHRpb25zLm1vdXNlO1xuICAgICAgICByZW5kZXIuZW5naW5lID0gb3B0aW9ucy5lbmdpbmU7XG4gICAgICAgIHJlbmRlci5jYW52YXMgPSByZW5kZXIuY2FudmFzIHx8IF9jcmVhdGVDYW52YXMocmVuZGVyLm9wdGlvbnMud2lkdGgsIHJlbmRlci5vcHRpb25zLmhlaWdodCk7XG4gICAgICAgIHJlbmRlci5jb250ZXh0ID0gcmVuZGVyLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICByZW5kZXIudGV4dHVyZXMgPSB7fTtcblxuICAgICAgICByZW5kZXIuYm91bmRzID0gcmVuZGVyLmJvdW5kcyB8fCB7IFxuICAgICAgICAgICAgbWluOiB7IFxuICAgICAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICAgICAgeTogMFxuICAgICAgICAgICAgfSwgXG4gICAgICAgICAgICBtYXg6IHsgXG4gICAgICAgICAgICAgICAgeDogcmVuZGVyLmNhbnZhcy53aWR0aCxcbiAgICAgICAgICAgICAgICB5OiByZW5kZXIuY2FudmFzLmhlaWdodFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChyZW5kZXIub3B0aW9ucy5waXhlbFJhdGlvICE9PSAxKSB7XG4gICAgICAgICAgICBSZW5kZXIuc2V0UGl4ZWxSYXRpbyhyZW5kZXIsIHJlbmRlci5vcHRpb25zLnBpeGVsUmF0aW8pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKENvbW1vbi5pc0VsZW1lbnQocmVuZGVyLmVsZW1lbnQpKSB7XG4gICAgICAgICAgICByZW5kZXIuZWxlbWVudC5hcHBlbmRDaGlsZChyZW5kZXIuY2FudmFzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIENvbW1vbi5sb2coJ1JlbmRlci5jcmVhdGU6IG9wdGlvbnMuZWxlbWVudCB3YXMgdW5kZWZpbmVkLCByZW5kZXIuY2FudmFzIHdhcyBjcmVhdGVkIGJ1dCBub3QgYXBwZW5kZWQnLCAnd2FybicpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlbmRlcjtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ29udGludW91c2x5IHVwZGF0ZXMgdGhlIHJlbmRlciBjYW52YXMgb24gdGhlIGByZXF1ZXN0QW5pbWF0aW9uRnJhbWVgIGV2ZW50LlxuICAgICAqIEBtZXRob2QgcnVuXG4gICAgICogQHBhcmFtIHtyZW5kZXJ9IHJlbmRlclxuICAgICAqL1xuICAgIFJlbmRlci5ydW4gPSBmdW5jdGlvbihyZW5kZXIpIHtcbiAgICAgICAgKGZ1bmN0aW9uIGxvb3AodGltZSl7XG4gICAgICAgICAgICByZW5kZXIuZnJhbWVSZXF1ZXN0SWQgPSBfcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGxvb3ApO1xuICAgICAgICAgICAgUmVuZGVyLndvcmxkKHJlbmRlcik7XG4gICAgICAgIH0pKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEVuZHMgZXhlY3V0aW9uIG9mIGBSZW5kZXIucnVuYCBvbiB0aGUgZ2l2ZW4gYHJlbmRlcmAsIGJ5IGNhbmNlbGluZyB0aGUgYW5pbWF0aW9uIGZyYW1lIHJlcXVlc3QgZXZlbnQgbG9vcC5cbiAgICAgKiBAbWV0aG9kIHN0b3BcbiAgICAgKiBAcGFyYW0ge3JlbmRlcn0gcmVuZGVyXG4gICAgICovXG4gICAgUmVuZGVyLnN0b3AgPSBmdW5jdGlvbihyZW5kZXIpIHtcbiAgICAgICAgX2NhbmNlbEFuaW1hdGlvbkZyYW1lKHJlbmRlci5mcmFtZVJlcXVlc3RJZCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHBpeGVsIHJhdGlvIG9mIHRoZSByZW5kZXJlciBhbmQgdXBkYXRlcyB0aGUgY2FudmFzLlxuICAgICAqIFRvIGF1dG9tYXRpY2FsbHkgZGV0ZWN0IHRoZSBjb3JyZWN0IHJhdGlvLCBwYXNzIHRoZSBzdHJpbmcgYCdhdXRvJ2AgZm9yIGBwaXhlbFJhdGlvYC5cbiAgICAgKiBAbWV0aG9kIHNldFBpeGVsUmF0aW9cbiAgICAgKiBAcGFyYW0ge3JlbmRlcn0gcmVuZGVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHBpeGVsUmF0aW9cbiAgICAgKi9cbiAgICBSZW5kZXIuc2V0UGl4ZWxSYXRpbyA9IGZ1bmN0aW9uKHJlbmRlciwgcGl4ZWxSYXRpbykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHJlbmRlci5vcHRpb25zLFxuICAgICAgICAgICAgY2FudmFzID0gcmVuZGVyLmNhbnZhcztcblxuICAgICAgICBpZiAocGl4ZWxSYXRpbyA9PT0gJ2F1dG8nKSB7XG4gICAgICAgICAgICBwaXhlbFJhdGlvID0gX2dldFBpeGVsUmF0aW8oY2FudmFzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9wdGlvbnMucGl4ZWxSYXRpbyA9IHBpeGVsUmF0aW87XG4gICAgICAgIGNhbnZhcy5zZXRBdHRyaWJ1dGUoJ2RhdGEtcGl4ZWwtcmF0aW8nLCBwaXhlbFJhdGlvKTtcbiAgICAgICAgY2FudmFzLndpZHRoID0gb3B0aW9ucy53aWR0aCAqIHBpeGVsUmF0aW87XG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSBvcHRpb25zLmhlaWdodCAqIHBpeGVsUmF0aW87XG4gICAgICAgIGNhbnZhcy5zdHlsZS53aWR0aCA9IG9wdGlvbnMud2lkdGggKyAncHgnO1xuICAgICAgICBjYW52YXMuc3R5bGUuaGVpZ2h0ID0gb3B0aW9ucy5oZWlnaHQgKyAncHgnO1xuICAgICAgICByZW5kZXIuY29udGV4dC5zY2FsZShwaXhlbFJhdGlvLCBwaXhlbFJhdGlvKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVuZGVycyB0aGUgZ2l2ZW4gYGVuZ2luZWAncyBgTWF0dGVyLldvcmxkYCBvYmplY3QuXG4gICAgICogVGhpcyBpcyB0aGUgZW50cnkgcG9pbnQgZm9yIGFsbCByZW5kZXJpbmcgYW5kIHNob3VsZCBiZSBjYWxsZWQgZXZlcnkgdGltZSB0aGUgc2NlbmUgY2hhbmdlcy5cbiAgICAgKiBAbWV0aG9kIHdvcmxkXG4gICAgICogQHBhcmFtIHtyZW5kZXJ9IHJlbmRlclxuICAgICAqL1xuICAgIFJlbmRlci53b3JsZCA9IGZ1bmN0aW9uKHJlbmRlcikge1xuICAgICAgICB2YXIgZW5naW5lID0gcmVuZGVyLmVuZ2luZSxcbiAgICAgICAgICAgIHdvcmxkID0gZW5naW5lLndvcmxkLFxuICAgICAgICAgICAgY2FudmFzID0gcmVuZGVyLmNhbnZhcyxcbiAgICAgICAgICAgIGNvbnRleHQgPSByZW5kZXIuY29udGV4dCxcbiAgICAgICAgICAgIG9wdGlvbnMgPSByZW5kZXIub3B0aW9ucyxcbiAgICAgICAgICAgIGFsbEJvZGllcyA9IENvbXBvc2l0ZS5hbGxCb2RpZXMod29ybGQpLFxuICAgICAgICAgICAgYWxsQ29uc3RyYWludHMgPSBDb21wb3NpdGUuYWxsQ29uc3RyYWludHMod29ybGQpLFxuICAgICAgICAgICAgYmFja2dyb3VuZCA9IG9wdGlvbnMud2lyZWZyYW1lcyA/IG9wdGlvbnMud2lyZWZyYW1lQmFja2dyb3VuZCA6IG9wdGlvbnMuYmFja2dyb3VuZCxcbiAgICAgICAgICAgIGJvZGllcyA9IFtdLFxuICAgICAgICAgICAgY29uc3RyYWludHMgPSBbXSxcbiAgICAgICAgICAgIGk7XG5cbiAgICAgICAgdmFyIGV2ZW50ID0ge1xuICAgICAgICAgICAgdGltZXN0YW1wOiBlbmdpbmUudGltaW5nLnRpbWVzdGFtcFxuICAgICAgICB9O1xuXG4gICAgICAgIEV2ZW50cy50cmlnZ2VyKHJlbmRlciwgJ2JlZm9yZVJlbmRlcicsIGV2ZW50KTtcblxuICAgICAgICAvLyBhcHBseSBiYWNrZ3JvdW5kIGlmIGl0IGhhcyBjaGFuZ2VkXG4gICAgICAgIGlmIChyZW5kZXIuY3VycmVudEJhY2tncm91bmQgIT09IGJhY2tncm91bmQpXG4gICAgICAgICAgICBfYXBwbHlCYWNrZ3JvdW5kKHJlbmRlciwgYmFja2dyb3VuZCk7XG5cbiAgICAgICAgLy8gY2xlYXIgdGhlIGNhbnZhcyB3aXRoIGEgdHJhbnNwYXJlbnQgZmlsbCwgdG8gYWxsb3cgdGhlIGNhbnZhcyBiYWNrZ3JvdW5kIHRvIHNob3dcbiAgICAgICAgY29udGV4dC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAnc291cmNlLWluJztcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBcInRyYW5zcGFyZW50XCI7XG4gICAgICAgIGNvbnRleHQuZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgY29udGV4dC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAnc291cmNlLW92ZXInO1xuXG4gICAgICAgIC8vIGhhbmRsZSBib3VuZHNcbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzQm91bmRzKSB7XG4gICAgICAgICAgICB2YXIgYm91bmRzV2lkdGggPSByZW5kZXIuYm91bmRzLm1heC54IC0gcmVuZGVyLmJvdW5kcy5taW4ueCxcbiAgICAgICAgICAgICAgICBib3VuZHNIZWlnaHQgPSByZW5kZXIuYm91bmRzLm1heC55IC0gcmVuZGVyLmJvdW5kcy5taW4ueSxcbiAgICAgICAgICAgICAgICBib3VuZHNTY2FsZVggPSBib3VuZHNXaWR0aCAvIG9wdGlvbnMud2lkdGgsXG4gICAgICAgICAgICAgICAgYm91bmRzU2NhbGVZID0gYm91bmRzSGVpZ2h0IC8gb3B0aW9ucy5oZWlnaHQ7XG5cbiAgICAgICAgICAgIC8vIGZpbHRlciBvdXQgYm9kaWVzIHRoYXQgYXJlIG5vdCBpbiB2aWV3XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYWxsQm9kaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJvZHkgPSBhbGxCb2RpZXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKEJvdW5kcy5vdmVybGFwcyhib2R5LmJvdW5kcywgcmVuZGVyLmJvdW5kcykpXG4gICAgICAgICAgICAgICAgICAgIGJvZGllcy5wdXNoKGJvZHkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBmaWx0ZXIgb3V0IGNvbnN0cmFpbnRzIHRoYXQgYXJlIG5vdCBpbiB2aWV3XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYWxsQ29uc3RyYWludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgY29uc3RyYWludCA9IGFsbENvbnN0cmFpbnRzW2ldLFxuICAgICAgICAgICAgICAgICAgICBib2R5QSA9IGNvbnN0cmFpbnQuYm9keUEsXG4gICAgICAgICAgICAgICAgICAgIGJvZHlCID0gY29uc3RyYWludC5ib2R5QixcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRBV29ybGQgPSBjb25zdHJhaW50LnBvaW50QSxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRCV29ybGQgPSBjb25zdHJhaW50LnBvaW50QjtcblxuICAgICAgICAgICAgICAgIGlmIChib2R5QSkgcG9pbnRBV29ybGQgPSBWZWN0b3IuYWRkKGJvZHlBLnBvc2l0aW9uLCBjb25zdHJhaW50LnBvaW50QSk7XG4gICAgICAgICAgICAgICAgaWYgKGJvZHlCKSBwb2ludEJXb3JsZCA9IFZlY3Rvci5hZGQoYm9keUIucG9zaXRpb24sIGNvbnN0cmFpbnQucG9pbnRCKTtcblxuICAgICAgICAgICAgICAgIGlmICghcG9pbnRBV29ybGQgfHwgIXBvaW50QldvcmxkKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgIGlmIChCb3VuZHMuY29udGFpbnMocmVuZGVyLmJvdW5kcywgcG9pbnRBV29ybGQpIHx8IEJvdW5kcy5jb250YWlucyhyZW5kZXIuYm91bmRzLCBwb2ludEJXb3JsZCkpXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0cmFpbnRzLnB1c2goY29uc3RyYWludCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHRyYW5zZm9ybSB0aGUgdmlld1xuICAgICAgICAgICAgY29udGV4dC5zY2FsZSgxIC8gYm91bmRzU2NhbGVYLCAxIC8gYm91bmRzU2NhbGVZKTtcbiAgICAgICAgICAgIGNvbnRleHQudHJhbnNsYXRlKC1yZW5kZXIuYm91bmRzLm1pbi54LCAtcmVuZGVyLmJvdW5kcy5taW4ueSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdHJhaW50cyA9IGFsbENvbnN0cmFpbnRzO1xuICAgICAgICAgICAgYm9kaWVzID0gYWxsQm9kaWVzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFvcHRpb25zLndpcmVmcmFtZXMgfHwgKGVuZ2luZS5lbmFibGVTbGVlcGluZyAmJiBvcHRpb25zLnNob3dTbGVlcGluZykpIHtcbiAgICAgICAgICAgIC8vIGZ1bGx5IGZlYXR1cmVkIHJlbmRlcmluZyBvZiBib2RpZXNcbiAgICAgICAgICAgIFJlbmRlci5ib2RpZXMocmVuZGVyLCBib2RpZXMsIGNvbnRleHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2hvd0NvbnZleEh1bGxzKVxuICAgICAgICAgICAgICAgIFJlbmRlci5ib2R5Q29udmV4SHVsbHMocmVuZGVyLCBib2RpZXMsIGNvbnRleHQpO1xuXG4gICAgICAgICAgICAvLyBvcHRpbWlzZWQgbWV0aG9kIGZvciB3aXJlZnJhbWVzIG9ubHlcbiAgICAgICAgICAgIFJlbmRlci5ib2R5V2lyZWZyYW1lcyhyZW5kZXIsIGJvZGllcywgY29udGV4dCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5zaG93Qm91bmRzKVxuICAgICAgICAgICAgUmVuZGVyLmJvZHlCb3VuZHMocmVuZGVyLCBib2RpZXMsIGNvbnRleHQpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnNob3dBeGVzIHx8IG9wdGlvbnMuc2hvd0FuZ2xlSW5kaWNhdG9yKVxuICAgICAgICAgICAgUmVuZGVyLmJvZHlBeGVzKHJlbmRlciwgYm9kaWVzLCBjb250ZXh0KTtcbiAgICAgICAgXG4gICAgICAgIGlmIChvcHRpb25zLnNob3dQb3NpdGlvbnMpXG4gICAgICAgICAgICBSZW5kZXIuYm9keVBvc2l0aW9ucyhyZW5kZXIsIGJvZGllcywgY29udGV4dCk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuc2hvd1ZlbG9jaXR5KVxuICAgICAgICAgICAgUmVuZGVyLmJvZHlWZWxvY2l0eShyZW5kZXIsIGJvZGllcywgY29udGV4dCk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuc2hvd0lkcylcbiAgICAgICAgICAgIFJlbmRlci5ib2R5SWRzKHJlbmRlciwgYm9kaWVzLCBjb250ZXh0KTtcblxuICAgICAgICBpZiAob3B0aW9ucy5zaG93U2VwYXJhdGlvbnMpXG4gICAgICAgICAgICBSZW5kZXIuc2VwYXJhdGlvbnMocmVuZGVyLCBlbmdpbmUucGFpcnMubGlzdCwgY29udGV4dCk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuc2hvd0NvbGxpc2lvbnMpXG4gICAgICAgICAgICBSZW5kZXIuY29sbGlzaW9ucyhyZW5kZXIsIGVuZ2luZS5wYWlycy5saXN0LCBjb250ZXh0KTtcblxuICAgICAgICBpZiAob3B0aW9ucy5zaG93VmVydGV4TnVtYmVycylcbiAgICAgICAgICAgIFJlbmRlci52ZXJ0ZXhOdW1iZXJzKHJlbmRlciwgYm9kaWVzLCBjb250ZXh0KTtcblxuICAgICAgICBpZiAob3B0aW9ucy5zaG93TW91c2VQb3NpdGlvbilcbiAgICAgICAgICAgIFJlbmRlci5tb3VzZVBvc2l0aW9uKHJlbmRlciwgcmVuZGVyLm1vdXNlLCBjb250ZXh0KTtcblxuICAgICAgICBSZW5kZXIuY29uc3RyYWludHMoY29uc3RyYWludHMsIGNvbnRleHQpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnNob3dCcm9hZHBoYXNlICYmIGVuZ2luZS5icm9hZHBoYXNlLmNvbnRyb2xsZXIgPT09IEdyaWQpXG4gICAgICAgICAgICBSZW5kZXIuZ3JpZChyZW5kZXIsIGVuZ2luZS5icm9hZHBoYXNlLCBjb250ZXh0KTtcblxuICAgICAgICBpZiAob3B0aW9ucy5zaG93RGVidWcpXG4gICAgICAgICAgICBSZW5kZXIuZGVidWcocmVuZGVyLCBjb250ZXh0KTtcblxuICAgICAgICBpZiAob3B0aW9ucy5oYXNCb3VuZHMpIHtcbiAgICAgICAgICAgIC8vIHJldmVydCB2aWV3IHRyYW5zZm9ybXNcbiAgICAgICAgICAgIGNvbnRleHQuc2V0VHJhbnNmb3JtKG9wdGlvbnMucGl4ZWxSYXRpbywgMCwgMCwgb3B0aW9ucy5waXhlbFJhdGlvLCAwLCAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIEV2ZW50cy50cmlnZ2VyKHJlbmRlciwgJ2FmdGVyUmVuZGVyJywgZXZlbnQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCBkZWJ1Z1xuICAgICAqIEBwYXJhbSB7cmVuZGVyfSByZW5kZXJcbiAgICAgKiBAcGFyYW0ge1JlbmRlcmluZ0NvbnRleHR9IGNvbnRleHRcbiAgICAgKi9cbiAgICBSZW5kZXIuZGVidWcgPSBmdW5jdGlvbihyZW5kZXIsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGMgPSBjb250ZXh0LFxuICAgICAgICAgICAgZW5naW5lID0gcmVuZGVyLmVuZ2luZSxcbiAgICAgICAgICAgIHdvcmxkID0gZW5naW5lLndvcmxkLFxuICAgICAgICAgICAgbWV0cmljcyA9IGVuZ2luZS5tZXRyaWNzLFxuICAgICAgICAgICAgb3B0aW9ucyA9IHJlbmRlci5vcHRpb25zLFxuICAgICAgICAgICAgYm9kaWVzID0gQ29tcG9zaXRlLmFsbEJvZGllcyh3b3JsZCksXG4gICAgICAgICAgICBzcGFjZSA9IFwiICAgIFwiO1xuXG4gICAgICAgIGlmIChlbmdpbmUudGltaW5nLnRpbWVzdGFtcCAtIChyZW5kZXIuZGVidWdUaW1lc3RhbXAgfHwgMCkgPj0gNTAwKSB7XG4gICAgICAgICAgICB2YXIgdGV4dCA9IFwiXCI7XG5cbiAgICAgICAgICAgIGlmIChtZXRyaWNzLnRpbWluZykge1xuICAgICAgICAgICAgICAgIHRleHQgKz0gXCJmcHM6IFwiICsgTWF0aC5yb3VuZChtZXRyaWNzLnRpbWluZy5mcHMpICsgc3BhY2U7XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgcmVuZGVyLmRlYnVnU3RyaW5nID0gdGV4dDtcbiAgICAgICAgICAgIHJlbmRlci5kZWJ1Z1RpbWVzdGFtcCA9IGVuZ2luZS50aW1pbmcudGltZXN0YW1wO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlbmRlci5kZWJ1Z1N0cmluZykge1xuICAgICAgICAgICAgYy5mb250ID0gXCIxMnB4IEFyaWFsXCI7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLndpcmVmcmFtZXMpIHtcbiAgICAgICAgICAgICAgICBjLmZpbGxTdHlsZSA9ICdyZ2JhKDI1NSwyNTUsMjU1LDAuNSknO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjLmZpbGxTdHlsZSA9ICdyZ2JhKDAsMCwwLDAuNSknO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgc3BsaXQgPSByZW5kZXIuZGVidWdTdHJpbmcuc3BsaXQoJ1xcbicpO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNwbGl0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgYy5maWxsVGV4dChzcGxpdFtpXSwgNTAsIDUwICsgaSAqIDE4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCBjb25zdHJhaW50c1xuICAgICAqIEBwYXJhbSB7Y29uc3RyYWludFtdfSBjb25zdHJhaW50c1xuICAgICAqIEBwYXJhbSB7UmVuZGVyaW5nQ29udGV4dH0gY29udGV4dFxuICAgICAqL1xuICAgIFJlbmRlci5jb25zdHJhaW50cyA9IGZ1bmN0aW9uKGNvbnN0cmFpbnRzLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBjID0gY29udGV4dDtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnN0cmFpbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgY29uc3RyYWludCA9IGNvbnN0cmFpbnRzW2ldO1xuXG4gICAgICAgICAgICBpZiAoIWNvbnN0cmFpbnQucmVuZGVyLnZpc2libGUgfHwgIWNvbnN0cmFpbnQucG9pbnRBIHx8ICFjb25zdHJhaW50LnBvaW50QilcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgdmFyIGJvZHlBID0gY29uc3RyYWludC5ib2R5QSxcbiAgICAgICAgICAgICAgICBib2R5QiA9IGNvbnN0cmFpbnQuYm9keUI7XG5cbiAgICAgICAgICAgIGlmIChib2R5QSkge1xuICAgICAgICAgICAgICAgIGMuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgYy5tb3ZlVG8oYm9keUEucG9zaXRpb24ueCArIGNvbnN0cmFpbnQucG9pbnRBLngsIGJvZHlBLnBvc2l0aW9uLnkgKyBjb25zdHJhaW50LnBvaW50QS55KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYy5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICBjLm1vdmVUbyhjb25zdHJhaW50LnBvaW50QS54LCBjb25zdHJhaW50LnBvaW50QS55KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGJvZHlCKSB7XG4gICAgICAgICAgICAgICAgYy5saW5lVG8oYm9keUIucG9zaXRpb24ueCArIGNvbnN0cmFpbnQucG9pbnRCLngsIGJvZHlCLnBvc2l0aW9uLnkgKyBjb25zdHJhaW50LnBvaW50Qi55KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYy5saW5lVG8oY29uc3RyYWludC5wb2ludEIueCwgY29uc3RyYWludC5wb2ludEIueSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGMubGluZVdpZHRoID0gY29uc3RyYWludC5yZW5kZXIubGluZVdpZHRoO1xuICAgICAgICAgICAgYy5zdHJva2VTdHlsZSA9IGNvbnN0cmFpbnQucmVuZGVyLnN0cm9rZVN0eWxlO1xuICAgICAgICAgICAgYy5zdHJva2UoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgXG4gICAgLyoqXG4gICAgICogRGVzY3JpcHRpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2QgYm9keVNoYWRvd3NcbiAgICAgKiBAcGFyYW0ge3JlbmRlcn0gcmVuZGVyXG4gICAgICogQHBhcmFtIHtib2R5W119IGJvZGllc1xuICAgICAqIEBwYXJhbSB7UmVuZGVyaW5nQ29udGV4dH0gY29udGV4dFxuICAgICAqL1xuICAgIFJlbmRlci5ib2R5U2hhZG93cyA9IGZ1bmN0aW9uKHJlbmRlciwgYm9kaWVzLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBjID0gY29udGV4dCxcbiAgICAgICAgICAgIGVuZ2luZSA9IHJlbmRlci5lbmdpbmU7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBib2R5ID0gYm9kaWVzW2ldO1xuXG4gICAgICAgICAgICBpZiAoIWJvZHkucmVuZGVyLnZpc2libGUpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgIGlmIChib2R5LmNpcmNsZVJhZGl1cykge1xuICAgICAgICAgICAgICAgIGMuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgYy5hcmMoYm9keS5wb3NpdGlvbi54LCBib2R5LnBvc2l0aW9uLnksIGJvZHkuY2lyY2xlUmFkaXVzLCAwLCAyICogTWF0aC5QSSk7XG4gICAgICAgICAgICAgICAgYy5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYy5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICBjLm1vdmVUbyhib2R5LnZlcnRpY2VzWzBdLngsIGJvZHkudmVydGljZXNbMF0ueSk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCBib2R5LnZlcnRpY2VzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGMubGluZVRvKGJvZHkudmVydGljZXNbal0ueCwgYm9keS52ZXJ0aWNlc1tqXS55KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYy5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGRpc3RhbmNlWCA9IGJvZHkucG9zaXRpb24ueCAtIHJlbmRlci5vcHRpb25zLndpZHRoICogMC41LFxuICAgICAgICAgICAgICAgIGRpc3RhbmNlWSA9IGJvZHkucG9zaXRpb24ueSAtIHJlbmRlci5vcHRpb25zLmhlaWdodCAqIDAuMixcbiAgICAgICAgICAgICAgICBkaXN0YW5jZSA9IE1hdGguYWJzKGRpc3RhbmNlWCkgKyBNYXRoLmFicyhkaXN0YW5jZVkpO1xuXG4gICAgICAgICAgICBjLnNoYWRvd0NvbG9yID0gJ3JnYmEoMCwwLDAsMC4xNSknO1xuICAgICAgICAgICAgYy5zaGFkb3dPZmZzZXRYID0gMC4wNSAqIGRpc3RhbmNlWDtcbiAgICAgICAgICAgIGMuc2hhZG93T2Zmc2V0WSA9IDAuMDUgKiBkaXN0YW5jZVk7XG4gICAgICAgICAgICBjLnNoYWRvd0JsdXIgPSAxICsgMTIgKiBNYXRoLm1pbigxLCBkaXN0YW5jZSAvIDEwMDApO1xuXG4gICAgICAgICAgICBjLmZpbGwoKTtcblxuICAgICAgICAgICAgYy5zaGFkb3dDb2xvciA9IG51bGw7XG4gICAgICAgICAgICBjLnNoYWRvd09mZnNldFggPSBudWxsO1xuICAgICAgICAgICAgYy5zaGFkb3dPZmZzZXRZID0gbnVsbDtcbiAgICAgICAgICAgIGMuc2hhZG93Qmx1ciA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzY3JpcHRpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2QgYm9kaWVzXG4gICAgICogQHBhcmFtIHtyZW5kZXJ9IHJlbmRlclxuICAgICAqIEBwYXJhbSB7Ym9keVtdfSBib2RpZXNcbiAgICAgKiBAcGFyYW0ge1JlbmRlcmluZ0NvbnRleHR9IGNvbnRleHRcbiAgICAgKi9cbiAgICBSZW5kZXIuYm9kaWVzID0gZnVuY3Rpb24ocmVuZGVyLCBib2RpZXMsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGMgPSBjb250ZXh0LFxuICAgICAgICAgICAgZW5naW5lID0gcmVuZGVyLmVuZ2luZSxcbiAgICAgICAgICAgIG9wdGlvbnMgPSByZW5kZXIub3B0aW9ucyxcbiAgICAgICAgICAgIHNob3dJbnRlcm5hbEVkZ2VzID0gb3B0aW9ucy5zaG93SW50ZXJuYWxFZGdlcyB8fCAhb3B0aW9ucy53aXJlZnJhbWVzLFxuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIHBhcnQsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgaztcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBib2R5ID0gYm9kaWVzW2ldO1xuXG4gICAgICAgICAgICBpZiAoIWJvZHkucmVuZGVyLnZpc2libGUpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgIC8vIGhhbmRsZSBjb21wb3VuZCBwYXJ0c1xuICAgICAgICAgICAgZm9yIChrID0gYm9keS5wYXJ0cy5sZW5ndGggPiAxID8gMSA6IDA7IGsgPCBib2R5LnBhcnRzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICAgICAgcGFydCA9IGJvZHkucGFydHNba107XG5cbiAgICAgICAgICAgICAgICBpZiAoIXBhcnQucmVuZGVyLnZpc2libGUpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2hvd1NsZWVwaW5nICYmIGJvZHkuaXNTbGVlcGluZykge1xuICAgICAgICAgICAgICAgICAgICBjLmdsb2JhbEFscGhhID0gMC41ICogcGFydC5yZW5kZXIub3BhY2l0eTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBhcnQucmVuZGVyLm9wYWNpdHkgIT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgYy5nbG9iYWxBbHBoYSA9IHBhcnQucmVuZGVyLm9wYWNpdHk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHBhcnQucmVuZGVyLnNwcml0ZSAmJiBwYXJ0LnJlbmRlci5zcHJpdGUudGV4dHVyZSAmJiAhb3B0aW9ucy53aXJlZnJhbWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHBhcnQgc3ByaXRlXG4gICAgICAgICAgICAgICAgICAgIHZhciBzcHJpdGUgPSBwYXJ0LnJlbmRlci5zcHJpdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlID0gX2dldFRleHR1cmUocmVuZGVyLCBzcHJpdGUudGV4dHVyZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgYy50cmFuc2xhdGUocGFydC5wb3NpdGlvbi54LCBwYXJ0LnBvc2l0aW9uLnkpOyBcbiAgICAgICAgICAgICAgICAgICAgYy5yb3RhdGUocGFydC5hbmdsZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgYy5kcmF3SW1hZ2UoXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dHVyZS53aWR0aCAqIC1zcHJpdGUueE9mZnNldCAqIHNwcml0ZS54U2NhbGUsIFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dHVyZS5oZWlnaHQgKiAtc3ByaXRlLnlPZmZzZXQgKiBzcHJpdGUueVNjYWxlLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHR1cmUud2lkdGggKiBzcHJpdGUueFNjYWxlLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHR1cmUuaGVpZ2h0ICogc3ByaXRlLnlTY2FsZVxuICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHJldmVydCB0cmFuc2xhdGlvbiwgaG9wZWZ1bGx5IGZhc3RlciB0aGFuIHNhdmUgLyByZXN0b3JlXG4gICAgICAgICAgICAgICAgICAgIGMucm90YXRlKC1wYXJ0LmFuZ2xlKTtcbiAgICAgICAgICAgICAgICAgICAgYy50cmFuc2xhdGUoLXBhcnQucG9zaXRpb24ueCwgLXBhcnQucG9zaXRpb24ueSk7IFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHBhcnQgcG9seWdvblxuICAgICAgICAgICAgICAgICAgICBpZiAocGFydC5jaXJjbGVSYWRpdXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjLmFyYyhwYXJ0LnBvc2l0aW9uLngsIHBhcnQucG9zaXRpb24ueSwgcGFydC5jaXJjbGVSYWRpdXMsIDAsIDIgKiBNYXRoLlBJKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjLm1vdmVUbyhwYXJ0LnZlcnRpY2VzWzBdLngsIHBhcnQudmVydGljZXNbMF0ueSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAxOyBqIDwgcGFydC52ZXJ0aWNlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcGFydC52ZXJ0aWNlc1tqIC0gMV0uaXNJbnRlcm5hbCB8fCBzaG93SW50ZXJuYWxFZGdlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLmxpbmVUbyhwYXJ0LnZlcnRpY2VzW2pdLngsIHBhcnQudmVydGljZXNbal0ueSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5tb3ZlVG8ocGFydC52ZXJ0aWNlc1tqXS54LCBwYXJ0LnZlcnRpY2VzW2pdLnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJ0LnZlcnRpY2VzW2pdLmlzSW50ZXJuYWwgJiYgIXNob3dJbnRlcm5hbEVkZ2VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMubW92ZVRvKHBhcnQudmVydGljZXNbKGogKyAxKSAlIHBhcnQudmVydGljZXMubGVuZ3RoXS54LCBwYXJ0LnZlcnRpY2VzWyhqICsgMSkgJSBwYXJ0LnZlcnRpY2VzLmxlbmd0aF0ueSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjLmxpbmVUbyhwYXJ0LnZlcnRpY2VzWzBdLngsIHBhcnQudmVydGljZXNbMF0ueSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjLmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFvcHRpb25zLndpcmVmcmFtZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMuZmlsbFN0eWxlID0gcGFydC5yZW5kZXIuZmlsbFN0eWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYy5saW5lV2lkdGggPSBwYXJ0LnJlbmRlci5saW5lV2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBjLnN0cm9rZVN0eWxlID0gcGFydC5yZW5kZXIuc3Ryb2tlU3R5bGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjLmZpbGwoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMubGluZVdpZHRoID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMuc3Ryb2tlU3R5bGUgPSAnI2JiYic7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjLnN0cm9rZSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGMuZ2xvYmFsQWxwaGEgPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIE9wdGltaXNlZCBtZXRob2QgZm9yIGRyYXdpbmcgYm9keSB3aXJlZnJhbWVzIGluIG9uZSBwYXNzXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIGJvZHlXaXJlZnJhbWVzXG4gICAgICogQHBhcmFtIHtyZW5kZXJ9IHJlbmRlclxuICAgICAqIEBwYXJhbSB7Ym9keVtdfSBib2RpZXNcbiAgICAgKiBAcGFyYW0ge1JlbmRlcmluZ0NvbnRleHR9IGNvbnRleHRcbiAgICAgKi9cbiAgICBSZW5kZXIuYm9keVdpcmVmcmFtZXMgPSBmdW5jdGlvbihyZW5kZXIsIGJvZGllcywgY29udGV4dCkge1xuICAgICAgICB2YXIgYyA9IGNvbnRleHQsXG4gICAgICAgICAgICBzaG93SW50ZXJuYWxFZGdlcyA9IHJlbmRlci5vcHRpb25zLnNob3dJbnRlcm5hbEVkZ2VzLFxuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIHBhcnQsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgaixcbiAgICAgICAgICAgIGs7XG5cbiAgICAgICAgYy5iZWdpblBhdGgoKTtcblxuICAgICAgICAvLyByZW5kZXIgYWxsIGJvZGllc1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBib2R5ID0gYm9kaWVzW2ldO1xuXG4gICAgICAgICAgICBpZiAoIWJvZHkucmVuZGVyLnZpc2libGUpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgIC8vIGhhbmRsZSBjb21wb3VuZCBwYXJ0c1xuICAgICAgICAgICAgZm9yIChrID0gYm9keS5wYXJ0cy5sZW5ndGggPiAxID8gMSA6IDA7IGsgPCBib2R5LnBhcnRzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICAgICAgcGFydCA9IGJvZHkucGFydHNba107XG5cbiAgICAgICAgICAgICAgICBjLm1vdmVUbyhwYXJ0LnZlcnRpY2VzWzBdLngsIHBhcnQudmVydGljZXNbMF0ueSk7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGogPSAxOyBqIDwgcGFydC52ZXJ0aWNlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXBhcnQudmVydGljZXNbaiAtIDFdLmlzSW50ZXJuYWwgfHwgc2hvd0ludGVybmFsRWRnZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMubGluZVRvKHBhcnQudmVydGljZXNbal0ueCwgcGFydC52ZXJ0aWNlc1tqXS55KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMubW92ZVRvKHBhcnQudmVydGljZXNbal0ueCwgcGFydC52ZXJ0aWNlc1tqXS55KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJ0LnZlcnRpY2VzW2pdLmlzSW50ZXJuYWwgJiYgIXNob3dJbnRlcm5hbEVkZ2VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjLm1vdmVUbyhwYXJ0LnZlcnRpY2VzWyhqICsgMSkgJSBwYXJ0LnZlcnRpY2VzLmxlbmd0aF0ueCwgcGFydC52ZXJ0aWNlc1soaiArIDEpICUgcGFydC52ZXJ0aWNlcy5sZW5ndGhdLnkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGMubGluZVRvKHBhcnQudmVydGljZXNbMF0ueCwgcGFydC52ZXJ0aWNlc1swXS55KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGMubGluZVdpZHRoID0gMTtcbiAgICAgICAgYy5zdHJva2VTdHlsZSA9ICcjYmJiJztcbiAgICAgICAgYy5zdHJva2UoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogT3B0aW1pc2VkIG1ldGhvZCBmb3IgZHJhd2luZyBib2R5IGNvbnZleCBodWxsIHdpcmVmcmFtZXMgaW4gb25lIHBhc3NcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2QgYm9keUNvbnZleEh1bGxzXG4gICAgICogQHBhcmFtIHtyZW5kZXJ9IHJlbmRlclxuICAgICAqIEBwYXJhbSB7Ym9keVtdfSBib2RpZXNcbiAgICAgKiBAcGFyYW0ge1JlbmRlcmluZ0NvbnRleHR9IGNvbnRleHRcbiAgICAgKi9cbiAgICBSZW5kZXIuYm9keUNvbnZleEh1bGxzID0gZnVuY3Rpb24ocmVuZGVyLCBib2RpZXMsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGMgPSBjb250ZXh0LFxuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIHBhcnQsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgaixcbiAgICAgICAgICAgIGs7XG5cbiAgICAgICAgYy5iZWdpblBhdGgoKTtcblxuICAgICAgICAvLyByZW5kZXIgY29udmV4IGh1bGxzXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGJvZHkgPSBib2RpZXNbaV07XG5cbiAgICAgICAgICAgIGlmICghYm9keS5yZW5kZXIudmlzaWJsZSB8fCBib2R5LnBhcnRzLmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgYy5tb3ZlVG8oYm9keS52ZXJ0aWNlc1swXS54LCBib2R5LnZlcnRpY2VzWzBdLnkpO1xuXG4gICAgICAgICAgICBmb3IgKGogPSAxOyBqIDwgYm9keS52ZXJ0aWNlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIGMubGluZVRvKGJvZHkudmVydGljZXNbal0ueCwgYm9keS52ZXJ0aWNlc1tqXS55KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgYy5saW5lVG8oYm9keS52ZXJ0aWNlc1swXS54LCBib2R5LnZlcnRpY2VzWzBdLnkpO1xuICAgICAgICB9XG5cbiAgICAgICAgYy5saW5lV2lkdGggPSAxO1xuICAgICAgICBjLnN0cm9rZVN0eWxlID0gJ3JnYmEoMjU1LDI1NSwyNTUsMC4yKSc7XG4gICAgICAgIGMuc3Ryb2tlKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbmRlcnMgYm9keSB2ZXJ0ZXggbnVtYmVycy5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2QgdmVydGV4TnVtYmVyc1xuICAgICAqIEBwYXJhbSB7cmVuZGVyfSByZW5kZXJcbiAgICAgKiBAcGFyYW0ge2JvZHlbXX0gYm9kaWVzXG4gICAgICogQHBhcmFtIHtSZW5kZXJpbmdDb250ZXh0fSBjb250ZXh0XG4gICAgICovXG4gICAgUmVuZGVyLnZlcnRleE51bWJlcnMgPSBmdW5jdGlvbihyZW5kZXIsIGJvZGllcywgY29udGV4dCkge1xuICAgICAgICB2YXIgYyA9IGNvbnRleHQsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgaixcbiAgICAgICAgICAgIGs7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHBhcnRzID0gYm9kaWVzW2ldLnBhcnRzO1xuICAgICAgICAgICAgZm9yIChrID0gcGFydHMubGVuZ3RoID4gMSA/IDEgOiAwOyBrIDwgcGFydHMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFydCA9IHBhcnRzW2tdO1xuICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBwYXJ0LnZlcnRpY2VzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGMuZmlsbFN0eWxlID0gJ3JnYmEoMjU1LDI1NSwyNTUsMC4yKSc7XG4gICAgICAgICAgICAgICAgICAgIGMuZmlsbFRleHQoaSArICdfJyArIGosIHBhcnQucG9zaXRpb24ueCArIChwYXJ0LnZlcnRpY2VzW2pdLnggLSBwYXJ0LnBvc2l0aW9uLngpICogMC44LCBwYXJ0LnBvc2l0aW9uLnkgKyAocGFydC52ZXJ0aWNlc1tqXS55IC0gcGFydC5wb3NpdGlvbi55KSAqIDAuOCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbmRlcnMgbW91c2UgcG9zaXRpb24uXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIG1vdXNlUG9zaXRpb25cbiAgICAgKiBAcGFyYW0ge3JlbmRlcn0gcmVuZGVyXG4gICAgICogQHBhcmFtIHttb3VzZX0gbW91c2VcbiAgICAgKiBAcGFyYW0ge1JlbmRlcmluZ0NvbnRleHR9IGNvbnRleHRcbiAgICAgKi9cbiAgICBSZW5kZXIubW91c2VQb3NpdGlvbiA9IGZ1bmN0aW9uKHJlbmRlciwgbW91c2UsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGMgPSBjb250ZXh0O1xuICAgICAgICBjLmZpbGxTdHlsZSA9ICdyZ2JhKDI1NSwyNTUsMjU1LDAuOCknO1xuICAgICAgICBjLmZpbGxUZXh0KG1vdXNlLnBvc2l0aW9uLnggKyAnICAnICsgbW91c2UucG9zaXRpb24ueSwgbW91c2UucG9zaXRpb24ueCArIDUsIG1vdXNlLnBvc2l0aW9uLnkgLSA1KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRHJhd3MgYm9keSBib3VuZHNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2QgYm9keUJvdW5kc1xuICAgICAqIEBwYXJhbSB7cmVuZGVyfSByZW5kZXJcbiAgICAgKiBAcGFyYW0ge2JvZHlbXX0gYm9kaWVzXG4gICAgICogQHBhcmFtIHtSZW5kZXJpbmdDb250ZXh0fSBjb250ZXh0XG4gICAgICovXG4gICAgUmVuZGVyLmJvZHlCb3VuZHMgPSBmdW5jdGlvbihyZW5kZXIsIGJvZGllcywgY29udGV4dCkge1xuICAgICAgICB2YXIgYyA9IGNvbnRleHQsXG4gICAgICAgICAgICBlbmdpbmUgPSByZW5kZXIuZW5naW5lLFxuICAgICAgICAgICAgb3B0aW9ucyA9IHJlbmRlci5vcHRpb25zO1xuXG4gICAgICAgIGMuYmVnaW5QYXRoKCk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBib2R5ID0gYm9kaWVzW2ldO1xuXG4gICAgICAgICAgICBpZiAoYm9keS5yZW5kZXIudmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIHZhciBwYXJ0cyA9IGJvZGllc1tpXS5wYXJ0cztcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gcGFydHMubGVuZ3RoID4gMSA/IDEgOiAwOyBqIDwgcGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnQgPSBwYXJ0c1tqXTtcbiAgICAgICAgICAgICAgICAgICAgYy5yZWN0KHBhcnQuYm91bmRzLm1pbi54LCBwYXJ0LmJvdW5kcy5taW4ueSwgcGFydC5ib3VuZHMubWF4LnggLSBwYXJ0LmJvdW5kcy5taW4ueCwgcGFydC5ib3VuZHMubWF4LnkgLSBwYXJ0LmJvdW5kcy5taW4ueSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMud2lyZWZyYW1lcykge1xuICAgICAgICAgICAgYy5zdHJva2VTdHlsZSA9ICdyZ2JhKDI1NSwyNTUsMjU1LDAuMDgpJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGMuc3Ryb2tlU3R5bGUgPSAncmdiYSgwLDAsMCwwLjEpJztcbiAgICAgICAgfVxuXG4gICAgICAgIGMubGluZVdpZHRoID0gMTtcbiAgICAgICAgYy5zdHJva2UoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRHJhd3MgYm9keSBhbmdsZSBpbmRpY2F0b3JzIGFuZCBheGVzXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIGJvZHlBeGVzXG4gICAgICogQHBhcmFtIHtyZW5kZXJ9IHJlbmRlclxuICAgICAqIEBwYXJhbSB7Ym9keVtdfSBib2RpZXNcbiAgICAgKiBAcGFyYW0ge1JlbmRlcmluZ0NvbnRleHR9IGNvbnRleHRcbiAgICAgKi9cbiAgICBSZW5kZXIuYm9keUF4ZXMgPSBmdW5jdGlvbihyZW5kZXIsIGJvZGllcywgY29udGV4dCkge1xuICAgICAgICB2YXIgYyA9IGNvbnRleHQsXG4gICAgICAgICAgICBlbmdpbmUgPSByZW5kZXIuZW5naW5lLFxuICAgICAgICAgICAgb3B0aW9ucyA9IHJlbmRlci5vcHRpb25zLFxuICAgICAgICAgICAgcGFydCxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBqLFxuICAgICAgICAgICAgaztcblxuICAgICAgICBjLmJlZ2luUGF0aCgpO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBib2R5ID0gYm9kaWVzW2ldLFxuICAgICAgICAgICAgICAgIHBhcnRzID0gYm9keS5wYXJ0cztcblxuICAgICAgICAgICAgaWYgKCFib2R5LnJlbmRlci52aXNpYmxlKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zaG93QXhlcykge1xuICAgICAgICAgICAgICAgIC8vIHJlbmRlciBhbGwgYXhlc1xuICAgICAgICAgICAgICAgIGZvciAoaiA9IHBhcnRzLmxlbmd0aCA+IDEgPyAxIDogMDsgaiA8IHBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnQgPSBwYXJ0c1tqXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChrID0gMDsgayA8IHBhcnQuYXhlcy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF4aXMgPSBwYXJ0LmF4ZXNba107XG4gICAgICAgICAgICAgICAgICAgICAgICBjLm1vdmVUbyhwYXJ0LnBvc2l0aW9uLngsIHBhcnQucG9zaXRpb24ueSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjLmxpbmVUbyhwYXJ0LnBvc2l0aW9uLnggKyBheGlzLnggKiAyMCwgcGFydC5wb3NpdGlvbi55ICsgYXhpcy55ICogMjApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3IgKGogPSBwYXJ0cy5sZW5ndGggPiAxID8gMSA6IDA7IGogPCBwYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBwYXJ0ID0gcGFydHNbal07XG4gICAgICAgICAgICAgICAgICAgIGZvciAoayA9IDA7IGsgPCBwYXJ0LmF4ZXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbmRlciBhIHNpbmdsZSBheGlzIGluZGljYXRvclxuICAgICAgICAgICAgICAgICAgICAgICAgYy5tb3ZlVG8ocGFydC5wb3NpdGlvbi54LCBwYXJ0LnBvc2l0aW9uLnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYy5saW5lVG8oKHBhcnQudmVydGljZXNbMF0ueCArIHBhcnQudmVydGljZXNbcGFydC52ZXJ0aWNlcy5sZW5ndGgtMV0ueCkgLyAyLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChwYXJ0LnZlcnRpY2VzWzBdLnkgKyBwYXJ0LnZlcnRpY2VzW3BhcnQudmVydGljZXMubGVuZ3RoLTFdLnkpIC8gMik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy53aXJlZnJhbWVzKSB7XG4gICAgICAgICAgICBjLnN0cm9rZVN0eWxlID0gJ2luZGlhbnJlZCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjLnN0cm9rZVN0eWxlID0gJ3JnYmEoMCwwLDAsMC44KSc7XG4gICAgICAgICAgICBjLmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9ICdvdmVybGF5JztcbiAgICAgICAgfVxuXG4gICAgICAgIGMubGluZVdpZHRoID0gMTtcbiAgICAgICAgYy5zdHJva2UoKTtcbiAgICAgICAgYy5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAnc291cmNlLW92ZXInO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEcmF3cyBib2R5IHBvc2l0aW9uc1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCBib2R5UG9zaXRpb25zXG4gICAgICogQHBhcmFtIHtyZW5kZXJ9IHJlbmRlclxuICAgICAqIEBwYXJhbSB7Ym9keVtdfSBib2RpZXNcbiAgICAgKiBAcGFyYW0ge1JlbmRlcmluZ0NvbnRleHR9IGNvbnRleHRcbiAgICAgKi9cbiAgICBSZW5kZXIuYm9keVBvc2l0aW9ucyA9IGZ1bmN0aW9uKHJlbmRlciwgYm9kaWVzLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBjID0gY29udGV4dCxcbiAgICAgICAgICAgIGVuZ2luZSA9IHJlbmRlci5lbmdpbmUsXG4gICAgICAgICAgICBvcHRpb25zID0gcmVuZGVyLm9wdGlvbnMsXG4gICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgcGFydCxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBrO1xuXG4gICAgICAgIGMuYmVnaW5QYXRoKCk7XG5cbiAgICAgICAgLy8gcmVuZGVyIGN1cnJlbnQgcG9zaXRpb25zXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGJvZHkgPSBib2RpZXNbaV07XG5cbiAgICAgICAgICAgIGlmICghYm9keS5yZW5kZXIudmlzaWJsZSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgLy8gaGFuZGxlIGNvbXBvdW5kIHBhcnRzXG4gICAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwgYm9keS5wYXJ0cy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgIHBhcnQgPSBib2R5LnBhcnRzW2tdO1xuICAgICAgICAgICAgICAgIGMuYXJjKHBhcnQucG9zaXRpb24ueCwgcGFydC5wb3NpdGlvbi55LCAzLCAwLCAyICogTWF0aC5QSSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGMuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy53aXJlZnJhbWVzKSB7XG4gICAgICAgICAgICBjLmZpbGxTdHlsZSA9ICdpbmRpYW5yZWQnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYy5maWxsU3R5bGUgPSAncmdiYSgwLDAsMCwwLjUpJztcbiAgICAgICAgfVxuICAgICAgICBjLmZpbGwoKTtcblxuICAgICAgICBjLmJlZ2luUGF0aCgpO1xuXG4gICAgICAgIC8vIHJlbmRlciBwcmV2aW91cyBwb3NpdGlvbnNcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYm9keSA9IGJvZGllc1tpXTtcbiAgICAgICAgICAgIGlmIChib2R5LnJlbmRlci52aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgYy5hcmMoYm9keS5wb3NpdGlvblByZXYueCwgYm9keS5wb3NpdGlvblByZXYueSwgMiwgMCwgMiAqIE1hdGguUEksIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBjLmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYy5maWxsU3R5bGUgPSAncmdiYSgyNTUsMTY1LDAsMC44KSc7XG4gICAgICAgIGMuZmlsbCgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEcmF3cyBib2R5IHZlbG9jaXR5XG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIGJvZHlWZWxvY2l0eVxuICAgICAqIEBwYXJhbSB7cmVuZGVyfSByZW5kZXJcbiAgICAgKiBAcGFyYW0ge2JvZHlbXX0gYm9kaWVzXG4gICAgICogQHBhcmFtIHtSZW5kZXJpbmdDb250ZXh0fSBjb250ZXh0XG4gICAgICovXG4gICAgUmVuZGVyLmJvZHlWZWxvY2l0eSA9IGZ1bmN0aW9uKHJlbmRlciwgYm9kaWVzLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBjID0gY29udGV4dDtcblxuICAgICAgICBjLmJlZ2luUGF0aCgpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYm9keSA9IGJvZGllc1tpXTtcblxuICAgICAgICAgICAgaWYgKCFib2R5LnJlbmRlci52aXNpYmxlKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBjLm1vdmVUbyhib2R5LnBvc2l0aW9uLngsIGJvZHkucG9zaXRpb24ueSk7XG4gICAgICAgICAgICBjLmxpbmVUbyhib2R5LnBvc2l0aW9uLnggKyAoYm9keS5wb3NpdGlvbi54IC0gYm9keS5wb3NpdGlvblByZXYueCkgKiAyLCBib2R5LnBvc2l0aW9uLnkgKyAoYm9keS5wb3NpdGlvbi55IC0gYm9keS5wb3NpdGlvblByZXYueSkgKiAyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGMubGluZVdpZHRoID0gMztcbiAgICAgICAgYy5zdHJva2VTdHlsZSA9ICdjb3JuZmxvd2VyYmx1ZSc7XG4gICAgICAgIGMuc3Ryb2tlKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERyYXdzIGJvZHkgaWRzXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIGJvZHlJZHNcbiAgICAgKiBAcGFyYW0ge3JlbmRlcn0gcmVuZGVyXG4gICAgICogQHBhcmFtIHtib2R5W119IGJvZGllc1xuICAgICAqIEBwYXJhbSB7UmVuZGVyaW5nQ29udGV4dH0gY29udGV4dFxuICAgICAqL1xuICAgIFJlbmRlci5ib2R5SWRzID0gZnVuY3Rpb24ocmVuZGVyLCBib2RpZXMsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGMgPSBjb250ZXh0LFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGo7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKCFib2RpZXNbaV0ucmVuZGVyLnZpc2libGUpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgIHZhciBwYXJ0cyA9IGJvZGllc1tpXS5wYXJ0cztcbiAgICAgICAgICAgIGZvciAoaiA9IHBhcnRzLmxlbmd0aCA+IDEgPyAxIDogMDsgaiA8IHBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhcnQgPSBwYXJ0c1tqXTtcbiAgICAgICAgICAgICAgICBjLmZvbnQgPSBcIjEycHggQXJpYWxcIjtcbiAgICAgICAgICAgICAgICBjLmZpbGxTdHlsZSA9ICdyZ2JhKDI1NSwyNTUsMjU1LDAuNSknO1xuICAgICAgICAgICAgICAgIGMuZmlsbFRleHQocGFydC5pZCwgcGFydC5wb3NpdGlvbi54ICsgMTAsIHBhcnQucG9zaXRpb24ueSAtIDEwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCBjb2xsaXNpb25zXG4gICAgICogQHBhcmFtIHtyZW5kZXJ9IHJlbmRlclxuICAgICAqIEBwYXJhbSB7cGFpcltdfSBwYWlyc1xuICAgICAqIEBwYXJhbSB7UmVuZGVyaW5nQ29udGV4dH0gY29udGV4dFxuICAgICAqL1xuICAgIFJlbmRlci5jb2xsaXNpb25zID0gZnVuY3Rpb24ocmVuZGVyLCBwYWlycywgY29udGV4dCkge1xuICAgICAgICB2YXIgYyA9IGNvbnRleHQsXG4gICAgICAgICAgICBvcHRpb25zID0gcmVuZGVyLm9wdGlvbnMsXG4gICAgICAgICAgICBwYWlyLFxuICAgICAgICAgICAgY29sbGlzaW9uLFxuICAgICAgICAgICAgY29ycmVjdGVkLFxuICAgICAgICAgICAgYm9keUEsXG4gICAgICAgICAgICBib2R5QixcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBqO1xuXG4gICAgICAgIGMuYmVnaW5QYXRoKCk7XG5cbiAgICAgICAgLy8gcmVuZGVyIGNvbGxpc2lvbiBwb3NpdGlvbnNcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhaXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBwYWlyID0gcGFpcnNbaV07XG5cbiAgICAgICAgICAgIGlmICghcGFpci5pc0FjdGl2ZSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgY29sbGlzaW9uID0gcGFpci5jb2xsaXNpb247XG4gICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgcGFpci5hY3RpdmVDb250YWN0cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBjb250YWN0ID0gcGFpci5hY3RpdmVDb250YWN0c1tqXSxcbiAgICAgICAgICAgICAgICAgICAgdmVydGV4ID0gY29udGFjdC52ZXJ0ZXg7XG4gICAgICAgICAgICAgICAgYy5yZWN0KHZlcnRleC54IC0gMS41LCB2ZXJ0ZXgueSAtIDEuNSwgMy41LCAzLjUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMud2lyZWZyYW1lcykge1xuICAgICAgICAgICAgYy5maWxsU3R5bGUgPSAncmdiYSgyNTUsMjU1LDI1NSwwLjcpJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGMuZmlsbFN0eWxlID0gJ29yYW5nZSc7XG4gICAgICAgIH1cbiAgICAgICAgYy5maWxsKCk7XG5cbiAgICAgICAgYy5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAvLyByZW5kZXIgY29sbGlzaW9uIG5vcm1hbHNcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhaXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBwYWlyID0gcGFpcnNbaV07XG5cbiAgICAgICAgICAgIGlmICghcGFpci5pc0FjdGl2ZSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgY29sbGlzaW9uID0gcGFpci5jb2xsaXNpb247XG5cbiAgICAgICAgICAgIGlmIChwYWlyLmFjdGl2ZUNvbnRhY3RzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgbm9ybWFsUG9zWCA9IHBhaXIuYWN0aXZlQ29udGFjdHNbMF0udmVydGV4LngsXG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbFBvc1kgPSBwYWlyLmFjdGl2ZUNvbnRhY3RzWzBdLnZlcnRleC55O1xuXG4gICAgICAgICAgICAgICAgaWYgKHBhaXIuYWN0aXZlQ29udGFjdHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbFBvc1ggPSAocGFpci5hY3RpdmVDb250YWN0c1swXS52ZXJ0ZXgueCArIHBhaXIuYWN0aXZlQ29udGFjdHNbMV0udmVydGV4LngpIC8gMjtcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFsUG9zWSA9IChwYWlyLmFjdGl2ZUNvbnRhY3RzWzBdLnZlcnRleC55ICsgcGFpci5hY3RpdmVDb250YWN0c1sxXS52ZXJ0ZXgueSkgLyAyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoY29sbGlzaW9uLmJvZHlCID09PSBjb2xsaXNpb24uc3VwcG9ydHNbMF0uYm9keSB8fCBjb2xsaXNpb24uYm9keUEuaXNTdGF0aWMgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgYy5tb3ZlVG8obm9ybWFsUG9zWCAtIGNvbGxpc2lvbi5ub3JtYWwueCAqIDgsIG5vcm1hbFBvc1kgLSBjb2xsaXNpb24ubm9ybWFsLnkgKiA4KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjLm1vdmVUbyhub3JtYWxQb3NYICsgY29sbGlzaW9uLm5vcm1hbC54ICogOCwgbm9ybWFsUG9zWSArIGNvbGxpc2lvbi5ub3JtYWwueSAqIDgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGMubGluZVRvKG5vcm1hbFBvc1gsIG5vcm1hbFBvc1kpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMud2lyZWZyYW1lcykge1xuICAgICAgICAgICAgYy5zdHJva2VTdHlsZSA9ICdyZ2JhKDI1NSwxNjUsMCwwLjcpJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGMuc3Ryb2tlU3R5bGUgPSAnb3JhbmdlJztcbiAgICAgICAgfVxuXG4gICAgICAgIGMubGluZVdpZHRoID0gMTtcbiAgICAgICAgYy5zdHJva2UoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzY3JpcHRpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2Qgc2VwYXJhdGlvbnNcbiAgICAgKiBAcGFyYW0ge3JlbmRlcn0gcmVuZGVyXG4gICAgICogQHBhcmFtIHtwYWlyW119IHBhaXJzXG4gICAgICogQHBhcmFtIHtSZW5kZXJpbmdDb250ZXh0fSBjb250ZXh0XG4gICAgICovXG4gICAgUmVuZGVyLnNlcGFyYXRpb25zID0gZnVuY3Rpb24ocmVuZGVyLCBwYWlycywgY29udGV4dCkge1xuICAgICAgICB2YXIgYyA9IGNvbnRleHQsXG4gICAgICAgICAgICBvcHRpb25zID0gcmVuZGVyLm9wdGlvbnMsXG4gICAgICAgICAgICBwYWlyLFxuICAgICAgICAgICAgY29sbGlzaW9uLFxuICAgICAgICAgICAgY29ycmVjdGVkLFxuICAgICAgICAgICAgYm9keUEsXG4gICAgICAgICAgICBib2R5QixcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBqO1xuXG4gICAgICAgIGMuYmVnaW5QYXRoKCk7XG5cbiAgICAgICAgLy8gcmVuZGVyIHNlcGFyYXRpb25zXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwYWlycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcGFpciA9IHBhaXJzW2ldO1xuXG4gICAgICAgICAgICBpZiAoIXBhaXIuaXNBY3RpdmUpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgIGNvbGxpc2lvbiA9IHBhaXIuY29sbGlzaW9uO1xuICAgICAgICAgICAgYm9keUEgPSBjb2xsaXNpb24uYm9keUE7XG4gICAgICAgICAgICBib2R5QiA9IGNvbGxpc2lvbi5ib2R5QjtcblxuICAgICAgICAgICAgdmFyIGsgPSAxO1xuXG4gICAgICAgICAgICBpZiAoIWJvZHlCLmlzU3RhdGljICYmICFib2R5QS5pc1N0YXRpYykgayA9IDAuNTtcbiAgICAgICAgICAgIGlmIChib2R5Qi5pc1N0YXRpYykgayA9IDA7XG5cbiAgICAgICAgICAgIGMubW92ZVRvKGJvZHlCLnBvc2l0aW9uLngsIGJvZHlCLnBvc2l0aW9uLnkpO1xuICAgICAgICAgICAgYy5saW5lVG8oYm9keUIucG9zaXRpb24ueCAtIGNvbGxpc2lvbi5wZW5ldHJhdGlvbi54ICogaywgYm9keUIucG9zaXRpb24ueSAtIGNvbGxpc2lvbi5wZW5ldHJhdGlvbi55ICogayk7XG5cbiAgICAgICAgICAgIGsgPSAxO1xuXG4gICAgICAgICAgICBpZiAoIWJvZHlCLmlzU3RhdGljICYmICFib2R5QS5pc1N0YXRpYykgayA9IDAuNTtcbiAgICAgICAgICAgIGlmIChib2R5QS5pc1N0YXRpYykgayA9IDA7XG5cbiAgICAgICAgICAgIGMubW92ZVRvKGJvZHlBLnBvc2l0aW9uLngsIGJvZHlBLnBvc2l0aW9uLnkpO1xuICAgICAgICAgICAgYy5saW5lVG8oYm9keUEucG9zaXRpb24ueCArIGNvbGxpc2lvbi5wZW5ldHJhdGlvbi54ICogaywgYm9keUEucG9zaXRpb24ueSArIGNvbGxpc2lvbi5wZW5ldHJhdGlvbi55ICogayk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy53aXJlZnJhbWVzKSB7XG4gICAgICAgICAgICBjLnN0cm9rZVN0eWxlID0gJ3JnYmEoMjU1LDE2NSwwLDAuNSknO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYy5zdHJva2VTdHlsZSA9ICdvcmFuZ2UnO1xuICAgICAgICB9XG4gICAgICAgIGMuc3Ryb2tlKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIGdyaWRcbiAgICAgKiBAcGFyYW0ge3JlbmRlcn0gcmVuZGVyXG4gICAgICogQHBhcmFtIHtncmlkfSBncmlkXG4gICAgICogQHBhcmFtIHtSZW5kZXJpbmdDb250ZXh0fSBjb250ZXh0XG4gICAgICovXG4gICAgUmVuZGVyLmdyaWQgPSBmdW5jdGlvbihyZW5kZXIsIGdyaWQsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGMgPSBjb250ZXh0LFxuICAgICAgICAgICAgb3B0aW9ucyA9IHJlbmRlci5vcHRpb25zO1xuXG4gICAgICAgIGlmIChvcHRpb25zLndpcmVmcmFtZXMpIHtcbiAgICAgICAgICAgIGMuc3Ryb2tlU3R5bGUgPSAncmdiYSgyNTUsMTgwLDAsMC4xKSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjLnN0cm9rZVN0eWxlID0gJ3JnYmEoMjU1LDE4MCwwLDAuNSknO1xuICAgICAgICB9XG5cbiAgICAgICAgYy5iZWdpblBhdGgoKTtcblxuICAgICAgICB2YXIgYnVja2V0S2V5cyA9IENvbW1vbi5rZXlzKGdyaWQuYnVja2V0cyk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBidWNrZXRLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYnVja2V0SWQgPSBidWNrZXRLZXlzW2ldO1xuXG4gICAgICAgICAgICBpZiAoZ3JpZC5idWNrZXRzW2J1Y2tldElkXS5sZW5ndGggPCAyKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICB2YXIgcmVnaW9uID0gYnVja2V0SWQuc3BsaXQoJywnKTtcbiAgICAgICAgICAgIGMucmVjdCgwLjUgKyBwYXJzZUludChyZWdpb25bMF0sIDEwKSAqIGdyaWQuYnVja2V0V2lkdGgsIFxuICAgICAgICAgICAgICAgICAgICAwLjUgKyBwYXJzZUludChyZWdpb25bMV0sIDEwKSAqIGdyaWQuYnVja2V0SGVpZ2h0LCBcbiAgICAgICAgICAgICAgICAgICAgZ3JpZC5idWNrZXRXaWR0aCwgXG4gICAgICAgICAgICAgICAgICAgIGdyaWQuYnVja2V0SGVpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGMubGluZVdpZHRoID0gMTtcbiAgICAgICAgYy5zdHJva2UoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzY3JpcHRpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2QgaW5zcGVjdG9yXG4gICAgICogQHBhcmFtIHtpbnNwZWN0b3J9IGluc3BlY3RvclxuICAgICAqIEBwYXJhbSB7UmVuZGVyaW5nQ29udGV4dH0gY29udGV4dFxuICAgICAqL1xuICAgIFJlbmRlci5pbnNwZWN0b3IgPSBmdW5jdGlvbihpbnNwZWN0b3IsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGVuZ2luZSA9IGluc3BlY3Rvci5lbmdpbmUsXG4gICAgICAgICAgICBzZWxlY3RlZCA9IGluc3BlY3Rvci5zZWxlY3RlZCxcbiAgICAgICAgICAgIHJlbmRlciA9IGluc3BlY3Rvci5yZW5kZXIsXG4gICAgICAgICAgICBvcHRpb25zID0gcmVuZGVyLm9wdGlvbnMsXG4gICAgICAgICAgICBib3VuZHM7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzQm91bmRzKSB7XG4gICAgICAgICAgICB2YXIgYm91bmRzV2lkdGggPSByZW5kZXIuYm91bmRzLm1heC54IC0gcmVuZGVyLmJvdW5kcy5taW4ueCxcbiAgICAgICAgICAgICAgICBib3VuZHNIZWlnaHQgPSByZW5kZXIuYm91bmRzLm1heC55IC0gcmVuZGVyLmJvdW5kcy5taW4ueSxcbiAgICAgICAgICAgICAgICBib3VuZHNTY2FsZVggPSBib3VuZHNXaWR0aCAvIHJlbmRlci5vcHRpb25zLndpZHRoLFxuICAgICAgICAgICAgICAgIGJvdW5kc1NjYWxlWSA9IGJvdW5kc0hlaWdodCAvIHJlbmRlci5vcHRpb25zLmhlaWdodDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29udGV4dC5zY2FsZSgxIC8gYm91bmRzU2NhbGVYLCAxIC8gYm91bmRzU2NhbGVZKTtcbiAgICAgICAgICAgIGNvbnRleHQudHJhbnNsYXRlKC1yZW5kZXIuYm91bmRzLm1pbi54LCAtcmVuZGVyLmJvdW5kcy5taW4ueSk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGVjdGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IHNlbGVjdGVkW2ldLmRhdGE7XG5cbiAgICAgICAgICAgIGNvbnRleHQudHJhbnNsYXRlKDAuNSwgMC41KTtcbiAgICAgICAgICAgIGNvbnRleHQubGluZVdpZHRoID0gMTtcbiAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSAncmdiYSgyNTUsMTY1LDAsMC45KSc7XG4gICAgICAgICAgICBjb250ZXh0LnNldExpbmVEYXNoKFsxLDJdKTtcblxuICAgICAgICAgICAgc3dpdGNoIChpdGVtLnR5cGUpIHtcblxuICAgICAgICAgICAgY2FzZSAnYm9keSc6XG5cbiAgICAgICAgICAgICAgICAvLyByZW5kZXIgYm9keSBzZWxlY3Rpb25zXG4gICAgICAgICAgICAgICAgYm91bmRzID0gaXRlbS5ib3VuZHM7XG4gICAgICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LnJlY3QoTWF0aC5mbG9vcihib3VuZHMubWluLnggLSAzKSwgTWF0aC5mbG9vcihib3VuZHMubWluLnkgLSAzKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguZmxvb3IoYm91bmRzLm1heC54IC0gYm91bmRzLm1pbi54ICsgNiksIE1hdGguZmxvb3IoYm91bmRzLm1heC55IC0gYm91bmRzLm1pbi55ICsgNikpO1xuICAgICAgICAgICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5zdHJva2UoKTtcblxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdjb25zdHJhaW50JzpcblxuICAgICAgICAgICAgICAgIC8vIHJlbmRlciBjb25zdHJhaW50IHNlbGVjdGlvbnNcbiAgICAgICAgICAgICAgICB2YXIgcG9pbnQgPSBpdGVtLnBvaW50QTtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5ib2R5QSlcbiAgICAgICAgICAgICAgICAgICAgcG9pbnQgPSBpdGVtLnBvaW50QjtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgIGNvbnRleHQuYXJjKHBvaW50LngsIHBvaW50LnksIDEwLCAwLCAyICogTWF0aC5QSSk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29udGV4dC5zZXRMaW5lRGFzaChbXSk7XG4gICAgICAgICAgICBjb250ZXh0LnRyYW5zbGF0ZSgtMC41LCAtMC41KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlbmRlciBzZWxlY3Rpb24gcmVnaW9uXG4gICAgICAgIGlmIChpbnNwZWN0b3Iuc2VsZWN0U3RhcnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRleHQudHJhbnNsYXRlKDAuNSwgMC41KTtcbiAgICAgICAgICAgIGNvbnRleHQubGluZVdpZHRoID0gMTtcbiAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSAncmdiYSgyNTUsMTY1LDAsMC42KSc7XG4gICAgICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9ICdyZ2JhKDI1NSwxNjUsMCwwLjEpJztcbiAgICAgICAgICAgIGJvdW5kcyA9IGluc3BlY3Rvci5zZWxlY3RCb3VuZHM7XG4gICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgY29udGV4dC5yZWN0KE1hdGguZmxvb3IoYm91bmRzLm1pbi54KSwgTWF0aC5mbG9vcihib3VuZHMubWluLnkpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLmZsb29yKGJvdW5kcy5tYXgueCAtIGJvdW5kcy5taW4ueCksIE1hdGguZmxvb3IoYm91bmRzLm1heC55IC0gYm91bmRzLm1pbi55KSk7XG4gICAgICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgY29udGV4dC5zdHJva2UoKTtcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbCgpO1xuICAgICAgICAgICAgY29udGV4dC50cmFuc2xhdGUoLTAuNSwgLTAuNSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5oYXNCb3VuZHMpXG4gICAgICAgICAgICBjb250ZXh0LnNldFRyYW5zZm9ybSgxLCAwLCAwLCAxLCAwLCAwKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzY3JpcHRpb25cbiAgICAgKiBAbWV0aG9kIF9jcmVhdGVDYW52YXNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7fSB3aWR0aFxuICAgICAqIEBwYXJhbSB7fSBoZWlnaHRcbiAgICAgKiBAcmV0dXJuIGNhbnZhc1xuICAgICAqL1xuICAgIHZhciBfY3JlYXRlQ2FudmFzID0gZnVuY3Rpb24od2lkdGgsIGhlaWdodCkge1xuICAgICAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgIGNhbnZhcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICBjYW52YXMub25jb250ZXh0bWVudSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gZmFsc2U7IH07XG4gICAgICAgIGNhbnZhcy5vbnNlbGVjdHN0YXJ0ID0gZnVuY3Rpb24oKSB7IHJldHVybiBmYWxzZTsgfTtcbiAgICAgICAgcmV0dXJuIGNhbnZhcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcGl4ZWwgcmF0aW8gb2YgdGhlIGNhbnZhcy5cbiAgICAgKiBAbWV0aG9kIF9nZXRQaXhlbFJhdGlvXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBjYW52YXNcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IHBpeGVsIHJhdGlvXG4gICAgICovXG4gICAgdmFyIF9nZXRQaXhlbFJhdGlvID0gZnVuY3Rpb24oY2FudmFzKSB7XG4gICAgICAgIHZhciBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyksXG4gICAgICAgICAgICBkZXZpY2VQaXhlbFJhdGlvID0gd2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMSxcbiAgICAgICAgICAgIGJhY2tpbmdTdG9yZVBpeGVsUmF0aW8gPSBjb250ZXh0LndlYmtpdEJhY2tpbmdTdG9yZVBpeGVsUmF0aW8gfHwgY29udGV4dC5tb3pCYWNraW5nU3RvcmVQaXhlbFJhdGlvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IGNvbnRleHQubXNCYWNraW5nU3RvcmVQaXhlbFJhdGlvIHx8IGNvbnRleHQub0JhY2tpbmdTdG9yZVBpeGVsUmF0aW9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgY29udGV4dC5iYWNraW5nU3RvcmVQaXhlbFJhdGlvIHx8IDE7XG5cbiAgICAgICAgcmV0dXJuIGRldmljZVBpeGVsUmF0aW8gLyBiYWNraW5nU3RvcmVQaXhlbFJhdGlvO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSByZXF1ZXN0ZWQgdGV4dHVyZSAoYW4gSW1hZ2UpIHZpYSBpdHMgcGF0aFxuICAgICAqIEBtZXRob2QgX2dldFRleHR1cmVcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7cmVuZGVyfSByZW5kZXJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaW1hZ2VQYXRoXG4gICAgICogQHJldHVybiB7SW1hZ2V9IHRleHR1cmVcbiAgICAgKi9cbiAgICB2YXIgX2dldFRleHR1cmUgPSBmdW5jdGlvbihyZW5kZXIsIGltYWdlUGF0aCkge1xuICAgICAgICB2YXIgaW1hZ2UgPSByZW5kZXIudGV4dHVyZXNbaW1hZ2VQYXRoXTtcblxuICAgICAgICBpZiAoaW1hZ2UpXG4gICAgICAgICAgICByZXR1cm4gaW1hZ2U7XG5cbiAgICAgICAgaW1hZ2UgPSByZW5kZXIudGV4dHVyZXNbaW1hZ2VQYXRoXSA9IG5ldyBJbWFnZSgpO1xuICAgICAgICBpbWFnZS5zcmMgPSBpbWFnZVBhdGg7XG5cbiAgICAgICAgcmV0dXJuIGltYWdlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIHRoZSBiYWNrZ3JvdW5kIHRvIHRoZSBjYW52YXMgdXNpbmcgQ1NTLlxuICAgICAqIEBtZXRob2QgYXBwbHlCYWNrZ3JvdW5kXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3JlbmRlcn0gcmVuZGVyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGJhY2tncm91bmRcbiAgICAgKi9cbiAgICB2YXIgX2FwcGx5QmFja2dyb3VuZCA9IGZ1bmN0aW9uKHJlbmRlciwgYmFja2dyb3VuZCkge1xuICAgICAgICB2YXIgY3NzQmFja2dyb3VuZCA9IGJhY2tncm91bmQ7XG5cbiAgICAgICAgaWYgKC8oanBnfGdpZnxwbmcpJC8udGVzdChiYWNrZ3JvdW5kKSlcbiAgICAgICAgICAgIGNzc0JhY2tncm91bmQgPSAndXJsKCcgKyBiYWNrZ3JvdW5kICsgJyknO1xuXG4gICAgICAgIHJlbmRlci5jYW52YXMuc3R5bGUuYmFja2dyb3VuZCA9IGNzc0JhY2tncm91bmQ7XG4gICAgICAgIHJlbmRlci5jYW52YXMuc3R5bGUuYmFja2dyb3VuZFNpemUgPSBcImNvbnRhaW5cIjtcbiAgICAgICAgcmVuZGVyLmN1cnJlbnRCYWNrZ3JvdW5kID0gYmFja2dyb3VuZDtcbiAgICB9O1xuXG4gICAgLypcbiAgICAqXG4gICAgKiAgRXZlbnRzIERvY3VtZW50YXRpb25cbiAgICAqXG4gICAgKi9cblxuICAgIC8qKlxuICAgICogRmlyZWQgYmVmb3JlIHJlbmRlcmluZ1xuICAgICpcbiAgICAqIEBldmVudCBiZWZvcmVSZW5kZXJcbiAgICAqIEBwYXJhbSB7fSBldmVudCBBbiBldmVudCBvYmplY3RcbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBldmVudC50aW1lc3RhbXAgVGhlIGVuZ2luZS50aW1pbmcudGltZXN0YW1wIG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50LnNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5uYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgICovXG5cbiAgICAvKipcbiAgICAqIEZpcmVkIGFmdGVyIHJlbmRlcmluZ1xuICAgICpcbiAgICAqIEBldmVudCBhZnRlclJlbmRlclxuICAgICogQHBhcmFtIHt9IGV2ZW50IEFuIGV2ZW50IG9iamVjdFxuICAgICogQHBhcmFtIHtudW1iZXJ9IGV2ZW50LnRpbWVzdGFtcCBUaGUgZW5naW5lLnRpbWluZy50aW1lc3RhbXAgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQuc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgKi9cblxuICAgIC8qXG4gICAgKlxuICAgICogIFByb3BlcnRpZXMgRG9jdW1lbnRhdGlvblxuICAgICpcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBiYWNrLXJlZmVyZW5jZSB0byB0aGUgYE1hdHRlci5SZW5kZXJgIG1vZHVsZS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBjb250cm9sbGVyXG4gICAgICogQHR5cGUgcmVuZGVyXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgYE1hdHRlci5FbmdpbmVgIGluc3RhbmNlIHRvIGJlIHVzZWQuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgZW5naW5lXG4gICAgICogQHR5cGUgZW5naW5lXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgZWxlbWVudCB3aGVyZSB0aGUgY2FudmFzIGlzIHRvIGJlIGluc2VydGVkIChpZiBgcmVuZGVyLmNhbnZhc2AgaGFzIG5vdCBiZWVuIHNwZWNpZmllZClcbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBlbGVtZW50XG4gICAgICogQHR5cGUgSFRNTEVsZW1lbnRcbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgY2FudmFzIGVsZW1lbnQgdG8gcmVuZGVyIHRvLiBJZiBub3Qgc3BlY2lmaWVkLCBvbmUgd2lsbCBiZSBjcmVhdGVkIGlmIGByZW5kZXIuZWxlbWVudGAgaGFzIGJlZW4gc3BlY2lmaWVkLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGNhbnZhc1xuICAgICAqIEB0eXBlIEhUTUxDYW52YXNFbGVtZW50XG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBvZiB0aGUgcmVuZGVyZXIuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgb3B0aW9uc1xuICAgICAqIEB0eXBlIHt9XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgdGFyZ2V0IHdpZHRoIGluIHBpeGVscyBvZiB0aGUgYHJlbmRlci5jYW52YXNgIHRvIGJlIGNyZWF0ZWQuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgb3B0aW9ucy53aWR0aFxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDgwMFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogVGhlIHRhcmdldCBoZWlnaHQgaW4gcGl4ZWxzIG9mIHRoZSBgcmVuZGVyLmNhbnZhc2AgdG8gYmUgY3JlYXRlZC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBvcHRpb25zLmhlaWdodFxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDYwMFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBmbGFnIHRoYXQgc3BlY2lmaWVzIGlmIGByZW5kZXIuYm91bmRzYCBzaG91bGQgYmUgdXNlZCB3aGVuIHJlbmRlcmluZy5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBvcHRpb25zLmhhc0JvdW5kc1xuICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgQm91bmRzYCBvYmplY3QgdGhhdCBzcGVjaWZpZXMgdGhlIGRyYXdpbmcgdmlldyByZWdpb24uIFxuICAgICAqIFJlbmRlcmluZyB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgdHJhbnNmb3JtZWQgYW5kIHNjYWxlZCB0byBmaXQgd2l0aGluIHRoZSBjYW52YXMgc2l6ZSAoYHJlbmRlci5vcHRpb25zLndpZHRoYCBhbmQgYHJlbmRlci5vcHRpb25zLmhlaWdodGApLlxuICAgICAqIFRoaXMgYWxsb3dzIGZvciBjcmVhdGluZyB2aWV3cyB0aGF0IGNhbiBwYW4gb3Igem9vbSBhcm91bmQgdGhlIHNjZW5lLlxuICAgICAqIFlvdSBtdXN0IGFsc28gc2V0IGByZW5kZXIub3B0aW9ucy5oYXNCb3VuZHNgIHRvIGB0cnVlYCB0byBlbmFibGUgYm91bmRlZCByZW5kZXJpbmcuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgYm91bmRzXG4gICAgICogQHR5cGUgYm91bmRzXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgMmQgcmVuZGVyaW5nIGNvbnRleHQgZnJvbSB0aGUgYHJlbmRlci5jYW52YXNgIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgY29udGV4dFxuICAgICAqIEB0eXBlIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNwcml0ZSB0ZXh0dXJlIGNhY2hlLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHRleHR1cmVzXG4gICAgICogQHR5cGUge31cbiAgICAgKi9cblxufSkoKTtcblxufSx7XCIuLi9ib2R5L0NvbXBvc2l0ZVwiOjIsXCIuLi9jb2xsaXNpb24vR3JpZFwiOjYsXCIuLi9jb3JlL0NvbW1vblwiOjE0LFwiLi4vY29yZS9FdmVudHNcIjoxNixcIi4uL2dlb21ldHJ5L0JvdW5kc1wiOjI0LFwiLi4vZ2VvbWV0cnkvVmVjdG9yXCI6MjZ9XSwzMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiogVGhlIGBNYXR0ZXIuUmVuZGVyUGl4aWAgbW9kdWxlIGlzIGFuIGV4YW1wbGUgcmVuZGVyZXIgdXNpbmcgcGl4aS5qcy5cbiogU2VlIGFsc28gYE1hdHRlci5SZW5kZXJgIGZvciBhIGNhbnZhcyBiYXNlZCByZW5kZXJlci5cbipcbiogQGNsYXNzIFJlbmRlclBpeGlcbiogQGRlcHJlY2F0ZWQgdGhlIE1hdHRlci5SZW5kZXJQaXhpIG1vZHVsZSB3aWxsIHNvb24gYmUgcmVtb3ZlZCBmcm9tIHRoZSBNYXR0ZXIuanMgY29yZS5cbiogSXQgd2lsbCBsaWtlbHkgYmUgbW92ZWQgdG8gaXRzIG93biByZXBvc2l0b3J5IChidXQgbWFpbnRlbmFuY2Ugd2lsbCBiZSBsaW1pdGVkKS5cbiovXG5cbnZhciBSZW5kZXJQaXhpID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gUmVuZGVyUGl4aTtcblxudmFyIENvbXBvc2l0ZSA9IHJlcXVpcmUoJy4uL2JvZHkvQ29tcG9zaXRlJyk7XG52YXIgQ29tbW9uID0gcmVxdWlyZSgnLi4vY29yZS9Db21tb24nKTtcblxuKGZ1bmN0aW9uKCkge1xuXG4gICAgdmFyIF9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUsXG4gICAgICAgIF9jYW5jZWxBbmltYXRpb25GcmFtZTtcblxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBfcmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgd2luZG93Lm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBmdW5jdGlvbihjYWxsYmFjayl7IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBjYWxsYmFjayhDb21tb24ubm93KCkpOyB9LCAxMDAwIC8gNjApOyB9O1xuICAgXG4gICAgICAgIF9jYW5jZWxBbmltYXRpb25GcmFtZSA9IHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cubW96Q2FuY2VsQW5pbWF0aW9uRnJhbWUgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IHdpbmRvdy53ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cubXNDYW5jZWxBbmltYXRpb25GcmFtZTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBQaXhpLmpzIFdlYkdMIHJlbmRlcmVyXG4gICAgICogQG1ldGhvZCBjcmVhdGVcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICAgICAqIEByZXR1cm4ge1JlbmRlclBpeGl9IEEgbmV3IHJlbmRlcmVyXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKi9cbiAgICBSZW5kZXJQaXhpLmNyZWF0ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgQ29tbW9uLmxvZygnUmVuZGVyUGl4aS5jcmVhdGU6IE1hdHRlci5SZW5kZXJQaXhpIGlzIGRlcHJlY2F0ZWQgKHNlZSBkb2NzKScsICd3YXJuJyk7XG5cbiAgICAgICAgdmFyIGRlZmF1bHRzID0ge1xuICAgICAgICAgICAgY29udHJvbGxlcjogUmVuZGVyUGl4aSxcbiAgICAgICAgICAgIGVuZ2luZTogbnVsbCxcbiAgICAgICAgICAgIGVsZW1lbnQ6IG51bGwsXG4gICAgICAgICAgICBmcmFtZVJlcXVlc3RJZDogbnVsbCxcbiAgICAgICAgICAgIGNhbnZhczogbnVsbCxcbiAgICAgICAgICAgIHJlbmRlcmVyOiBudWxsLFxuICAgICAgICAgICAgY29udGFpbmVyOiBudWxsLFxuICAgICAgICAgICAgc3ByaXRlQ29udGFpbmVyOiBudWxsLFxuICAgICAgICAgICAgcGl4aU9wdGlvbnM6IG51bGwsXG4gICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IDgwMCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDYwMCxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAnI2ZhZmFmYScsXG4gICAgICAgICAgICAgICAgd2lyZWZyYW1lQmFja2dyb3VuZDogJyMyMjInLFxuICAgICAgICAgICAgICAgIGhhc0JvdW5kczogZmFsc2UsXG4gICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB3aXJlZnJhbWVzOiB0cnVlLFxuICAgICAgICAgICAgICAgIHNob3dTbGVlcGluZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzaG93RGVidWc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNob3dCcm9hZHBoYXNlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaG93Qm91bmRzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaG93VmVsb2NpdHk6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNob3dDb2xsaXNpb25zOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaG93QXhlczogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2hvd1Bvc2l0aW9uczogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2hvd0FuZ2xlSW5kaWNhdG9yOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaG93SWRzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaG93U2hhZG93czogZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgcmVuZGVyID0gQ29tbW9uLmV4dGVuZChkZWZhdWx0cywgb3B0aW9ucyksXG4gICAgICAgICAgICB0cmFuc3BhcmVudCA9ICFyZW5kZXIub3B0aW9ucy53aXJlZnJhbWVzICYmIHJlbmRlci5vcHRpb25zLmJhY2tncm91bmQgPT09ICd0cmFuc3BhcmVudCc7XG5cbiAgICAgICAgLy8gaW5pdCBwaXhpXG4gICAgICAgIHJlbmRlci5waXhpT3B0aW9ucyA9IHJlbmRlci5waXhpT3B0aW9ucyB8fCB7XG4gICAgICAgICAgICB2aWV3OiByZW5kZXIuY2FudmFzLFxuICAgICAgICAgICAgdHJhbnNwYXJlbnQ6IHRyYW5zcGFyZW50LFxuICAgICAgICAgICAgYW50aWFsaWFzOiB0cnVlLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBvcHRpb25zLmJhY2tncm91bmRcbiAgICAgICAgfTtcblxuICAgICAgICByZW5kZXIubW91c2UgPSBvcHRpb25zLm1vdXNlO1xuICAgICAgICByZW5kZXIuZW5naW5lID0gb3B0aW9ucy5lbmdpbmU7XG4gICAgICAgIHJlbmRlci5yZW5kZXJlciA9IHJlbmRlci5yZW5kZXJlciB8fCBuZXcgUElYSS5XZWJHTFJlbmRlcmVyKHJlbmRlci5vcHRpb25zLndpZHRoLCByZW5kZXIub3B0aW9ucy5oZWlnaHQsIHJlbmRlci5waXhpT3B0aW9ucyk7XG4gICAgICAgIHJlbmRlci5jb250YWluZXIgPSByZW5kZXIuY29udGFpbmVyIHx8IG5ldyBQSVhJLkNvbnRhaW5lcigpO1xuICAgICAgICByZW5kZXIuc3ByaXRlQ29udGFpbmVyID0gcmVuZGVyLnNwcml0ZUNvbnRhaW5lciB8fCBuZXcgUElYSS5Db250YWluZXIoKTtcbiAgICAgICAgcmVuZGVyLmNhbnZhcyA9IHJlbmRlci5jYW52YXMgfHwgcmVuZGVyLnJlbmRlcmVyLnZpZXc7XG4gICAgICAgIHJlbmRlci5ib3VuZHMgPSByZW5kZXIuYm91bmRzIHx8IHsgXG4gICAgICAgICAgICBtaW46IHtcbiAgICAgICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgICAgIHk6IDBcbiAgICAgICAgICAgIH0sIFxuICAgICAgICAgICAgbWF4OiB7IFxuICAgICAgICAgICAgICAgIHg6IHJlbmRlci5vcHRpb25zLndpZHRoLFxuICAgICAgICAgICAgICAgIHk6IHJlbmRlci5vcHRpb25zLmhlaWdodFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIGNhY2hlc1xuICAgICAgICByZW5kZXIudGV4dHVyZXMgPSB7fTtcbiAgICAgICAgcmVuZGVyLnNwcml0ZXMgPSB7fTtcbiAgICAgICAgcmVuZGVyLnByaW1pdGl2ZXMgPSB7fTtcblxuICAgICAgICAvLyB1c2UgYSBzcHJpdGUgYmF0Y2ggZm9yIHBlcmZvcm1hbmNlXG4gICAgICAgIHJlbmRlci5jb250YWluZXIuYWRkQ2hpbGQocmVuZGVyLnNwcml0ZUNvbnRhaW5lcik7XG5cbiAgICAgICAgLy8gaW5zZXJ0IGNhbnZhc1xuICAgICAgICBpZiAoQ29tbW9uLmlzRWxlbWVudChyZW5kZXIuZWxlbWVudCkpIHtcbiAgICAgICAgICAgIHJlbmRlci5lbGVtZW50LmFwcGVuZENoaWxkKHJlbmRlci5jYW52YXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgQ29tbW9uLmxvZygnTm8gXCJyZW5kZXIuZWxlbWVudFwiIHBhc3NlZCwgXCJyZW5kZXIuY2FudmFzXCIgd2FzIG5vdCBpbnNlcnRlZCBpbnRvIGRvY3VtZW50LicsICd3YXJuJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBwcmV2ZW50IG1lbnVzIG9uIGNhbnZhc1xuICAgICAgICByZW5kZXIuY2FudmFzLm9uY29udGV4dG1lbnUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGZhbHNlOyB9O1xuICAgICAgICByZW5kZXIuY2FudmFzLm9uc2VsZWN0c3RhcnQgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGZhbHNlOyB9O1xuXG4gICAgICAgIHJldHVybiByZW5kZXI7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENvbnRpbnVvdXNseSB1cGRhdGVzIHRoZSByZW5kZXIgY2FudmFzIG9uIHRoZSBgcmVxdWVzdEFuaW1hdGlvbkZyYW1lYCBldmVudC5cbiAgICAgKiBAbWV0aG9kIHJ1blxuICAgICAqIEBwYXJhbSB7cmVuZGVyfSByZW5kZXJcbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqL1xuICAgIFJlbmRlclBpeGkucnVuID0gZnVuY3Rpb24ocmVuZGVyKSB7XG4gICAgICAgIChmdW5jdGlvbiBsb29wKHRpbWUpe1xuICAgICAgICAgICAgcmVuZGVyLmZyYW1lUmVxdWVzdElkID0gX3JlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKTtcbiAgICAgICAgICAgIFJlbmRlclBpeGkud29ybGQocmVuZGVyKTtcbiAgICAgICAgfSkoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRW5kcyBleGVjdXRpb24gb2YgYFJlbmRlci5ydW5gIG9uIHRoZSBnaXZlbiBgcmVuZGVyYCwgYnkgY2FuY2VsaW5nIHRoZSBhbmltYXRpb24gZnJhbWUgcmVxdWVzdCBldmVudCBsb29wLlxuICAgICAqIEBtZXRob2Qgc3RvcFxuICAgICAqIEBwYXJhbSB7cmVuZGVyfSByZW5kZXJcbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqL1xuICAgIFJlbmRlclBpeGkuc3RvcCA9IGZ1bmN0aW9uKHJlbmRlcikge1xuICAgICAgICBfY2FuY2VsQW5pbWF0aW9uRnJhbWUocmVuZGVyLmZyYW1lUmVxdWVzdElkKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2xlYXJzIHRoZSBzY2VuZSBncmFwaFxuICAgICAqIEBtZXRob2QgY2xlYXJcbiAgICAgKiBAcGFyYW0ge1JlbmRlclBpeGl9IHJlbmRlclxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgUmVuZGVyUGl4aS5jbGVhciA9IGZ1bmN0aW9uKHJlbmRlcikge1xuICAgICAgICB2YXIgY29udGFpbmVyID0gcmVuZGVyLmNvbnRhaW5lcixcbiAgICAgICAgICAgIHNwcml0ZUNvbnRhaW5lciA9IHJlbmRlci5zcHJpdGVDb250YWluZXI7XG5cbiAgICAgICAgLy8gY2xlYXIgc3RhZ2UgY29udGFpbmVyXG4gICAgICAgIHdoaWxlIChjb250YWluZXIuY2hpbGRyZW5bMF0pIHsgXG4gICAgICAgICAgICBjb250YWluZXIucmVtb3ZlQ2hpbGQoY29udGFpbmVyLmNoaWxkcmVuWzBdKTsgXG4gICAgICAgIH1cblxuICAgICAgICAvLyBjbGVhciBzcHJpdGUgYmF0Y2hcbiAgICAgICAgd2hpbGUgKHNwcml0ZUNvbnRhaW5lci5jaGlsZHJlblswXSkgeyBcbiAgICAgICAgICAgIHNwcml0ZUNvbnRhaW5lci5yZW1vdmVDaGlsZChzcHJpdGVDb250YWluZXIuY2hpbGRyZW5bMF0pOyBcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBiZ1Nwcml0ZSA9IHJlbmRlci5zcHJpdGVzWydiZy0wJ107XG5cbiAgICAgICAgLy8gY2xlYXIgY2FjaGVzXG4gICAgICAgIHJlbmRlci50ZXh0dXJlcyA9IHt9O1xuICAgICAgICByZW5kZXIuc3ByaXRlcyA9IHt9O1xuICAgICAgICByZW5kZXIucHJpbWl0aXZlcyA9IHt9O1xuXG4gICAgICAgIC8vIHNldCBiYWNrZ3JvdW5kIHNwcml0ZVxuICAgICAgICByZW5kZXIuc3ByaXRlc1snYmctMCddID0gYmdTcHJpdGU7XG4gICAgICAgIGlmIChiZ1Nwcml0ZSlcbiAgICAgICAgICAgIGNvbnRhaW5lci5hZGRDaGlsZEF0KGJnU3ByaXRlLCAwKTtcblxuICAgICAgICAvLyBhZGQgc3ByaXRlIGJhdGNoIGJhY2sgaW50byBjb250YWluZXJcbiAgICAgICAgcmVuZGVyLmNvbnRhaW5lci5hZGRDaGlsZChyZW5kZXIuc3ByaXRlQ29udGFpbmVyKTtcblxuICAgICAgICAvLyByZXNldCBiYWNrZ3JvdW5kIHN0YXRlXG4gICAgICAgIHJlbmRlci5jdXJyZW50QmFja2dyb3VuZCA9IG51bGw7XG5cbiAgICAgICAgLy8gcmVzZXQgYm91bmRzIHRyYW5zZm9ybXNcbiAgICAgICAgY29udGFpbmVyLnNjYWxlLnNldCgxLCAxKTtcbiAgICAgICAgY29udGFpbmVyLnBvc2l0aW9uLnNldCgwLCAwKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYmFja2dyb3VuZCBvZiB0aGUgY2FudmFzIFxuICAgICAqIEBtZXRob2Qgc2V0QmFja2dyb3VuZFxuICAgICAqIEBwYXJhbSB7UmVuZGVyUGl4aX0gcmVuZGVyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGJhY2tncm91bmRcbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqL1xuICAgIFJlbmRlclBpeGkuc2V0QmFja2dyb3VuZCA9IGZ1bmN0aW9uKHJlbmRlciwgYmFja2dyb3VuZCkge1xuICAgICAgICBpZiAocmVuZGVyLmN1cnJlbnRCYWNrZ3JvdW5kICE9PSBiYWNrZ3JvdW5kKSB7XG4gICAgICAgICAgICB2YXIgaXNDb2xvciA9IGJhY2tncm91bmQuaW5kZXhPZiAmJiBiYWNrZ3JvdW5kLmluZGV4T2YoJyMnKSAhPT0gLTEsXG4gICAgICAgICAgICAgICAgYmdTcHJpdGUgPSByZW5kZXIuc3ByaXRlc1snYmctMCddO1xuXG4gICAgICAgICAgICBpZiAoaXNDb2xvcikge1xuICAgICAgICAgICAgICAgIC8vIGlmIHNvbGlkIGJhY2tncm91bmQgY29sb3JcbiAgICAgICAgICAgICAgICB2YXIgY29sb3IgPSBDb21tb24uY29sb3JUb051bWJlcihiYWNrZ3JvdW5kKTtcbiAgICAgICAgICAgICAgICByZW5kZXIucmVuZGVyZXIuYmFja2dyb3VuZENvbG9yID0gY29sb3I7XG5cbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgYmFja2dyb3VuZCBzcHJpdGUgaWYgZXhpc3RpbmdcbiAgICAgICAgICAgICAgICBpZiAoYmdTcHJpdGUpXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlci5jb250YWluZXIucmVtb3ZlQ2hpbGQoYmdTcHJpdGUpOyBcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gaW5pdGlhbGlzZSBiYWNrZ3JvdW5kIHNwcml0ZSBpZiBuZWVkZWRcbiAgICAgICAgICAgICAgICBpZiAoIWJnU3ByaXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0dXJlID0gX2dldFRleHR1cmUocmVuZGVyLCBiYWNrZ3JvdW5kKTtcblxuICAgICAgICAgICAgICAgICAgICBiZ1Nwcml0ZSA9IHJlbmRlci5zcHJpdGVzWydiZy0wJ10gPSBuZXcgUElYSS5TcHJpdGUodGV4dHVyZSk7XG4gICAgICAgICAgICAgICAgICAgIGJnU3ByaXRlLnBvc2l0aW9uLnggPSAwO1xuICAgICAgICAgICAgICAgICAgICBiZ1Nwcml0ZS5wb3NpdGlvbi55ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyLmNvbnRhaW5lci5hZGRDaGlsZEF0KGJnU3ByaXRlLCAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlbmRlci5jdXJyZW50QmFja2dyb3VuZCA9IGJhY2tncm91bmQ7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzY3JpcHRpb25cbiAgICAgKiBAbWV0aG9kIHdvcmxkXG4gICAgICogQHBhcmFtIHtlbmdpbmV9IGVuZ2luZVxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgUmVuZGVyUGl4aS53b3JsZCA9IGZ1bmN0aW9uKHJlbmRlcikge1xuICAgICAgICB2YXIgZW5naW5lID0gcmVuZGVyLmVuZ2luZSxcbiAgICAgICAgICAgIHdvcmxkID0gZW5naW5lLndvcmxkLFxuICAgICAgICAgICAgcmVuZGVyZXIgPSByZW5kZXIucmVuZGVyZXIsXG4gICAgICAgICAgICBjb250YWluZXIgPSByZW5kZXIuY29udGFpbmVyLFxuICAgICAgICAgICAgb3B0aW9ucyA9IHJlbmRlci5vcHRpb25zLFxuICAgICAgICAgICAgYm9kaWVzID0gQ29tcG9zaXRlLmFsbEJvZGllcyh3b3JsZCksXG4gICAgICAgICAgICBhbGxDb25zdHJhaW50cyA9IENvbXBvc2l0ZS5hbGxDb25zdHJhaW50cyh3b3JsZCksXG4gICAgICAgICAgICBjb25zdHJhaW50cyA9IFtdLFxuICAgICAgICAgICAgaTtcblxuICAgICAgICBpZiAob3B0aW9ucy53aXJlZnJhbWVzKSB7XG4gICAgICAgICAgICBSZW5kZXJQaXhpLnNldEJhY2tncm91bmQocmVuZGVyLCBvcHRpb25zLndpcmVmcmFtZUJhY2tncm91bmQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgUmVuZGVyUGl4aS5zZXRCYWNrZ3JvdW5kKHJlbmRlciwgb3B0aW9ucy5iYWNrZ3JvdW5kKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGhhbmRsZSBib3VuZHNcbiAgICAgICAgdmFyIGJvdW5kc1dpZHRoID0gcmVuZGVyLmJvdW5kcy5tYXgueCAtIHJlbmRlci5ib3VuZHMubWluLngsXG4gICAgICAgICAgICBib3VuZHNIZWlnaHQgPSByZW5kZXIuYm91bmRzLm1heC55IC0gcmVuZGVyLmJvdW5kcy5taW4ueSxcbiAgICAgICAgICAgIGJvdW5kc1NjYWxlWCA9IGJvdW5kc1dpZHRoIC8gcmVuZGVyLm9wdGlvbnMud2lkdGgsXG4gICAgICAgICAgICBib3VuZHNTY2FsZVkgPSBib3VuZHNIZWlnaHQgLyByZW5kZXIub3B0aW9ucy5oZWlnaHQ7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzQm91bmRzKSB7XG4gICAgICAgICAgICAvLyBIaWRlIGJvZGllcyB0aGF0IGFyZSBub3QgaW4gdmlld1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBib2R5ID0gYm9kaWVzW2ldO1xuICAgICAgICAgICAgICAgIGJvZHkucmVuZGVyLnNwcml0ZS52aXNpYmxlID0gQm91bmRzLm92ZXJsYXBzKGJvZHkuYm91bmRzLCByZW5kZXIuYm91bmRzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gZmlsdGVyIG91dCBjb25zdHJhaW50cyB0aGF0IGFyZSBub3QgaW4gdmlld1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGFsbENvbnN0cmFpbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnN0cmFpbnQgPSBhbGxDb25zdHJhaW50c1tpXSxcbiAgICAgICAgICAgICAgICAgICAgYm9keUEgPSBjb25zdHJhaW50LmJvZHlBLFxuICAgICAgICAgICAgICAgICAgICBib2R5QiA9IGNvbnN0cmFpbnQuYm9keUIsXG4gICAgICAgICAgICAgICAgICAgIHBvaW50QVdvcmxkID0gY29uc3RyYWludC5wb2ludEEsXG4gICAgICAgICAgICAgICAgICAgIHBvaW50QldvcmxkID0gY29uc3RyYWludC5wb2ludEI7XG5cbiAgICAgICAgICAgICAgICBpZiAoYm9keUEpIHBvaW50QVdvcmxkID0gVmVjdG9yLmFkZChib2R5QS5wb3NpdGlvbiwgY29uc3RyYWludC5wb2ludEEpO1xuICAgICAgICAgICAgICAgIGlmIChib2R5QikgcG9pbnRCV29ybGQgPSBWZWN0b3IuYWRkKGJvZHlCLnBvc2l0aW9uLCBjb25zdHJhaW50LnBvaW50Qik7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXBvaW50QVdvcmxkIHx8ICFwb2ludEJXb3JsZClcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICBpZiAoQm91bmRzLmNvbnRhaW5zKHJlbmRlci5ib3VuZHMsIHBvaW50QVdvcmxkKSB8fCBCb3VuZHMuY29udGFpbnMocmVuZGVyLmJvdW5kcywgcG9pbnRCV29ybGQpKVxuICAgICAgICAgICAgICAgICAgICBjb25zdHJhaW50cy5wdXNoKGNvbnN0cmFpbnQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyB0cmFuc2Zvcm0gdGhlIHZpZXdcbiAgICAgICAgICAgIGNvbnRhaW5lci5zY2FsZS5zZXQoMSAvIGJvdW5kc1NjYWxlWCwgMSAvIGJvdW5kc1NjYWxlWSk7XG4gICAgICAgICAgICBjb250YWluZXIucG9zaXRpb24uc2V0KC1yZW5kZXIuYm91bmRzLm1pbi54ICogKDEgLyBib3VuZHNTY2FsZVgpLCAtcmVuZGVyLmJvdW5kcy5taW4ueSAqICgxIC8gYm91bmRzU2NhbGVZKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdHJhaW50cyA9IGFsbENvbnN0cmFpbnRzO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIFJlbmRlclBpeGkuYm9keShyZW5kZXIsIGJvZGllc1tpXSk7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvbnN0cmFpbnRzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgUmVuZGVyUGl4aS5jb25zdHJhaW50KHJlbmRlciwgY29uc3RyYWludHNbaV0pO1xuXG4gICAgICAgIHJlbmRlcmVyLnJlbmRlcihjb250YWluZXIpO1xuICAgIH07XG5cblxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQG1ldGhvZCBjb25zdHJhaW50XG4gICAgICogQHBhcmFtIHtlbmdpbmV9IGVuZ2luZVxuICAgICAqIEBwYXJhbSB7Y29uc3RyYWludH0gY29uc3RyYWludFxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgUmVuZGVyUGl4aS5jb25zdHJhaW50ID0gZnVuY3Rpb24ocmVuZGVyLCBjb25zdHJhaW50KSB7XG4gICAgICAgIHZhciBlbmdpbmUgPSByZW5kZXIuZW5naW5lLFxuICAgICAgICAgICAgYm9keUEgPSBjb25zdHJhaW50LmJvZHlBLFxuICAgICAgICAgICAgYm9keUIgPSBjb25zdHJhaW50LmJvZHlCLFxuICAgICAgICAgICAgcG9pbnRBID0gY29uc3RyYWludC5wb2ludEEsXG4gICAgICAgICAgICBwb2ludEIgPSBjb25zdHJhaW50LnBvaW50QixcbiAgICAgICAgICAgIGNvbnRhaW5lciA9IHJlbmRlci5jb250YWluZXIsXG4gICAgICAgICAgICBjb25zdHJhaW50UmVuZGVyID0gY29uc3RyYWludC5yZW5kZXIsXG4gICAgICAgICAgICBwcmltaXRpdmVJZCA9ICdjLScgKyBjb25zdHJhaW50LmlkLFxuICAgICAgICAgICAgcHJpbWl0aXZlID0gcmVuZGVyLnByaW1pdGl2ZXNbcHJpbWl0aXZlSWRdO1xuXG4gICAgICAgIC8vIGluaXRpYWxpc2UgY29uc3RyYWludCBwcmltaXRpdmUgaWYgbm90IGV4aXN0aW5nXG4gICAgICAgIGlmICghcHJpbWl0aXZlKVxuICAgICAgICAgICAgcHJpbWl0aXZlID0gcmVuZGVyLnByaW1pdGl2ZXNbcHJpbWl0aXZlSWRdID0gbmV3IFBJWEkuR3JhcGhpY3MoKTtcblxuICAgICAgICAvLyBkb24ndCByZW5kZXIgaWYgY29uc3RyYWludCBkb2VzIG5vdCBoYXZlIHR3byBlbmQgcG9pbnRzXG4gICAgICAgIGlmICghY29uc3RyYWludFJlbmRlci52aXNpYmxlIHx8ICFjb25zdHJhaW50LnBvaW50QSB8fCAhY29uc3RyYWludC5wb2ludEIpIHtcbiAgICAgICAgICAgIHByaW1pdGl2ZS5jbGVhcigpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYWRkIHRvIHNjZW5lIGdyYXBoIGlmIG5vdCBhbHJlYWR5IHRoZXJlXG4gICAgICAgIGlmIChDb21tb24uaW5kZXhPZihjb250YWluZXIuY2hpbGRyZW4sIHByaW1pdGl2ZSkgPT09IC0xKVxuICAgICAgICAgICAgY29udGFpbmVyLmFkZENoaWxkKHByaW1pdGl2ZSk7XG5cbiAgICAgICAgLy8gcmVuZGVyIHRoZSBjb25zdHJhaW50IG9uIGV2ZXJ5IHVwZGF0ZSwgc2luY2UgdGhleSBjYW4gY2hhbmdlIGR5bmFtaWNhbGx5XG4gICAgICAgIHByaW1pdGl2ZS5jbGVhcigpO1xuICAgICAgICBwcmltaXRpdmUuYmVnaW5GaWxsKDAsIDApO1xuICAgICAgICBwcmltaXRpdmUubGluZVN0eWxlKGNvbnN0cmFpbnRSZW5kZXIubGluZVdpZHRoLCBDb21tb24uY29sb3JUb051bWJlcihjb25zdHJhaW50UmVuZGVyLnN0cm9rZVN0eWxlKSwgMSk7XG4gICAgICAgIFxuICAgICAgICBpZiAoYm9keUEpIHtcbiAgICAgICAgICAgIHByaW1pdGl2ZS5tb3ZlVG8oYm9keUEucG9zaXRpb24ueCArIHBvaW50QS54LCBib2R5QS5wb3NpdGlvbi55ICsgcG9pbnRBLnkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJpbWl0aXZlLm1vdmVUbyhwb2ludEEueCwgcG9pbnRBLnkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJvZHlCKSB7XG4gICAgICAgICAgICBwcmltaXRpdmUubGluZVRvKGJvZHlCLnBvc2l0aW9uLnggKyBwb2ludEIueCwgYm9keUIucG9zaXRpb24ueSArIHBvaW50Qi55KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByaW1pdGl2ZS5saW5lVG8ocG9pbnRCLngsIHBvaW50Qi55KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaW1pdGl2ZS5lbmRGaWxsKCk7XG4gICAgfTtcbiAgICBcbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBtZXRob2QgYm9keVxuICAgICAqIEBwYXJhbSB7ZW5naW5lfSBlbmdpbmVcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlcbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqL1xuICAgIFJlbmRlclBpeGkuYm9keSA9IGZ1bmN0aW9uKHJlbmRlciwgYm9keSkge1xuICAgICAgICB2YXIgZW5naW5lID0gcmVuZGVyLmVuZ2luZSxcbiAgICAgICAgICAgIGJvZHlSZW5kZXIgPSBib2R5LnJlbmRlcjtcblxuICAgICAgICBpZiAoIWJvZHlSZW5kZXIudmlzaWJsZSlcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICBpZiAoYm9keVJlbmRlci5zcHJpdGUgJiYgYm9keVJlbmRlci5zcHJpdGUudGV4dHVyZSkge1xuICAgICAgICAgICAgdmFyIHNwcml0ZUlkID0gJ2ItJyArIGJvZHkuaWQsXG4gICAgICAgICAgICAgICAgc3ByaXRlID0gcmVuZGVyLnNwcml0ZXNbc3ByaXRlSWRdLFxuICAgICAgICAgICAgICAgIHNwcml0ZUNvbnRhaW5lciA9IHJlbmRlci5zcHJpdGVDb250YWluZXI7XG5cbiAgICAgICAgICAgIC8vIGluaXRpYWxpc2UgYm9keSBzcHJpdGUgaWYgbm90IGV4aXN0aW5nXG4gICAgICAgICAgICBpZiAoIXNwcml0ZSlcbiAgICAgICAgICAgICAgICBzcHJpdGUgPSByZW5kZXIuc3ByaXRlc1tzcHJpdGVJZF0gPSBfY3JlYXRlQm9keVNwcml0ZShyZW5kZXIsIGJvZHkpO1xuXG4gICAgICAgICAgICAvLyBhZGQgdG8gc2NlbmUgZ3JhcGggaWYgbm90IGFscmVhZHkgdGhlcmVcbiAgICAgICAgICAgIGlmIChDb21tb24uaW5kZXhPZihzcHJpdGVDb250YWluZXIuY2hpbGRyZW4sIHNwcml0ZSkgPT09IC0xKVxuICAgICAgICAgICAgICAgIHNwcml0ZUNvbnRhaW5lci5hZGRDaGlsZChzcHJpdGUpO1xuXG4gICAgICAgICAgICAvLyB1cGRhdGUgYm9keSBzcHJpdGVcbiAgICAgICAgICAgIHNwcml0ZS5wb3NpdGlvbi54ID0gYm9keS5wb3NpdGlvbi54O1xuICAgICAgICAgICAgc3ByaXRlLnBvc2l0aW9uLnkgPSBib2R5LnBvc2l0aW9uLnk7XG4gICAgICAgICAgICBzcHJpdGUucm90YXRpb24gPSBib2R5LmFuZ2xlO1xuICAgICAgICAgICAgc3ByaXRlLnNjYWxlLnggPSBib2R5UmVuZGVyLnNwcml0ZS54U2NhbGUgfHwgMTtcbiAgICAgICAgICAgIHNwcml0ZS5zY2FsZS55ID0gYm9keVJlbmRlci5zcHJpdGUueVNjYWxlIHx8IDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgcHJpbWl0aXZlSWQgPSAnYi0nICsgYm9keS5pZCxcbiAgICAgICAgICAgICAgICBwcmltaXRpdmUgPSByZW5kZXIucHJpbWl0aXZlc1twcmltaXRpdmVJZF0sXG4gICAgICAgICAgICAgICAgY29udGFpbmVyID0gcmVuZGVyLmNvbnRhaW5lcjtcblxuICAgICAgICAgICAgLy8gaW5pdGlhbGlzZSBib2R5IHByaW1pdGl2ZSBpZiBub3QgZXhpc3RpbmdcbiAgICAgICAgICAgIGlmICghcHJpbWl0aXZlKSB7XG4gICAgICAgICAgICAgICAgcHJpbWl0aXZlID0gcmVuZGVyLnByaW1pdGl2ZXNbcHJpbWl0aXZlSWRdID0gX2NyZWF0ZUJvZHlQcmltaXRpdmUocmVuZGVyLCBib2R5KTtcbiAgICAgICAgICAgICAgICBwcmltaXRpdmUuaW5pdGlhbEFuZ2xlID0gYm9keS5hbmdsZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gYWRkIHRvIHNjZW5lIGdyYXBoIGlmIG5vdCBhbHJlYWR5IHRoZXJlXG4gICAgICAgICAgICBpZiAoQ29tbW9uLmluZGV4T2YoY29udGFpbmVyLmNoaWxkcmVuLCBwcmltaXRpdmUpID09PSAtMSlcbiAgICAgICAgICAgICAgICBjb250YWluZXIuYWRkQ2hpbGQocHJpbWl0aXZlKTtcblxuICAgICAgICAgICAgLy8gdXBkYXRlIGJvZHkgcHJpbWl0aXZlXG4gICAgICAgICAgICBwcmltaXRpdmUucG9zaXRpb24ueCA9IGJvZHkucG9zaXRpb24ueDtcbiAgICAgICAgICAgIHByaW1pdGl2ZS5wb3NpdGlvbi55ID0gYm9keS5wb3NpdGlvbi55O1xuICAgICAgICAgICAgcHJpbWl0aXZlLnJvdGF0aW9uID0gYm9keS5hbmdsZSAtIHByaW1pdGl2ZS5pbml0aWFsQW5nbGU7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGJvZHkgc3ByaXRlXG4gICAgICogQG1ldGhvZCBfY3JlYXRlQm9keVNwcml0ZVxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtSZW5kZXJQaXhpfSByZW5kZXJcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlcbiAgICAgKiBAcmV0dXJuIHtQSVhJLlNwcml0ZX0gc3ByaXRlXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKi9cbiAgICB2YXIgX2NyZWF0ZUJvZHlTcHJpdGUgPSBmdW5jdGlvbihyZW5kZXIsIGJvZHkpIHtcbiAgICAgICAgdmFyIGJvZHlSZW5kZXIgPSBib2R5LnJlbmRlcixcbiAgICAgICAgICAgIHRleHR1cmVQYXRoID0gYm9keVJlbmRlci5zcHJpdGUudGV4dHVyZSxcbiAgICAgICAgICAgIHRleHR1cmUgPSBfZ2V0VGV4dHVyZShyZW5kZXIsIHRleHR1cmVQYXRoKSxcbiAgICAgICAgICAgIHNwcml0ZSA9IG5ldyBQSVhJLlNwcml0ZSh0ZXh0dXJlKTtcblxuICAgICAgICBzcHJpdGUuYW5jaG9yLnggPSBib2R5LnJlbmRlci5zcHJpdGUueE9mZnNldDtcbiAgICAgICAgc3ByaXRlLmFuY2hvci55ID0gYm9keS5yZW5kZXIuc3ByaXRlLnlPZmZzZXQ7XG5cbiAgICAgICAgcmV0dXJuIHNwcml0ZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGJvZHkgcHJpbWl0aXZlXG4gICAgICogQG1ldGhvZCBfY3JlYXRlQm9keVByaW1pdGl2ZVxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtSZW5kZXJQaXhpfSByZW5kZXJcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlcbiAgICAgKiBAcmV0dXJuIHtQSVhJLkdyYXBoaWNzfSBncmFwaGljc1xuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgdmFyIF9jcmVhdGVCb2R5UHJpbWl0aXZlID0gZnVuY3Rpb24ocmVuZGVyLCBib2R5KSB7XG4gICAgICAgIHZhciBib2R5UmVuZGVyID0gYm9keS5yZW5kZXIsXG4gICAgICAgICAgICBvcHRpb25zID0gcmVuZGVyLm9wdGlvbnMsXG4gICAgICAgICAgICBwcmltaXRpdmUgPSBuZXcgUElYSS5HcmFwaGljcygpLFxuICAgICAgICAgICAgZmlsbFN0eWxlID0gQ29tbW9uLmNvbG9yVG9OdW1iZXIoYm9keVJlbmRlci5maWxsU3R5bGUpLFxuICAgICAgICAgICAgc3Ryb2tlU3R5bGUgPSBDb21tb24uY29sb3JUb051bWJlcihib2R5UmVuZGVyLnN0cm9rZVN0eWxlKSxcbiAgICAgICAgICAgIHN0cm9rZVN0eWxlSW5kaWNhdG9yID0gQ29tbW9uLmNvbG9yVG9OdW1iZXIoYm9keVJlbmRlci5zdHJva2VTdHlsZSksXG4gICAgICAgICAgICBzdHJva2VTdHlsZVdpcmVmcmFtZSA9IENvbW1vbi5jb2xvclRvTnVtYmVyKCcjYmJiJyksXG4gICAgICAgICAgICBzdHJva2VTdHlsZVdpcmVmcmFtZUluZGljYXRvciA9IENvbW1vbi5jb2xvclRvTnVtYmVyKCcjQ0Q1QzVDJyksXG4gICAgICAgICAgICBwYXJ0O1xuXG4gICAgICAgIHByaW1pdGl2ZS5jbGVhcigpO1xuXG4gICAgICAgIC8vIGhhbmRsZSBjb21wb3VuZCBwYXJ0c1xuICAgICAgICBmb3IgKHZhciBrID0gYm9keS5wYXJ0cy5sZW5ndGggPiAxID8gMSA6IDA7IGsgPCBib2R5LnBhcnRzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICBwYXJ0ID0gYm9keS5wYXJ0c1trXTtcblxuICAgICAgICAgICAgaWYgKCFvcHRpb25zLndpcmVmcmFtZXMpIHtcbiAgICAgICAgICAgICAgICBwcmltaXRpdmUuYmVnaW5GaWxsKGZpbGxTdHlsZSwgMSk7XG4gICAgICAgICAgICAgICAgcHJpbWl0aXZlLmxpbmVTdHlsZShib2R5UmVuZGVyLmxpbmVXaWR0aCwgc3Ryb2tlU3R5bGUsIDEpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwcmltaXRpdmUuYmVnaW5GaWxsKDAsIDApO1xuICAgICAgICAgICAgICAgIHByaW1pdGl2ZS5saW5lU3R5bGUoMSwgc3Ryb2tlU3R5bGVXaXJlZnJhbWUsIDEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwcmltaXRpdmUubW92ZVRvKHBhcnQudmVydGljZXNbMF0ueCAtIGJvZHkucG9zaXRpb24ueCwgcGFydC52ZXJ0aWNlc1swXS55IC0gYm9keS5wb3NpdGlvbi55KTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCBwYXJ0LnZlcnRpY2VzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgcHJpbWl0aXZlLmxpbmVUbyhwYXJ0LnZlcnRpY2VzW2pdLnggLSBib2R5LnBvc2l0aW9uLngsIHBhcnQudmVydGljZXNbal0ueSAtIGJvZHkucG9zaXRpb24ueSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHByaW1pdGl2ZS5saW5lVG8ocGFydC52ZXJ0aWNlc1swXS54IC0gYm9keS5wb3NpdGlvbi54LCBwYXJ0LnZlcnRpY2VzWzBdLnkgLSBib2R5LnBvc2l0aW9uLnkpO1xuXG4gICAgICAgICAgICBwcmltaXRpdmUuZW5kRmlsbCgpO1xuXG4gICAgICAgICAgICAvLyBhbmdsZSBpbmRpY2F0b3JcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnNob3dBbmdsZUluZGljYXRvciB8fCBvcHRpb25zLnNob3dBeGVzKSB7XG4gICAgICAgICAgICAgICAgcHJpbWl0aXZlLmJlZ2luRmlsbCgwLCAwKTtcblxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLndpcmVmcmFtZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJpbWl0aXZlLmxpbmVTdHlsZSgxLCBzdHJva2VTdHlsZVdpcmVmcmFtZUluZGljYXRvciwgMSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcHJpbWl0aXZlLmxpbmVTdHlsZSgxLCBzdHJva2VTdHlsZUluZGljYXRvcik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcHJpbWl0aXZlLm1vdmVUbyhwYXJ0LnBvc2l0aW9uLnggLSBib2R5LnBvc2l0aW9uLngsIHBhcnQucG9zaXRpb24ueSAtIGJvZHkucG9zaXRpb24ueSk7XG4gICAgICAgICAgICAgICAgcHJpbWl0aXZlLmxpbmVUbygoKHBhcnQudmVydGljZXNbMF0ueCArIHBhcnQudmVydGljZXNbcGFydC52ZXJ0aWNlcy5sZW5ndGgtMV0ueCkgLyAyIC0gYm9keS5wb3NpdGlvbi54KSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKHBhcnQudmVydGljZXNbMF0ueSArIHBhcnQudmVydGljZXNbcGFydC52ZXJ0aWNlcy5sZW5ndGgtMV0ueSkgLyAyIC0gYm9keS5wb3NpdGlvbi55KSk7XG5cbiAgICAgICAgICAgICAgICBwcmltaXRpdmUuZW5kRmlsbCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHByaW1pdGl2ZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcmVxdWVzdGVkIHRleHR1cmUgKGEgUElYSS5UZXh0dXJlKSB2aWEgaXRzIHBhdGhcbiAgICAgKiBAbWV0aG9kIF9nZXRUZXh0dXJlXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge1JlbmRlclBpeGl9IHJlbmRlclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpbWFnZVBhdGhcbiAgICAgKiBAcmV0dXJuIHtQSVhJLlRleHR1cmV9IHRleHR1cmVcbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqL1xuICAgIHZhciBfZ2V0VGV4dHVyZSA9IGZ1bmN0aW9uKHJlbmRlciwgaW1hZ2VQYXRoKSB7XG4gICAgICAgIHZhciB0ZXh0dXJlID0gcmVuZGVyLnRleHR1cmVzW2ltYWdlUGF0aF07XG5cbiAgICAgICAgaWYgKCF0ZXh0dXJlKVxuICAgICAgICAgICAgdGV4dHVyZSA9IHJlbmRlci50ZXh0dXJlc1tpbWFnZVBhdGhdID0gUElYSS5UZXh0dXJlLmZyb21JbWFnZShpbWFnZVBhdGgpO1xuXG4gICAgICAgIHJldHVybiB0ZXh0dXJlO1xuICAgIH07XG5cbn0pKCk7XG5cbn0se1wiLi4vYm9keS9Db21wb3NpdGVcIjoyLFwiLi4vY29yZS9Db21tb25cIjoxNH1dfSx7fSxbMjhdKSgyOClcbn0pOyIsIi8qKlxuICogaHR0cDovL2FuaW1lanMuY29tXG4gKiBKYXZhU2NyaXB0IGFuaW1hdGlvbiBlbmdpbmVcbiAqIEB2ZXJzaW9uIHYyLjIuMFxuICogQGF1dGhvciBKdWxpYW4gR2FybmllclxuICogQGNvcHlyaWdodCDCqTIwMTcgSnVsaWFuIEdhcm5pZXJcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuKiovXG5cbihmdW5jdGlvbihyb290LCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG4gICAgZGVmaW5lKFtdLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgIC8vIE5vZGUuIERvZXMgbm90IHdvcmsgd2l0aCBzdHJpY3QgQ29tbW9uSlMsIGJ1dFxuICAgIC8vIG9ubHkgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgdGhhdCBzdXBwb3J0IG1vZHVsZS5leHBvcnRzLFxuICAgIC8vIGxpa2UgTm9kZS5cbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBCcm93c2VyIGdsb2JhbHMgKHJvb3QgaXMgd2luZG93KVxuICAgIHJvb3QuYW5pbWUgPSBmYWN0b3J5KCk7XG4gIH1cbn0odGhpcywgKCkgPT4ge1xuXG4gIC8vIERlZmF1bHRzXG5cbiAgY29uc3QgZGVmYXVsdEluc3RhbmNlU2V0dGluZ3MgPSB7XG4gICAgdXBkYXRlOiB1bmRlZmluZWQsXG4gICAgYmVnaW46IHVuZGVmaW5lZCxcbiAgICBydW46IHVuZGVmaW5lZCxcbiAgICBjb21wbGV0ZTogdW5kZWZpbmVkLFxuICAgIGxvb3A6IDEsXG4gICAgZGlyZWN0aW9uOiAnbm9ybWFsJyxcbiAgICBhdXRvcGxheTogdHJ1ZSxcbiAgICBvZmZzZXQ6IDBcbiAgfVxuXG4gIGNvbnN0IGRlZmF1bHRUd2VlblNldHRpbmdzID0ge1xuICAgIGR1cmF0aW9uOiAxMDAwLFxuICAgIGRlbGF5OiAwLFxuICAgIGVhc2luZzogJ2Vhc2VPdXRFbGFzdGljJyxcbiAgICBlbGFzdGljaXR5OiA1MDAsXG4gICAgcm91bmQ6IDBcbiAgfVxuXG4gIGNvbnN0IHZhbGlkVHJhbnNmb3JtcyA9IFsndHJhbnNsYXRlWCcsICd0cmFuc2xhdGVZJywgJ3RyYW5zbGF0ZVonLCAncm90YXRlJywgJ3JvdGF0ZVgnLCAncm90YXRlWScsICdyb3RhdGVaJywgJ3NjYWxlJywgJ3NjYWxlWCcsICdzY2FsZVknLCAnc2NhbGVaJywgJ3NrZXdYJywgJ3NrZXdZJywgJ3BlcnNwZWN0aXZlJ107XG4gIGxldCB0cmFuc2Zvcm1TdHJpbmc7XG5cbiAgLy8gVXRpbHNcblxuICBmdW5jdGlvbiBzdHJpbmdDb250YWlucyhzdHIsIHRleHQpIHtcbiAgICByZXR1cm4gc3RyLmluZGV4T2YodGV4dCkgPiAtMTtcbiAgfVxuXG4gIGNvbnN0IGlzID0ge1xuICAgIGFycjogYSA9PiBBcnJheS5pc0FycmF5KGEpLFxuICAgIG9iajogYSA9PiBzdHJpbmdDb250YWlucyhPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYSksICdPYmplY3QnKSxcbiAgICBwdGg6IGEgPT4gaXMub2JqKGEpICYmIGEuaGFzT3duUHJvcGVydHkoJ3RvdGFsTGVuZ3RoJyksXG4gICAgc3ZnOiBhID0+IGEgaW5zdGFuY2VvZiBTVkdFbGVtZW50LFxuICAgIGRvbTogYSA9PiBhLm5vZGVUeXBlIHx8IGlzLnN2ZyhhKSxcbiAgICBzdHI6IGEgPT4gdHlwZW9mIGEgPT09ICdzdHJpbmcnLFxuICAgIGZuYzogYSA9PiB0eXBlb2YgYSA9PT0gJ2Z1bmN0aW9uJyxcbiAgICB1bmQ6IGEgPT4gdHlwZW9mIGEgPT09ICd1bmRlZmluZWQnLFxuICAgIGhleDogYSA9PiAvKF4jWzAtOUEtRl17Nn0kKXwoXiNbMC05QS1GXXszfSQpL2kudGVzdChhKSxcbiAgICByZ2I6IGEgPT4gL15yZ2IvLnRlc3QoYSksXG4gICAgaHNsOiBhID0+IC9eaHNsLy50ZXN0KGEpLFxuICAgIGNvbDogYSA9PiAoaXMuaGV4KGEpIHx8IGlzLnJnYihhKSB8fCBpcy5oc2woYSkpXG4gIH1cblxuICAvLyBCZXppZXJFYXNpbmcgaHR0cHM6Ly9naXRodWIuY29tL2dyZS9iZXppZXItZWFzaW5nXG5cbiAgY29uc3QgYmV6aWVyID0gKCgpID0+IHtcblxuICAgIGNvbnN0IGtTcGxpbmVUYWJsZVNpemUgPSAxMTtcbiAgICBjb25zdCBrU2FtcGxlU3RlcFNpemUgPSAxLjAgLyAoa1NwbGluZVRhYmxlU2l6ZSAtIDEuMCk7XG5cbiAgICBmdW5jdGlvbiBBIChhQTEsIGFBMikgeyByZXR1cm4gMS4wIC0gMy4wICogYUEyICsgMy4wICogYUExIH07XG4gICAgZnVuY3Rpb24gQiAoYUExLCBhQTIpIHsgcmV0dXJuIDMuMCAqIGFBMiAtIDYuMCAqIGFBMSB9O1xuICAgIGZ1bmN0aW9uIEMgKGFBMSkgICAgICB7IHJldHVybiAzLjAgKiBhQTEgfTtcblxuICAgIGZ1bmN0aW9uIGNhbGNCZXppZXIgKGFULCBhQTEsIGFBMikgeyByZXR1cm4gKChBKGFBMSwgYUEyKSAqIGFUICsgQihhQTEsIGFBMikpICogYVQgKyBDKGFBMSkpICogYVQgfTtcbiAgICBmdW5jdGlvbiBnZXRTbG9wZSAoYVQsIGFBMSwgYUEyKSB7IHJldHVybiAzLjAgKiBBKGFBMSwgYUEyKSAqIGFUICogYVQgKyAyLjAgKiBCKGFBMSwgYUEyKSAqIGFUICsgQyhhQTEpIH07XG5cbiAgICBmdW5jdGlvbiBiaW5hcnlTdWJkaXZpZGUgKGFYLCBhQSwgYUIsIG1YMSwgbVgyKSB7XG4gICAgICBsZXQgY3VycmVudFgsIGN1cnJlbnRULCBpID0gMDtcbiAgICAgIGRvIHtcbiAgICAgICAgY3VycmVudFQgPSBhQSArIChhQiAtIGFBKSAvIDIuMDtcbiAgICAgICAgY3VycmVudFggPSBjYWxjQmV6aWVyKGN1cnJlbnRULCBtWDEsIG1YMikgLSBhWDtcbiAgICAgICAgaWYgKGN1cnJlbnRYID4gMC4wKSB7IGFCID0gY3VycmVudFQgfSBlbHNlIHsgYUEgPSBjdXJyZW50VCB9O1xuICAgICAgfSB3aGlsZSAoTWF0aC5hYnMoY3VycmVudFgpID4gMC4wMDAwMDAxICYmICsraSA8IDEwKTtcbiAgICAgIHJldHVybiBjdXJyZW50VDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBuZXd0b25SYXBoc29uSXRlcmF0ZSAoYVgsIGFHdWVzc1QsIG1YMSwgbVgyKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7ICsraSkge1xuICAgICAgICBjb25zdCBjdXJyZW50U2xvcGUgPSBnZXRTbG9wZShhR3Vlc3NULCBtWDEsIG1YMik7XG4gICAgICAgIGlmIChjdXJyZW50U2xvcGUgPT09IDAuMCkgcmV0dXJuIGFHdWVzc1Q7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRYID0gY2FsY0JlemllcihhR3Vlc3NULCBtWDEsIG1YMikgLSBhWDtcbiAgICAgICAgYUd1ZXNzVCAtPSBjdXJyZW50WCAvIGN1cnJlbnRTbG9wZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhR3Vlc3NUO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGJlemllcihtWDEsIG1ZMSwgbVgyLCBtWTIpIHtcblxuICAgICAgaWYgKCEoMCA8PSBtWDEgJiYgbVgxIDw9IDEgJiYgMCA8PSBtWDIgJiYgbVgyIDw9IDEpKSByZXR1cm47XG4gICAgICBsZXQgc2FtcGxlVmFsdWVzID0gbmV3IEZsb2F0MzJBcnJheShrU3BsaW5lVGFibGVTaXplKTtcblxuICAgICAgaWYgKG1YMSAhPT0gbVkxIHx8IG1YMiAhPT0gbVkyKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwga1NwbGluZVRhYmxlU2l6ZTsgKytpKSB7XG4gICAgICAgICAgc2FtcGxlVmFsdWVzW2ldID0gY2FsY0JlemllcihpICoga1NhbXBsZVN0ZXBTaXplLCBtWDEsIG1YMik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZ2V0VEZvclgoYVgpIHtcblxuICAgICAgICBsZXQgaW50ZXJ2YWxTdGFydCA9IDAuMDtcbiAgICAgICAgbGV0IGN1cnJlbnRTYW1wbGUgPSAxO1xuICAgICAgICBjb25zdCBsYXN0U2FtcGxlID0ga1NwbGluZVRhYmxlU2l6ZSAtIDE7XG5cbiAgICAgICAgZm9yICg7IGN1cnJlbnRTYW1wbGUgIT09IGxhc3RTYW1wbGUgJiYgc2FtcGxlVmFsdWVzW2N1cnJlbnRTYW1wbGVdIDw9IGFYOyArK2N1cnJlbnRTYW1wbGUpIHtcbiAgICAgICAgICBpbnRlcnZhbFN0YXJ0ICs9IGtTYW1wbGVTdGVwU2l6ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC0tY3VycmVudFNhbXBsZTtcblxuICAgICAgICBjb25zdCBkaXN0ID0gKGFYIC0gc2FtcGxlVmFsdWVzW2N1cnJlbnRTYW1wbGVdKSAvIChzYW1wbGVWYWx1ZXNbY3VycmVudFNhbXBsZSArIDFdIC0gc2FtcGxlVmFsdWVzW2N1cnJlbnRTYW1wbGVdKTtcbiAgICAgICAgY29uc3QgZ3Vlc3NGb3JUID0gaW50ZXJ2YWxTdGFydCArIGRpc3QgKiBrU2FtcGxlU3RlcFNpemU7XG4gICAgICAgIGNvbnN0IGluaXRpYWxTbG9wZSA9IGdldFNsb3BlKGd1ZXNzRm9yVCwgbVgxLCBtWDIpO1xuXG4gICAgICAgIGlmIChpbml0aWFsU2xvcGUgPj0gMC4wMDEpIHtcbiAgICAgICAgICByZXR1cm4gbmV3dG9uUmFwaHNvbkl0ZXJhdGUoYVgsIGd1ZXNzRm9yVCwgbVgxLCBtWDIpO1xuICAgICAgICB9IGVsc2UgaWYgKGluaXRpYWxTbG9wZSA9PT0gMC4wKSB7XG4gICAgICAgICAgcmV0dXJuIGd1ZXNzRm9yVDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gYmluYXJ5U3ViZGl2aWRlKGFYLCBpbnRlcnZhbFN0YXJ0LCBpbnRlcnZhbFN0YXJ0ICsga1NhbXBsZVN0ZXBTaXplLCBtWDEsIG1YMik7XG4gICAgICAgIH1cblxuICAgICAgfVxuXG4gICAgICByZXR1cm4geCA9PiB7XG4gICAgICAgIGlmIChtWDEgPT09IG1ZMSAmJiBtWDIgPT09IG1ZMikgcmV0dXJuIHg7XG4gICAgICAgIGlmICh4ID09PSAwKSByZXR1cm4gMDtcbiAgICAgICAgaWYgKHggPT09IDEpIHJldHVybiAxO1xuICAgICAgICByZXR1cm4gY2FsY0JlemllcihnZXRURm9yWCh4KSwgbVkxLCBtWTIpO1xuICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIGJlemllcjtcblxuICB9KSgpO1xuXG4gIGNvbnN0IGVhc2luZ3MgPSAoKCkgPT4ge1xuXG4gICAgY29uc3QgbmFtZXMgPSBbJ1F1YWQnLCAnQ3ViaWMnLCAnUXVhcnQnLCAnUXVpbnQnLCAnU2luZScsICdFeHBvJywgJ0NpcmMnLCAnQmFjaycsICdFbGFzdGljJ107XG5cbiAgICAvLyBFbGFzdGljIGVhc2luZyBhZGFwdGVkIGZyb20galF1ZXJ5VUkgaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vZWFzaW5ncy9cblxuICAgIGZ1bmN0aW9uIGVsYXN0aWModCwgcCkge1xuICAgICAgcmV0dXJuIHQgPT09IDAgfHwgdCA9PT0gMSA/IHQgOlxuICAgICAgLU1hdGgucG93KDIsIDEwICogKHQgLSAxKSkgKiBNYXRoLnNpbigoKCh0IC0gMSkgLSAocCAvIChNYXRoLlBJICogMi4wKSAqIE1hdGguYXNpbigxKSkpICogKE1hdGguUEkgKiAyKSkgLyBwICk7XG4gICAgfVxuXG4gICAgLy8gQXBwcm94aW1hdGVkIFBlbm5lciBlcXVhdGlvbnMgaHR0cDovL21hdHRoZXdsZWluLmNvbS9jZWFzZXIvXG5cbiAgICBjb25zdCBlcXVhdGlvbnMgPSB7XG4gICAgICBJbjogW1xuICAgICAgICBbMC41NTAsIDAuMDg1LCAwLjY4MCwgMC41MzBdLCAvKiBJblF1YWQgKi9cbiAgICAgICAgWzAuNTUwLCAwLjA1NSwgMC42NzUsIDAuMTkwXSwgLyogSW5DdWJpYyAqL1xuICAgICAgICBbMC44OTUsIDAuMDMwLCAwLjY4NSwgMC4yMjBdLCAvKiBJblF1YXJ0ICovXG4gICAgICAgIFswLjc1NSwgMC4wNTAsIDAuODU1LCAwLjA2MF0sIC8qIEluUXVpbnQgKi9cbiAgICAgICAgWzAuNDcwLCAwLjAwMCwgMC43NDUsIDAuNzE1XSwgLyogSW5TaW5lICovXG4gICAgICAgIFswLjk1MCwgMC4wNTAsIDAuNzk1LCAwLjAzNV0sIC8qIEluRXhwbyAqL1xuICAgICAgICBbMC42MDAsIDAuMDQwLCAwLjk4MCwgMC4zMzVdLCAvKiBJbkNpcmMgKi9cbiAgICAgICAgWzAuNjAwLCAtMC4yODAsIDAuNzM1LCAwLjA0NV0sIC8qIEluQmFjayAqL1xuICAgICAgICBlbGFzdGljIC8qIEluRWxhc3RpYyAqL1xuICAgICAgXSwgT3V0OiBbXG4gICAgICAgIFswLjI1MCwgMC40NjAsIDAuNDUwLCAwLjk0MF0sIC8qIE91dFF1YWQgKi9cbiAgICAgICAgWzAuMjE1LCAwLjYxMCwgMC4zNTUsIDEuMDAwXSwgLyogT3V0Q3ViaWMgKi9cbiAgICAgICAgWzAuMTY1LCAwLjg0MCwgMC40NDAsIDEuMDAwXSwgLyogT3V0UXVhcnQgKi9cbiAgICAgICAgWzAuMjMwLCAxLjAwMCwgMC4zMjAsIDEuMDAwXSwgLyogT3V0UXVpbnQgKi9cbiAgICAgICAgWzAuMzkwLCAwLjU3NSwgMC41NjUsIDEuMDAwXSwgLyogT3V0U2luZSAqL1xuICAgICAgICBbMC4xOTAsIDEuMDAwLCAwLjIyMCwgMS4wMDBdLCAvKiBPdXRFeHBvICovXG4gICAgICAgIFswLjA3NSwgMC44MjAsIDAuMTY1LCAxLjAwMF0sIC8qIE91dENpcmMgKi9cbiAgICAgICAgWzAuMTc1LCAwLjg4NSwgMC4zMjAsIDEuMjc1XSwgLyogT3V0QmFjayAqL1xuICAgICAgICAodCwgZikgPT4gMSAtIGVsYXN0aWMoMSAtIHQsIGYpIC8qIE91dEVsYXN0aWMgKi9cbiAgICAgIF0sIEluT3V0OiBbXG4gICAgICAgIFswLjQ1NSwgMC4wMzAsIDAuNTE1LCAwLjk1NV0sIC8qIEluT3V0UXVhZCAqL1xuICAgICAgICBbMC42NDUsIDAuMDQ1LCAwLjM1NSwgMS4wMDBdLCAvKiBJbk91dEN1YmljICovXG4gICAgICAgIFswLjc3MCwgMC4wMDAsIDAuMTc1LCAxLjAwMF0sIC8qIEluT3V0UXVhcnQgKi9cbiAgICAgICAgWzAuODYwLCAwLjAwMCwgMC4wNzAsIDEuMDAwXSwgLyogSW5PdXRRdWludCAqL1xuICAgICAgICBbMC40NDUsIDAuMDUwLCAwLjU1MCwgMC45NTBdLCAvKiBJbk91dFNpbmUgKi9cbiAgICAgICAgWzEuMDAwLCAwLjAwMCwgMC4wMDAsIDEuMDAwXSwgLyogSW5PdXRFeHBvICovXG4gICAgICAgIFswLjc4NSwgMC4xMzUsIDAuMTUwLCAwLjg2MF0sIC8qIEluT3V0Q2lyYyAqL1xuICAgICAgICBbMC42ODAsIC0wLjU1MCwgMC4yNjUsIDEuNTUwXSwgLyogSW5PdXRCYWNrICovXG4gICAgICAgICh0LCBmKSA9PiB0IDwgLjUgPyBlbGFzdGljKHQgKiAyLCBmKSAvIDIgOiAxIC0gZWxhc3RpYyh0ICogLTIgKyAyLCBmKSAvIDIgLyogSW5PdXRFbGFzdGljICovXG4gICAgICBdXG4gICAgfVxuXG4gICAgbGV0IGZ1bmN0aW9ucyA9IHtcbiAgICAgIGxpbmVhcjogYmV6aWVyKDAuMjUwLCAwLjI1MCwgMC43NTAsIDAuNzUwKVxuICAgIH1cblxuICAgIGZvciAobGV0IHR5cGUgaW4gZXF1YXRpb25zKSB7XG4gICAgICBlcXVhdGlvbnNbdHlwZV0uZm9yRWFjaCgoZiwgaSkgPT4ge1xuICAgICAgICBmdW5jdGlvbnNbJ2Vhc2UnK3R5cGUrbmFtZXNbaV1dID0gaXMuZm5jKGYpID8gZiA6IGJlemllci5hcHBseSh0aGlzLCBmKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbnM7XG5cbiAgfSkoKTtcblxuICAvLyBTdHJpbmdzXG5cbiAgZnVuY3Rpb24gc3RyaW5nVG9IeXBoZW5zKHN0cikge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvKFthLXpdKShbQS1aXSkvZywgJyQxLSQyJykudG9Mb3dlckNhc2UoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbGVjdFN0cmluZyhzdHIpIHtcbiAgICBpZiAoaXMuY29sKHN0cikpIHJldHVybjtcbiAgICB0cnkge1xuICAgICAgbGV0IG5vZGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzdHIpO1xuICAgICAgcmV0dXJuIG5vZGVzO1xuICAgIH0gY2F0Y2goZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFycmF5c1xuXG4gIGZ1bmN0aW9uIGZpbHRlckFycmF5KGFyciwgY2FsbGJhY2spIHtcbiAgICBjb25zdCBsZW4gPSBhcnIubGVuZ3RoO1xuICAgIGNvbnN0IHRoaXNBcmcgPSBhcmd1bWVudHMubGVuZ3RoID49IDIgPyBhcmd1bWVudHNbMV0gOiB2b2lkIDA7XG4gICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmIChpIGluIGFycikge1xuICAgICAgICBjb25zdCB2YWwgPSBhcnJbaV07XG4gICAgICAgIGlmIChjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHZhbCwgaSwgYXJyKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZsYXR0ZW5BcnJheShhcnIpIHtcbiAgICByZXR1cm4gYXJyLnJlZHVjZSgoYSwgYikgPT4gYS5jb25jYXQoaXMuYXJyKGIpID8gZmxhdHRlbkFycmF5KGIpIDogYiksIFtdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvQXJyYXkobykge1xuICAgIGlmIChpcy5hcnIobykpIHJldHVybiBvO1xuICAgIGlmIChpcy5zdHIobykpIG8gPSBzZWxlY3RTdHJpbmcobykgfHwgbztcbiAgICBpZiAobyBpbnN0YW5jZW9mIE5vZGVMaXN0IHx8IG8gaW5zdGFuY2VvZiBIVE1MQ29sbGVjdGlvbikgcmV0dXJuIFtdLnNsaWNlLmNhbGwobyk7XG4gICAgcmV0dXJuIFtvXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFycmF5Q29udGFpbnMoYXJyLCB2YWwpIHtcbiAgICByZXR1cm4gYXJyLnNvbWUoYSA9PiBhID09PSB2YWwpO1xuICB9XG5cbiAgLy8gT2JqZWN0c1xuXG4gIGZ1bmN0aW9uIGNsb25lT2JqZWN0KG8pIHtcbiAgICBsZXQgY2xvbmUgPSB7fTtcbiAgICBmb3IgKGxldCBwIGluIG8pIGNsb25lW3BdID0gb1twXTtcbiAgICByZXR1cm4gY2xvbmU7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlT2JqZWN0UHJvcHMobzEsIG8yKSB7XG4gICAgbGV0IG8gPSBjbG9uZU9iamVjdChvMSk7XG4gICAgZm9yIChsZXQgcCBpbiBvMSkgb1twXSA9IG8yLmhhc093blByb3BlcnR5KHApID8gbzJbcF0gOiBvMVtwXTtcbiAgICByZXR1cm4gbztcbiAgfVxuXG4gIGZ1bmN0aW9uIG1lcmdlT2JqZWN0cyhvMSwgbzIpIHtcbiAgICBsZXQgbyA9IGNsb25lT2JqZWN0KG8xKTtcbiAgICBmb3IgKGxldCBwIGluIG8yKSBvW3BdID0gaXMudW5kKG8xW3BdKSA/IG8yW3BdIDogbzFbcF07XG4gICAgcmV0dXJuIG87XG4gIH1cblxuICAvLyBDb2xvcnNcblxuICBmdW5jdGlvbiByZ2JUb1JnYmEocmdiVmFsdWUpIHtcbiAgICBjb25zdCByZ2IgPSAvcmdiXFwoKFxcZCssXFxzKltcXGRdKyxcXHMqW1xcZF0rKVxcKS9nLmV4ZWMocmdiVmFsdWUpO1xuICAgIHJldHVybiByZ2IgPyBgcmdiYSgke3JnYlsxXX0sMSlgIDogcmdiVmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBoZXhUb1JnYmEoaGV4VmFsdWUpIHtcbiAgICBjb25zdCByZ3ggPSAvXiM/KFthLWZcXGRdKShbYS1mXFxkXSkoW2EtZlxcZF0pJC9pO1xuICAgIGNvbnN0IGhleCA9IGhleFZhbHVlLnJlcGxhY2Uocmd4LCAobSwgciwgZywgYikgPT4gciArIHIgKyBnICsgZyArIGIgKyBiICk7XG4gICAgY29uc3QgcmdiID0gL14jPyhbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KSQvaS5leGVjKGhleCk7XG4gICAgY29uc3QgciA9IHBhcnNlSW50KHJnYlsxXSwgMTYpO1xuICAgIGNvbnN0IGcgPSBwYXJzZUludChyZ2JbMl0sIDE2KTtcbiAgICBjb25zdCBiID0gcGFyc2VJbnQocmdiWzNdLCAxNik7XG4gICAgcmV0dXJuIGByZ2JhKCR7cn0sJHtnfSwke2J9LDEpYDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhzbFRvUmdiYShoc2xWYWx1ZSkge1xuICAgIGNvbnN0IGhzbCA9IC9oc2xcXCgoXFxkKyksXFxzKihbXFxkLl0rKSUsXFxzKihbXFxkLl0rKSVcXCkvZy5leGVjKGhzbFZhbHVlKSB8fCAvaHNsYVxcKChcXGQrKSxcXHMqKFtcXGQuXSspJSxcXHMqKFtcXGQuXSspJSxcXHMqKFtcXGQuXSspXFwpL2cuZXhlYyhoc2xWYWx1ZSk7XG4gICAgY29uc3QgaCA9IHBhcnNlSW50KGhzbFsxXSkgLyAzNjA7XG4gICAgY29uc3QgcyA9IHBhcnNlSW50KGhzbFsyXSkgLyAxMDA7XG4gICAgY29uc3QgbCA9IHBhcnNlSW50KGhzbFszXSkgLyAxMDA7XG4gICAgY29uc3QgYSA9IGhzbFs0XSB8fCAxO1xuICAgIGZ1bmN0aW9uIGh1ZTJyZ2IocCwgcSwgdCkge1xuICAgICAgaWYgKHQgPCAwKSB0ICs9IDE7XG4gICAgICBpZiAodCA+IDEpIHQgLT0gMTtcbiAgICAgIGlmICh0IDwgMS82KSByZXR1cm4gcCArIChxIC0gcCkgKiA2ICogdDtcbiAgICAgIGlmICh0IDwgMS8yKSByZXR1cm4gcTtcbiAgICAgIGlmICh0IDwgMi8zKSByZXR1cm4gcCArIChxIC0gcCkgKiAoMi8zIC0gdCkgKiA2O1xuICAgICAgcmV0dXJuIHA7XG4gICAgfVxuICAgIGxldCByLCBnLCBiO1xuICAgIGlmIChzID09IDApIHtcbiAgICAgIHIgPSBnID0gYiA9IGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHEgPSBsIDwgMC41ID8gbCAqICgxICsgcykgOiBsICsgcyAtIGwgKiBzO1xuICAgICAgY29uc3QgcCA9IDIgKiBsIC0gcTtcbiAgICAgIHIgPSBodWUycmdiKHAsIHEsIGggKyAxLzMpO1xuICAgICAgZyA9IGh1ZTJyZ2IocCwgcSwgaCk7XG4gICAgICBiID0gaHVlMnJnYihwLCBxLCBoIC0gMS8zKTtcbiAgICB9XG4gICAgcmV0dXJuIGByZ2JhKCR7ciAqIDI1NX0sJHtnICogMjU1fSwke2IgKiAyNTV9LCR7YX0pYDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbG9yVG9SZ2IodmFsKSB7XG4gICAgaWYgKGlzLnJnYih2YWwpKSByZXR1cm4gcmdiVG9SZ2JhKHZhbCk7XG4gICAgaWYgKGlzLmhleCh2YWwpKSByZXR1cm4gaGV4VG9SZ2JhKHZhbCk7XG4gICAgaWYgKGlzLmhzbCh2YWwpKSByZXR1cm4gaHNsVG9SZ2JhKHZhbCk7XG4gIH1cblxuICAvLyBVbml0c1xuXG4gIGZ1bmN0aW9uIGdldFVuaXQodmFsKSB7XG4gICAgY29uc3Qgc3BsaXQgPSAvKFtcXCtcXC1dP1swLTkjXFwuXSspKCV8cHh8cHR8ZW18cmVtfGlufGNtfG1tfGV4fGNofHBjfHZ3fHZofHZtaW58dm1heHxkZWd8cmFkfHR1cm4pPyQvLmV4ZWModmFsKTtcbiAgICBpZiAoc3BsaXQpIHJldHVybiBzcGxpdFsyXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFRyYW5zZm9ybVVuaXQocHJvcE5hbWUpIHtcbiAgICBpZiAoc3RyaW5nQ29udGFpbnMocHJvcE5hbWUsICd0cmFuc2xhdGUnKSB8fCBwcm9wTmFtZSA9PT0gJ3BlcnNwZWN0aXZlJykgcmV0dXJuICdweCc7XG4gICAgaWYgKHN0cmluZ0NvbnRhaW5zKHByb3BOYW1lLCAncm90YXRlJykgfHwgc3RyaW5nQ29udGFpbnMocHJvcE5hbWUsICdza2V3JykpIHJldHVybiAnZGVnJztcbiAgfVxuXG4gIC8vIFZhbHVlc1xuXG4gIGZ1bmN0aW9uIG1pbk1heFZhbHVlKHZhbCwgbWluLCBtYXgpIHtcbiAgICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgodmFsLCBtaW4pLCBtYXgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RnVuY3Rpb25WYWx1ZSh2YWwsIGFuaW1hdGFibGUpIHtcbiAgICBpZiAoIWlzLmZuYyh2YWwpKSByZXR1cm4gdmFsO1xuICAgIHJldHVybiB2YWwoYW5pbWF0YWJsZS50YXJnZXQsIGFuaW1hdGFibGUuaWQsIGFuaW1hdGFibGUudG90YWwpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Q1NTVmFsdWUoZWwsIHByb3ApIHtcbiAgICBpZiAocHJvcCBpbiBlbC5zdHlsZSkge1xuICAgICAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGUoZWwpLmdldFByb3BlcnR5VmFsdWUoc3RyaW5nVG9IeXBoZW5zKHByb3ApKSB8fCAnMCc7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0QW5pbWF0aW9uVHlwZShlbCwgcHJvcCkge1xuICAgIGlmIChpcy5kb20oZWwpICYmIGFycmF5Q29udGFpbnModmFsaWRUcmFuc2Zvcm1zLCBwcm9wKSkgcmV0dXJuICd0cmFuc2Zvcm0nO1xuICAgIGlmIChpcy5kb20oZWwpICYmIChlbC5nZXRBdHRyaWJ1dGUocHJvcCkgfHwgKGlzLnN2ZyhlbCkgJiYgZWxbcHJvcF0pKSkgcmV0dXJuICdhdHRyaWJ1dGUnO1xuICAgIGlmIChpcy5kb20oZWwpICYmIChwcm9wICE9PSAndHJhbnNmb3JtJyAmJiBnZXRDU1NWYWx1ZShlbCwgcHJvcCkpKSByZXR1cm4gJ2Nzcyc7XG4gICAgaWYgKGVsW3Byb3BdICE9IG51bGwpIHJldHVybiAnb2JqZWN0JztcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFRyYW5zZm9ybVZhbHVlKGVsLCBwcm9wTmFtZSkge1xuICAgIGNvbnN0IGRlZmF1bHRVbml0ID0gZ2V0VHJhbnNmb3JtVW5pdChwcm9wTmFtZSk7XG4gICAgY29uc3QgZGVmYXVsdFZhbCA9IHN0cmluZ0NvbnRhaW5zKHByb3BOYW1lLCAnc2NhbGUnKSA/IDEgOiAwICsgZGVmYXVsdFVuaXQ7XG4gICAgY29uc3Qgc3RyID0gZWwuc3R5bGUudHJhbnNmb3JtO1xuICAgIGlmICghc3RyKSByZXR1cm4gZGVmYXVsdFZhbDtcbiAgICBsZXQgbWF0Y2ggPSBbXTtcbiAgICBsZXQgcHJvcHMgPSBbXTtcbiAgICBsZXQgdmFsdWVzID0gW107XG4gICAgY29uc3Qgcmd4ID0gLyhcXHcrKVxcKCguKz8pXFwpL2c7XG4gICAgd2hpbGUgKG1hdGNoID0gcmd4LmV4ZWMoc3RyKSkge1xuICAgICAgcHJvcHMucHVzaChtYXRjaFsxXSk7XG4gICAgICB2YWx1ZXMucHVzaChtYXRjaFsyXSk7XG4gICAgfVxuICAgIGNvbnN0IHZhbHVlID0gZmlsdGVyQXJyYXkodmFsdWVzLCAodmFsLCBpKSA9PiBwcm9wc1tpXSA9PT0gcHJvcE5hbWUpO1xuICAgIHJldHVybiB2YWx1ZS5sZW5ndGggPyB2YWx1ZVswXSA6IGRlZmF1bHRWYWw7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRPcmlnaW5hbFRhcmdldFZhbHVlKHRhcmdldCwgcHJvcE5hbWUpIHtcbiAgICBzd2l0Y2ggKGdldEFuaW1hdGlvblR5cGUodGFyZ2V0LCBwcm9wTmFtZSkpIHtcbiAgICAgIGNhc2UgJ3RyYW5zZm9ybSc6IHJldHVybiBnZXRUcmFuc2Zvcm1WYWx1ZSh0YXJnZXQsIHByb3BOYW1lKTtcbiAgICAgIGNhc2UgJ2Nzcyc6IHJldHVybiBnZXRDU1NWYWx1ZSh0YXJnZXQsIHByb3BOYW1lKTtcbiAgICAgIGNhc2UgJ2F0dHJpYnV0ZSc6IHJldHVybiB0YXJnZXQuZ2V0QXR0cmlidXRlKHByb3BOYW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldFtwcm9wTmFtZV0gfHwgMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFJlbGF0aXZlVmFsdWUodG8sIGZyb20pIHtcbiAgICBjb25zdCBvcGVyYXRvciA9IC9eKFxcKj18XFwrPXwtPSkvLmV4ZWModG8pO1xuICAgIGlmICghb3BlcmF0b3IpIHJldHVybiB0bztcbiAgICBjb25zdCB1ID0gZ2V0VW5pdCh0bykgfHwgMDtcbiAgICBjb25zdCB4ID0gcGFyc2VGbG9hdChmcm9tKTtcbiAgICBjb25zdCB5ID0gcGFyc2VGbG9hdCh0by5yZXBsYWNlKG9wZXJhdG9yWzBdLCAnJykpO1xuICAgIHN3aXRjaCAob3BlcmF0b3JbMF1bMF0pIHtcbiAgICAgIGNhc2UgJysnOiByZXR1cm4geCArIHkgKyB1O1xuICAgICAgY2FzZSAnLSc6IHJldHVybiB4IC0geSArIHU7XG4gICAgICBjYXNlICcqJzogcmV0dXJuIHggKiB5ICsgdTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB2YWxpZGF0ZVZhbHVlKHZhbCwgdW5pdCkge1xuICAgIGlmIChpcy5jb2wodmFsKSkgcmV0dXJuIGNvbG9yVG9SZ2IodmFsKTtcbiAgICBjb25zdCBvcmlnaW5hbFVuaXQgPSBnZXRVbml0KHZhbCk7XG4gICAgY29uc3QgdW5pdExlc3MgPSBvcmlnaW5hbFVuaXQgPyB2YWwuc3Vic3RyKDAsIHZhbC5sZW5ndGggLSBvcmlnaW5hbFVuaXQubGVuZ3RoKSA6IHZhbDtcbiAgICByZXR1cm4gdW5pdCAmJiAhL1xccy9nLnRlc3QodmFsKSA/IHVuaXRMZXNzICsgdW5pdCA6IHVuaXRMZXNzO1xuICB9XG5cbiAgLy8gZ2V0VG90YWxMZW5ndGgoKSBlcXVpdmFsZW50IGZvciBjaXJjbGUsIHJlY3QsIHBvbHlsaW5lLCBwb2x5Z29uIGFuZCBsaW5lIHNoYXBlcy4gXG4gIC8vIGFkYXB0ZWQgZnJvbSBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9TZWJMYW1ibGEvM2UwNTUwYzQ5NmMyMzY3MDk3NDRcblxuICBmdW5jdGlvbiBnZXREaXN0YW5jZShwMSwgcDIpIHtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHAyLnggLSBwMS54LCAyKSArIE1hdGgucG93KHAyLnkgLSBwMS55LCAyKSk7IFxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Q2lyY2xlTGVuZ3RoKGVsKSB7XG4gICAgcmV0dXJuIDIgKiBNYXRoLlBJICogZWwuZ2V0QXR0cmlidXRlKCdyJyk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRSZWN0TGVuZ3RoKGVsKSB7XG4gICAgcmV0dXJuIChlbC5nZXRBdHRyaWJ1dGUoJ3dpZHRoJykgKiAyKSArIChlbC5nZXRBdHRyaWJ1dGUoJ2hlaWdodCcpICogMik7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRMaW5lTGVuZ3RoKGVsKSB7XG4gICAgcmV0dXJuIGdldERpc3RhbmNlKFxuICAgICAge3g6IGVsLmdldEF0dHJpYnV0ZSgneDEnKSwgeTogZWwuZ2V0QXR0cmlidXRlKCd5MScpfSwgXG4gICAgICB7eDogZWwuZ2V0QXR0cmlidXRlKCd4MicpLCB5OiBlbC5nZXRBdHRyaWJ1dGUoJ3kyJyl9XG4gICAgKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFBvbHlsaW5lTGVuZ3RoKGVsKSB7XG4gICAgY29uc3QgcG9pbnRzID0gZWwucG9pbnRzO1xuICAgIGxldCB0b3RhbExlbmd0aCA9IDA7XG4gICAgbGV0IHByZXZpb3VzUG9zO1xuICAgIGZvciAobGV0IGkgPSAwIDsgaSA8IHBvaW50cy5udW1iZXJPZkl0ZW1zOyBpKyspIHtcbiAgICAgIGNvbnN0IGN1cnJlbnRQb3MgPSBwb2ludHMuZ2V0SXRlbShpKTtcbiAgICAgIGlmIChpID4gMCkgdG90YWxMZW5ndGggKz0gZ2V0RGlzdGFuY2UocHJldmlvdXNQb3MsIGN1cnJlbnRQb3MpO1xuICAgICAgcHJldmlvdXNQb3MgPSBjdXJyZW50UG9zO1xuICAgIH1cbiAgICByZXR1cm4gdG90YWxMZW5ndGg7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRQb2x5Z29uTGVuZ3RoKGVsKSB7XG4gICAgY29uc3QgcG9pbnRzID0gZWwucG9pbnRzO1xuICAgIHJldHVybiBnZXRQb2x5bGluZUxlbmd0aChlbCkgKyBnZXREaXN0YW5jZShwb2ludHMuZ2V0SXRlbShwb2ludHMubnVtYmVyT2ZJdGVtcyAtIDEpLCBwb2ludHMuZ2V0SXRlbSgwKSk7XG4gIH1cblxuICAvLyBQYXRoIGFuaW1hdGlvblxuXG4gIGZ1bmN0aW9uIGdldFRvdGFsTGVuZ3RoKGVsKSB7XG4gICAgaWYgKGVsLmdldFRvdGFsTGVuZ3RoKSByZXR1cm4gZWwuZ2V0VG90YWxMZW5ndGgoKTtcbiAgICBzd2l0Y2goZWwudGFnTmFtZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICBjYXNlICdjaXJjbGUnOiByZXR1cm4gZ2V0Q2lyY2xlTGVuZ3RoKGVsKTtcbiAgICAgIGNhc2UgJ3JlY3QnOiByZXR1cm4gZ2V0UmVjdExlbmd0aChlbCk7XG4gICAgICBjYXNlICdsaW5lJzogcmV0dXJuIGdldExpbmVMZW5ndGgoZWwpO1xuICAgICAgY2FzZSAncG9seWxpbmUnOiByZXR1cm4gZ2V0UG9seWxpbmVMZW5ndGgoZWwpO1xuICAgICAgY2FzZSAncG9seWdvbic6IHJldHVybiBnZXRQb2x5Z29uTGVuZ3RoKGVsKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzZXREYXNob2Zmc2V0KGVsKSB7XG4gICAgY29uc3QgcGF0aExlbmd0aCA9IGdldFRvdGFsTGVuZ3RoKGVsKTtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS1kYXNoYXJyYXknLCBwYXRoTGVuZ3RoKTtcbiAgICByZXR1cm4gcGF0aExlbmd0aDtcbiAgfVxuXG4gIC8vIE1vdGlvbiBwYXRoXG5cbiAgZnVuY3Rpb24gZ2V0UGF0aChwYXRoLCBwZXJjZW50KSB7XG4gICAgY29uc3QgZWwgPSBpcy5zdHIocGF0aCkgPyBzZWxlY3RTdHJpbmcocGF0aClbMF0gOiBwYXRoO1xuICAgIGNvbnN0IHAgPSBwZXJjZW50IHx8IDEwMDtcbiAgICByZXR1cm4gZnVuY3Rpb24ocHJvcCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZWw6IGVsLFxuICAgICAgICBwcm9wZXJ0eTogcHJvcCxcbiAgICAgICAgdG90YWxMZW5ndGg6IGdldFRvdGFsTGVuZ3RoKGVsKSAqIChwIC8gMTAwKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFBhdGhQcm9ncmVzcyhwYXRoLCBwcm9ncmVzcykge1xuICAgIGZ1bmN0aW9uIHBvaW50KG9mZnNldCA9IDApIHtcbiAgICAgIGNvbnN0IGwgPSBwcm9ncmVzcyArIG9mZnNldCA+PSAxID8gcHJvZ3Jlc3MgKyBvZmZzZXQgOiAwO1xuICAgICAgcmV0dXJuIHBhdGguZWwuZ2V0UG9pbnRBdExlbmd0aChsKTtcbiAgICB9XG4gICAgY29uc3QgcCA9IHBvaW50KCk7XG4gICAgY29uc3QgcDAgPSBwb2ludCgtMSk7XG4gICAgY29uc3QgcDEgPSBwb2ludCgrMSk7XG4gICAgc3dpdGNoIChwYXRoLnByb3BlcnR5KSB7XG4gICAgICBjYXNlICd4JzogcmV0dXJuIHAueDtcbiAgICAgIGNhc2UgJ3knOiByZXR1cm4gcC55O1xuICAgICAgY2FzZSAnYW5nbGUnOiByZXR1cm4gTWF0aC5hdGFuMihwMS55IC0gcDAueSwgcDEueCAtIHAwLngpICogMTgwIC8gTWF0aC5QSTtcbiAgICB9XG4gIH1cblxuICAvLyBEZWNvbXBvc2UgdmFsdWVcblxuICBmdW5jdGlvbiBkZWNvbXBvc2VWYWx1ZSh2YWwsIHVuaXQpIHtcbiAgICBjb25zdCByZ3ggPSAvLT9cXGQqXFwuP1xcZCsvZztcbiAgICBjb25zdCB2YWx1ZSA9IHZhbGlkYXRlVmFsdWUoKGlzLnB0aCh2YWwpID8gdmFsLnRvdGFsTGVuZ3RoIDogdmFsKSwgdW5pdCkgKyAnJztcbiAgICByZXR1cm4ge1xuICAgICAgb3JpZ2luYWw6IHZhbHVlLFxuICAgICAgbnVtYmVyczogdmFsdWUubWF0Y2gocmd4KSA/IHZhbHVlLm1hdGNoKHJneCkubWFwKE51bWJlcikgOiBbMF0sXG4gICAgICBzdHJpbmdzOiAoaXMuc3RyKHZhbCkgfHwgdW5pdCkgPyB2YWx1ZS5zcGxpdChyZ3gpIDogW11cbiAgICB9XG4gIH1cblxuICAvLyBBbmltYXRhYmxlc1xuXG4gIGZ1bmN0aW9uIHBhcnNlVGFyZ2V0cyh0YXJnZXRzKSB7XG4gICAgY29uc3QgdGFyZ2V0c0FycmF5ID0gdGFyZ2V0cyA/IChmbGF0dGVuQXJyYXkoaXMuYXJyKHRhcmdldHMpID8gdGFyZ2V0cy5tYXAodG9BcnJheSkgOiB0b0FycmF5KHRhcmdldHMpKSkgOiBbXTtcbiAgICByZXR1cm4gZmlsdGVyQXJyYXkodGFyZ2V0c0FycmF5LCAoaXRlbSwgcG9zLCBzZWxmKSA9PiBzZWxmLmluZGV4T2YoaXRlbSkgPT09IHBvcyk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRBbmltYXRhYmxlcyh0YXJnZXRzKSB7XG4gICAgY29uc3QgcGFyc2VkID0gcGFyc2VUYXJnZXRzKHRhcmdldHMpO1xuICAgIHJldHVybiBwYXJzZWQubWFwKCh0LCBpKSA9PiB7XG4gICAgICByZXR1cm4ge3RhcmdldDogdCwgaWQ6IGksIHRvdGFsOiBwYXJzZWQubGVuZ3RofTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIFByb3BlcnRpZXNcblxuICBmdW5jdGlvbiBub3JtYWxpemVQcm9wZXJ0eVR3ZWVucyhwcm9wLCB0d2VlblNldHRpbmdzKSB7XG4gICAgbGV0IHNldHRpbmdzID0gY2xvbmVPYmplY3QodHdlZW5TZXR0aW5ncyk7XG4gICAgaWYgKGlzLmFycihwcm9wKSkge1xuICAgICAgY29uc3QgbCA9IHByb3AubGVuZ3RoO1xuICAgICAgY29uc3QgaXNGcm9tVG8gPSAobCA9PT0gMiAmJiAhaXMub2JqKHByb3BbMF0pKTtcbiAgICAgIGlmICghaXNGcm9tVG8pIHtcbiAgICAgICAgLy8gRHVyYXRpb24gZGl2aWRlZCBieSB0aGUgbnVtYmVyIG9mIHR3ZWVuc1xuICAgICAgICBpZiAoIWlzLmZuYyh0d2VlblNldHRpbmdzLmR1cmF0aW9uKSkgc2V0dGluZ3MuZHVyYXRpb24gPSB0d2VlblNldHRpbmdzLmR1cmF0aW9uIC8gbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRyYW5zZm9ybSBbZnJvbSwgdG9dIHZhbHVlcyBzaG9ydGhhbmQgdG8gYSB2YWxpZCB0d2VlbiB2YWx1ZVxuICAgICAgICBwcm9wID0ge3ZhbHVlOiBwcm9wfTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRvQXJyYXkocHJvcCkubWFwKCh2LCBpKSA9PiB7XG4gICAgICAvLyBEZWZhdWx0IGRlbGF5IHZhbHVlIHNob3VsZCBiZSBhcHBsaWVkIG9ubHkgb24gdGhlIGZpcnN0IHR3ZWVuXG4gICAgICBjb25zdCBkZWxheSA9ICFpID8gdHdlZW5TZXR0aW5ncy5kZWxheSA6IDA7XG4gICAgICAvLyBVc2UgcGF0aCBvYmplY3QgYXMgYSB0d2VlbiB2YWx1ZVxuICAgICAgbGV0IG9iaiA9IGlzLm9iaih2KSAmJiAhaXMucHRoKHYpID8gdiA6IHt2YWx1ZTogdn07XG4gICAgICAvLyBTZXQgZGVmYXVsdCBkZWxheSB2YWx1ZVxuICAgICAgaWYgKGlzLnVuZChvYmouZGVsYXkpKSBvYmouZGVsYXkgPSBkZWxheTtcbiAgICAgIHJldHVybiBvYmo7XG4gICAgfSkubWFwKGsgPT4gbWVyZ2VPYmplY3RzKGssIHNldHRpbmdzKSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRQcm9wZXJ0aWVzKGluc3RhbmNlU2V0dGluZ3MsIHR3ZWVuU2V0dGluZ3MsIHBhcmFtcykge1xuICAgIGxldCBwcm9wZXJ0aWVzID0gW107XG4gICAgY29uc3Qgc2V0dGluZ3MgPSBtZXJnZU9iamVjdHMoaW5zdGFuY2VTZXR0aW5ncywgdHdlZW5TZXR0aW5ncyk7XG4gICAgZm9yIChsZXQgcCBpbiBwYXJhbXMpIHtcbiAgICAgIGlmICghc2V0dGluZ3MuaGFzT3duUHJvcGVydHkocCkgJiYgcCAhPT0gJ3RhcmdldHMnKSB7XG4gICAgICAgIHByb3BlcnRpZXMucHVzaCh7XG4gICAgICAgICAgbmFtZTogcCxcbiAgICAgICAgICBvZmZzZXQ6IHNldHRpbmdzWydvZmZzZXQnXSxcbiAgICAgICAgICB0d2VlbnM6IG5vcm1hbGl6ZVByb3BlcnR5VHdlZW5zKHBhcmFtc1twXSwgdHdlZW5TZXR0aW5ncylcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwcm9wZXJ0aWVzO1xuICB9XG5cbiAgLy8gVHdlZW5zXG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplVHdlZW5WYWx1ZXModHdlZW4sIGFuaW1hdGFibGUpIHtcbiAgICBsZXQgdCA9IHt9O1xuICAgIGZvciAobGV0IHAgaW4gdHdlZW4pIHtcbiAgICAgIGxldCB2YWx1ZSA9IGdldEZ1bmN0aW9uVmFsdWUodHdlZW5bcF0sIGFuaW1hdGFibGUpO1xuICAgICAgaWYgKGlzLmFycih2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5tYXAodiA9PiBnZXRGdW5jdGlvblZhbHVlKHYsIGFuaW1hdGFibGUpKTtcbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMSkgdmFsdWUgPSB2YWx1ZVswXTtcbiAgICAgIH1cbiAgICAgIHRbcF0gPSB2YWx1ZTtcbiAgICB9XG4gICAgdC5kdXJhdGlvbiA9IHBhcnNlRmxvYXQodC5kdXJhdGlvbik7XG4gICAgdC5kZWxheSA9IHBhcnNlRmxvYXQodC5kZWxheSk7XG4gICAgcmV0dXJuIHQ7XG4gIH1cblxuICBmdW5jdGlvbiBub3JtYWxpemVFYXNpbmcodmFsKSB7XG4gICAgcmV0dXJuIGlzLmFycih2YWwpID8gYmV6aWVyLmFwcGx5KHRoaXMsIHZhbCkgOiBlYXNpbmdzW3ZhbF07XG4gIH1cblxuICBmdW5jdGlvbiBub3JtYWxpemVUd2VlbnMocHJvcCwgYW5pbWF0YWJsZSkge1xuICAgIGxldCBwcmV2aW91c1R3ZWVuO1xuICAgIHJldHVybiBwcm9wLnR3ZWVucy5tYXAodCA9PiB7XG4gICAgICBsZXQgdHdlZW4gPSBub3JtYWxpemVUd2VlblZhbHVlcyh0LCBhbmltYXRhYmxlKTtcbiAgICAgIGNvbnN0IHR3ZWVuVmFsdWUgPSB0d2Vlbi52YWx1ZTtcbiAgICAgIGNvbnN0IG9yaWdpbmFsVmFsdWUgPSBnZXRPcmlnaW5hbFRhcmdldFZhbHVlKGFuaW1hdGFibGUudGFyZ2V0LCBwcm9wLm5hbWUpO1xuICAgICAgY29uc3QgcHJldmlvdXNWYWx1ZSA9IHByZXZpb3VzVHdlZW4gPyBwcmV2aW91c1R3ZWVuLnRvLm9yaWdpbmFsIDogb3JpZ2luYWxWYWx1ZTtcbiAgICAgIGNvbnN0IGZyb20gPSBpcy5hcnIodHdlZW5WYWx1ZSkgPyB0d2VlblZhbHVlWzBdIDogcHJldmlvdXNWYWx1ZTtcbiAgICAgIGNvbnN0IHRvID0gZ2V0UmVsYXRpdmVWYWx1ZShpcy5hcnIodHdlZW5WYWx1ZSkgPyB0d2VlblZhbHVlWzFdIDogdHdlZW5WYWx1ZSwgZnJvbSk7XG4gICAgICBjb25zdCB1bml0ID0gZ2V0VW5pdCh0bykgfHwgZ2V0VW5pdChmcm9tKSB8fCBnZXRVbml0KG9yaWdpbmFsVmFsdWUpO1xuICAgICAgdHdlZW4uZnJvbSA9IGRlY29tcG9zZVZhbHVlKGZyb20sIHVuaXQpO1xuICAgICAgdHdlZW4udG8gPSBkZWNvbXBvc2VWYWx1ZSh0bywgdW5pdCk7XG4gICAgICB0d2Vlbi5zdGFydCA9IHByZXZpb3VzVHdlZW4gPyBwcmV2aW91c1R3ZWVuLmVuZCA6IHByb3Aub2Zmc2V0O1xuICAgICAgdHdlZW4uZW5kID0gdHdlZW4uc3RhcnQgKyB0d2Vlbi5kZWxheSArIHR3ZWVuLmR1cmF0aW9uO1xuICAgICAgdHdlZW4uZWFzaW5nID0gbm9ybWFsaXplRWFzaW5nKHR3ZWVuLmVhc2luZyk7XG4gICAgICB0d2Vlbi5lbGFzdGljaXR5ID0gKDEwMDAgLSBtaW5NYXhWYWx1ZSh0d2Vlbi5lbGFzdGljaXR5LCAxLCA5OTkpKSAvIDEwMDA7XG4gICAgICB0d2Vlbi5pc1BhdGggPSBpcy5wdGgodHdlZW5WYWx1ZSk7XG4gICAgICB0d2Vlbi5pc0NvbG9yID0gaXMuY29sKHR3ZWVuLmZyb20ub3JpZ2luYWwpO1xuICAgICAgaWYgKHR3ZWVuLmlzQ29sb3IpIHR3ZWVuLnJvdW5kID0gMTtcbiAgICAgIHByZXZpb3VzVHdlZW4gPSB0d2VlbjtcbiAgICAgIHJldHVybiB0d2VlbjtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIFR3ZWVuIHByb2dyZXNzXG5cbiAgY29uc3Qgc2V0VHdlZW5Qcm9ncmVzcyA9IHtcbiAgICBjc3M6ICh0LCBwLCB2KSA9PiB0LnN0eWxlW3BdID0gdixcbiAgICBhdHRyaWJ1dGU6ICh0LCBwLCB2KSA9PiB0LnNldEF0dHJpYnV0ZShwLCB2KSxcbiAgICBvYmplY3Q6ICh0LCBwLCB2KSA9PiB0W3BdID0gdixcbiAgICB0cmFuc2Zvcm06ICh0LCBwLCB2LCB0cmFuc2Zvcm1zLCBpZCkgPT4ge1xuICAgICAgaWYgKCF0cmFuc2Zvcm1zW2lkXSkgdHJhbnNmb3Jtc1tpZF0gPSBbXTtcbiAgICAgIHRyYW5zZm9ybXNbaWRdLnB1c2goYCR7cH0oJHt2fSlgKTtcbiAgICB9XG4gIH1cblxuICAvLyBBbmltYXRpb25zXG5cbiAgZnVuY3Rpb24gY3JlYXRlQW5pbWF0aW9uKGFuaW1hdGFibGUsIHByb3ApIHtcbiAgICBjb25zdCBhbmltVHlwZSA9IGdldEFuaW1hdGlvblR5cGUoYW5pbWF0YWJsZS50YXJnZXQsIHByb3AubmFtZSk7XG4gICAgaWYgKGFuaW1UeXBlKSB7XG4gICAgICBjb25zdCB0d2VlbnMgPSBub3JtYWxpemVUd2VlbnMocHJvcCwgYW5pbWF0YWJsZSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBhbmltVHlwZSxcbiAgICAgICAgcHJvcGVydHk6IHByb3AubmFtZSxcbiAgICAgICAgYW5pbWF0YWJsZTogYW5pbWF0YWJsZSxcbiAgICAgICAgdHdlZW5zOiB0d2VlbnMsXG4gICAgICAgIGR1cmF0aW9uOiB0d2VlbnNbdHdlZW5zLmxlbmd0aCAtIDFdLmVuZCxcbiAgICAgICAgZGVsYXk6IHR3ZWVuc1swXS5kZWxheVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEFuaW1hdGlvbnMoYW5pbWF0YWJsZXMsIHByb3BlcnRpZXMpIHtcbiAgICByZXR1cm4gZmlsdGVyQXJyYXkoZmxhdHRlbkFycmF5KGFuaW1hdGFibGVzLm1hcChhbmltYXRhYmxlID0+IHtcbiAgICAgIHJldHVybiBwcm9wZXJ0aWVzLm1hcChwcm9wID0+IHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUFuaW1hdGlvbihhbmltYXRhYmxlLCBwcm9wKTtcbiAgICAgIH0pO1xuICAgIH0pKSwgYSA9PiAhaXMudW5kKGEpKTtcbiAgfVxuXG4gIC8vIENyZWF0ZSBJbnN0YW5jZVxuXG4gIGZ1bmN0aW9uIGdldEluc3RhbmNlVGltaW5ncyh0eXBlLCBhbmltYXRpb25zLCBpbnN0YW5jZVNldHRpbmdzLCB0d2VlblNldHRpbmdzKSB7XG4gICAgY29uc3QgaXNEZWxheSA9ICh0eXBlID09PSAnZGVsYXknKTtcbiAgICBpZiAoYW5pbWF0aW9ucy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiAoaXNEZWxheSA/IE1hdGgubWluIDogTWF0aC5tYXgpLmFwcGx5KE1hdGgsIGFuaW1hdGlvbnMubWFwKGFuaW0gPT4gYW5pbVt0eXBlXSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaXNEZWxheSA/IHR3ZWVuU2V0dGluZ3MuZGVsYXkgOiBpbnN0YW5jZVNldHRpbmdzLm9mZnNldCArIHR3ZWVuU2V0dGluZ3MuZGVsYXkgKyB0d2VlblNldHRpbmdzLmR1cmF0aW9uO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZU5ld0luc3RhbmNlKHBhcmFtcykge1xuICAgIGNvbnN0IGluc3RhbmNlU2V0dGluZ3MgPSByZXBsYWNlT2JqZWN0UHJvcHMoZGVmYXVsdEluc3RhbmNlU2V0dGluZ3MsIHBhcmFtcyk7XG4gICAgY29uc3QgdHdlZW5TZXR0aW5ncyA9IHJlcGxhY2VPYmplY3RQcm9wcyhkZWZhdWx0VHdlZW5TZXR0aW5ncywgcGFyYW1zKTtcbiAgICBjb25zdCBhbmltYXRhYmxlcyA9IGdldEFuaW1hdGFibGVzKHBhcmFtcy50YXJnZXRzKTtcbiAgICBjb25zdCBwcm9wZXJ0aWVzID0gZ2V0UHJvcGVydGllcyhpbnN0YW5jZVNldHRpbmdzLCB0d2VlblNldHRpbmdzLCBwYXJhbXMpO1xuICAgIGNvbnN0IGFuaW1hdGlvbnMgPSBnZXRBbmltYXRpb25zKGFuaW1hdGFibGVzLCBwcm9wZXJ0aWVzKTtcbiAgICByZXR1cm4gbWVyZ2VPYmplY3RzKGluc3RhbmNlU2V0dGluZ3MsIHtcbiAgICAgIGNoaWxkcmVuOiBbXSxcbiAgICAgIGFuaW1hdGFibGVzOiBhbmltYXRhYmxlcyxcbiAgICAgIGFuaW1hdGlvbnM6IGFuaW1hdGlvbnMsXG4gICAgICBkdXJhdGlvbjogZ2V0SW5zdGFuY2VUaW1pbmdzKCdkdXJhdGlvbicsIGFuaW1hdGlvbnMsIGluc3RhbmNlU2V0dGluZ3MsIHR3ZWVuU2V0dGluZ3MpLFxuICAgICAgZGVsYXk6IGdldEluc3RhbmNlVGltaW5ncygnZGVsYXknLCBhbmltYXRpb25zLCBpbnN0YW5jZVNldHRpbmdzLCB0d2VlblNldHRpbmdzKVxuICAgIH0pO1xuICB9XG5cbiAgLy8gQ29yZVxuXG4gIGxldCBhY3RpdmVJbnN0YW5jZXMgPSBbXTtcbiAgbGV0IHJhZiA9IDA7XG5cbiAgY29uc3QgZW5naW5lID0gKCgpID0+IHtcbiAgICBmdW5jdGlvbiBwbGF5KCkgeyByYWYgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc3RlcCk7IH07XG4gICAgZnVuY3Rpb24gc3RlcCh0KSB7XG4gICAgICBjb25zdCBhY3RpdmVMZW5ndGggPSBhY3RpdmVJbnN0YW5jZXMubGVuZ3RoO1xuICAgICAgaWYgKGFjdGl2ZUxlbmd0aCkge1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIHdoaWxlIChpIDwgYWN0aXZlTGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKGFjdGl2ZUluc3RhbmNlc1tpXSkgYWN0aXZlSW5zdGFuY2VzW2ldLnRpY2sodCk7XG4gICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIHBsYXkoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHJhZik7XG4gICAgICAgIHJhZiA9IDA7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwbGF5O1xuICB9KSgpO1xuXG5cbiAgLy8gUHVibGljIEluc3RhbmNlXG5cbiAgZnVuY3Rpb24gYW5pbWUocGFyYW1zID0ge30pIHtcblxuICAgIGxldCBub3csIHN0YXJ0VGltZSwgbGFzdFRpbWUgPSAwO1xuXG4gICAgbGV0IHJlc29sdmUgPSBudWxsO1xuXG4gICAgZnVuY3Rpb24gbWFrZVByb21pc2UoKSB7XG4gICAgICByZXR1cm4gd2luZG93LlByb21pc2UgJiYgbmV3IFByb21pc2UoX3Jlc29sdmUgPT4gcmVzb2x2ZSA9IF9yZXNvbHZlKTtcbiAgICB9XG5cbiAgICBsZXQgcHJvbWlzZSA9IG1ha2VQcm9taXNlKCk7XG5cbiAgICBsZXQgaW5zdGFuY2UgPSBjcmVhdGVOZXdJbnN0YW5jZShwYXJhbXMpO1xuXG4gICAgZnVuY3Rpb24gdG9nZ2xlSW5zdGFuY2VEaXJlY3Rpb24oKSB7XG4gICAgICBpbnN0YW5jZS5yZXZlcnNlZCA9ICFpbnN0YW5jZS5yZXZlcnNlZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGp1c3RUaW1lKHRpbWUpIHtcbiAgICAgIHJldHVybiBpbnN0YW5jZS5yZXZlcnNlZCA/IGluc3RhbmNlLmR1cmF0aW9uIC0gdGltZSA6IHRpbWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3luY0luc3RhbmNlQ2hpbGRyZW4odGltZSkge1xuICAgICAgY29uc3QgY2hpbGRyZW4gPSBpbnN0YW5jZS5jaGlsZHJlbjtcbiAgICAgIGNvbnN0IGNoaWxkcmVuTGVuZ3RoID0gY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgaWYgKHRpbWUgPj0gaW5zdGFuY2UuY3VycmVudFRpbWUpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbkxlbmd0aDsgaSsrKSBjaGlsZHJlbltpXS5zZWVrKHRpbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IGNoaWxkcmVuTGVuZ3RoOyBpLS07KSBjaGlsZHJlbltpXS5zZWVrKHRpbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldEFuaW1hdGlvbnNQcm9ncmVzcyhpbnNUaW1lKSB7XG4gICAgICBsZXQgaSA9IDA7XG4gICAgICBsZXQgdHJhbnNmb3JtcyA9IHt9O1xuICAgICAgY29uc3QgYW5pbWF0aW9ucyA9IGluc3RhbmNlLmFuaW1hdGlvbnM7XG4gICAgICBjb25zdCBhbmltYXRpb25zTGVuZ3RoID0gYW5pbWF0aW9ucy5sZW5ndGg7XG4gICAgICB3aGlsZSAoaSA8IGFuaW1hdGlvbnNMZW5ndGgpIHtcbiAgICAgICAgY29uc3QgYW5pbSA9IGFuaW1hdGlvbnNbaV07XG4gICAgICAgIGNvbnN0IGFuaW1hdGFibGUgPSBhbmltLmFuaW1hdGFibGU7XG4gICAgICAgIGNvbnN0IHR3ZWVucyA9IGFuaW0udHdlZW5zO1xuICAgICAgICBjb25zdCB0d2Vlbkxlbmd0aCA9IHR3ZWVucy5sZW5ndGggLSAxO1xuICAgICAgICBsZXQgdHdlZW4gPSB0d2VlbnNbdHdlZW5MZW5ndGhdO1xuICAgICAgICAvLyBPbmx5IGNoZWNrIGZvciBrZXlmcmFtZXMgaWYgdGhlcmUgaXMgbW9yZSB0aGFuIG9uZSB0d2VlblxuICAgICAgICBpZiAodHdlZW5MZW5ndGgpIHR3ZWVuID0gZmlsdGVyQXJyYXkodHdlZW5zLCB0ID0+IChpbnNUaW1lIDwgdC5lbmQpKVswXSB8fCB0d2VlbjtcbiAgICAgICAgY29uc3QgZWxhcHNlZCA9IG1pbk1heFZhbHVlKGluc1RpbWUgLSB0d2Vlbi5zdGFydCAtIHR3ZWVuLmRlbGF5LCAwLCB0d2Vlbi5kdXJhdGlvbikgLyB0d2Vlbi5kdXJhdGlvbjtcbiAgICAgICAgY29uc3QgZWFzZWQgPSBpc05hTihlbGFwc2VkKSA/IDEgOiB0d2Vlbi5lYXNpbmcoZWxhcHNlZCwgdHdlZW4uZWxhc3RpY2l0eSk7XG4gICAgICAgIGNvbnN0IHN0cmluZ3MgPSB0d2Vlbi50by5zdHJpbmdzO1xuICAgICAgICBjb25zdCByb3VuZCA9IHR3ZWVuLnJvdW5kO1xuICAgICAgICBsZXQgbnVtYmVycyA9IFtdO1xuICAgICAgICBsZXQgcHJvZ3Jlc3M7XG4gICAgICAgIGNvbnN0IHRvTnVtYmVyc0xlbmd0aCA9IHR3ZWVuLnRvLm51bWJlcnMubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBuID0gMDsgbiA8IHRvTnVtYmVyc0xlbmd0aDsgbisrKSB7XG4gICAgICAgICAgbGV0IHZhbHVlO1xuICAgICAgICAgIGNvbnN0IHRvTnVtYmVyID0gdHdlZW4udG8ubnVtYmVyc1tuXTtcbiAgICAgICAgICBjb25zdCBmcm9tTnVtYmVyID0gdHdlZW4uZnJvbS5udW1iZXJzW25dO1xuICAgICAgICAgIGlmICghdHdlZW4uaXNQYXRoKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGZyb21OdW1iZXIgKyAoZWFzZWQgKiAodG9OdW1iZXIgLSBmcm9tTnVtYmVyKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlID0gZ2V0UGF0aFByb2dyZXNzKHR3ZWVuLnZhbHVlLCBlYXNlZCAqIHRvTnVtYmVyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJvdW5kKSB7XG4gICAgICAgICAgICBpZiAoISh0d2Vlbi5pc0NvbG9yICYmIG4gPiAyKSkge1xuICAgICAgICAgICAgICB2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUgKiByb3VuZCkgLyByb3VuZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgbnVtYmVycy5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBNYW51YWwgQXJyYXkucmVkdWNlIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2VzXG4gICAgICAgIGNvbnN0IHN0cmluZ3NMZW5ndGggPSBzdHJpbmdzLmxlbmd0aDtcbiAgICAgICAgaWYgKCFzdHJpbmdzTGVuZ3RoKSB7XG4gICAgICAgICAgcHJvZ3Jlc3MgPSBudW1iZXJzWzBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb2dyZXNzID0gc3RyaW5nc1swXTtcbiAgICAgICAgICBmb3IgKGxldCBzID0gMDsgcyA8IHN0cmluZ3NMZW5ndGg7IHMrKykge1xuICAgICAgICAgICAgY29uc3QgYSA9IHN0cmluZ3Nbc107XG4gICAgICAgICAgICBjb25zdCBiID0gc3RyaW5nc1tzICsgMV07XG4gICAgICAgICAgICBjb25zdCBuID0gbnVtYmVyc1tzXTtcbiAgICAgICAgICAgIGlmICghaXNOYU4obikpIHtcbiAgICAgICAgICAgICAgaWYgKCFiKSB7XG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3MgKz0gbiArICcgJztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwcm9ncmVzcyArPSBuICsgYjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzZXRUd2VlblByb2dyZXNzW2FuaW0udHlwZV0oYW5pbWF0YWJsZS50YXJnZXQsIGFuaW0ucHJvcGVydHksIHByb2dyZXNzLCB0cmFuc2Zvcm1zLCBhbmltYXRhYmxlLmlkKTtcbiAgICAgICAgYW5pbS5jdXJyZW50VmFsdWUgPSBwcm9ncmVzcztcbiAgICAgICAgaSsrO1xuICAgICAgfVxuICAgICAgY29uc3QgdHJhbnNmb3Jtc0xlbmd0aCA9IE9iamVjdC5rZXlzKHRyYW5zZm9ybXMpLmxlbmd0aDtcbiAgICAgIGlmICh0cmFuc2Zvcm1zTGVuZ3RoKSB7XG4gICAgICAgIGZvciAobGV0IGlkID0gMDsgaWQgPCB0cmFuc2Zvcm1zTGVuZ3RoOyBpZCsrKSB7XG4gICAgICAgICAgaWYgKCF0cmFuc2Zvcm1TdHJpbmcpIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSAndHJhbnNmb3JtJztcbiAgICAgICAgICAgIHRyYW5zZm9ybVN0cmluZyA9IChnZXRDU1NWYWx1ZShkb2N1bWVudC5ib2R5LCB0KSA/IHQgOiBgLXdlYmtpdC0ke3R9YCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGluc3RhbmNlLmFuaW1hdGFibGVzW2lkXS50YXJnZXQuc3R5bGVbdHJhbnNmb3JtU3RyaW5nXSA9IHRyYW5zZm9ybXNbaWRdLmpvaW4oJyAnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaW5zdGFuY2UuY3VycmVudFRpbWUgPSBpbnNUaW1lO1xuICAgICAgaW5zdGFuY2UucHJvZ3Jlc3MgPSAoaW5zVGltZSAvIGluc3RhbmNlLmR1cmF0aW9uKSAqIDEwMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRDYWxsYmFjayhjYikge1xuICAgICAgaWYgKGluc3RhbmNlW2NiXSkgaW5zdGFuY2VbY2JdKGluc3RhbmNlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb3VudEl0ZXJhdGlvbigpIHtcbiAgICAgIGlmIChpbnN0YW5jZS5yZW1haW5pbmcgJiYgaW5zdGFuY2UucmVtYWluaW5nICE9PSB0cnVlKSB7XG4gICAgICAgIGluc3RhbmNlLnJlbWFpbmluZy0tO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldEluc3RhbmNlUHJvZ3Jlc3MoZW5naW5lVGltZSkge1xuICAgICAgY29uc3QgaW5zRHVyYXRpb24gPSBpbnN0YW5jZS5kdXJhdGlvbjtcbiAgICAgIGNvbnN0IGluc09mZnNldCA9IGluc3RhbmNlLm9mZnNldDtcbiAgICAgIGNvbnN0IGluc1N0YXJ0ID0gaW5zT2Zmc2V0ICsgaW5zdGFuY2UuZGVsYXk7XG4gICAgICBjb25zdCBpbnNDdXJyZW50VGltZSA9IGluc3RhbmNlLmN1cnJlbnRUaW1lO1xuICAgICAgY29uc3QgaW5zUmV2ZXJzZWQgPSBpbnN0YW5jZS5yZXZlcnNlZDtcbiAgICAgIGNvbnN0IGluc1RpbWUgPSBhZGp1c3RUaW1lKGVuZ2luZVRpbWUpO1xuICAgICAgaWYgKGluc3RhbmNlLmNoaWxkcmVuLmxlbmd0aCkgc3luY0luc3RhbmNlQ2hpbGRyZW4oaW5zVGltZSk7XG4gICAgICBpZiAoaW5zVGltZSA+PSBpbnNTdGFydCB8fCAhaW5zRHVyYXRpb24pIHtcbiAgICAgICAgaWYgKCFpbnN0YW5jZS5iZWdhbikge1xuICAgICAgICAgIGluc3RhbmNlLmJlZ2FuID0gdHJ1ZTtcbiAgICAgICAgICBzZXRDYWxsYmFjaygnYmVnaW4nKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRDYWxsYmFjaygncnVuJyk7XG4gICAgICB9XG4gICAgICBpZiAoaW5zVGltZSA+IGluc09mZnNldCAmJiBpbnNUaW1lIDwgaW5zRHVyYXRpb24pIHtcbiAgICAgICAgc2V0QW5pbWF0aW9uc1Byb2dyZXNzKGluc1RpbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGluc1RpbWUgPD0gaW5zT2Zmc2V0ICYmIGluc0N1cnJlbnRUaW1lICE9PSAwKSB7XG4gICAgICAgICAgc2V0QW5pbWF0aW9uc1Byb2dyZXNzKDApO1xuICAgICAgICAgIGlmIChpbnNSZXZlcnNlZCkgY291bnRJdGVyYXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKGluc1RpbWUgPj0gaW5zRHVyYXRpb24gJiYgaW5zQ3VycmVudFRpbWUgIT09IGluc0R1cmF0aW9uKSB8fCAhaW5zRHVyYXRpb24pIHtcbiAgICAgICAgICBzZXRBbmltYXRpb25zUHJvZ3Jlc3MoaW5zRHVyYXRpb24pO1xuICAgICAgICAgIGlmICghaW5zUmV2ZXJzZWQpIGNvdW50SXRlcmF0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNldENhbGxiYWNrKCd1cGRhdGUnKTtcbiAgICAgIGlmIChlbmdpbmVUaW1lID49IGluc0R1cmF0aW9uKSB7XG4gICAgICAgIGlmIChpbnN0YW5jZS5yZW1haW5pbmcpIHtcbiAgICAgICAgICBzdGFydFRpbWUgPSBub3c7XG4gICAgICAgICAgaWYgKGluc3RhbmNlLmRpcmVjdGlvbiA9PT0gJ2FsdGVybmF0ZScpIHRvZ2dsZUluc3RhbmNlRGlyZWN0aW9uKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW5zdGFuY2UucGF1c2UoKTtcbiAgICAgICAgICBpZiAoIWluc3RhbmNlLmNvbXBsZXRlZCkge1xuICAgICAgICAgICAgaW5zdGFuY2UuY29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHNldENhbGxiYWNrKCdjb21wbGV0ZScpO1xuICAgICAgICAgICAgaWYgKCdQcm9taXNlJyBpbiB3aW5kb3cpIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICBwcm9taXNlID0gbWFrZVByb21pc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGFzdFRpbWUgPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIGluc3RhbmNlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICBjb25zdCBkaXJlY3Rpb24gPSBpbnN0YW5jZS5kaXJlY3Rpb247XG4gICAgICBjb25zdCBsb29wcyA9IGluc3RhbmNlLmxvb3A7XG4gICAgICBpbnN0YW5jZS5jdXJyZW50VGltZSA9IDA7XG4gICAgICBpbnN0YW5jZS5wcm9ncmVzcyA9IDA7XG4gICAgICBpbnN0YW5jZS5wYXVzZWQgPSB0cnVlO1xuICAgICAgaW5zdGFuY2UuYmVnYW4gPSBmYWxzZTtcbiAgICAgIGluc3RhbmNlLmNvbXBsZXRlZCA9IGZhbHNlO1xuICAgICAgaW5zdGFuY2UucmV2ZXJzZWQgPSBkaXJlY3Rpb24gPT09ICdyZXZlcnNlJztcbiAgICAgIGluc3RhbmNlLnJlbWFpbmluZyA9IGRpcmVjdGlvbiA9PT0gJ2FsdGVybmF0ZScgJiYgbG9vcHMgPT09IDEgPyAyIDogbG9vcHM7XG4gICAgICBzZXRBbmltYXRpb25zUHJvZ3Jlc3MoMCk7XG4gICAgICBmb3IgKGxldCBpID0gaW5zdGFuY2UuY2hpbGRyZW4ubGVuZ3RoOyBpLS07ICl7XG4gICAgICAgIGluc3RhbmNlLmNoaWxkcmVuW2ldLnJlc2V0KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaW5zdGFuY2UudGljayA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgIG5vdyA9IHQ7XG4gICAgICBpZiAoIXN0YXJ0VGltZSkgc3RhcnRUaW1lID0gbm93O1xuICAgICAgY29uc3QgZW5naW5lVGltZSA9IChsYXN0VGltZSArIG5vdyAtIHN0YXJ0VGltZSkgKiBhbmltZS5zcGVlZDtcbiAgICAgIHNldEluc3RhbmNlUHJvZ3Jlc3MoZW5naW5lVGltZSk7XG4gICAgfVxuXG4gICAgaW5zdGFuY2Uuc2VlayA9IGZ1bmN0aW9uKHRpbWUpIHtcbiAgICAgIHNldEluc3RhbmNlUHJvZ3Jlc3MoYWRqdXN0VGltZSh0aW1lKSk7XG4gICAgfVxuXG4gICAgaW5zdGFuY2UucGF1c2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIGNvbnN0IGkgPSBhY3RpdmVJbnN0YW5jZXMuaW5kZXhPZihpbnN0YW5jZSk7XG4gICAgICBpZiAoaSA+IC0xKSBhY3RpdmVJbnN0YW5jZXMuc3BsaWNlKGksIDEpO1xuICAgICAgaW5zdGFuY2UucGF1c2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpbnN0YW5jZS5wbGF5ID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIWluc3RhbmNlLnBhdXNlZCkgcmV0dXJuO1xuICAgICAgaW5zdGFuY2UucGF1c2VkID0gZmFsc2U7XG4gICAgICBzdGFydFRpbWUgPSAwO1xuICAgICAgbGFzdFRpbWUgPSBhZGp1c3RUaW1lKGluc3RhbmNlLmN1cnJlbnRUaW1lKTtcbiAgICAgIGFjdGl2ZUluc3RhbmNlcy5wdXNoKGluc3RhbmNlKTtcbiAgICAgIGlmICghcmFmKSBlbmdpbmUoKTtcbiAgICB9XG5cbiAgICBpbnN0YW5jZS5yZXZlcnNlID0gZnVuY3Rpb24oKSB7XG4gICAgICB0b2dnbGVJbnN0YW5jZURpcmVjdGlvbigpO1xuICAgICAgc3RhcnRUaW1lID0gMDtcbiAgICAgIGxhc3RUaW1lID0gYWRqdXN0VGltZShpbnN0YW5jZS5jdXJyZW50VGltZSk7XG4gICAgfVxuXG4gICAgaW5zdGFuY2UucmVzdGFydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgaW5zdGFuY2UucGF1c2UoKTtcbiAgICAgIGluc3RhbmNlLnJlc2V0KCk7XG4gICAgICBpbnN0YW5jZS5wbGF5KCk7XG4gICAgfVxuXG4gICAgaW5zdGFuY2UuZmluaXNoZWQgPSBwcm9taXNlO1xuXG4gICAgaW5zdGFuY2UucmVzZXQoKTtcblxuICAgIGlmIChpbnN0YW5jZS5hdXRvcGxheSkgaW5zdGFuY2UucGxheSgpO1xuXG4gICAgcmV0dXJuIGluc3RhbmNlO1xuXG4gIH1cblxuICAvLyBSZW1vdmUgdGFyZ2V0cyBmcm9tIGFuaW1hdGlvblxuXG4gIGZ1bmN0aW9uIHJlbW92ZVRhcmdldHModGFyZ2V0cykge1xuICAgIGNvbnN0IHRhcmdldHNBcnJheSA9IHBhcnNlVGFyZ2V0cyh0YXJnZXRzKTtcbiAgICBmb3IgKGxldCBpID0gYWN0aXZlSW5zdGFuY2VzLmxlbmd0aDsgaS0tOykge1xuICAgICAgY29uc3QgaW5zdGFuY2UgPSBhY3RpdmVJbnN0YW5jZXNbaV07XG4gICAgICBjb25zdCBhbmltYXRpb25zID0gaW5zdGFuY2UuYW5pbWF0aW9ucztcbiAgICAgIGZvciAobGV0IGEgPSBhbmltYXRpb25zLmxlbmd0aDsgYS0tOykge1xuICAgICAgICBpZiAoYXJyYXlDb250YWlucyh0YXJnZXRzQXJyYXksIGFuaW1hdGlvbnNbYV0uYW5pbWF0YWJsZS50YXJnZXQpKSB7XG4gICAgICAgICAgYW5pbWF0aW9ucy5zcGxpY2UoYSwgMSk7XG4gICAgICAgICAgaWYgKCFhbmltYXRpb25zLmxlbmd0aCkgaW5zdGFuY2UucGF1c2UoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIFRpbWVsaW5lXG5cbiAgZnVuY3Rpb24gdGltZWxpbmUocGFyYW1zKSB7XG4gICAgbGV0IHRsID0gYW5pbWUocGFyYW1zKTtcbiAgICB0bC5wYXVzZSgpO1xuICAgIHRsLmR1cmF0aW9uID0gMDtcbiAgICB0bC5hZGQgPSBmdW5jdGlvbihpbnN0YW5jZXNQYXJhbXMpIHtcbiAgICAgIHRsLmNoaWxkcmVuLmZvckVhY2goaSA9PiB7IGkuYmVnYW4gPSB0cnVlOyBpLmNvbXBsZXRlZCA9IHRydWU7IH0pO1xuICAgICAgdG9BcnJheShpbnN0YW5jZXNQYXJhbXMpLmZvckVhY2goaW5zdGFuY2VQYXJhbXMgPT4ge1xuICAgICAgICBsZXQgaW5zUGFyYW1zID0gbWVyZ2VPYmplY3RzKGluc3RhbmNlUGFyYW1zLCByZXBsYWNlT2JqZWN0UHJvcHMoZGVmYXVsdFR3ZWVuU2V0dGluZ3MsIHBhcmFtcyB8fCB7fSkpO1xuICAgICAgICBpbnNQYXJhbXMudGFyZ2V0cyA9IGluc1BhcmFtcy50YXJnZXRzIHx8IHBhcmFtcy50YXJnZXRzO1xuICAgICAgICBjb25zdCB0bER1cmF0aW9uID0gdGwuZHVyYXRpb247XG4gICAgICAgIGNvbnN0IGluc09mZnNldCA9IGluc1BhcmFtcy5vZmZzZXQ7XG4gICAgICAgIGluc1BhcmFtcy5hdXRvcGxheSA9IGZhbHNlO1xuICAgICAgICBpbnNQYXJhbXMuZGlyZWN0aW9uID0gdGwuZGlyZWN0aW9uO1xuICAgICAgICBpbnNQYXJhbXMub2Zmc2V0ID0gaXMudW5kKGluc09mZnNldCkgPyB0bER1cmF0aW9uIDogZ2V0UmVsYXRpdmVWYWx1ZShpbnNPZmZzZXQsIHRsRHVyYXRpb24pO1xuICAgICAgICB0bC5iZWdhbiA9IHRydWU7XG4gICAgICAgIHRsLmNvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgIHRsLnNlZWsoaW5zUGFyYW1zLm9mZnNldCk7XG4gICAgICAgIGNvbnN0IGlucyA9IGFuaW1lKGluc1BhcmFtcyk7XG4gICAgICAgIGlucy5iZWdhbiA9IHRydWU7XG4gICAgICAgIGlucy5jb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICBpZiAoaW5zLmR1cmF0aW9uID4gdGxEdXJhdGlvbikgdGwuZHVyYXRpb24gPSBpbnMuZHVyYXRpb247XG4gICAgICAgIHRsLmNoaWxkcmVuLnB1c2goaW5zKTtcbiAgICAgIH0pO1xuICAgICAgdGwuc2VlaygwKTtcbiAgICAgIHRsLnJlc2V0KCk7XG4gICAgICBpZiAodGwuYXV0b3BsYXkpIHRsLnJlc3RhcnQoKTtcbiAgICAgIHJldHVybiB0bDtcbiAgICB9XG4gICAgcmV0dXJuIHRsO1xuICB9XG5cbiAgYW5pbWUudmVyc2lvbiA9ICcyLjIuMCc7XG4gIGFuaW1lLnNwZWVkID0gMTtcbiAgYW5pbWUucnVubmluZyA9IGFjdGl2ZUluc3RhbmNlcztcbiAgYW5pbWUucmVtb3ZlID0gcmVtb3ZlVGFyZ2V0cztcbiAgYW5pbWUuZ2V0VmFsdWUgPSBnZXRPcmlnaW5hbFRhcmdldFZhbHVlO1xuICBhbmltZS5wYXRoID0gZ2V0UGF0aDtcbiAgYW5pbWUuc2V0RGFzaG9mZnNldCA9IHNldERhc2hvZmZzZXQ7XG4gIGFuaW1lLmJlemllciA9IGJlemllcjtcbiAgYW5pbWUuZWFzaW5ncyA9IGVhc2luZ3M7XG4gIGFuaW1lLnRpbWVsaW5lID0gdGltZWxpbmU7XG4gIGFuaW1lLnJhbmRvbSA9IChtaW4sIG1heCkgPT4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKSArIG1pbjtcblxuICByZXR1cm4gYW5pbWU7XG5cbn0pKTtcbiIsIiFmdW5jdGlvbihlKXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1lKCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShlKTpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdy5kZWNvbXA9ZSgpOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsLmRlY29tcD1lKCk6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGYmJihzZWxmLmRlY29tcD1lKCkpfShmdW5jdGlvbigpe3ZhciBkZWZpbmUsbW9kdWxlLGV4cG9ydHM7XG5yZXR1cm4gKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpfXZhciBmPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChmLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGYsZi5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkoezE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIFNjYWxhciA9IHJlcXVpcmUoJy4vU2NhbGFyJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gTGluZTtcblxuLyoqXG4gKiBDb250YWluZXIgZm9yIGxpbmUtcmVsYXRlZCBmdW5jdGlvbnNcbiAqIEBjbGFzcyBMaW5lXG4gKi9cbmZ1bmN0aW9uIExpbmUoKXt9O1xuXG4vKipcbiAqIENvbXB1dGUgdGhlIGludGVyc2VjdGlvbiBiZXR3ZWVuIHR3byBsaW5lcy5cbiAqIEBzdGF0aWNcbiAqIEBtZXRob2QgbGluZUludFxuICogQHBhcmFtICB7QXJyYXl9ICBsMSAgICAgICAgICBMaW5lIHZlY3RvciAxXG4gKiBAcGFyYW0gIHtBcnJheX0gIGwyICAgICAgICAgIExpbmUgdmVjdG9yIDJcbiAqIEBwYXJhbSAge051bWJlcn0gcHJlY2lzaW9uICAgUHJlY2lzaW9uIHRvIHVzZSB3aGVuIGNoZWNraW5nIGlmIHRoZSBsaW5lcyBhcmUgcGFyYWxsZWxcbiAqIEByZXR1cm4ge0FycmF5fSAgICAgICAgICAgICAgVGhlIGludGVyc2VjdGlvbiBwb2ludC5cbiAqL1xuTGluZS5saW5lSW50ID0gZnVuY3Rpb24obDEsbDIscHJlY2lzaW9uKXtcbiAgICBwcmVjaXNpb24gPSBwcmVjaXNpb24gfHwgMDtcbiAgICB2YXIgaSA9IFswLDBdOyAvLyBwb2ludFxuICAgIHZhciBhMSwgYjEsIGMxLCBhMiwgYjIsIGMyLCBkZXQ7IC8vIHNjYWxhcnNcbiAgICBhMSA9IGwxWzFdWzFdIC0gbDFbMF1bMV07XG4gICAgYjEgPSBsMVswXVswXSAtIGwxWzFdWzBdO1xuICAgIGMxID0gYTEgKiBsMVswXVswXSArIGIxICogbDFbMF1bMV07XG4gICAgYTIgPSBsMlsxXVsxXSAtIGwyWzBdWzFdO1xuICAgIGIyID0gbDJbMF1bMF0gLSBsMlsxXVswXTtcbiAgICBjMiA9IGEyICogbDJbMF1bMF0gKyBiMiAqIGwyWzBdWzFdO1xuICAgIGRldCA9IGExICogYjIgLSBhMipiMTtcbiAgICBpZiAoIVNjYWxhci5lcShkZXQsIDAsIHByZWNpc2lvbikpIHsgLy8gbGluZXMgYXJlIG5vdCBwYXJhbGxlbFxuICAgICAgICBpWzBdID0gKGIyICogYzEgLSBiMSAqIGMyKSAvIGRldDtcbiAgICAgICAgaVsxXSA9IChhMSAqIGMyIC0gYTIgKiBjMSkgLyBkZXQ7XG4gICAgfVxuICAgIHJldHVybiBpO1xufTtcblxuLyoqXG4gKiBDaGVja3MgaWYgdHdvIGxpbmUgc2VnbWVudHMgaW50ZXJzZWN0cy5cbiAqIEBtZXRob2Qgc2VnbWVudHNJbnRlcnNlY3RcbiAqIEBwYXJhbSB7QXJyYXl9IHAxIFRoZSBzdGFydCB2ZXJ0ZXggb2YgdGhlIGZpcnN0IGxpbmUgc2VnbWVudC5cbiAqIEBwYXJhbSB7QXJyYXl9IHAyIFRoZSBlbmQgdmVydGV4IG9mIHRoZSBmaXJzdCBsaW5lIHNlZ21lbnQuXG4gKiBAcGFyYW0ge0FycmF5fSBxMSBUaGUgc3RhcnQgdmVydGV4IG9mIHRoZSBzZWNvbmQgbGluZSBzZWdtZW50LlxuICogQHBhcmFtIHtBcnJheX0gcTIgVGhlIGVuZCB2ZXJ0ZXggb2YgdGhlIHNlY29uZCBsaW5lIHNlZ21lbnQuXG4gKiBAcmV0dXJuIHtCb29sZWFufSBUcnVlIGlmIHRoZSB0d28gbGluZSBzZWdtZW50cyBpbnRlcnNlY3RcbiAqL1xuTGluZS5zZWdtZW50c0ludGVyc2VjdCA9IGZ1bmN0aW9uKHAxLCBwMiwgcTEsIHEyKXtcbiAgIHZhciBkeCA9IHAyWzBdIC0gcDFbMF07XG4gICB2YXIgZHkgPSBwMlsxXSAtIHAxWzFdO1xuICAgdmFyIGRhID0gcTJbMF0gLSBxMVswXTtcbiAgIHZhciBkYiA9IHEyWzFdIC0gcTFbMV07XG5cbiAgIC8vIHNlZ21lbnRzIGFyZSBwYXJhbGxlbFxuICAgaWYoZGEqZHkgLSBkYipkeCA9PSAwKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICB2YXIgcyA9IChkeCAqIChxMVsxXSAtIHAxWzFdKSArIGR5ICogKHAxWzBdIC0gcTFbMF0pKSAvIChkYSAqIGR5IC0gZGIgKiBkeClcbiAgIHZhciB0ID0gKGRhICogKHAxWzFdIC0gcTFbMV0pICsgZGIgKiAocTFbMF0gLSBwMVswXSkpIC8gKGRiICogZHggLSBkYSAqIGR5KVxuXG4gICByZXR1cm4gKHM+PTAgJiYgczw9MSAmJiB0Pj0wICYmIHQ8PTEpO1xufTtcblxuXG59LHtcIi4vU2NhbGFyXCI6NH1dLDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSBQb2ludDtcblxuLyoqXG4gKiBQb2ludCByZWxhdGVkIGZ1bmN0aW9uc1xuICogQGNsYXNzIFBvaW50XG4gKi9cbmZ1bmN0aW9uIFBvaW50KCl7fTtcblxuLyoqXG4gKiBHZXQgdGhlIGFyZWEgb2YgYSB0cmlhbmdsZSBzcGFubmVkIGJ5IHRoZSB0aHJlZSBnaXZlbiBwb2ludHMuIE5vdGUgdGhhdCB0aGUgYXJlYSB3aWxsIGJlIG5lZ2F0aXZlIGlmIHRoZSBwb2ludHMgYXJlIG5vdCBnaXZlbiBpbiBjb3VudGVyLWNsb2Nrd2lzZSBvcmRlci5cbiAqIEBzdGF0aWNcbiAqIEBtZXRob2QgYXJlYVxuICogQHBhcmFtICB7QXJyYXl9IGFcbiAqIEBwYXJhbSAge0FycmF5fSBiXG4gKiBAcGFyYW0gIHtBcnJheX0gY1xuICogQHJldHVybiB7TnVtYmVyfVxuICovXG5Qb2ludC5hcmVhID0gZnVuY3Rpb24oYSxiLGMpe1xuICAgIHJldHVybiAoKChiWzBdIC0gYVswXSkqKGNbMV0gLSBhWzFdKSktKChjWzBdIC0gYVswXSkqKGJbMV0gLSBhWzFdKSkpO1xufTtcblxuUG9pbnQubGVmdCA9IGZ1bmN0aW9uKGEsYixjKXtcbiAgICByZXR1cm4gUG9pbnQuYXJlYShhLGIsYykgPiAwO1xufTtcblxuUG9pbnQubGVmdE9uID0gZnVuY3Rpb24oYSxiLGMpIHtcbiAgICByZXR1cm4gUG9pbnQuYXJlYShhLCBiLCBjKSA+PSAwO1xufTtcblxuUG9pbnQucmlnaHQgPSBmdW5jdGlvbihhLGIsYykge1xuICAgIHJldHVybiBQb2ludC5hcmVhKGEsIGIsIGMpIDwgMDtcbn07XG5cblBvaW50LnJpZ2h0T24gPSBmdW5jdGlvbihhLGIsYykge1xuICAgIHJldHVybiBQb2ludC5hcmVhKGEsIGIsIGMpIDw9IDA7XG59O1xuXG52YXIgdG1wUG9pbnQxID0gW10sXG4gICAgdG1wUG9pbnQyID0gW107XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhyZWUgcG9pbnRzIGFyZSBjb2xsaW5lYXJcbiAqIEBtZXRob2QgY29sbGluZWFyXG4gKiBAcGFyYW0gIHtBcnJheX0gYVxuICogQHBhcmFtICB7QXJyYXl9IGJcbiAqIEBwYXJhbSAge0FycmF5fSBjXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IFt0aHJlc2hvbGRBbmdsZT0wXSBUaHJlc2hvbGQgYW5nbGUgdG8gdXNlIHdoZW4gY29tcGFyaW5nIHRoZSB2ZWN0b3JzLiBUaGUgZnVuY3Rpb24gd2lsbCByZXR1cm4gdHJ1ZSBpZiB0aGUgYW5nbGUgYmV0d2VlbiB0aGUgcmVzdWx0aW5nIHZlY3RvcnMgaXMgbGVzcyB0aGFuIHRoaXMgdmFsdWUuIFVzZSB6ZXJvIGZvciBtYXggcHJlY2lzaW9uLlxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuUG9pbnQuY29sbGluZWFyID0gZnVuY3Rpb24oYSxiLGMsdGhyZXNob2xkQW5nbGUpIHtcbiAgICBpZighdGhyZXNob2xkQW5nbGUpXG4gICAgICAgIHJldHVybiBQb2ludC5hcmVhKGEsIGIsIGMpID09IDA7XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciBhYiA9IHRtcFBvaW50MSxcbiAgICAgICAgICAgIGJjID0gdG1wUG9pbnQyO1xuXG4gICAgICAgIGFiWzBdID0gYlswXS1hWzBdO1xuICAgICAgICBhYlsxXSA9IGJbMV0tYVsxXTtcbiAgICAgICAgYmNbMF0gPSBjWzBdLWJbMF07XG4gICAgICAgIGJjWzFdID0gY1sxXS1iWzFdO1xuXG4gICAgICAgIHZhciBkb3QgPSBhYlswXSpiY1swXSArIGFiWzFdKmJjWzFdLFxuICAgICAgICAgICAgbWFnQSA9IE1hdGguc3FydChhYlswXSphYlswXSArIGFiWzFdKmFiWzFdKSxcbiAgICAgICAgICAgIG1hZ0IgPSBNYXRoLnNxcnQoYmNbMF0qYmNbMF0gKyBiY1sxXSpiY1sxXSksXG4gICAgICAgICAgICBhbmdsZSA9IE1hdGguYWNvcyhkb3QvKG1hZ0EqbWFnQikpO1xuICAgICAgICByZXR1cm4gYW5nbGUgPCB0aHJlc2hvbGRBbmdsZTtcbiAgICB9XG59O1xuXG5Qb2ludC5zcWRpc3QgPSBmdW5jdGlvbihhLGIpe1xuICAgIHZhciBkeCA9IGJbMF0gLSBhWzBdO1xuICAgIHZhciBkeSA9IGJbMV0gLSBhWzFdO1xuICAgIHJldHVybiBkeCAqIGR4ICsgZHkgKiBkeTtcbn07XG5cbn0se31dLDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIExpbmUgPSByZXF1aXJlKFwiLi9MaW5lXCIpXG4sICAgUG9pbnQgPSByZXF1aXJlKFwiLi9Qb2ludFwiKVxuLCAgIFNjYWxhciA9IHJlcXVpcmUoXCIuL1NjYWxhclwiKVxuXG5tb2R1bGUuZXhwb3J0cyA9IFBvbHlnb247XG5cbi8qKlxuICogUG9seWdvbiBjbGFzcy5cbiAqIEBjbGFzcyBQb2x5Z29uXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gUG9seWdvbigpe1xuXG4gICAgLyoqXG4gICAgICogVmVydGljZXMgdGhhdCB0aGlzIHBvbHlnb24gY29uc2lzdHMgb2YuIEFuIGFycmF5IG9mIGFycmF5IG9mIG51bWJlcnMsIGV4YW1wbGU6IFtbMCwwXSxbMSwwXSwuLl1cbiAgICAgKiBAcHJvcGVydHkgdmVydGljZXNcbiAgICAgKiBAdHlwZSB7QXJyYXl9XG4gICAgICovXG4gICAgdGhpcy52ZXJ0aWNlcyA9IFtdO1xufVxuXG4vKipcbiAqIEdldCBhIHZlcnRleCBhdCBwb3NpdGlvbiBpLiBJdCBkb2VzIG5vdCBtYXR0ZXIgaWYgaSBpcyBvdXQgb2YgYm91bmRzLCB0aGlzIGZ1bmN0aW9uIHdpbGwganVzdCBjeWNsZS5cbiAqIEBtZXRob2QgYXRcbiAqIEBwYXJhbSAge051bWJlcn0gaVxuICogQHJldHVybiB7QXJyYXl9XG4gKi9cblBvbHlnb24ucHJvdG90eXBlLmF0ID0gZnVuY3Rpb24oaSl7XG4gICAgdmFyIHYgPSB0aGlzLnZlcnRpY2VzLFxuICAgICAgICBzID0gdi5sZW5ndGg7XG4gICAgcmV0dXJuIHZbaSA8IDAgPyBpICUgcyArIHMgOiBpICUgc107XG59O1xuXG4vKipcbiAqIEdldCBmaXJzdCB2ZXJ0ZXhcbiAqIEBtZXRob2QgZmlyc3RcbiAqIEByZXR1cm4ge0FycmF5fVxuICovXG5Qb2x5Z29uLnByb3RvdHlwZS5maXJzdCA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHRoaXMudmVydGljZXNbMF07XG59O1xuXG4vKipcbiAqIEdldCBsYXN0IHZlcnRleFxuICogQG1ldGhvZCBsYXN0XG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqL1xuUG9seWdvbi5wcm90b3R5cGUubGFzdCA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHRoaXMudmVydGljZXNbdGhpcy52ZXJ0aWNlcy5sZW5ndGgtMV07XG59O1xuXG4vKipcbiAqIENsZWFyIHRoZSBwb2x5Z29uIGRhdGFcbiAqIEBtZXRob2QgY2xlYXJcbiAqIEByZXR1cm4ge0FycmF5fVxuICovXG5Qb2x5Z29uLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCl7XG4gICAgdGhpcy52ZXJ0aWNlcy5sZW5ndGggPSAwO1xufTtcblxuLyoqXG4gKiBBcHBlbmQgcG9pbnRzIFwiZnJvbVwiIHRvIFwidG9cIi0xIGZyb20gYW4gb3RoZXIgcG9seWdvbiBcInBvbHlcIiBvbnRvIHRoaXMgb25lLlxuICogQG1ldGhvZCBhcHBlbmRcbiAqIEBwYXJhbSB7UG9seWdvbn0gcG9seSBUaGUgcG9seWdvbiB0byBnZXQgcG9pbnRzIGZyb20uXG4gKiBAcGFyYW0ge051bWJlcn0gIGZyb20gVGhlIHZlcnRleCBpbmRleCBpbiBcInBvbHlcIi5cbiAqIEBwYXJhbSB7TnVtYmVyfSAgdG8gVGhlIGVuZCB2ZXJ0ZXggaW5kZXggaW4gXCJwb2x5XCIuIE5vdGUgdGhhdCB0aGlzIHZlcnRleCBpcyBOT1QgaW5jbHVkZWQgd2hlbiBhcHBlbmRpbmcuXG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqL1xuUG9seWdvbi5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24ocG9seSxmcm9tLHRvKXtcbiAgICBpZih0eXBlb2YoZnJvbSkgPT0gXCJ1bmRlZmluZWRcIikgdGhyb3cgbmV3IEVycm9yKFwiRnJvbSBpcyBub3QgZ2l2ZW4hXCIpO1xuICAgIGlmKHR5cGVvZih0bykgPT0gXCJ1bmRlZmluZWRcIikgICB0aHJvdyBuZXcgRXJyb3IoXCJUbyBpcyBub3QgZ2l2ZW4hXCIpO1xuXG4gICAgaWYodG8tMSA8IGZyb20pICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJsb2wxXCIpO1xuICAgIGlmKHRvID4gcG9seS52ZXJ0aWNlcy5sZW5ndGgpICAgdGhyb3cgbmV3IEVycm9yKFwibG9sMlwiKTtcbiAgICBpZihmcm9tIDwgMCkgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImxvbDNcIik7XG5cbiAgICBmb3IodmFyIGk9ZnJvbTsgaTx0bzsgaSsrKXtcbiAgICAgICAgdGhpcy52ZXJ0aWNlcy5wdXNoKHBvbHkudmVydGljZXNbaV0pO1xuICAgIH1cbn07XG5cbi8qKlxuICogTWFrZSBzdXJlIHRoYXQgdGhlIHBvbHlnb24gdmVydGljZXMgYXJlIG9yZGVyZWQgY291bnRlci1jbG9ja3dpc2UuXG4gKiBAbWV0aG9kIG1ha2VDQ1dcbiAqL1xuUG9seWdvbi5wcm90b3R5cGUubWFrZUNDVyA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIGJyID0gMCxcbiAgICAgICAgdiA9IHRoaXMudmVydGljZXM7XG5cbiAgICAvLyBmaW5kIGJvdHRvbSByaWdodCBwb2ludFxuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgdGhpcy52ZXJ0aWNlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAodltpXVsxXSA8IHZbYnJdWzFdIHx8ICh2W2ldWzFdID09IHZbYnJdWzFdICYmIHZbaV1bMF0gPiB2W2JyXVswXSkpIHtcbiAgICAgICAgICAgIGJyID0gaTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIHJldmVyc2UgcG9seSBpZiBjbG9ja3dpc2VcbiAgICBpZiAoIVBvaW50LmxlZnQodGhpcy5hdChiciAtIDEpLCB0aGlzLmF0KGJyKSwgdGhpcy5hdChiciArIDEpKSkge1xuICAgICAgICB0aGlzLnJldmVyc2UoKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIFJldmVyc2UgdGhlIHZlcnRpY2VzIGluIHRoZSBwb2x5Z29uXG4gKiBAbWV0aG9kIHJldmVyc2VcbiAqL1xuUG9seWdvbi5wcm90b3R5cGUucmV2ZXJzZSA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIHRtcCA9IFtdO1xuICAgIGZvcih2YXIgaT0wLCBOPXRoaXMudmVydGljZXMubGVuZ3RoOyBpIT09TjsgaSsrKXtcbiAgICAgICAgdG1wLnB1c2godGhpcy52ZXJ0aWNlcy5wb3AoKSk7XG4gICAgfVxuICAgIHRoaXMudmVydGljZXMgPSB0bXA7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGEgcG9pbnQgaW4gdGhlIHBvbHlnb24gaXMgYSByZWZsZXggcG9pbnRcbiAqIEBtZXRob2QgaXNSZWZsZXhcbiAqIEBwYXJhbSAge051bWJlcn0gIGlcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cblBvbHlnb24ucHJvdG90eXBlLmlzUmVmbGV4ID0gZnVuY3Rpb24oaSl7XG4gICAgcmV0dXJuIFBvaW50LnJpZ2h0KHRoaXMuYXQoaSAtIDEpLCB0aGlzLmF0KGkpLCB0aGlzLmF0KGkgKyAxKSk7XG59O1xuXG52YXIgdG1wTGluZTE9W10sXG4gICAgdG1wTGluZTI9W107XG5cbi8qKlxuICogQ2hlY2sgaWYgdHdvIHZlcnRpY2VzIGluIHRoZSBwb2x5Z29uIGNhbiBzZWUgZWFjaCBvdGhlclxuICogQG1ldGhvZCBjYW5TZWVcbiAqIEBwYXJhbSAge051bWJlcn0gYSBWZXJ0ZXggaW5kZXggMVxuICogQHBhcmFtICB7TnVtYmVyfSBiIFZlcnRleCBpbmRleCAyXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5Qb2x5Z29uLnByb3RvdHlwZS5jYW5TZWUgPSBmdW5jdGlvbihhLGIpIHtcbiAgICB2YXIgcCwgZGlzdCwgbDE9dG1wTGluZTEsIGwyPXRtcExpbmUyO1xuXG4gICAgaWYgKFBvaW50LmxlZnRPbih0aGlzLmF0KGEgKyAxKSwgdGhpcy5hdChhKSwgdGhpcy5hdChiKSkgJiYgUG9pbnQucmlnaHRPbih0aGlzLmF0KGEgLSAxKSwgdGhpcy5hdChhKSwgdGhpcy5hdChiKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBkaXN0ID0gUG9pbnQuc3FkaXN0KHRoaXMuYXQoYSksIHRoaXMuYXQoYikpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpICE9PSB0aGlzLnZlcnRpY2VzLmxlbmd0aDsgKytpKSB7IC8vIGZvciBlYWNoIGVkZ2VcbiAgICAgICAgaWYgKChpICsgMSkgJSB0aGlzLnZlcnRpY2VzLmxlbmd0aCA9PT0gYSB8fCBpID09PSBhKSAvLyBpZ25vcmUgaW5jaWRlbnQgZWRnZXNcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBpZiAoUG9pbnQubGVmdE9uKHRoaXMuYXQoYSksIHRoaXMuYXQoYiksIHRoaXMuYXQoaSArIDEpKSAmJiBQb2ludC5yaWdodE9uKHRoaXMuYXQoYSksIHRoaXMuYXQoYiksIHRoaXMuYXQoaSkpKSB7IC8vIGlmIGRpYWcgaW50ZXJzZWN0cyBhbiBlZGdlXG4gICAgICAgICAgICBsMVswXSA9IHRoaXMuYXQoYSk7XG4gICAgICAgICAgICBsMVsxXSA9IHRoaXMuYXQoYik7XG4gICAgICAgICAgICBsMlswXSA9IHRoaXMuYXQoaSk7XG4gICAgICAgICAgICBsMlsxXSA9IHRoaXMuYXQoaSArIDEpO1xuICAgICAgICAgICAgcCA9IExpbmUubGluZUludChsMSxsMik7XG4gICAgICAgICAgICBpZiAoUG9pbnQuc3FkaXN0KHRoaXMuYXQoYSksIHApIDwgZGlzdCkgeyAvLyBpZiBlZGdlIGlzIGJsb2NraW5nIHZpc2liaWxpdHkgdG8gYlxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xufTtcblxuLyoqXG4gKiBDb3B5IHRoZSBwb2x5Z29uIGZyb20gdmVydGV4IGkgdG8gdmVydGV4IGouXG4gKiBAbWV0aG9kIGNvcHlcbiAqIEBwYXJhbSAge051bWJlcn0gaVxuICogQHBhcmFtICB7TnVtYmVyfSBqXG4gKiBAcGFyYW0gIHtQb2x5Z29ufSBbdGFyZ2V0UG9seV0gICBPcHRpb25hbCB0YXJnZXQgcG9seWdvbiB0byBzYXZlIGluLlxuICogQHJldHVybiB7UG9seWdvbn0gICAgICAgICAgICAgICAgVGhlIHJlc3VsdGluZyBjb3B5LlxuICovXG5Qb2x5Z29uLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24oaSxqLHRhcmdldFBvbHkpe1xuICAgIHZhciBwID0gdGFyZ2V0UG9seSB8fCBuZXcgUG9seWdvbigpO1xuICAgIHAuY2xlYXIoKTtcbiAgICBpZiAoaSA8IGopIHtcbiAgICAgICAgLy8gSW5zZXJ0IGFsbCB2ZXJ0aWNlcyBmcm9tIGkgdG8galxuICAgICAgICBmb3IodmFyIGs9aTsgazw9ajsgaysrKVxuICAgICAgICAgICAgcC52ZXJ0aWNlcy5wdXNoKHRoaXMudmVydGljZXNba10pO1xuXG4gICAgfSBlbHNlIHtcblxuICAgICAgICAvLyBJbnNlcnQgdmVydGljZXMgMCB0byBqXG4gICAgICAgIGZvcih2YXIgaz0wOyBrPD1qOyBrKyspXG4gICAgICAgICAgICBwLnZlcnRpY2VzLnB1c2godGhpcy52ZXJ0aWNlc1trXSk7XG5cbiAgICAgICAgLy8gSW5zZXJ0IHZlcnRpY2VzIGkgdG8gZW5kXG4gICAgICAgIGZvcih2YXIgaz1pOyBrPHRoaXMudmVydGljZXMubGVuZ3RoOyBrKyspXG4gICAgICAgICAgICBwLnZlcnRpY2VzLnB1c2godGhpcy52ZXJ0aWNlc1trXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHA7XG59O1xuXG4vKipcbiAqIERlY29tcG9zZXMgdGhlIHBvbHlnb24gaW50byBjb252ZXggcGllY2VzLiBSZXR1cm5zIGEgbGlzdCBvZiBlZGdlcyBbW3AxLHAyXSxbcDIscDNdLC4uLl0gdGhhdCBjdXRzIHRoZSBwb2x5Z29uLlxuICogTm90ZSB0aGF0IHRoaXMgYWxnb3JpdGhtIGhhcyBjb21wbGV4aXR5IE8oTl40KSBhbmQgd2lsbCBiZSB2ZXJ5IHNsb3cgZm9yIHBvbHlnb25zIHdpdGggbWFueSB2ZXJ0aWNlcy5cbiAqIEBtZXRob2QgZ2V0Q3V0RWRnZXNcbiAqIEByZXR1cm4ge0FycmF5fVxuICovXG5Qb2x5Z29uLnByb3RvdHlwZS5nZXRDdXRFZGdlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBtaW49W10sIHRtcDE9W10sIHRtcDI9W10sIHRtcFBvbHkgPSBuZXcgUG9seWdvbigpO1xuICAgIHZhciBuRGlhZ3MgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnZlcnRpY2VzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmICh0aGlzLmlzUmVmbGV4KGkpKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRoaXMudmVydGljZXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jYW5TZWUoaSwgaikpIHtcbiAgICAgICAgICAgICAgICAgICAgdG1wMSA9IHRoaXMuY29weShpLCBqLCB0bXBQb2x5KS5nZXRDdXRFZGdlcygpO1xuICAgICAgICAgICAgICAgICAgICB0bXAyID0gdGhpcy5jb3B5KGosIGksIHRtcFBvbHkpLmdldEN1dEVkZ2VzKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBrPTA7IGs8dG1wMi5sZW5ndGg7IGsrKylcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcDEucHVzaCh0bXAyW2tdKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodG1wMS5sZW5ndGggPCBuRGlhZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbiA9IHRtcDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBuRGlhZ3MgPSB0bXAxLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbi5wdXNoKFt0aGlzLmF0KGkpLCB0aGlzLmF0KGopXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbWluO1xufTtcblxuLyoqXG4gKiBEZWNvbXBvc2VzIHRoZSBwb2x5Z29uIGludG8gb25lIG9yIG1vcmUgY29udmV4IHN1Yi1Qb2x5Z29ucy5cbiAqIEBtZXRob2QgZGVjb21wXG4gKiBAcmV0dXJuIHtBcnJheX0gQW4gYXJyYXkgb3IgUG9seWdvbiBvYmplY3RzLlxuICovXG5Qb2x5Z29uLnByb3RvdHlwZS5kZWNvbXAgPSBmdW5jdGlvbigpe1xuICAgIHZhciBlZGdlcyA9IHRoaXMuZ2V0Q3V0RWRnZXMoKTtcbiAgICBpZihlZGdlcy5sZW5ndGggPiAwKVxuICAgICAgICByZXR1cm4gdGhpcy5zbGljZShlZGdlcyk7XG4gICAgZWxzZVxuICAgICAgICByZXR1cm4gW3RoaXNdO1xufTtcblxuLyoqXG4gKiBTbGljZXMgdGhlIHBvbHlnb24gZ2l2ZW4gb25lIG9yIG1vcmUgY3V0IGVkZ2VzLiBJZiBnaXZlbiBvbmUsIHRoaXMgZnVuY3Rpb24gd2lsbCByZXR1cm4gdHdvIHBvbHlnb25zIChmYWxzZSBvbiBmYWlsdXJlKS4gSWYgbWFueSwgYW4gYXJyYXkgb2YgcG9seWdvbnMuXG4gKiBAbWV0aG9kIHNsaWNlXG4gKiBAcGFyYW0ge0FycmF5fSBjdXRFZGdlcyBBIGxpc3Qgb2YgZWRnZXMsIGFzIHJldHVybmVkIGJ5IC5nZXRDdXRFZGdlcygpXG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqL1xuUG9seWdvbi5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbihjdXRFZGdlcyl7XG4gICAgaWYoY3V0RWRnZXMubGVuZ3RoID09IDApIHJldHVybiBbdGhpc107XG4gICAgaWYoY3V0RWRnZXMgaW5zdGFuY2VvZiBBcnJheSAmJiBjdXRFZGdlcy5sZW5ndGggJiYgY3V0RWRnZXNbMF0gaW5zdGFuY2VvZiBBcnJheSAmJiBjdXRFZGdlc1swXS5sZW5ndGg9PTIgJiYgY3V0RWRnZXNbMF1bMF0gaW5zdGFuY2VvZiBBcnJheSl7XG5cbiAgICAgICAgdmFyIHBvbHlzID0gW3RoaXNdO1xuXG4gICAgICAgIGZvcih2YXIgaT0wOyBpPGN1dEVkZ2VzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIHZhciBjdXRFZGdlID0gY3V0RWRnZXNbaV07XG4gICAgICAgICAgICAvLyBDdXQgYWxsIHBvbHlzXG4gICAgICAgICAgICBmb3IodmFyIGo9MDsgajxwb2x5cy5sZW5ndGg7IGorKyl7XG4gICAgICAgICAgICAgICAgdmFyIHBvbHkgPSBwb2x5c1tqXTtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gcG9seS5zbGljZShjdXRFZGdlKTtcbiAgICAgICAgICAgICAgICBpZihyZXN1bHQpe1xuICAgICAgICAgICAgICAgICAgICAvLyBGb3VuZCBwb2x5ISBDdXQgYW5kIHF1aXRcbiAgICAgICAgICAgICAgICAgICAgcG9seXMuc3BsaWNlKGosMSk7XG4gICAgICAgICAgICAgICAgICAgIHBvbHlzLnB1c2gocmVzdWx0WzBdLHJlc3VsdFsxXSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwb2x5cztcbiAgICB9IGVsc2Uge1xuXG4gICAgICAgIC8vIFdhcyBnaXZlbiBvbmUgZWRnZVxuICAgICAgICB2YXIgY3V0RWRnZSA9IGN1dEVkZ2VzO1xuICAgICAgICB2YXIgaSA9IHRoaXMudmVydGljZXMuaW5kZXhPZihjdXRFZGdlWzBdKTtcbiAgICAgICAgdmFyIGogPSB0aGlzLnZlcnRpY2VzLmluZGV4T2YoY3V0RWRnZVsxXSk7XG5cbiAgICAgICAgaWYoaSAhPSAtMSAmJiBqICE9IC0xKXtcbiAgICAgICAgICAgIHJldHVybiBbdGhpcy5jb3B5KGksaiksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29weShqLGkpXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbi8qKlxuICogQ2hlY2tzIHRoYXQgdGhlIGxpbmUgc2VnbWVudHMgb2YgdGhpcyBwb2x5Z29uIGRvIG5vdCBpbnRlcnNlY3QgZWFjaCBvdGhlci5cbiAqIEBtZXRob2QgaXNTaW1wbGVcbiAqIEBwYXJhbSAge0FycmF5fSBwYXRoIEFuIGFycmF5IG9mIHZlcnRpY2VzIGUuZy4gW1swLDBdLFswLDFdLC4uLl1cbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAdG9kbyBTaG91bGQgaXQgY2hlY2sgYWxsIHNlZ21lbnRzIHdpdGggYWxsIG90aGVycz9cbiAqL1xuUG9seWdvbi5wcm90b3R5cGUuaXNTaW1wbGUgPSBmdW5jdGlvbigpe1xuICAgIHZhciBwYXRoID0gdGhpcy52ZXJ0aWNlcztcbiAgICAvLyBDaGVja1xuICAgIGZvcih2YXIgaT0wOyBpPHBhdGgubGVuZ3RoLTE7IGkrKyl7XG4gICAgICAgIGZvcih2YXIgaj0wOyBqPGktMTsgaisrKXtcbiAgICAgICAgICAgIGlmKExpbmUuc2VnbWVudHNJbnRlcnNlY3QocGF0aFtpXSwgcGF0aFtpKzFdLCBwYXRoW2pdLCBwYXRoW2orMV0gKSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgdGhlIHNlZ21lbnQgYmV0d2VlbiB0aGUgbGFzdCBhbmQgdGhlIGZpcnN0IHBvaW50IHRvIGFsbCBvdGhlcnNcbiAgICBmb3IodmFyIGk9MTsgaTxwYXRoLmxlbmd0aC0yOyBpKyspe1xuICAgICAgICBpZihMaW5lLnNlZ21lbnRzSW50ZXJzZWN0KHBhdGhbMF0sIHBhdGhbcGF0aC5sZW5ndGgtMV0sIHBhdGhbaV0sIHBhdGhbaSsxXSApKXtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xufTtcblxuZnVuY3Rpb24gZ2V0SW50ZXJzZWN0aW9uUG9pbnQocDEsIHAyLCBxMSwgcTIsIGRlbHRhKXtcbiAgICBkZWx0YSA9IGRlbHRhIHx8IDA7XG4gICB2YXIgYTEgPSBwMlsxXSAtIHAxWzFdO1xuICAgdmFyIGIxID0gcDFbMF0gLSBwMlswXTtcbiAgIHZhciBjMSA9IChhMSAqIHAxWzBdKSArIChiMSAqIHAxWzFdKTtcbiAgIHZhciBhMiA9IHEyWzFdIC0gcTFbMV07XG4gICB2YXIgYjIgPSBxMVswXSAtIHEyWzBdO1xuICAgdmFyIGMyID0gKGEyICogcTFbMF0pICsgKGIyICogcTFbMV0pO1xuICAgdmFyIGRldCA9IChhMSAqIGIyKSAtIChhMiAqIGIxKTtcblxuICAgaWYoIVNjYWxhci5lcShkZXQsMCxkZWx0YSkpXG4gICAgICByZXR1cm4gWygoYjIgKiBjMSkgLSAoYjEgKiBjMikpIC8gZGV0LCAoKGExICogYzIpIC0gKGEyICogYzEpKSAvIGRldF1cbiAgIGVsc2VcbiAgICAgIHJldHVybiBbMCwwXVxufVxuXG4vKipcbiAqIFF1aWNrbHkgZGVjb21wb3NlIHRoZSBQb2x5Z29uIGludG8gY29udmV4IHN1Yi1wb2x5Z29ucy5cbiAqIEBtZXRob2QgcXVpY2tEZWNvbXBcbiAqIEBwYXJhbSAge0FycmF5fSByZXN1bHRcbiAqIEBwYXJhbSAge0FycmF5fSBbcmVmbGV4VmVydGljZXNdXG4gKiBAcGFyYW0gIHtBcnJheX0gW3N0ZWluZXJQb2ludHNdXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IFtkZWx0YV1cbiAqIEBwYXJhbSAge051bWJlcn0gW21heGxldmVsXVxuICogQHBhcmFtICB7TnVtYmVyfSBbbGV2ZWxdXG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqL1xuUG9seWdvbi5wcm90b3R5cGUucXVpY2tEZWNvbXAgPSBmdW5jdGlvbihyZXN1bHQscmVmbGV4VmVydGljZXMsc3RlaW5lclBvaW50cyxkZWx0YSxtYXhsZXZlbCxsZXZlbCl7XG4gICAgbWF4bGV2ZWwgPSBtYXhsZXZlbCB8fCAxMDA7XG4gICAgbGV2ZWwgPSBsZXZlbCB8fCAwO1xuICAgIGRlbHRhID0gZGVsdGEgfHwgMjU7XG4gICAgcmVzdWx0ID0gdHlwZW9mKHJlc3VsdCkhPVwidW5kZWZpbmVkXCIgPyByZXN1bHQgOiBbXTtcbiAgICByZWZsZXhWZXJ0aWNlcyA9IHJlZmxleFZlcnRpY2VzIHx8IFtdO1xuICAgIHN0ZWluZXJQb2ludHMgPSBzdGVpbmVyUG9pbnRzIHx8IFtdO1xuXG4gICAgdmFyIHVwcGVySW50PVswLDBdLCBsb3dlckludD1bMCwwXSwgcD1bMCwwXTsgLy8gUG9pbnRzXG4gICAgdmFyIHVwcGVyRGlzdD0wLCBsb3dlckRpc3Q9MCwgZD0wLCBjbG9zZXN0RGlzdD0wOyAvLyBzY2FsYXJzXG4gICAgdmFyIHVwcGVySW5kZXg9MCwgbG93ZXJJbmRleD0wLCBjbG9zZXN0SW5kZXg9MDsgLy8gSW50ZWdlcnNcbiAgICB2YXIgbG93ZXJQb2x5PW5ldyBQb2x5Z29uKCksIHVwcGVyUG9seT1uZXcgUG9seWdvbigpOyAvLyBwb2x5Z29uc1xuICAgIHZhciBwb2x5ID0gdGhpcyxcbiAgICAgICAgdiA9IHRoaXMudmVydGljZXM7XG5cbiAgICBpZih2Lmxlbmd0aCA8IDMpIHJldHVybiByZXN1bHQ7XG5cbiAgICBsZXZlbCsrO1xuICAgIGlmKGxldmVsID4gbWF4bGV2ZWwpe1xuICAgICAgICBjb25zb2xlLndhcm4oXCJxdWlja0RlY29tcDogbWF4IGxldmVsIChcIittYXhsZXZlbCtcIikgcmVhY2hlZC5cIik7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnZlcnRpY2VzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmIChwb2x5LmlzUmVmbGV4KGkpKSB7XG4gICAgICAgICAgICByZWZsZXhWZXJ0aWNlcy5wdXNoKHBvbHkudmVydGljZXNbaV0pO1xuICAgICAgICAgICAgdXBwZXJEaXN0ID0gbG93ZXJEaXN0ID0gTnVtYmVyLk1BWF9WQUxVRTtcblxuXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRoaXMudmVydGljZXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICBpZiAoUG9pbnQubGVmdChwb2x5LmF0KGkgLSAxKSwgcG9seS5hdChpKSwgcG9seS5hdChqKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICYmIFBvaW50LnJpZ2h0T24ocG9seS5hdChpIC0gMSksIHBvbHkuYXQoaSksIHBvbHkuYXQoaiAtIDEpKSkgeyAvLyBpZiBsaW5lIGludGVyc2VjdHMgd2l0aCBhbiBlZGdlXG4gICAgICAgICAgICAgICAgICAgIHAgPSBnZXRJbnRlcnNlY3Rpb25Qb2ludChwb2x5LmF0KGkgLSAxKSwgcG9seS5hdChpKSwgcG9seS5hdChqKSwgcG9seS5hdChqIC0gMSkpOyAvLyBmaW5kIHRoZSBwb2ludCBvZiBpbnRlcnNlY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgaWYgKFBvaW50LnJpZ2h0KHBvbHkuYXQoaSArIDEpLCBwb2x5LmF0KGkpLCBwKSkgeyAvLyBtYWtlIHN1cmUgaXQncyBpbnNpZGUgdGhlIHBvbHlcbiAgICAgICAgICAgICAgICAgICAgICAgIGQgPSBQb2ludC5zcWRpc3QocG9seS52ZXJ0aWNlc1tpXSwgcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZCA8IGxvd2VyRGlzdCkgeyAvLyBrZWVwIG9ubHkgdGhlIGNsb3Nlc3QgaW50ZXJzZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG93ZXJEaXN0ID0gZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb3dlckludCA9IHA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG93ZXJJbmRleCA9IGo7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKFBvaW50LmxlZnQocG9seS5hdChpICsgMSksIHBvbHkuYXQoaSksIHBvbHkuYXQoaiArIDEpKVxuICAgICAgICAgICAgICAgICAgICAgICAgJiYgUG9pbnQucmlnaHRPbihwb2x5LmF0KGkgKyAxKSwgcG9seS5hdChpKSwgcG9seS5hdChqKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcCA9IGdldEludGVyc2VjdGlvblBvaW50KHBvbHkuYXQoaSArIDEpLCBwb2x5LmF0KGkpLCBwb2x5LmF0KGopLCBwb2x5LmF0KGogKyAxKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChQb2ludC5sZWZ0KHBvbHkuYXQoaSAtIDEpLCBwb2x5LmF0KGkpLCBwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZCA9IFBvaW50LnNxZGlzdChwb2x5LnZlcnRpY2VzW2ldLCBwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkIDwgdXBwZXJEaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBwZXJEaXN0ID0gZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cHBlckludCA9IHA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBwZXJJbmRleCA9IGo7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGlmIHRoZXJlIGFyZSBubyB2ZXJ0aWNlcyB0byBjb25uZWN0IHRvLCBjaG9vc2UgYSBwb2ludCBpbiB0aGUgbWlkZGxlXG4gICAgICAgICAgICBpZiAobG93ZXJJbmRleCA9PSAodXBwZXJJbmRleCArIDEpICUgdGhpcy52ZXJ0aWNlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiQ2FzZSAxOiBWZXJ0ZXgoXCIraStcIiksIGxvd2VySW5kZXgoXCIrbG93ZXJJbmRleCtcIiksIHVwcGVySW5kZXgoXCIrdXBwZXJJbmRleCtcIiksIHBvbHkuc2l6ZShcIit0aGlzLnZlcnRpY2VzLmxlbmd0aCtcIilcIik7XG4gICAgICAgICAgICAgICAgcFswXSA9IChsb3dlckludFswXSArIHVwcGVySW50WzBdKSAvIDI7XG4gICAgICAgICAgICAgICAgcFsxXSA9IChsb3dlckludFsxXSArIHVwcGVySW50WzFdKSAvIDI7XG4gICAgICAgICAgICAgICAgc3RlaW5lclBvaW50cy5wdXNoKHApO1xuXG4gICAgICAgICAgICAgICAgaWYgKGkgPCB1cHBlckluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vbG93ZXJQb2x5Lmluc2VydChsb3dlclBvbHkuZW5kKCksIHBvbHkuYmVnaW4oKSArIGksIHBvbHkuYmVnaW4oKSArIHVwcGVySW5kZXggKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgbG93ZXJQb2x5LmFwcGVuZChwb2x5LCBpLCB1cHBlckluZGV4KzEpO1xuICAgICAgICAgICAgICAgICAgICBsb3dlclBvbHkudmVydGljZXMucHVzaChwKTtcbiAgICAgICAgICAgICAgICAgICAgdXBwZXJQb2x5LnZlcnRpY2VzLnB1c2gocCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsb3dlckluZGV4ICE9IDApe1xuICAgICAgICAgICAgICAgICAgICAgICAgLy91cHBlclBvbHkuaW5zZXJ0KHVwcGVyUG9seS5lbmQoKSwgcG9seS5iZWdpbigpICsgbG93ZXJJbmRleCwgcG9seS5lbmQoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cHBlclBvbHkuYXBwZW5kKHBvbHksbG93ZXJJbmRleCxwb2x5LnZlcnRpY2VzLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy91cHBlclBvbHkuaW5zZXJ0KHVwcGVyUG9seS5lbmQoKSwgcG9seS5iZWdpbigpLCBwb2x5LmJlZ2luKCkgKyBpICsgMSk7XG4gICAgICAgICAgICAgICAgICAgIHVwcGVyUG9seS5hcHBlbmQocG9seSwwLGkrMSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgIT0gMCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL2xvd2VyUG9seS5pbnNlcnQobG93ZXJQb2x5LmVuZCgpLCBwb2x5LmJlZ2luKCkgKyBpLCBwb2x5LmVuZCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvd2VyUG9seS5hcHBlbmQocG9seSxpLHBvbHkudmVydGljZXMubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvL2xvd2VyUG9seS5pbnNlcnQobG93ZXJQb2x5LmVuZCgpLCBwb2x5LmJlZ2luKCksIHBvbHkuYmVnaW4oKSArIHVwcGVySW5kZXggKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgbG93ZXJQb2x5LmFwcGVuZChwb2x5LDAsdXBwZXJJbmRleCsxKTtcbiAgICAgICAgICAgICAgICAgICAgbG93ZXJQb2x5LnZlcnRpY2VzLnB1c2gocCk7XG4gICAgICAgICAgICAgICAgICAgIHVwcGVyUG9seS52ZXJ0aWNlcy5wdXNoKHApO1xuICAgICAgICAgICAgICAgICAgICAvL3VwcGVyUG9seS5pbnNlcnQodXBwZXJQb2x5LmVuZCgpLCBwb2x5LmJlZ2luKCkgKyBsb3dlckluZGV4LCBwb2x5LmJlZ2luKCkgKyBpICsgMSk7XG4gICAgICAgICAgICAgICAgICAgIHVwcGVyUG9seS5hcHBlbmQocG9seSxsb3dlckluZGV4LGkrMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBjb25uZWN0IHRvIHRoZSBjbG9zZXN0IHBvaW50IHdpdGhpbiB0aGUgdHJpYW5nbGVcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiQ2FzZSAyOiBWZXJ0ZXgoXCIraStcIiksIGNsb3Nlc3RJbmRleChcIitjbG9zZXN0SW5kZXgrXCIpLCBwb2x5LnNpemUoXCIrdGhpcy52ZXJ0aWNlcy5sZW5ndGgrXCIpXFxuXCIpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGxvd2VySW5kZXggPiB1cHBlckluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIHVwcGVySW5kZXggKz0gdGhpcy52ZXJ0aWNlcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNsb3Nlc3REaXN0ID0gTnVtYmVyLk1BWF9WQUxVRTtcblxuICAgICAgICAgICAgICAgIGlmKHVwcGVySW5kZXggPCBsb3dlckluZGV4KXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gbG93ZXJJbmRleDsgaiA8PSB1cHBlckluZGV4OyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFBvaW50LmxlZnRPbihwb2x5LmF0KGkgLSAxKSwgcG9seS5hdChpKSwgcG9seS5hdChqKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiBQb2ludC5yaWdodE9uKHBvbHkuYXQoaSArIDEpLCBwb2x5LmF0KGkpLCBwb2x5LmF0KGopKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZCA9IFBvaW50LnNxZGlzdChwb2x5LmF0KGkpLCBwb2x5LmF0KGopKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkIDwgY2xvc2VzdERpc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9zZXN0RGlzdCA9IGQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VzdEluZGV4ID0gaiAlIHRoaXMudmVydGljZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGkgPCBjbG9zZXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgbG93ZXJQb2x5LmFwcGVuZChwb2x5LGksY2xvc2VzdEluZGV4KzEpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2xvc2VzdEluZGV4ICE9IDApe1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBwZXJQb2x5LmFwcGVuZChwb2x5LGNsb3Nlc3RJbmRleCx2Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdXBwZXJQb2x5LmFwcGVuZChwb2x5LDAsaSsxKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSAhPSAwKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvd2VyUG9seS5hcHBlbmQocG9seSxpLHYubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsb3dlclBvbHkuYXBwZW5kKHBvbHksMCxjbG9zZXN0SW5kZXgrMSk7XG4gICAgICAgICAgICAgICAgICAgIHVwcGVyUG9seS5hcHBlbmQocG9seSxjbG9zZXN0SW5kZXgsaSsxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHNvbHZlIHNtYWxsZXN0IHBvbHkgZmlyc3RcbiAgICAgICAgICAgIGlmIChsb3dlclBvbHkudmVydGljZXMubGVuZ3RoIDwgdXBwZXJQb2x5LnZlcnRpY2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGxvd2VyUG9seS5xdWlja0RlY29tcChyZXN1bHQscmVmbGV4VmVydGljZXMsc3RlaW5lclBvaW50cyxkZWx0YSxtYXhsZXZlbCxsZXZlbCk7XG4gICAgICAgICAgICAgICAgdXBwZXJQb2x5LnF1aWNrRGVjb21wKHJlc3VsdCxyZWZsZXhWZXJ0aWNlcyxzdGVpbmVyUG9pbnRzLGRlbHRhLG1heGxldmVsLGxldmVsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdXBwZXJQb2x5LnF1aWNrRGVjb21wKHJlc3VsdCxyZWZsZXhWZXJ0aWNlcyxzdGVpbmVyUG9pbnRzLGRlbHRhLG1heGxldmVsLGxldmVsKTtcbiAgICAgICAgICAgICAgICBsb3dlclBvbHkucXVpY2tEZWNvbXAocmVzdWx0LHJlZmxleFZlcnRpY2VzLHN0ZWluZXJQb2ludHMsZGVsdGEsbWF4bGV2ZWwsbGV2ZWwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5wdXNoKHRoaXMpO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGNvbGxpbmVhciBwb2ludHMgaW4gdGhlIHBvbHlnb24uXG4gKiBAbWV0aG9kIHJlbW92ZUNvbGxpbmVhclBvaW50c1xuICogQHBhcmFtICB7TnVtYmVyfSBbcHJlY2lzaW9uXSBUaGUgdGhyZXNob2xkIGFuZ2xlIHRvIHVzZSB3aGVuIGRldGVybWluaW5nIHdoZXRoZXIgdHdvIGVkZ2VzIGFyZSBjb2xsaW5lYXIuIFVzZSB6ZXJvIGZvciBmaW5lc3QgcHJlY2lzaW9uLlxuICogQHJldHVybiB7TnVtYmVyfSAgICAgICAgICAgVGhlIG51bWJlciBvZiBwb2ludHMgcmVtb3ZlZFxuICovXG5Qb2x5Z29uLnByb3RvdHlwZS5yZW1vdmVDb2xsaW5lYXJQb2ludHMgPSBmdW5jdGlvbihwcmVjaXNpb24pe1xuICAgIHZhciBudW0gPSAwO1xuICAgIGZvcih2YXIgaT10aGlzLnZlcnRpY2VzLmxlbmd0aC0xOyB0aGlzLnZlcnRpY2VzLmxlbmd0aD4zICYmIGk+PTA7IC0taSl7XG4gICAgICAgIGlmKFBvaW50LmNvbGxpbmVhcih0aGlzLmF0KGktMSksdGhpcy5hdChpKSx0aGlzLmF0KGkrMSkscHJlY2lzaW9uKSl7XG4gICAgICAgICAgICAvLyBSZW1vdmUgdGhlIG1pZGRsZSBwb2ludFxuICAgICAgICAgICAgdGhpcy52ZXJ0aWNlcy5zcGxpY2UoaSV0aGlzLnZlcnRpY2VzLmxlbmd0aCwxKTtcbiAgICAgICAgICAgIGktLTsgLy8gSnVtcCBvbmUgcG9pbnQgZm9yd2FyZC4gT3RoZXJ3aXNlIHdlIG1heSBnZXQgYSBjaGFpbiByZW1vdmFsXG4gICAgICAgICAgICBudW0rKztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVtO1xufTtcblxufSx7XCIuL0xpbmVcIjoxLFwiLi9Qb2ludFwiOjIsXCIuL1NjYWxhclwiOjR9XSw0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0gU2NhbGFyO1xuXG4vKipcbiAqIFNjYWxhciBmdW5jdGlvbnNcbiAqIEBjbGFzcyBTY2FsYXJcbiAqL1xuZnVuY3Rpb24gU2NhbGFyKCl7fVxuXG4vKipcbiAqIENoZWNrIGlmIHR3byBzY2FsYXJzIGFyZSBlcXVhbFxuICogQHN0YXRpY1xuICogQG1ldGhvZCBlcVxuICogQHBhcmFtICB7TnVtYmVyfSBhXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGJcbiAqIEBwYXJhbSAge051bWJlcn0gW3ByZWNpc2lvbl1cbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cblNjYWxhci5lcSA9IGZ1bmN0aW9uKGEsYixwcmVjaXNpb24pe1xuICAgIHByZWNpc2lvbiA9IHByZWNpc2lvbiB8fCAwO1xuICAgIHJldHVybiBNYXRoLmFicyhhLWIpIDwgcHJlY2lzaW9uO1xufTtcblxufSx7fV0sNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBQb2x5Z29uIDogcmVxdWlyZShcIi4vUG9seWdvblwiKSxcbiAgICBQb2ludCA6IHJlcXVpcmUoXCIuL1BvaW50XCIpLFxufTtcblxufSx7XCIuL1BvaW50XCI6MixcIi4vUG9seWdvblwiOjN9XX0se30sWzVdKVxuKDUpXG59KTtcbjsiXX0=
